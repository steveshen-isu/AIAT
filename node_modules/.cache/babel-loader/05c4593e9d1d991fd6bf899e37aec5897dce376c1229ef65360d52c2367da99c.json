{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'to';\nvar dependencies = ['typed', 'matrix', 'concat'];\nexport var createTo = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    concat\n  } = _ref;\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\r\n   * Change the unit of a value.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.to(x, unit)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.to(math.unit('2 inch'), 'cm')             // returns Unit 5.08 cm\r\n   *    math.to(math.unit('2 inch'), math.unit('cm'))  // returns Unit 5.08 cm\r\n   *    math.to(math.unit(16, 'bytes'), 'bits')        // returns Unit 128 bits\r\n   *\r\n   * See also:\r\n   *\r\n   *    unit\r\n   *\r\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\r\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\r\n   *                                      or a unit without value.\r\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\r\n   */\n  return typed(name, {\n    'Unit, Unit | string': (x, unit) => x.to(unit)\n  }, matrixAlgorithmSuite({\n    Ds: true\n  }));\n});","map":{"version":3,"names":["factory","createMatrixAlgorithmSuite","name","dependencies","createTo","_ref","typed","matrix","concat","matrixAlgorithmSuite","Unit, Unit | string","x","unit","to","Ds"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/unit/to.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'to';\r\nvar dependencies = ['typed', 'matrix', 'concat'];\r\nexport var createTo = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    concat\r\n  } = _ref;\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n\r\n  /**\r\n   * Change the unit of a value.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.to(x, unit)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.to(math.unit('2 inch'), 'cm')             // returns Unit 5.08 cm\r\n   *    math.to(math.unit('2 inch'), math.unit('cm'))  // returns Unit 5.08 cm\r\n   *    math.to(math.unit(16, 'bytes'), 'bits')        // returns Unit 128 bits\r\n   *\r\n   * See also:\r\n   *\r\n   *    unit\r\n   *\r\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\r\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\r\n   *                                      or a unit without value.\r\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\r\n   */\r\n  return typed(name, {\r\n    'Unit, Unit | string': (x, unit) => x.to(unit)\r\n  }, matrixAlgorithmSuite({\r\n    Ds: true\r\n  }));\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,0BAA0B,QAAQ,iDAAiD;AAC5F,IAAIC,IAAI,GAAG,IAAI;AACf,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC;AAChD,OAAO,IAAIC,QAAQ,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACvE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,GAAGH,IAAI;EACR,IAAII,oBAAoB,GAAGR,0BAA0B,CAAC;IACpDK,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOF,KAAK,CAACJ,IAAI,EAAE;IACjB,qBAAqB,EAAEQ,CAACC,CAAC,EAAEC,IAAI,KAAKD,CAAC,CAACE,EAAE,CAACD,IAAI;EAC/C,CAAC,EAAEH,oBAAoB,CAAC;IACtBK,EAAE,EAAE;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}