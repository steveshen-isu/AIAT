{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { combinationsNumber } from '../../plain/number/combinations.js';\nvar name = 'combinations';\nvar dependencies = ['typed'];\nexport var createCombinations = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\r\n   * possibilities.\r\n   *\r\n   * Combinations only takes integer arguments.\r\n   * The following condition must be enforced: k <= n.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.combinations(n, k)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.combinations(7, 5) // returns 21\r\n   *\r\n   * See also:\r\n   *\r\n   *    combinationsWithRep, permutations, factorial\r\n   *\r\n   * @param {number | BigNumber} n    Total number of objects in the set\r\n   * @param {number | BigNumber} k    Number of objects in the subset\r\n   * @return {number | BigNumber}     Number of possible combinations.\r\n   */\n  return typed(name, {\n    'number, number': combinationsNumber,\n    'BigNumber, BigNumber': function BigNumber_BigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var nMinusk = n.minus(k);\n      var one = new BigNumber(1);\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('k must be less than n in function combinations');\n      }\n      result = one;\n      if (k.lt(nMinusk)) {\n        for (i = one; i.lte(nMinusk); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusk.plus(i)).dividedBy(i);\n        }\n      }\n      return result;\n    }\n\n    // TODO: implement support for collection in combinations\n  });\n});\n\n/**\r\n * Test whether BigNumber n is a positive integer\r\n * @param {BigNumber} n\r\n * @returns {boolean} isPositiveInteger\r\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}","map":{"version":3,"names":["factory","combinationsNumber","name","dependencies","createCombinations","_ref","typed","BigNumber_BigNumber","n","k","BigNumber","constructor","result","i","nMinusk","minus","one","isPositiveInteger","TypeError","gt","lt","lte","plus","times","dividedBy","isInteger","gte"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/probability/combinations.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { combinationsNumber } from '../../plain/number/combinations.js';\r\nvar name = 'combinations';\r\nvar dependencies = ['typed'];\r\nexport var createCombinations = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\r\n   * possibilities.\r\n   *\r\n   * Combinations only takes integer arguments.\r\n   * The following condition must be enforced: k <= n.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.combinations(n, k)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.combinations(7, 5) // returns 21\r\n   *\r\n   * See also:\r\n   *\r\n   *    combinationsWithRep, permutations, factorial\r\n   *\r\n   * @param {number | BigNumber} n    Total number of objects in the set\r\n   * @param {number | BigNumber} k    Number of objects in the subset\r\n   * @return {number | BigNumber}     Number of possible combinations.\r\n   */\r\n  return typed(name, {\r\n    'number, number': combinationsNumber,\r\n    'BigNumber, BigNumber': function BigNumber_BigNumber(n, k) {\r\n      var BigNumber = n.constructor;\r\n      var result, i;\r\n      var nMinusk = n.minus(k);\r\n      var one = new BigNumber(1);\r\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\r\n        throw new TypeError('Positive integer value expected in function combinations');\r\n      }\r\n      if (k.gt(n)) {\r\n        throw new TypeError('k must be less than n in function combinations');\r\n      }\r\n      result = one;\r\n      if (k.lt(nMinusk)) {\r\n        for (i = one; i.lte(nMinusk); i = i.plus(one)) {\r\n          result = result.times(k.plus(i)).dividedBy(i);\r\n        }\r\n      } else {\r\n        for (i = one; i.lte(k); i = i.plus(one)) {\r\n          result = result.times(nMinusk.plus(i)).dividedBy(i);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    // TODO: implement support for collection in combinations\r\n  });\r\n});\r\n\r\n/**\r\n * Test whether BigNumber n is a positive integer\r\n * @param {BigNumber} n\r\n * @returns {boolean} isPositiveInteger\r\n */\r\nfunction isPositiveInteger(n) {\r\n  return n.isInteger() && n.gte(0);\r\n}"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,kBAAkB,QAAQ,oCAAoC;AACvE,IAAIC,IAAI,GAAG,cAAc;AACzB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,kBAAkB,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACjF,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAED,kBAAkB;IACpC,sBAAsB,EAAE,SAASM,mBAAmBA,CAACC,CAAC,EAAEC,CAAC,EAAE;MACzD,IAAIC,SAAS,GAAGF,CAAC,CAACG,WAAW;MAC7B,IAAIC,MAAM,EAAEC,CAAC;MACb,IAAIC,OAAO,GAAGN,CAAC,CAACO,KAAK,CAACN,CAAC,CAAC;MACxB,IAAIO,GAAG,GAAG,IAAIN,SAAS,CAAC,CAAC,CAAC;MAC1B,IAAI,CAACO,iBAAiB,CAACT,CAAC,CAAC,IAAI,CAACS,iBAAiB,CAACR,CAAC,CAAC,EAAE;QAClD,MAAM,IAAIS,SAAS,CAAC,0DAA0D,CAAC;MACjF;MACA,IAAIT,CAAC,CAACU,EAAE,CAACX,CAAC,CAAC,EAAE;QACX,MAAM,IAAIU,SAAS,CAAC,gDAAgD,CAAC;MACvE;MACAN,MAAM,GAAGI,GAAG;MACZ,IAAIP,CAAC,CAACW,EAAE,CAACN,OAAO,CAAC,EAAE;QACjB,KAAKD,CAAC,GAAGG,GAAG,EAAEH,CAAC,CAACQ,GAAG,CAACP,OAAO,CAAC,EAAED,CAAC,GAAGA,CAAC,CAACS,IAAI,CAACN,GAAG,CAAC,EAAE;UAC7CJ,MAAM,GAAGA,MAAM,CAACW,KAAK,CAACd,CAAC,CAACa,IAAI,CAACT,CAAC,CAAC,CAAC,CAACW,SAAS,CAACX,CAAC,CAAC;QAC/C;MACF,CAAC,MAAM;QACL,KAAKA,CAAC,GAAGG,GAAG,EAAEH,CAAC,CAACQ,GAAG,CAACZ,CAAC,CAAC,EAAEI,CAAC,GAAGA,CAAC,CAACS,IAAI,CAACN,GAAG,CAAC,EAAE;UACvCJ,MAAM,GAAGA,MAAM,CAACW,KAAK,CAACT,OAAO,CAACQ,IAAI,CAACT,CAAC,CAAC,CAAC,CAACW,SAAS,CAACX,CAAC,CAAC;QACrD;MACF;MACA,OAAOD,MAAM;IACf;;IAEA;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,SAASK,iBAAiBA,CAACT,CAAC,EAAE;EAC5B,OAAOA,CAAC,CAACiB,SAAS,CAAC,CAAC,IAAIjB,CAAC,CAACkB,GAAG,CAAC,CAAC,CAAC;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}