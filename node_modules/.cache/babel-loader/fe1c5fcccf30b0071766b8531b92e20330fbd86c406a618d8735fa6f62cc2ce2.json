{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { format } from '../../utils/string.js';\nimport { typeOf } from '../../utils/is.js';\nimport { escapeLatex } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nexport var createConstantNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  class ConstantNode extends Node {\n    /**\r\n     * A ConstantNode holds a constant value like a number or string.\r\n     *\r\n     * Usage:\r\n     *\r\n     *     new ConstantNode(2.3)\r\n     *     new ConstantNode('hello')\r\n     *\r\n     * @param {*} value    Value can be any type (number, BigNumber, bigint, string, ...)\r\n     * @constructor ConstantNode\r\n     * @extends {Node}\r\n     */\n    constructor(value) {\n      super();\n      this.value = value;\n    }\n    get type() {\n      return name;\n    }\n    get isConstantNode() {\n      return true;\n    }\n\n    /**\r\n     * Compile a node into a JavaScript function.\r\n     * This basically pre-calculates as much as possible and only leaves open\r\n     * calculations which depend on a dynamic scope with variables.\r\n     * @param {Object} math     Math.js namespace with functions and constants.\r\n     * @param {Object} argNames An object with argument names as key and `true`\r\n     *                          as value. Used in the SymbolNode to optimize\r\n     *                          for arguments from user assigned functions\r\n     *                          (see FunctionAssignmentNode) or special symbols\r\n     *                          like `end` (see IndexNode).\r\n     * @return {function} Returns a function which can be called like:\r\n     *                        evalNode(scope: Object, args: Object, context: *)\r\n     */\n    _compile(math, argNames) {\n      var value = this.value;\n      return function evalConstantNode() {\n        return value;\n      };\n    }\n\n    /**\r\n     * Execute a callback for each of the child nodes of this node\r\n     * @param {function(child: Node, path: string, parent: Node)} callback\r\n     */\n    forEach(callback) {\n      // nothing to do, we don't have any children\n    }\n\n    /**\r\n     * Create a new ConstantNode with children produced by the given callback.\r\n     * Trivial because there are no children.\r\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\r\n     * @returns {ConstantNode} Returns a clone of the node\r\n     */\n    map(callback) {\n      return this.clone();\n    }\n\n    /**\r\n     * Create a clone of this node, a shallow copy\r\n     * @return {ConstantNode}\r\n     */\n    clone() {\n      return new ConstantNode(this.value);\n    }\n\n    /**\r\n     * Get string representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     */\n    _toString(options) {\n      return format(this.value, options);\n    }\n\n    /**\r\n     * Get HTML representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     */\n    _toHTML(options) {\n      var value = this._toString(options);\n      switch (typeOf(this.value)) {\n        case 'number':\n        case 'bigint':\n        case 'BigNumber':\n        case 'Fraction':\n          return '<span class=\"math-number\">' + value + '</span>';\n        case 'string':\n          return '<span class=\"math-string\">' + value + '</span>';\n        case 'boolean':\n          return '<span class=\"math-boolean\">' + value + '</span>';\n        case 'null':\n          return '<span class=\"math-null-symbol\">' + value + '</span>';\n        case 'undefined':\n          return '<span class=\"math-undefined\">' + value + '</span>';\n        default:\n          return '<span class=\"math-symbol\">' + value + '</span>';\n      }\n    }\n\n    /**\r\n     * Get a JSON representation of the node\r\n     * @returns {Object}\r\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        value: this.value\n      };\n    }\n\n    /**\r\n     * Instantiate a ConstantNode from its JSON representation\r\n     * @param {Object} json  An object structured like\r\n     *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\r\n     *                       where mathjs is optional\r\n     * @returns {ConstantNode}\r\n     */\n    static fromJSON(json) {\n      return new ConstantNode(json.value);\n    }\n\n    /**\r\n     * Get LaTeX representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     */\n    _toTex(options) {\n      var value = this._toString(options);\n      var type = typeOf(this.value);\n      switch (type) {\n        case 'string':\n          return '\\\\mathtt{' + escapeLatex(value) + '}';\n        case 'number':\n        case 'BigNumber':\n          {\n            var finite = type === 'BigNumber' ? this.value.isFinite() : isFinite(this.value);\n            if (!finite) {\n              return this.value.valueOf() < 0 ? '-\\\\infty' : '\\\\infty';\n            }\n            var index = value.toLowerCase().indexOf('e');\n            if (index !== -1) {\n              return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n            }\n            return value;\n          }\n        case 'bigint':\n          {\n            return value.toString();\n          }\n        case 'Fraction':\n          return this.value.toLatex();\n        default:\n          return value;\n      }\n    }\n  }\n  _defineProperty(ConstantNode, \"name\", name);\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","format","typeOf","escapeLatex","factory","name","dependencies","createConstantNode","_ref","Node","ConstantNode","constructor","value","type","isConstantNode","_compile","math","argNames","evalConstantNode","forEach","callback","map","clone","_toString","options","_toHTML","toJSON","mathjs","fromJSON","json","_toTex","finite","isFinite","valueOf","index","toLowerCase","indexOf","substring","toString","toLatex","isClass","isNode"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/expression/node/ConstantNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\r\nimport { format } from '../../utils/string.js';\r\nimport { typeOf } from '../../utils/is.js';\r\nimport { escapeLatex } from '../../utils/latex.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'ConstantNode';\r\nvar dependencies = ['Node'];\r\nexport var createConstantNode = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    Node\r\n  } = _ref;\r\n  class ConstantNode extends Node {\r\n    /**\r\n     * A ConstantNode holds a constant value like a number or string.\r\n     *\r\n     * Usage:\r\n     *\r\n     *     new ConstantNode(2.3)\r\n     *     new ConstantNode('hello')\r\n     *\r\n     * @param {*} value    Value can be any type (number, BigNumber, bigint, string, ...)\r\n     * @constructor ConstantNode\r\n     * @extends {Node}\r\n     */\r\n    constructor(value) {\r\n      super();\r\n      this.value = value;\r\n    }\r\n    get type() {\r\n      return name;\r\n    }\r\n    get isConstantNode() {\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Compile a node into a JavaScript function.\r\n     * This basically pre-calculates as much as possible and only leaves open\r\n     * calculations which depend on a dynamic scope with variables.\r\n     * @param {Object} math     Math.js namespace with functions and constants.\r\n     * @param {Object} argNames An object with argument names as key and `true`\r\n     *                          as value. Used in the SymbolNode to optimize\r\n     *                          for arguments from user assigned functions\r\n     *                          (see FunctionAssignmentNode) or special symbols\r\n     *                          like `end` (see IndexNode).\r\n     * @return {function} Returns a function which can be called like:\r\n     *                        evalNode(scope: Object, args: Object, context: *)\r\n     */\r\n    _compile(math, argNames) {\r\n      var value = this.value;\r\n      return function evalConstantNode() {\r\n        return value;\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Execute a callback for each of the child nodes of this node\r\n     * @param {function(child: Node, path: string, parent: Node)} callback\r\n     */\r\n    forEach(callback) {\r\n      // nothing to do, we don't have any children\r\n    }\r\n\r\n    /**\r\n     * Create a new ConstantNode with children produced by the given callback.\r\n     * Trivial because there are no children.\r\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\r\n     * @returns {ConstantNode} Returns a clone of the node\r\n     */\r\n    map(callback) {\r\n      return this.clone();\r\n    }\r\n\r\n    /**\r\n     * Create a clone of this node, a shallow copy\r\n     * @return {ConstantNode}\r\n     */\r\n    clone() {\r\n      return new ConstantNode(this.value);\r\n    }\r\n\r\n    /**\r\n     * Get string representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     */\r\n    _toString(options) {\r\n      return format(this.value, options);\r\n    }\r\n\r\n    /**\r\n     * Get HTML representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     */\r\n    _toHTML(options) {\r\n      var value = this._toString(options);\r\n      switch (typeOf(this.value)) {\r\n        case 'number':\r\n        case 'bigint':\r\n        case 'BigNumber':\r\n        case 'Fraction':\r\n          return '<span class=\"math-number\">' + value + '</span>';\r\n        case 'string':\r\n          return '<span class=\"math-string\">' + value + '</span>';\r\n        case 'boolean':\r\n          return '<span class=\"math-boolean\">' + value + '</span>';\r\n        case 'null':\r\n          return '<span class=\"math-null-symbol\">' + value + '</span>';\r\n        case 'undefined':\r\n          return '<span class=\"math-undefined\">' + value + '</span>';\r\n        default:\r\n          return '<span class=\"math-symbol\">' + value + '</span>';\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get a JSON representation of the node\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n      return {\r\n        mathjs: name,\r\n        value: this.value\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Instantiate a ConstantNode from its JSON representation\r\n     * @param {Object} json  An object structured like\r\n     *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\r\n     *                       where mathjs is optional\r\n     * @returns {ConstantNode}\r\n     */\r\n    static fromJSON(json) {\r\n      return new ConstantNode(json.value);\r\n    }\r\n\r\n    /**\r\n     * Get LaTeX representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     */\r\n    _toTex(options) {\r\n      var value = this._toString(options);\r\n      var type = typeOf(this.value);\r\n      switch (type) {\r\n        case 'string':\r\n          return '\\\\mathtt{' + escapeLatex(value) + '}';\r\n        case 'number':\r\n        case 'BigNumber':\r\n          {\r\n            var finite = type === 'BigNumber' ? this.value.isFinite() : isFinite(this.value);\r\n            if (!finite) {\r\n              return this.value.valueOf() < 0 ? '-\\\\infty' : '\\\\infty';\r\n            }\r\n            var index = value.toLowerCase().indexOf('e');\r\n            if (index !== -1) {\r\n              return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\r\n            }\r\n            return value;\r\n          }\r\n        case 'bigint':\r\n          {\r\n            return value.toString();\r\n          }\r\n        case 'Fraction':\r\n          return this.value.toLatex();\r\n        default:\r\n          return value;\r\n      }\r\n    }\r\n  }\r\n  _defineProperty(ConstantNode, \"name\", name);\r\n  return ConstantNode;\r\n}, {\r\n  isClass: true,\r\n  isNode: true\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}