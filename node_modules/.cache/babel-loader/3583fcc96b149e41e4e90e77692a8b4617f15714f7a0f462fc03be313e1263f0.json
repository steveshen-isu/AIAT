{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'matrixFromRows';\nvar dependencies = ['typed', 'matrix', 'flatten', 'size'];\nexport var createMatrixFromRows = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    flatten,\n    size\n  } = _ref;\n  /**\r\n   * Create a dense matrix from vectors as individual rows.\r\n   * If you pass column vectors, they will be transposed (but not conjugated!)\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.matrixFromRows(...arr)\r\n   *    math.matrixFromRows(row1, row2)\r\n   *    math.matrixFromRows(row1, row2, row3)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.matrixFromRows([1, 2, 3], [[4],[5],[6]])\r\n   *    math.matrixFromRows(...vectors)\r\n   *\r\n   * See also:\r\n   *\r\n   *    matrix, matrixFromColumns, matrixFromFunction, zeros\r\n   *\r\n   * @param {... Array | Matrix} rows  Multiple rows\r\n   * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned\r\n   */\n  return typed(name, {\n    '...Array': function Array(arr) {\n      return _createArray(arr);\n    },\n    '...Matrix': function Matrix(arr) {\n      return matrix(_createArray(arr.map(m => m.toArray())));\n    }\n\n    // TODO implement this properly for SparseMatrix\n  });\n  function _createArray(arr) {\n    if (arr.length === 0) throw new TypeError('At least one row is needed to construct a matrix.');\n    var N = checkVectorTypeAndReturnLength(arr[0]);\n    var result = [];\n    for (var row of arr) {\n      var rowLength = checkVectorTypeAndReturnLength(row);\n      if (rowLength !== N) {\n        throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (rowLength | 0));\n      }\n      result.push(flatten(row));\n    }\n    return result;\n  }\n  function checkVectorTypeAndReturnLength(vec) {\n    var s = size(vec);\n    if (s.length === 1) {\n      // 1D vector\n      return s[0];\n    } else if (s.length === 2) {\n      // 2D vector\n      if (s[0] === 1) {\n        // row vector\n        return s[1];\n      } else if (s[1] === 1) {\n        // col vector\n        return s[0];\n      } else {\n        throw new TypeError('At least one of the arguments is not a vector.');\n      }\n    } else {\n      throw new TypeError('Only one- or two-dimensional vectors are supported.');\n    }\n  }\n});","map":{"version":3,"names":["factory","name","dependencies","createMatrixFromRows","_ref","typed","matrix","flatten","size","Array","arr","_createArray","Matrix","map","m","toArray","length","TypeError","N","checkVectorTypeAndReturnLength","result","row","rowLength","push","vec","s"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/matrix/matrixFromRows.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'matrixFromRows';\r\nvar dependencies = ['typed', 'matrix', 'flatten', 'size'];\r\nexport var createMatrixFromRows = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    flatten,\r\n    size\r\n  } = _ref;\r\n  /**\r\n   * Create a dense matrix from vectors as individual rows.\r\n   * If you pass column vectors, they will be transposed (but not conjugated!)\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.matrixFromRows(...arr)\r\n   *    math.matrixFromRows(row1, row2)\r\n   *    math.matrixFromRows(row1, row2, row3)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.matrixFromRows([1, 2, 3], [[4],[5],[6]])\r\n   *    math.matrixFromRows(...vectors)\r\n   *\r\n   * See also:\r\n   *\r\n   *    matrix, matrixFromColumns, matrixFromFunction, zeros\r\n   *\r\n   * @param {... Array | Matrix} rows  Multiple rows\r\n   * @return { number[][] | Matrix } if at least one of the arguments is an array, an array will be returned\r\n   */\r\n  return typed(name, {\r\n    '...Array': function Array(arr) {\r\n      return _createArray(arr);\r\n    },\r\n    '...Matrix': function Matrix(arr) {\r\n      return matrix(_createArray(arr.map(m => m.toArray())));\r\n    }\r\n\r\n    // TODO implement this properly for SparseMatrix\r\n  });\r\n  function _createArray(arr) {\r\n    if (arr.length === 0) throw new TypeError('At least one row is needed to construct a matrix.');\r\n    var N = checkVectorTypeAndReturnLength(arr[0]);\r\n    var result = [];\r\n    for (var row of arr) {\r\n      var rowLength = checkVectorTypeAndReturnLength(row);\r\n      if (rowLength !== N) {\r\n        throw new TypeError('The vectors had different length: ' + (N | 0) + ' ≠ ' + (rowLength | 0));\r\n      }\r\n      result.push(flatten(row));\r\n    }\r\n    return result;\r\n  }\r\n  function checkVectorTypeAndReturnLength(vec) {\r\n    var s = size(vec);\r\n    if (s.length === 1) {\r\n      // 1D vector\r\n      return s[0];\r\n    } else if (s.length === 2) {\r\n      // 2D vector\r\n      if (s[0] === 1) {\r\n        // row vector\r\n        return s[1];\r\n      } else if (s[1] === 1) {\r\n        // col vector\r\n        return s[0];\r\n      } else {\r\n        throw new TypeError('At least one of the arguments is not a vector.');\r\n      }\r\n    } else {\r\n      throw new TypeError('Only one- or two-dimensional vectors are supported.');\r\n    }\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,gBAAgB;AAC3B,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC;AACzD,OAAO,IAAIC,oBAAoB,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACnF,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,OAAO;IACPC;EACF,CAAC,GAAGJ,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,UAAU,EAAE,SAASQ,KAAKA,CAACC,GAAG,EAAE;MAC9B,OAAOC,YAAY,CAACD,GAAG,CAAC;IAC1B,CAAC;IACD,WAAW,EAAE,SAASE,MAAMA,CAACF,GAAG,EAAE;MAChC,OAAOJ,MAAM,CAACK,YAAY,CAACD,GAAG,CAACG,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD;;IAEA;EACF,CAAC,CAAC;EACF,SAASJ,YAAYA,CAACD,GAAG,EAAE;IACzB,IAAIA,GAAG,CAACM,MAAM,KAAK,CAAC,EAAE,MAAM,IAAIC,SAAS,CAAC,mDAAmD,CAAC;IAC9F,IAAIC,CAAC,GAAGC,8BAA8B,CAACT,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAIU,MAAM,GAAG,EAAE;IACf,KAAK,IAAIC,GAAG,IAAIX,GAAG,EAAE;MACnB,IAAIY,SAAS,GAAGH,8BAA8B,CAACE,GAAG,CAAC;MACnD,IAAIC,SAAS,KAAKJ,CAAC,EAAE;QACnB,MAAM,IAAID,SAAS,CAAC,oCAAoC,IAAIC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,IAAII,SAAS,GAAG,CAAC,CAAC,CAAC;MAC/F;MACAF,MAAM,CAACG,IAAI,CAAChB,OAAO,CAACc,GAAG,CAAC,CAAC;IAC3B;IACA,OAAOD,MAAM;EACf;EACA,SAASD,8BAA8BA,CAACK,GAAG,EAAE;IAC3C,IAAIC,CAAC,GAAGjB,IAAI,CAACgB,GAAG,CAAC;IACjB,IAAIC,CAAC,CAACT,MAAM,KAAK,CAAC,EAAE;MAClB;MACA,OAAOS,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,MAAM,IAAIA,CAAC,CAACT,MAAM,KAAK,CAAC,EAAE;MACzB;MACA,IAAIS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QACd;QACA,OAAOA,CAAC,CAAC,CAAC,CAAC;MACb,CAAC,MAAM,IAAIA,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QACrB;QACA,OAAOA,CAAC,CAAC,CAAC,CAAC;MACb,CAAC,MAAM;QACL,MAAM,IAAIR,SAAS,CAAC,gDAAgD,CAAC;MACvE;IACF,CAAC,MAAM;MACL,MAAM,IAAIA,SAAS,CAAC,qDAAqD,CAAC;IAC5E;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}