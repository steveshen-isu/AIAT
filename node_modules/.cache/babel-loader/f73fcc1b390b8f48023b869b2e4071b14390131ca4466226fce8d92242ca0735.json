{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { secNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'sec';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSec = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\r\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\r\n   *\r\n   * To avoid confusion with the matrix secant, this function does not\r\n   * apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sec(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sec(2)      // returns number -2.4029979617223822\r\n   *    1 / math.cos(2)  // returns number -2.4029979617223822\r\n   *\r\n   * See also:\r\n   *\r\n   *    cos, csc, cot\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit} x  Function input\r\n   * @return {number | BigNumber | Complex} Secant of x\r\n   */\n  return typed(name, {\n    number: secNumber,\n    Complex: x => x.sec(),\n    BigNumber: x => new _BigNumber(1).div(x.cos())\n  }, trigUnit);\n});","map":{"version":3,"names":["factory","secNumber","createTrigUnit","name","dependencies","createSec","_ref","typed","BigNumber","_BigNumber","trigUnit","number","Complex","x","sec","div","cos"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/trigonometry/sec.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { secNumber } from '../../plain/number/index.js';\r\nimport { createTrigUnit } from './trigUnit.js';\r\nvar name = 'sec';\r\nvar dependencies = ['typed', 'BigNumber'];\r\nexport var createSec = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    BigNumber: _BigNumber\r\n  } = _ref;\r\n  var trigUnit = createTrigUnit({\r\n    typed\r\n  });\r\n\r\n  /**\r\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\r\n   *\r\n   * To avoid confusion with the matrix secant, this function does not\r\n   * apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sec(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sec(2)      // returns number -2.4029979617223822\r\n   *    1 / math.cos(2)  // returns number -2.4029979617223822\r\n   *\r\n   * See also:\r\n   *\r\n   *    cos, csc, cot\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit} x  Function input\r\n   * @return {number | BigNumber | Complex} Secant of x\r\n   */\r\n  return typed(name, {\r\n    number: secNumber,\r\n    Complex: x => x.sec(),\r\n    BigNumber: x => new _BigNumber(1).div(x.cos())\r\n  }, trigUnit);\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,cAAc,QAAQ,eAAe;AAC9C,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC;AACzC,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC,KAAK;IACLC,SAAS,EAAEC;EACb,CAAC,GAAGH,IAAI;EACR,IAAII,QAAQ,GAAGR,cAAc,CAAC;IAC5BK;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjBQ,MAAM,EAAEV,SAAS;IACjBW,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACC,GAAG,CAAC,CAAC;IACrBN,SAAS,EAAEK,CAAC,IAAI,IAAIJ,UAAU,CAAC,CAAC,CAAC,CAACM,GAAG,CAACF,CAAC,CAACG,GAAG,CAAC,CAAC;EAC/C,CAAC,EAAEN,QAAQ,CAAC;AACd,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}