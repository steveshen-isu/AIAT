{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'subtractScalar', 'unaryMinus', 'DenseMatrix', 'concat'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    subtractScalar,\n    unaryMinus,\n    DenseMatrix,\n    concat\n  } = _ref;\n  // TODO: split function subtract in two: subtract and subtractScalar\n\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\r\n   * Subtract two values, `x - y`.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.subtract(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.subtract(5.3, 2)        // returns number 3.3\r\n   *\r\n   *    const a = math.complex(2, 3)\r\n   *    const b = math.complex(4, 1)\r\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\r\n   *\r\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\r\n   *\r\n   *    const c = math.unit('2.1 km')\r\n   *    const d = math.unit('500m')\r\n   *    math.subtract(c, d)          // returns Unit 1.6 km\r\n   *\r\n   * See also:\r\n   *\r\n   *    add\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} x Initial value\r\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} y Value to subtract from `x`\r\n   * @return {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} Subtraction of `x` and `y`\r\n   */\n  return typed(name, {\n    'any, any': subtractScalar\n  }, matrixAlgorithmSuite({\n    elop: subtractScalar,\n    SS: matAlgo05xSfSf,\n    DS: matAlgo01xDSid,\n    SD: matAlgo03xDSf,\n    Ss: matAlgo12xSfs,\n    sS: matAlgo10xSids\n  }));\n});","map":{"version":3,"names":["factory","createMatAlgo01xDSid","createMatAlgo03xDSf","createMatAlgo05xSfSf","createMatAlgo10xSids","createMatAlgo12xSfs","createMatrixAlgorithmSuite","name","dependencies","createSubtract","_ref","typed","matrix","equalScalar","subtractScalar","unaryMinus","DenseMatrix","concat","matAlgo01xDSid","matAlgo03xDSf","matAlgo05xSfSf","matAlgo10xSids","matAlgo12xSfs","matrixAlgorithmSuite","elop","SS","DS","SD","Ss","sS"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/subtract.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\r\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\r\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\r\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'subtract';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'subtractScalar', 'unaryMinus', 'DenseMatrix', 'concat'];\r\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    subtractScalar,\r\n    unaryMinus,\r\n    DenseMatrix,\r\n    concat\r\n  } = _ref;\r\n  // TODO: split function subtract in two: subtract and subtractScalar\r\n\r\n  var matAlgo01xDSid = createMatAlgo01xDSid({\r\n    typed\r\n  });\r\n  var matAlgo03xDSf = createMatAlgo03xDSf({\r\n    typed\r\n  });\r\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo10xSids = createMatAlgo10xSids({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n\r\n  /**\r\n   * Subtract two values, `x - y`.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.subtract(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.subtract(5.3, 2)        // returns number 3.3\r\n   *\r\n   *    const a = math.complex(2, 3)\r\n   *    const b = math.complex(4, 1)\r\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\r\n   *\r\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\r\n   *\r\n   *    const c = math.unit('2.1 km')\r\n   *    const d = math.unit('500m')\r\n   *    math.subtract(c, d)          // returns Unit 1.6 km\r\n   *\r\n   * See also:\r\n   *\r\n   *    add\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} x Initial value\r\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} y Value to subtract from `x`\r\n   * @return {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} Subtraction of `x` and `y`\r\n   */\r\n  return typed(name, {\r\n    'any, any': subtractScalar\r\n  }, matrixAlgorithmSuite({\r\n    elop: subtractScalar,\r\n    SS: matAlgo05xSfSf,\r\n    DS: matAlgo01xDSid,\r\n    SD: matAlgo03xDSf,\r\n    Ss: matAlgo12xSfs,\r\n    sS: matAlgo10xSids\r\n  }));\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,oBAAoB,QAAQ,2CAA2C;AAChF,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,oBAAoB,QAAQ,2CAA2C;AAChF,SAASC,oBAAoB,QAAQ,2CAA2C;AAChF,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,0BAA0B,QAAQ,iDAAiD;AAC5F,IAAIC,IAAI,GAAG,UAAU;AACrB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,gBAAgB,EAAE,YAAY,EAAE,aAAa,EAAE,QAAQ,CAAC;AAC9G,OAAO,IAAIC,cAAc,GAAG,eAAeT,OAAO,CAACO,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC7E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,WAAW;IACXC,cAAc;IACdC,UAAU;IACVC,WAAW;IACXC;EACF,CAAC,GAAGP,IAAI;EACR;;EAEA,IAAIQ,cAAc,GAAGjB,oBAAoB,CAAC;IACxCU;EACF,CAAC,CAAC;EACF,IAAIQ,aAAa,GAAGjB,mBAAmB,CAAC;IACtCS;EACF,CAAC,CAAC;EACF,IAAIS,cAAc,GAAGjB,oBAAoB,CAAC;IACxCQ,KAAK;IACLE;EACF,CAAC,CAAC;EACF,IAAIQ,cAAc,GAAGjB,oBAAoB,CAAC;IACxCO,KAAK;IACLK;EACF,CAAC,CAAC;EACF,IAAIM,aAAa,GAAGjB,mBAAmB,CAAC;IACtCM,KAAK;IACLK;EACF,CAAC,CAAC;EACF,IAAIO,oBAAoB,GAAGjB,0BAA0B,CAAC;IACpDK,KAAK;IACLC,MAAM;IACNK;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAON,KAAK,CAACJ,IAAI,EAAE;IACjB,UAAU,EAAEO;EACd,CAAC,EAAES,oBAAoB,CAAC;IACtBC,IAAI,EAAEV,cAAc;IACpBW,EAAE,EAAEL,cAAc;IAClBM,EAAE,EAAER,cAAc;IAClBS,EAAE,EAAER,aAAa;IACjBS,EAAE,EAAEN,aAAa;IACjBO,EAAE,EAAER;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}