{"ast":null,"code":"import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { safeNumberType } from '../../utils/number.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\nexport var createSum = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    add,\n    numeric\n  } = _ref;\n  /**\r\n   * Compute the sum of a matrix or a list with values.\r\n   * In case of a multidimensional array or matrix, the sum of all\r\n   * elements will be calculated.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.sum(a, b, c, ...)\r\n   *     math.sum(A)\r\n   *     math.sum(A, dimension)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.sum(2, 1, 4, 3)               // returns 10\r\n   *     math.sum([2, 1, 4, 3])             // returns 10\r\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, min, max, prod, std, variance, cumsum\r\n   *\r\n   * @param {... *} args  A single matrix or multiple scalar values\r\n   * @return {*} The sum of all values\r\n   */\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n      return _sum(args);\n    }\n  });\n\n  /**\r\n   * Recursively calculate the sum of an n-dimensional array\r\n   * @param {Array | Matrix} array\r\n   * @return {number} sum\r\n   * @private\r\n   */\n  function _sum(array) {\n    var sum;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'sum', value);\n      }\n    });\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (sum === undefined) {\n      sum = numeric(0, config.number);\n    }\n    if (typeof sum === 'string') {\n      sum = numeric(sum, safeNumberType(sum, config));\n    }\n    return sum;\n  }\n  function _nsumDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      return sum;\n    } catch (err) {\n      throw improveErrorMessage(err, 'sum');\n    }\n  }\n});","map":{"version":3,"names":["containsCollections","deepForEach","reduce","factory","safeNumberType","improveErrorMessage","name","dependencies","createSum","_ref","typed","config","add","numeric","_sum","_nsumDim","_","args","TypeError","array","sum","value","undefined","err","number","dim"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/statistics/sum.js"],"sourcesContent":["import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { safeNumberType } from '../../utils/number.js';\r\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\r\nvar name = 'sum';\r\nvar dependencies = ['typed', 'config', 'add', 'numeric'];\r\nexport var createSum = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    add,\r\n    numeric\r\n  } = _ref;\r\n  /**\r\n   * Compute the sum of a matrix or a list with values.\r\n   * In case of a multidimensional array or matrix, the sum of all\r\n   * elements will be calculated.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.sum(a, b, c, ...)\r\n   *     math.sum(A)\r\n   *     math.sum(A, dimension)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.sum(2, 1, 4, 3)               // returns 10\r\n   *     math.sum([2, 1, 4, 3])             // returns 10\r\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, min, max, prod, std, variance, cumsum\r\n   *\r\n   * @param {... *} args  A single matrix or multiple scalar values\r\n   * @return {*} The sum of all values\r\n   */\r\n  return typed(name, {\r\n    // sum([a, b, c, d, ...])\r\n    'Array | Matrix': _sum,\r\n    // sum([a, b, c, d, ...], dim)\r\n    'Array | Matrix, number | BigNumber': _nsumDim,\r\n    // sum(a, b, c, d, ...)\r\n    '...': function _(args) {\r\n      if (containsCollections(args)) {\r\n        throw new TypeError('Scalar values expected in function sum');\r\n      }\r\n      return _sum(args);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Recursively calculate the sum of an n-dimensional array\r\n   * @param {Array | Matrix} array\r\n   * @return {number} sum\r\n   * @private\r\n   */\r\n  function _sum(array) {\r\n    var sum;\r\n    deepForEach(array, function (value) {\r\n      try {\r\n        sum = sum === undefined ? value : add(sum, value);\r\n      } catch (err) {\r\n        throw improveErrorMessage(err, 'sum', value);\r\n      }\r\n    });\r\n\r\n    // make sure returning numeric value: parse a string into a numeric value\r\n    if (sum === undefined) {\r\n      sum = numeric(0, config.number);\r\n    }\r\n    if (typeof sum === 'string') {\r\n      sum = numeric(sum, safeNumberType(sum, config));\r\n    }\r\n    return sum;\r\n  }\r\n  function _nsumDim(array, dim) {\r\n    try {\r\n      var sum = reduce(array, dim, add);\r\n      return sum;\r\n    } catch (err) {\r\n      throw improveErrorMessage(err, 'sum');\r\n    }\r\n  }\r\n});"],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,WAAW,EAAEC,MAAM,QAAQ,2BAA2B;AACpF,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,CAAC;AACxD,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,GAAG;IACHC;EACF,CAAC,GAAGJ,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB;IACA,gBAAgB,EAAEQ,IAAI;IACtB;IACA,oCAAoC,EAAEC,QAAQ;IAC9C;IACA,KAAK,EAAE,SAASC,CAACA,CAACC,IAAI,EAAE;MACtB,IAAIjB,mBAAmB,CAACiB,IAAI,CAAC,EAAE;QAC7B,MAAM,IAAIC,SAAS,CAAC,wCAAwC,CAAC;MAC/D;MACA,OAAOJ,IAAI,CAACG,IAAI,CAAC;IACnB;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;EACE,SAASH,IAAIA,CAACK,KAAK,EAAE;IACnB,IAAIC,GAAG;IACPnB,WAAW,CAACkB,KAAK,EAAE,UAAUE,KAAK,EAAE;MAClC,IAAI;QACFD,GAAG,GAAGA,GAAG,KAAKE,SAAS,GAAGD,KAAK,GAAGT,GAAG,CAACQ,GAAG,EAAEC,KAAK,CAAC;MACnD,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZ,MAAMlB,mBAAmB,CAACkB,GAAG,EAAE,KAAK,EAAEF,KAAK,CAAC;MAC9C;IACF,CAAC,CAAC;;IAEF;IACA,IAAID,GAAG,KAAKE,SAAS,EAAE;MACrBF,GAAG,GAAGP,OAAO,CAAC,CAAC,EAAEF,MAAM,CAACa,MAAM,CAAC;IACjC;IACA,IAAI,OAAOJ,GAAG,KAAK,QAAQ,EAAE;MAC3BA,GAAG,GAAGP,OAAO,CAACO,GAAG,EAAEhB,cAAc,CAACgB,GAAG,EAAET,MAAM,CAAC,CAAC;IACjD;IACA,OAAOS,GAAG;EACZ;EACA,SAASL,QAAQA,CAACI,KAAK,EAAEM,GAAG,EAAE;IAC5B,IAAI;MACF,IAAIL,GAAG,GAAGlB,MAAM,CAACiB,KAAK,EAAEM,GAAG,EAAEb,GAAG,CAAC;MACjC,OAAOQ,GAAG;IACZ,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZ,MAAMlB,mBAAmB,CAACkB,GAAG,EAAE,KAAK,CAAC;IACvC;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}