{"ast":null,"code":"import { bitXor as bigBitXor } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { bitXorNumber } from '../../plain/number/index.js';\nvar name = 'bitXor';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix', 'concat', 'SparseMatrix'];\nexport var createBitXor = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    DenseMatrix,\n    concat,\n    SparseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    SparseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\r\n   * Bitwise XOR two values, `x ^ y`.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.bitXor(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.bitXor(1, 2)               // returns number 3\r\n   *\r\n   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]\r\n   *\r\n   * See also:\r\n   *\r\n   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift\r\n   *\r\n   * @param  {number | BigNumber | bigint | Array | Matrix} x First value to xor\r\n   * @param  {number | BigNumber | bigint | Array | Matrix} y Second value to xor\r\n   * @return {number | BigNumber | bigint | Array | Matrix} XOR of `x` and `y`\r\n   */\n  return typed(name, {\n    'number, number': bitXorNumber,\n    'BigNumber, BigNumber': bigBitXor,\n    'bigint, bigint': (x, y) => x ^ y\n  }, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});","map":{"version":3,"names":["bitXor","bigBitXor","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo12xSfs","factory","createMatrixAlgorithmSuite","bitXorNumber","name","dependencies","createBitXor","_ref","typed","matrix","DenseMatrix","concat","SparseMatrix","matAlgo03xDSf","matAlgo07xSSf","matAlgo12xSfs","matrixAlgorithmSuite","bigint, bigint","x","y","SS","DS","Ss"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/bitwise/bitXor.js"],"sourcesContent":["import { bitXor as bigBitXor } from '../../utils/bignumber/bitwise.js';\r\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\r\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nimport { bitXorNumber } from '../../plain/number/index.js';\r\nvar name = 'bitXor';\r\nvar dependencies = ['typed', 'matrix', 'DenseMatrix', 'concat', 'SparseMatrix'];\r\nexport var createBitXor = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    DenseMatrix,\r\n    concat,\r\n    SparseMatrix\r\n  } = _ref;\r\n  var matAlgo03xDSf = createMatAlgo03xDSf({\r\n    typed\r\n  });\r\n  var matAlgo07xSSf = createMatAlgo07xSSf({\r\n    typed,\r\n    SparseMatrix\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n\r\n  /**\r\n   * Bitwise XOR two values, `x ^ y`.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.bitXor(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.bitXor(1, 2)               // returns number 3\r\n   *\r\n   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]\r\n   *\r\n   * See also:\r\n   *\r\n   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift\r\n   *\r\n   * @param  {number | BigNumber | bigint | Array | Matrix} x First value to xor\r\n   * @param  {number | BigNumber | bigint | Array | Matrix} y Second value to xor\r\n   * @return {number | BigNumber | bigint | Array | Matrix} XOR of `x` and `y`\r\n   */\r\n  return typed(name, {\r\n    'number, number': bitXorNumber,\r\n    'BigNumber, BigNumber': bigBitXor,\r\n    'bigint, bigint': (x, y) => x ^ y\r\n  }, matrixAlgorithmSuite({\r\n    SS: matAlgo07xSSf,\r\n    DS: matAlgo03xDSf,\r\n    Ss: matAlgo12xSfs\r\n  }));\r\n});"],"mappings":"AAAA,SAASA,MAAM,IAAIC,SAAS,QAAQ,kCAAkC;AACtE,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,0BAA0B,QAAQ,iDAAiD;AAC5F,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,cAAc,CAAC;AAC/E,OAAO,IAAIC,YAAY,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC3E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,WAAW;IACXC,MAAM;IACNC;EACF,CAAC,GAAGL,IAAI;EACR,IAAIM,aAAa,GAAGf,mBAAmB,CAAC;IACtCU;EACF,CAAC,CAAC;EACF,IAAIM,aAAa,GAAGf,mBAAmB,CAAC;IACtCS,KAAK;IACLI;EACF,CAAC,CAAC;EACF,IAAIG,aAAa,GAAGf,mBAAmB,CAAC;IACtCQ,KAAK;IACLE;EACF,CAAC,CAAC;EACF,IAAIM,oBAAoB,GAAGd,0BAA0B,CAAC;IACpDM,KAAK;IACLC,MAAM;IACNE;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOH,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAED,YAAY;IAC9B,sBAAsB,EAAEN,SAAS;IACjC,gBAAgB,EAAEoB,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC;EAClC,CAAC,EAAEH,oBAAoB,CAAC;IACtBI,EAAE,EAAEN,aAAa;IACjBO,EAAE,EAAER,aAAa;IACjBS,EAAE,EAAEP;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}