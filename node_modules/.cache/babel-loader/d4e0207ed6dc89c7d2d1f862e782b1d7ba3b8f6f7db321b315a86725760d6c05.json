{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ROG\\\\ai-solver\\\\src\\\\components\\\\PlotGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport Plot from 'react-plotly.js';\nimport Typewriter from './Typewriter';\nimport Button from \"@/components/ui/button\"; // Import Button from shadcn\nimport Input from \"@/components/ui/input\"; // Import Input from shadcn\nimport Textarea from \"@/components/ui/textarea\"; // Import Textarea from shadcn\nimport Loader from \"@/components/ui/loader\"; // Loader for animations\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\"; // Cards for layout\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst currentUrl = window.location.href;\nconst ipAddress = currentUrl.split(':')[1].split('/')[2];\nfunction PlotGenerator() {\n  _s();\n  const [mathFunction, setMathFunction] = useState('');\n  const [plotCode, setPlotCode] = useState('1'); // Store code from the backend\n  const [plotUrl, setPlotUrl] = useState(''); // URL of the generated plot image\n  const [ButtonDisabled, setButtonDisabled] = useState(false);\n  const [d3ButtonDisabled, setD3ButtonDisabled] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setErrorMessage(null);\n    setButtonDisabled(true);\n    // Send the user's math function request to the backend\n    try {\n      const res = await fetch('http://' + ipAddress + ':200/api/generate-plot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          mathFunction: mathFunction,\n          ipAddress: ipAddress\n        })\n      });\n      if (!res.ok) {\n        // If the response status is not OK (e.g., 500), throw an error\n        const errorData = await res.json(); // Parse the error message from the response\n        throw new Error(errorData.message || 'An error occurred while generating the plot.');\n      }\n      const data = await res.json();\n      setPlotCode(data.plotCode); // Generated code from OpenAI\n      setPlotUrl(data.plotUrl);\n    } catch (error) {\n      console.error('API Error:', error);\n      setErrorMessage('An unexpected error occurred. Please try again.');\n\n      // Check if the error has a response (from the backend)\n      if (error.response) {\n        console.error('Error Response:', error.response.data);\n\n        // Handle server errors (e.g., 500)\n        if (error.response.status === 500) {\n          setErrorMessage(error.response.data.message || 'An unexpected error occurred on the server.');\n        } else {\n          setErrorMessage(error.response.data.message || 'An error occurred.');\n        }\n      }\n      // Handle network or other client-side errors (e.g., timeout, connection issues)\n      else if (error.message) {\n        if (error.message === 'Network Error') {\n          setErrorMessage('Network error: Unable to reach the server. Please try again later.');\n        } else if (error.code === 'ECONNABORTED') {\n          setErrorMessage('Request Timeout: The request took too long to complete. Please try again later.');\n        } else {\n          setErrorMessage(`Unexpected error: I'm not smart enough for this task. Try something easier`);\n        }\n      }\n      // Handle cases where error object is not properly structured (fallback)\n      else {\n        setErrorMessage('An unexpected error occurred. Please try again.');\n      }\n    }\n    setButtonDisabled(false);\n  };\n  console.log(plotCode);\n  console.log(plotUrl);\n  console.log('error message:' + errorMessage);\n  const [dataD3Plot, setDataD3plot] = useState('');\n  const handleD3Submit = async e => {\n    e.preventDefault();\n    setErrorMessage(null);\n    setD3ButtonDisabled(true);\n    try {\n      // Send request to backend with function name\n      const res = await fetch('http://' + ipAddress + ':200/api/generate-d3plot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          mathFunction: mathFunction,\n          ipAddress: ipAddress\n        })\n      });\n      if (!res.ok) {\n        // If the response status is not OK (e.g., 500), throw an error\n        const errorData = await res.json(); // Parse the error message from the response\n        throw new Error(errorData.message || 'An error occurred while generating the plot.');\n      }\n      const result = await res.json();\n      setDataD3plot(result.plotdata); // Receive dataset and store it in state\n    } catch (error) {\n      console.error('API Error:', error);\n      setErrorMessage('An unexpected error occurred. Please try again.');\n\n      // Check if the error has a response (from the backend)\n      if (error.response) {\n        console.error('Error Response:', error.response.data);\n\n        // Handle server errors (e.g., 500)\n        if (error.response.status === 500) {\n          setErrorMessage(error.response.data.message || 'An unexpected error occurred on the server.');\n        } else {\n          setErrorMessage(error.response.data.message || 'An error occurred.');\n        }\n      }\n      // Handle network or other client-side errors (e.g., timeout, connection issues)\n      else if (error.message) {\n        if (error.message === 'Network Error') {\n          setErrorMessage('Network error: Unable to reach the server. Please try again later.');\n        } else if (error.code === 'ECONNABORTED') {\n          setErrorMessage('Request Timeout: The request took too long to complete. Please try again later.');\n        } else {\n          setErrorMessage(`Unexpected error: ${error.message}`);\n        }\n      }\n      // Handle cases where error object is not properly structured (fallback)\n      else {\n        setErrorMessage('An unexpected error occurred. Please try again.');\n      }\n    }\n    setD3ButtonDisabled(false);\n  };\n  console.log('interactive plot data:', dataD3Plot);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col md:flex-row items-start p-6 space-y-6 md:space-y-0 md:space-x-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col w-full max-w-2xl space-y-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center text-3xl font-semibold\",\n        children: /*#__PURE__*/_jsxDEV(Typewriter, {\n          text: \"Type in the function you are interested in to plot it\",\n          speed: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: /*#__PURE__*/_jsxDEV(CardTitle, {\n            className: \"text-lg text-gray-700\",\n            children: \"Enter a mathematical function\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            className: \"space-y-4\",\n            children: [/*#__PURE__*/_jsxDEV(Textarea, {\n              className: \"p-4 border-2 border-gray-300 rounded-lg w-full focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white text-gray-900 shadow-md transition-all duration-300 disabled:bg-gray-200 disabled:text-gray-400 disabled:cursor-not-allowed\",\n              placeholder: \"e.g., sin(x), x^2, or cos(x)*tan(x)\",\n              value: mathFunction,\n              onChange: e => setMathFunction(e.target.value),\n              rows: \"4\",\n              disabled: ButtonDisabled || d3ButtonDisabled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              className: `w-full transition-all duration-300 ${ButtonDisabled || d3ButtonDisabled ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-500 hover:bg-blue-600'}`,\n              onClick: () => {\n                setPlotCode(null);\n                setPlotUrl(null);\n                setDataD3plot(null);\n              },\n              disabled: ButtonDisabled || d3ButtonDisabled,\n              children: \"Generate Plot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"shadow-md\",\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleD3Submit,\n            className: \"space-y-4\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              className: `w-full transition-all duration-300 ${ButtonDisabled || d3ButtonDisabled ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-500 hover:bg-blue-600'}`,\n              onClick: () => {\n                setPlotCode(null);\n                setPlotUrl(null);\n                setDataD3plot(null);\n              },\n              disabled: ButtonDisabled || d3ButtonDisabled,\n              children: \"Not Just a Graph!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center w-full mt-6 md:mt-0\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full max-w-10xl h-96 bg-gray-100 rounded-lg shadow-md flex justify-center items-center\",\n        children: [!plotUrl && !dataD3Plot && !errorMessage && !ButtonDisabled && !d3ButtonDisabled && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-600 text-xl\",\n          children: \"Waiting for your request...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }, this), plotUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${plotUrl}?rand=${Math.random()}`,\n          alt: \"Generated plot\",\n          className: \"object-contain w-full h-full rounded-lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 25\n        }, this), !plotCode && !dataD3Plot && !errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"loading-animation\",\n          className: \"absolute flex items-center justify-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(Loader, {\n            className: \"text-blue-500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 29\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Generating Plot...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 p-2 bg-red-100 text-red-700 border border-red-400 rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Error:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }, this), \" \", errorMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this);\n}\n_s(PlotGenerator, \"dYfSownokL+D44WILs2m8JUhiuk=\");\n_c = PlotGenerator;\nexport default PlotGenerator;\nvar _c;\n$RefreshReg$(_c, \"PlotGenerator\");","map":{"version":3,"names":["React","useState","useEffect","d3","Plot","Typewriter","Button","Input","Textarea","Loader","Card","CardHeader","CardTitle","CardContent","jsxDEV","_jsxDEV","currentUrl","window","location","href","ipAddress","split","PlotGenerator","_s","mathFunction","setMathFunction","plotCode","setPlotCode","plotUrl","setPlotUrl","ButtonDisabled","setButtonDisabled","d3ButtonDisabled","setD3ButtonDisabled","errorMessage","setErrorMessage","handleSubmit","e","preventDefault","res","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","data","error","console","response","status","code","log","dataD3Plot","setDataD3plot","handleD3Submit","result","plotdata","className","children","text","speed","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","value","onChange","target","rows","disabled","type","onClick","src","Math","random","alt","id","_c","$RefreshReg$"],"sources":["C:/Users/ROG/ai-solver/src/components/PlotGenerator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport Plot from 'react-plotly.js';\r\nimport Typewriter from './Typewriter';\r\nimport Button from \"@/components/ui/button\"; // Import Button from shadcn\r\nimport Input from \"@/components/ui/input\"; // Import Input from shadcn\r\nimport Textarea from \"@/components/ui/textarea\"; // Import Textarea from shadcn\r\nimport Loader from \"@/components/ui/loader\"; // Loader for animations\r\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\"; // Cards for layout\r\nconst currentUrl = window.location.href;\r\n\r\nconst ipAddress = currentUrl.split(':')[1].split('/')[2];\r\n\r\n\r\n\r\nfunction PlotGenerator() {\r\n    const [mathFunction, setMathFunction] = useState('');\r\n    const [plotCode, setPlotCode] = useState('1'); // Store code from the backend\r\n    const [plotUrl, setPlotUrl] = useState('');   // URL of the generated plot image\r\n    const [ButtonDisabled, setButtonDisabled] = useState(false);\r\n    const [d3ButtonDisabled, setD3ButtonDisabled] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setErrorMessage(null)\r\n        setButtonDisabled(true)\r\n        // Send the user's math function request to the backend\r\n        try {\r\n            const res = await fetch('http://' + ipAddress + ':200/api/generate-plot', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    mathFunction: mathFunction,\r\n                    ipAddress: ipAddress,\r\n                }),\r\n            });\r\n            if (!res.ok) {\r\n                // If the response status is not OK (e.g., 500), throw an error\r\n                const errorData = await res.json(); // Parse the error message from the response\r\n                throw new Error(errorData.message || 'An error occurred while generating the plot.');\r\n            }\r\n            const data = await res.json();\r\n            setPlotCode(data.plotCode);  // Generated code from OpenAI\r\n            setPlotUrl(data.plotUrl);\r\n        } catch (error) {\r\n            console.error('API Error:', error);\r\n            setErrorMessage('An unexpected error occurred. Please try again.');\r\n\r\n            // Check if the error has a response (from the backend)\r\n            if (error.response) {\r\n                console.error('Error Response:', error.response.data);\r\n\r\n                // Handle server errors (e.g., 500)\r\n                if (error.response.status === 500) {\r\n                    setErrorMessage(\r\n                        error.response.data.message || 'An unexpected error occurred on the server.'\r\n                    );\r\n                } else {\r\n                    setErrorMessage(error.response.data.message || 'An error occurred.');\r\n                }\r\n            }\r\n            // Handle network or other client-side errors (e.g., timeout, connection issues)\r\n            else if (error.message) {\r\n                if (error.message === 'Network Error') {\r\n                    setErrorMessage('Network error: Unable to reach the server. Please try again later.');\r\n                } else if (error.code === 'ECONNABORTED') {\r\n                    setErrorMessage('Request Timeout: The request took too long to complete. Please try again later.');\r\n                } else {\r\n                    setErrorMessage(`Unexpected error: I'm not smart enough for this task. Try something easier`);\r\n                }\r\n            }\r\n            // Handle cases where error object is not properly structured (fallback)\r\n            else {\r\n                setErrorMessage('An unexpected error occurred. Please try again.');\r\n            }\r\n        }\r\n\r\n        setButtonDisabled(false)\r\n    };\r\n    console.log(plotCode);\r\n    console.log(plotUrl);\r\n    console.log('error message:' + errorMessage);\r\n    const [dataD3Plot, setDataD3plot] = useState('');\r\n\r\n    const handleD3Submit = async (e) => {\r\n        e.preventDefault();\r\n        setErrorMessage(null)\r\n        setD3ButtonDisabled(true)\r\n        try {\r\n            // Send request to backend with function name\r\n            const res = await fetch('http://' + ipAddress + ':200/api/generate-d3plot', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    mathFunction: mathFunction,\r\n                    ipAddress: ipAddress,\r\n                }),\r\n            });\r\n            if (!res.ok) {\r\n                // If the response status is not OK (e.g., 500), throw an error\r\n                const errorData = await res.json(); // Parse the error message from the response\r\n                throw new Error(errorData.message || 'An error occurred while generating the plot.');\r\n            }\r\n            const result = await res.json();\r\n            setDataD3plot(result.plotdata);  // Receive dataset and store it in state\r\n        } catch (error) {\r\n            console.error('API Error:', error);\r\n            setErrorMessage('An unexpected error occurred. Please try again.');\r\n\r\n            // Check if the error has a response (from the backend)\r\n            if (error.response) {\r\n                console.error('Error Response:', error.response.data);\r\n\r\n                // Handle server errors (e.g., 500)\r\n                if (error.response.status === 500) {\r\n                    setErrorMessage(\r\n                        error.response.data.message || 'An unexpected error occurred on the server.'\r\n                    );\r\n                } else {\r\n                    setErrorMessage(error.response.data.message || 'An error occurred.');\r\n                }\r\n            }\r\n            // Handle network or other client-side errors (e.g., timeout, connection issues)\r\n            else if (error.message) {\r\n                if (error.message === 'Network Error') {\r\n                    setErrorMessage('Network error: Unable to reach the server. Please try again later.');\r\n                } else if (error.code === 'ECONNABORTED') {\r\n                    setErrorMessage('Request Timeout: The request took too long to complete. Please try again later.');\r\n                } else {\r\n                    setErrorMessage(`Unexpected error: ${error.message}`);\r\n                }\r\n            }\r\n            // Handle cases where error object is not properly structured (fallback)\r\n            else {\r\n                setErrorMessage('An unexpected error occurred. Please try again.');\r\n            }\r\n        }\r\n        setD3ButtonDisabled(false)\r\n    };\r\n\r\n    console.log('interactive plot data:', dataD3Plot)\r\n\r\n\r\n    return (\r\n        <div className=\"flex flex-col md:flex-row items-start p-6 space-y-6 md:space-y-0 md:space-x-6\">\r\n            {/* Left side (Form with Textarea and Button) */}\r\n            <div className=\"flex flex-col w-full max-w-2xl space-y-4\">\r\n                {/* Title with Typewriter */}\r\n                <h1 className=\"text-center text-3xl font-semibold\">\r\n                    <Typewriter\r\n                        text=\"Type in the function you are interested in to plot it\"\r\n                        speed={20}\r\n                    />\r\n                </h1>\r\n\r\n                {/* Input Card */}\r\n                <Card className=\"shadow-md\">\r\n                    <CardHeader>\r\n                        <CardTitle className=\"text-lg text-gray-700\">\r\n                            Enter a mathematical function\r\n                        </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n                            <Textarea\r\n                                className=\"p-4 border-2 border-gray-300 rounded-lg w-full focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white text-gray-900 shadow-md transition-all duration-300 disabled:bg-gray-200 disabled:text-gray-400 disabled:cursor-not-allowed\"\r\n                                placeholder=\"e.g., sin(x), x^2, or cos(x)*tan(x)\"\r\n                                value={mathFunction}\r\n                                onChange={(e) => setMathFunction(e.target.value)}\r\n                                rows=\"4\"\r\n                                disabled={ButtonDisabled || d3ButtonDisabled}\r\n                            />\r\n                            <Button\r\n                                type=\"submit\"\r\n                                className={`w-full transition-all duration-300 ${ButtonDisabled || d3ButtonDisabled ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-500 hover:bg-blue-600'}`}\r\n                                onClick={() => {\r\n                                    setPlotCode(null);\r\n                                    setPlotUrl(null);\r\n                                    setDataD3plot(null);\r\n                                }}\r\n                                disabled={ButtonDisabled || d3ButtonDisabled}\r\n                            >\r\n                                Generate Plot\r\n                            </Button>\r\n                        </form>\r\n                    </CardContent>\r\n                </Card>\r\n\r\n                {/* D3 Plot Button */}\r\n                <Card className=\"shadow-md\">\r\n                    <CardContent>\r\n                        <form onSubmit={handleD3Submit} className=\"space-y-4\">\r\n                            <Button\r\n                                type=\"submit\"\r\n                                className={`w-full transition-all duration-300 ${ButtonDisabled || d3ButtonDisabled ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-500 hover:bg-blue-600'}`}\r\n                                onClick={() => {\r\n                                    setPlotCode(null);\r\n                                    setPlotUrl(null);\r\n                                    setDataD3plot(null);\r\n                                }}\r\n                                disabled={ButtonDisabled || d3ButtonDisabled}\r\n                            >\r\n                                Not Just a Graph!\r\n                            </Button>\r\n                        </form>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n\r\n            {/* Right side (Plot Image) */}\r\n            <div className=\"flex justify-center items-center w-full mt-6 md:mt-0\">\r\n                <div className=\"w-full max-w-10xl h-96 bg-gray-100 rounded-lg shadow-md flex justify-center items-center\">\r\n                    {/* Show Loading or Placeholder Text */}\r\n                    {!plotUrl  && !dataD3Plot && !errorMessage && !ButtonDisabled && !d3ButtonDisabled && (\r\n                        <span className=\"text-gray-600 text-xl\">Waiting for your request...</span>\r\n                    )}\r\n\r\n                    {/* Show Plot Image */}\r\n                    {plotUrl && (\r\n                        <img\r\n                            src={`${plotUrl}?rand=${Math.random()}`}\r\n                            alt=\"Generated plot\"\r\n                            className=\"object-contain w-full h-full rounded-lg\"\r\n                        />\r\n                    )}\r\n\r\n                    {/* Loading Animation */}\r\n                    {!plotCode && !dataD3Plot && !errorMessage && (\r\n                        <div id=\"loading-animation\" className=\"absolute flex items-center justify-center space-x-2\">\r\n                            <Loader className=\"text-blue-500\" /> {/* Shadcn loader */}\r\n                            <span>Generating Plot...</span>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {errorMessage && (\r\n                <div className=\"mt-4 p-2 bg-red-100 text-red-700 border border-red-400 rounded\">\r\n                    <strong>Error:</strong> {errorMessage}\r\n                </div>\r\n            )}\r\n\r\n            {/* Footer */}\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default PlotGenerator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}