{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'dotDivide';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix', 'concat', 'SparseMatrix'];\nexport var createDotDivide = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    divideScalar,\n    DenseMatrix,\n    concat,\n    SparseMatrix\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    SparseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\r\n   * Divide two matrices element wise. The function accepts both matrices and\r\n   * scalar values.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.dotDivide(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.dotDivide(2, 4)   // returns 0.5\r\n   *\r\n   *    a = [[9, 5], [6, 1]]\r\n   *    b = [[3, 2], [5, 2]]\r\n   *\r\n   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]\r\n   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]\r\n   *\r\n   * See also:\r\n   *\r\n   *    divide, multiply, dotMultiply\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`\r\n   */\n  return typed(name, matrixAlgorithmSuite({\n    elop: divideScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});","map":{"version":3,"names":["factory","createMatAlgo02xDS0","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo11xS0s","createMatAlgo12xSfs","createMatrixAlgorithmSuite","name","dependencies","createDotDivide","_ref","typed","matrix","equalScalar","divideScalar","DenseMatrix","concat","SparseMatrix","matAlgo02xDS0","matAlgo03xDSf","matAlgo07xSSf","matAlgo11xS0s","matAlgo12xSfs","matrixAlgorithmSuite","elop","SS","DS","SD","Ss","sS"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/dotDivide.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\r\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\r\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\r\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'dotDivide';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix', 'concat', 'SparseMatrix'];\r\nexport var createDotDivide = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    divideScalar,\r\n    DenseMatrix,\r\n    concat,\r\n    SparseMatrix\r\n  } = _ref;\r\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo03xDSf = createMatAlgo03xDSf({\r\n    typed\r\n  });\r\n  var matAlgo07xSSf = createMatAlgo07xSSf({\r\n    typed,\r\n    SparseMatrix\r\n  });\r\n  var matAlgo11xS0s = createMatAlgo11xS0s({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n\r\n  /**\r\n   * Divide two matrices element wise. The function accepts both matrices and\r\n   * scalar values.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.dotDivide(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.dotDivide(2, 4)   // returns 0.5\r\n   *\r\n   *    a = [[9, 5], [6, 1]]\r\n   *    b = [[3, 2], [5, 2]]\r\n   *\r\n   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]\r\n   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]\r\n   *\r\n   * See also:\r\n   *\r\n   *    divide, multiply, dotMultiply\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`\r\n   */\r\n  return typed(name, matrixAlgorithmSuite({\r\n    elop: divideScalar,\r\n    SS: matAlgo07xSSf,\r\n    DS: matAlgo03xDSf,\r\n    SD: matAlgo02xDS0,\r\n    Ss: matAlgo11xS0s,\r\n    sS: matAlgo12xSfs\r\n  }));\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,0BAA0B,QAAQ,iDAAiD;AAC5F,IAAIC,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,cAAc,EAAE,aAAa,EAAE,QAAQ,EAAE,cAAc,CAAC;AAC9G,OAAO,IAAIC,eAAe,GAAG,eAAeT,OAAO,CAACO,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC9E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,WAAW;IACXC,YAAY;IACZC,WAAW;IACXC,MAAM;IACNC;EACF,CAAC,GAAGP,IAAI;EACR,IAAIQ,aAAa,GAAGjB,mBAAmB,CAAC;IACtCU,KAAK;IACLE;EACF,CAAC,CAAC;EACF,IAAIM,aAAa,GAAGjB,mBAAmB,CAAC;IACtCS;EACF,CAAC,CAAC;EACF,IAAIS,aAAa,GAAGjB,mBAAmB,CAAC;IACtCQ,KAAK;IACLM;EACF,CAAC,CAAC;EACF,IAAII,aAAa,GAAGjB,mBAAmB,CAAC;IACtCO,KAAK;IACLE;EACF,CAAC,CAAC;EACF,IAAIS,aAAa,GAAGjB,mBAAmB,CAAC;IACtCM,KAAK;IACLI;EACF,CAAC,CAAC;EACF,IAAIQ,oBAAoB,GAAGjB,0BAA0B,CAAC;IACpDK,KAAK;IACLC,MAAM;IACNI;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOL,KAAK,CAACJ,IAAI,EAAEgB,oBAAoB,CAAC;IACtCC,IAAI,EAAEV,YAAY;IAClBW,EAAE,EAAEL,aAAa;IACjBM,EAAE,EAAEP,aAAa;IACjBQ,EAAE,EAAET,aAAa;IACjBU,EAAE,EAAEP,aAAa;IACjBQ,EAAE,EAAEP;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}