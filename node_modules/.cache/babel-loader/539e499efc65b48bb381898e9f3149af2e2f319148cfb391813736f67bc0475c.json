{"ast":null,"code":"import { isIndex } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { isEmptyIndex, validateIndex, validateIndexSourceSize } from '../../utils/array.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix', 'zeros', 'add'];\nexport var createSubset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    zeros,\n    add\n  } = _ref;\n  /**\r\n   * Get or set a subset of a matrix or string.\r\n   *\r\n   * Syntax:\r\n   *     math.subset(value, index)                                // retrieve a subset\r\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\r\n   *\r\n   * Examples:\r\n   *\r\n   *     // get a subset\r\n   *     const d = [[1, 2], [3, 4]]\r\n   *     math.subset(d, math.index(1, 0))             // returns 3\r\n   *     math.subset(d, math.index([0, 1], 1))        // returns [[2], [4]]\r\n   *     math.subset(d, math.index([false, true], 0)) // returns [[3]]\r\n   *\r\n   *     // replace a subset\r\n   *     const e = []\r\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 0, 6]]\r\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 0, 6], [0, 7, 0]]\r\n   *     math.subset(g, math.index([false, true], 1), 8)          // returns [[5, 0, 6], [0, 8, 0]]\r\n   *\r\n   *     // get submatrix using ranges\r\n   *     const M = [\r\n   *       [1,2,3],\r\n   *       [4,5,6],\r\n   *       [7,8,9]\r\n   *     ]\r\n   *     math.subset(M, math.index(math.range(0,2), math.range(0,3))) // [[1, 2, 3], [4, 5, 6]]\r\n   *\r\n   * See also:\r\n   *\r\n   *     size, resize, squeeze, index\r\n   *\r\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\r\n   * @param {Index} index\r\n   *    For each dimension of the target, specifies an index or a list of\r\n   *    indices to fetch or set. `subset` uses the cartesian product of\r\n   *    the indices specified in each dimension.\r\n   * @param {*} [replacement]                 An array, matrix, or scalar.\r\n   *                                          If provided, the subset is replaced with replacement.\r\n   *                                          If not provided, the subset is returned\r\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\r\n   *                                          the matrix is resized. If not provided,\r\n   *                                          math.matrix elements will be left undefined.\r\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\r\n   */\n\n  return typed(name, {\n    // get subset\n    'Matrix, Index': function Matrix_Index(value, index) {\n      if (isEmptyIndex(index)) {\n        return matrix();\n      }\n      validateIndexSourceSize(value, index);\n      return value.subset(index);\n    },\n    'Array, Index': typed.referTo('Matrix, Index', function (subsetRef) {\n      return function (value, index) {\n        var subsetResult = subsetRef(matrix(value), index);\n        return index.isScalar() ? subsetResult : subsetResult.valueOf();\n      };\n    }),\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Matrix, Index, any, any': function Matrix_Index_any_any(value, index, replacement, defaultValue) {\n      if (isEmptyIndex(index)) {\n        return value;\n      }\n      validateIndexSourceSize(value, index);\n      return value.clone().subset(index, _broadcastReplacement(replacement, index), defaultValue);\n    },\n    'Array, Index, any, any': typed.referTo('Matrix, Index, any, any', function (subsetRef) {\n      return function (value, index, replacement, defaultValue) {\n        var subsetResult = subsetRef(matrix(value), index, replacement, defaultValue);\n        return subsetResult.isMatrix ? subsetResult.valueOf() : subsetResult;\n      };\n    }),\n    'Array, Index, any': typed.referTo('Matrix, Index, any, any', function (subsetRef) {\n      return function (value, index, replacement) {\n        return subsetRef(matrix(value), index, replacement, undefined).valueOf();\n      };\n    }),\n    'Matrix, Index, any': typed.referTo('Matrix, Index, any, any', function (subsetRef) {\n      return function (value, index, replacement) {\n        return subsetRef(value, index, replacement, undefined);\n      };\n    }),\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n\n  /**\r\n   * Broadcasts a replacment value to be the same size as index\r\n   * @param {number | BigNumber | Array | Matrix} replacement Replacement value to try to broadcast\r\n   * @param {*} index Index value\r\n   * @returns broadcasted replacement that matches the size of index\r\n   */\n\n  function _broadcastReplacement(replacement, index) {\n    if (typeof replacement === 'string') {\n      throw new Error('can\\'t boradcast a string');\n    }\n    if (index._isScalar) {\n      return replacement;\n    }\n    var indexSize = index.size();\n    if (indexSize.every(d => d > 0)) {\n      try {\n        return add(replacement, zeros(indexSize));\n      } catch (error) {\n        return replacement;\n      }\n    } else {\n      return replacement;\n    }\n  }\n});\n\n/**\r\n * Retrieve a subset of a string\r\n * @param {string} str            string from which to get a substring\r\n * @param {Index} index           An index or list of indices (character positions)\r\n * @returns {string} substring\r\n * @private\r\n */\nfunction _getSubstring(str, index) {\n  if (!isIndex(index)) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (isEmptyIndex(index)) {\n    return '';\n  }\n  validateIndexSourceSize(Array.from(str), index);\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  validateIndex(index.min()[0], strLen);\n  validateIndex(index.max()[0], strLen);\n  var range = index.dimension(0);\n  var substr = '';\n  range.forEach(function (v) {\n    substr += str.charAt(v);\n  });\n  return substr;\n}\n\n/**\r\n * Replace a substring in a string\r\n * @param {string} str            string to be replaced\r\n * @param {Index} index           An index or list of indices (character positions)\r\n * @param {string} replacement    Replacement string\r\n * @param {string} [defaultValue] Default value to be used when resizing\r\n *                                the string. is ' ' by default\r\n * @returns {string} result\r\n * @private\r\n */\nfunction _setSubstring(str, index, replacement, defaultValue) {\n  if (!index || index.isIndex !== true) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (isEmptyIndex(index)) {\n    return str;\n  }\n  validateIndexSourceSize(Array.from(str), index);\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n  if (defaultValue !== undefined) {\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n      throw new TypeError('Single character expected as defaultValue');\n    }\n  } else {\n    defaultValue = ' ';\n  }\n  var range = index.dimension(0);\n  var len = range.size()[0];\n  if (len !== replacement.length) {\n    throw new DimensionError(range.size()[0], replacement.length);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  validateIndex(index.min()[0]);\n  validateIndex(index.max()[0]);\n\n  // copy the string into an array with characters\n  var chars = [];\n  for (var i = 0; i < strLen; i++) {\n    chars[i] = str.charAt(i);\n  }\n  range.forEach(function (v, i) {\n    chars[v] = replacement.charAt(i[0]);\n  });\n\n  // initialize undefined characters with a space\n  if (chars.length > strLen) {\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n      if (!chars[_i]) {\n        chars[_i] = defaultValue;\n      }\n    }\n  }\n  return chars.join('');\n}\n\n/**\r\n * Retrieve a property from an object\r\n * @param {Object} object\r\n * @param {Index} index\r\n * @return {*} Returns the value of the property\r\n * @private\r\n */\nfunction _getObjectProperty(object, index) {\n  if (isEmptyIndex(index)) {\n    return undefined;\n  }\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n  return getSafeProperty(object, key);\n}\n\n/**\r\n * Set a property on an object\r\n * @param {Object} object\r\n * @param {Index} index\r\n * @param {*} replacement\r\n * @return {*} Returns the updated object\r\n * @private\r\n */\nfunction _setObjectProperty(object, index, replacement) {\n  if (isEmptyIndex(index)) {\n    return object;\n  }\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  // clone the object, and apply the property to the clone\n  var updated = clone(object);\n  setSafeProperty(updated, key, replacement);\n  return updated;\n}","map":{"version":3,"names":["isIndex","clone","isEmptyIndex","validateIndex","validateIndexSourceSize","getSafeProperty","setSafeProperty","DimensionError","factory","name","dependencies","createSubset","_ref","typed","matrix","zeros","add","Matrix_Index","value","index","subset","referTo","subsetRef","subsetResult","isScalar","valueOf","_getObjectProperty","_getSubstring","Matrix_Index_any_any","replacement","defaultValue","_broadcastReplacement","isMatrix","undefined","_setSubstring","_setObjectProperty","Error","_isScalar","indexSize","size","every","d","error","str","TypeError","Array","from","length","strLen","min","max","range","dimension","substr","forEach","v","charAt","len","chars","i","_i","_len","join","object","key","updated"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/matrix/subset.js"],"sourcesContent":["import { isIndex } from '../../utils/is.js';\r\nimport { clone } from '../../utils/object.js';\r\nimport { isEmptyIndex, validateIndex, validateIndexSourceSize } from '../../utils/array.js';\r\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\r\nimport { DimensionError } from '../../error/DimensionError.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'subset';\r\nvar dependencies = ['typed', 'matrix', 'zeros', 'add'];\r\nexport var createSubset = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    zeros,\r\n    add\r\n  } = _ref;\r\n  /**\r\n   * Get or set a subset of a matrix or string.\r\n   *\r\n   * Syntax:\r\n   *     math.subset(value, index)                                // retrieve a subset\r\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\r\n   *\r\n   * Examples:\r\n   *\r\n   *     // get a subset\r\n   *     const d = [[1, 2], [3, 4]]\r\n   *     math.subset(d, math.index(1, 0))             // returns 3\r\n   *     math.subset(d, math.index([0, 1], 1))        // returns [[2], [4]]\r\n   *     math.subset(d, math.index([false, true], 0)) // returns [[3]]\r\n   *\r\n   *     // replace a subset\r\n   *     const e = []\r\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 0, 6]]\r\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 0, 6], [0, 7, 0]]\r\n   *     math.subset(g, math.index([false, true], 1), 8)          // returns [[5, 0, 6], [0, 8, 0]]\r\n   *\r\n   *     // get submatrix using ranges\r\n   *     const M = [\r\n   *       [1,2,3],\r\n   *       [4,5,6],\r\n   *       [7,8,9]\r\n   *     ]\r\n   *     math.subset(M, math.index(math.range(0,2), math.range(0,3))) // [[1, 2, 3], [4, 5, 6]]\r\n   *\r\n   * See also:\r\n   *\r\n   *     size, resize, squeeze, index\r\n   *\r\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\r\n   * @param {Index} index\r\n   *    For each dimension of the target, specifies an index or a list of\r\n   *    indices to fetch or set. `subset` uses the cartesian product of\r\n   *    the indices specified in each dimension.\r\n   * @param {*} [replacement]                 An array, matrix, or scalar.\r\n   *                                          If provided, the subset is replaced with replacement.\r\n   *                                          If not provided, the subset is returned\r\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\r\n   *                                          the matrix is resized. If not provided,\r\n   *                                          math.matrix elements will be left undefined.\r\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\r\n   */\r\n\r\n  return typed(name, {\r\n    // get subset\r\n    'Matrix, Index': function Matrix_Index(value, index) {\r\n      if (isEmptyIndex(index)) {\r\n        return matrix();\r\n      }\r\n      validateIndexSourceSize(value, index);\r\n      return value.subset(index);\r\n    },\r\n    'Array, Index': typed.referTo('Matrix, Index', function (subsetRef) {\r\n      return function (value, index) {\r\n        var subsetResult = subsetRef(matrix(value), index);\r\n        return index.isScalar() ? subsetResult : subsetResult.valueOf();\r\n      };\r\n    }),\r\n    'Object, Index': _getObjectProperty,\r\n    'string, Index': _getSubstring,\r\n    // set subset\r\n    'Matrix, Index, any, any': function Matrix_Index_any_any(value, index, replacement, defaultValue) {\r\n      if (isEmptyIndex(index)) {\r\n        return value;\r\n      }\r\n      validateIndexSourceSize(value, index);\r\n      return value.clone().subset(index, _broadcastReplacement(replacement, index), defaultValue);\r\n    },\r\n    'Array, Index, any, any': typed.referTo('Matrix, Index, any, any', function (subsetRef) {\r\n      return function (value, index, replacement, defaultValue) {\r\n        var subsetResult = subsetRef(matrix(value), index, replacement, defaultValue);\r\n        return subsetResult.isMatrix ? subsetResult.valueOf() : subsetResult;\r\n      };\r\n    }),\r\n    'Array, Index, any': typed.referTo('Matrix, Index, any, any', function (subsetRef) {\r\n      return function (value, index, replacement) {\r\n        return subsetRef(matrix(value), index, replacement, undefined).valueOf();\r\n      };\r\n    }),\r\n    'Matrix, Index, any': typed.referTo('Matrix, Index, any, any', function (subsetRef) {\r\n      return function (value, index, replacement) {\r\n        return subsetRef(value, index, replacement, undefined);\r\n      };\r\n    }),\r\n    'string, Index, string': _setSubstring,\r\n    'string, Index, string, string': _setSubstring,\r\n    'Object, Index, any': _setObjectProperty\r\n  });\r\n\r\n  /**\r\n   * Broadcasts a replacment value to be the same size as index\r\n   * @param {number | BigNumber | Array | Matrix} replacement Replacement value to try to broadcast\r\n   * @param {*} index Index value\r\n   * @returns broadcasted replacement that matches the size of index\r\n   */\r\n\r\n  function _broadcastReplacement(replacement, index) {\r\n    if (typeof replacement === 'string') {\r\n      throw new Error('can\\'t boradcast a string');\r\n    }\r\n    if (index._isScalar) {\r\n      return replacement;\r\n    }\r\n    var indexSize = index.size();\r\n    if (indexSize.every(d => d > 0)) {\r\n      try {\r\n        return add(replacement, zeros(indexSize));\r\n      } catch (error) {\r\n        return replacement;\r\n      }\r\n    } else {\r\n      return replacement;\r\n    }\r\n  }\r\n});\r\n\r\n/**\r\n * Retrieve a subset of a string\r\n * @param {string} str            string from which to get a substring\r\n * @param {Index} index           An index or list of indices (character positions)\r\n * @returns {string} substring\r\n * @private\r\n */\r\nfunction _getSubstring(str, index) {\r\n  if (!isIndex(index)) {\r\n    // TODO: better error message\r\n    throw new TypeError('Index expected');\r\n  }\r\n  if (isEmptyIndex(index)) {\r\n    return '';\r\n  }\r\n  validateIndexSourceSize(Array.from(str), index);\r\n  if (index.size().length !== 1) {\r\n    throw new DimensionError(index.size().length, 1);\r\n  }\r\n\r\n  // validate whether the range is out of range\r\n  var strLen = str.length;\r\n  validateIndex(index.min()[0], strLen);\r\n  validateIndex(index.max()[0], strLen);\r\n  var range = index.dimension(0);\r\n  var substr = '';\r\n  range.forEach(function (v) {\r\n    substr += str.charAt(v);\r\n  });\r\n  return substr;\r\n}\r\n\r\n/**\r\n * Replace a substring in a string\r\n * @param {string} str            string to be replaced\r\n * @param {Index} index           An index or list of indices (character positions)\r\n * @param {string} replacement    Replacement string\r\n * @param {string} [defaultValue] Default value to be used when resizing\r\n *                                the string. is ' ' by default\r\n * @returns {string} result\r\n * @private\r\n */\r\nfunction _setSubstring(str, index, replacement, defaultValue) {\r\n  if (!index || index.isIndex !== true) {\r\n    // TODO: better error message\r\n    throw new TypeError('Index expected');\r\n  }\r\n  if (isEmptyIndex(index)) {\r\n    return str;\r\n  }\r\n  validateIndexSourceSize(Array.from(str), index);\r\n  if (index.size().length !== 1) {\r\n    throw new DimensionError(index.size().length, 1);\r\n  }\r\n  if (defaultValue !== undefined) {\r\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\r\n      throw new TypeError('Single character expected as defaultValue');\r\n    }\r\n  } else {\r\n    defaultValue = ' ';\r\n  }\r\n  var range = index.dimension(0);\r\n  var len = range.size()[0];\r\n  if (len !== replacement.length) {\r\n    throw new DimensionError(range.size()[0], replacement.length);\r\n  }\r\n\r\n  // validate whether the range is out of range\r\n  var strLen = str.length;\r\n  validateIndex(index.min()[0]);\r\n  validateIndex(index.max()[0]);\r\n\r\n  // copy the string into an array with characters\r\n  var chars = [];\r\n  for (var i = 0; i < strLen; i++) {\r\n    chars[i] = str.charAt(i);\r\n  }\r\n  range.forEach(function (v, i) {\r\n    chars[v] = replacement.charAt(i[0]);\r\n  });\r\n\r\n  // initialize undefined characters with a space\r\n  if (chars.length > strLen) {\r\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\r\n      if (!chars[_i]) {\r\n        chars[_i] = defaultValue;\r\n      }\r\n    }\r\n  }\r\n  return chars.join('');\r\n}\r\n\r\n/**\r\n * Retrieve a property from an object\r\n * @param {Object} object\r\n * @param {Index} index\r\n * @return {*} Returns the value of the property\r\n * @private\r\n */\r\nfunction _getObjectProperty(object, index) {\r\n  if (isEmptyIndex(index)) {\r\n    return undefined;\r\n  }\r\n  if (index.size().length !== 1) {\r\n    throw new DimensionError(index.size(), 1);\r\n  }\r\n  var key = index.dimension(0);\r\n  if (typeof key !== 'string') {\r\n    throw new TypeError('String expected as index to retrieve an object property');\r\n  }\r\n  return getSafeProperty(object, key);\r\n}\r\n\r\n/**\r\n * Set a property on an object\r\n * @param {Object} object\r\n * @param {Index} index\r\n * @param {*} replacement\r\n * @return {*} Returns the updated object\r\n * @private\r\n */\r\nfunction _setObjectProperty(object, index, replacement) {\r\n  if (isEmptyIndex(index)) {\r\n    return object;\r\n  }\r\n  if (index.size().length !== 1) {\r\n    throw new DimensionError(index.size(), 1);\r\n  }\r\n  var key = index.dimension(0);\r\n  if (typeof key !== 'string') {\r\n    throw new TypeError('String expected as index to retrieve an object property');\r\n  }\r\n\r\n  // clone the object, and apply the property to the clone\r\n  var updated = clone(object);\r\n  setSafeProperty(updated, key, replacement);\r\n  return updated;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}