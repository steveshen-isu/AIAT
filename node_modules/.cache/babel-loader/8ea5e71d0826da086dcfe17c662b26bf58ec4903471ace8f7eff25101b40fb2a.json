{"ast":null,"code":"import Complex from 'complex.js';\nimport { format } from '../../utils/number.js';\nimport { isNumber, isUnit } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Complex';\nvar dependencies = [];\nexport var createComplexClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\r\n   * Attach type information\r\n   */\n  Object.defineProperty(Complex, 'name', {\n    value: 'Complex'\n  });\n  Complex.prototype.constructor = Complex;\n  Complex.prototype.type = 'Complex';\n  Complex.prototype.isComplex = true;\n\n  /**\r\n   * Get a JSON representation of the complex number\r\n   * @returns {Object} Returns a JSON object structured as:\r\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\r\n   */\n  Complex.prototype.toJSON = function () {\n    return {\n      mathjs: 'Complex',\n      re: this.re,\n      im: this.im\n    };\n  };\n\n  /*\r\n   * Return the value of the complex number in polar notation\r\n   * The angle phi will be set in the interval of [-pi, pi].\r\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\r\n   */\n  Complex.prototype.toPolar = function () {\n    return {\n      r: this.abs(),\n      phi: this.arg()\n    };\n  };\n\n  /**\r\n   * Get a string representation of the complex number,\r\n   * with optional formatting options.\r\n   * @param {Object | number | Function} [options]  Formatting options. See\r\n   *                                                lib/utils/number:format for a\r\n   *                                                description of the available\r\n   *                                                options.\r\n   * @return {string} str\r\n   */\n  Complex.prototype.format = function (options) {\n    var str = '';\n    var im = this.im;\n    var re = this.re;\n    var strRe = format(this.re, options);\n    var strIm = format(this.im, options);\n\n    // round either re or im when smaller than the configured precision\n    var precision = isNumber(options) ? options : options ? options.precision : null;\n    if (precision !== null) {\n      var epsilon = Math.pow(10, -precision);\n      if (Math.abs(re / im) < epsilon) {\n        re = 0;\n      }\n      if (Math.abs(im / re) < epsilon) {\n        im = 0;\n      }\n    }\n    if (im === 0) {\n      // real value\n      str = strRe;\n    } else if (re === 0) {\n      // purely complex value\n      if (im === 1) {\n        str = 'i';\n      } else if (im === -1) {\n        str = '-i';\n      } else {\n        str = strIm + 'i';\n      }\n    } else {\n      // complex value\n      if (im < 0) {\n        if (im === -1) {\n          str = strRe + ' - i';\n        } else {\n          str = strRe + ' - ' + strIm.substring(1) + 'i';\n        }\n      } else {\n        if (im === 1) {\n          str = strRe + ' + i';\n        } else {\n          str = strRe + ' + ' + strIm + 'i';\n        }\n      }\n    }\n    return str;\n  };\n\n  /**\r\n   * Create a complex number from polar coordinates\r\n   *\r\n   * Usage:\r\n   *\r\n   *     Complex.fromPolar(r: number, phi: number) : Complex\r\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\r\n   *\r\n   * @param {*} args...\r\n   * @return {Complex}\r\n   */\n  Complex.fromPolar = function (args) {\n    switch (arguments.length) {\n      case 1:\n        {\n          var arg = arguments[0];\n          if (typeof arg === 'object') {\n            return Complex(arg);\n          } else {\n            throw new TypeError('Input has to be an object with r and phi keys.');\n          }\n        }\n      case 2:\n        {\n          var r = arguments[0];\n          var phi = arguments[1];\n          if (isNumber(r)) {\n            if (isUnit(phi) && phi.hasBase('ANGLE')) {\n              // convert unit to a number in radians\n              phi = phi.toNumber('rad');\n            }\n            if (isNumber(phi)) {\n              return new Complex({\n                r,\n                phi\n              });\n            }\n            throw new TypeError('Phi is not a number nor an angle unit.');\n          } else {\n            throw new TypeError('Radius r is not a number.');\n          }\n        }\n      default:\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n    }\n  };\n  Complex.prototype.valueOf = Complex.prototype.toString;\n\n  /**\r\n   * Create a Complex number from a JSON object\r\n   * @param {Object} json  A JSON Object structured as\r\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\r\n   *                       All properties are optional, default values\r\n   *                       for `re` and `im` are 0.\r\n   * @return {Complex} Returns a new Complex number\r\n   */\n  Complex.fromJSON = function (json) {\n    return new Complex(json);\n  };\n\n  /**\r\n   * Compare two complex numbers, `a` and `b`:\r\n   *\r\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\r\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\r\n   * - Returns 1 when the real parts are equal\r\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\r\n   * - Returns -1 when the real parts are equal\r\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\r\n   * - Returns 0 when both real and imaginary parts are equal.\r\n   *\r\n   * @params {Complex} a\r\n   * @params {Complex} b\r\n   * @returns {number} Returns the comparison result: -1, 0, or 1\r\n   */\n  Complex.compare = function (a, b) {\n    if (a.re > b.re) {\n      return 1;\n    }\n    if (a.re < b.re) {\n      return -1;\n    }\n    if (a.im > b.im) {\n      return 1;\n    }\n    if (a.im < b.im) {\n      return -1;\n    }\n    return 0;\n  };\n  return Complex;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["Complex","format","isNumber","isUnit","factory","name","dependencies","createComplexClass","Object","defineProperty","value","prototype","constructor","type","isComplex","toJSON","mathjs","re","im","toPolar","r","abs","phi","arg","options","str","strRe","strIm","precision","epsilon","Math","pow","substring","fromPolar","args","arguments","length","TypeError","hasBase","toNumber","SyntaxError","valueOf","toString","fromJSON","json","compare","a","b","isClass"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/type/complex/Complex.js"],"sourcesContent":["import Complex from 'complex.js';\r\nimport { format } from '../../utils/number.js';\r\nimport { isNumber, isUnit } from '../../utils/is.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'Complex';\r\nvar dependencies = [];\r\nexport var createComplexClass = /* #__PURE__ */factory(name, dependencies, () => {\r\n  /**\r\n   * Attach type information\r\n   */\r\n  Object.defineProperty(Complex, 'name', {\r\n    value: 'Complex'\r\n  });\r\n  Complex.prototype.constructor = Complex;\r\n  Complex.prototype.type = 'Complex';\r\n  Complex.prototype.isComplex = true;\r\n\r\n  /**\r\n   * Get a JSON representation of the complex number\r\n   * @returns {Object} Returns a JSON object structured as:\r\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\r\n   */\r\n  Complex.prototype.toJSON = function () {\r\n    return {\r\n      mathjs: 'Complex',\r\n      re: this.re,\r\n      im: this.im\r\n    };\r\n  };\r\n\r\n  /*\r\n   * Return the value of the complex number in polar notation\r\n   * The angle phi will be set in the interval of [-pi, pi].\r\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\r\n   */\r\n  Complex.prototype.toPolar = function () {\r\n    return {\r\n      r: this.abs(),\r\n      phi: this.arg()\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Get a string representation of the complex number,\r\n   * with optional formatting options.\r\n   * @param {Object | number | Function} [options]  Formatting options. See\r\n   *                                                lib/utils/number:format for a\r\n   *                                                description of the available\r\n   *                                                options.\r\n   * @return {string} str\r\n   */\r\n  Complex.prototype.format = function (options) {\r\n    var str = '';\r\n    var im = this.im;\r\n    var re = this.re;\r\n    var strRe = format(this.re, options);\r\n    var strIm = format(this.im, options);\r\n\r\n    // round either re or im when smaller than the configured precision\r\n    var precision = isNumber(options) ? options : options ? options.precision : null;\r\n    if (precision !== null) {\r\n      var epsilon = Math.pow(10, -precision);\r\n      if (Math.abs(re / im) < epsilon) {\r\n        re = 0;\r\n      }\r\n      if (Math.abs(im / re) < epsilon) {\r\n        im = 0;\r\n      }\r\n    }\r\n    if (im === 0) {\r\n      // real value\r\n      str = strRe;\r\n    } else if (re === 0) {\r\n      // purely complex value\r\n      if (im === 1) {\r\n        str = 'i';\r\n      } else if (im === -1) {\r\n        str = '-i';\r\n      } else {\r\n        str = strIm + 'i';\r\n      }\r\n    } else {\r\n      // complex value\r\n      if (im < 0) {\r\n        if (im === -1) {\r\n          str = strRe + ' - i';\r\n        } else {\r\n          str = strRe + ' - ' + strIm.substring(1) + 'i';\r\n        }\r\n      } else {\r\n        if (im === 1) {\r\n          str = strRe + ' + i';\r\n        } else {\r\n          str = strRe + ' + ' + strIm + 'i';\r\n        }\r\n      }\r\n    }\r\n    return str;\r\n  };\r\n\r\n  /**\r\n   * Create a complex number from polar coordinates\r\n   *\r\n   * Usage:\r\n   *\r\n   *     Complex.fromPolar(r: number, phi: number) : Complex\r\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\r\n   *\r\n   * @param {*} args...\r\n   * @return {Complex}\r\n   */\r\n  Complex.fromPolar = function (args) {\r\n    switch (arguments.length) {\r\n      case 1:\r\n        {\r\n          var arg = arguments[0];\r\n          if (typeof arg === 'object') {\r\n            return Complex(arg);\r\n          } else {\r\n            throw new TypeError('Input has to be an object with r and phi keys.');\r\n          }\r\n        }\r\n      case 2:\r\n        {\r\n          var r = arguments[0];\r\n          var phi = arguments[1];\r\n          if (isNumber(r)) {\r\n            if (isUnit(phi) && phi.hasBase('ANGLE')) {\r\n              // convert unit to a number in radians\r\n              phi = phi.toNumber('rad');\r\n            }\r\n            if (isNumber(phi)) {\r\n              return new Complex({\r\n                r,\r\n                phi\r\n              });\r\n            }\r\n            throw new TypeError('Phi is not a number nor an angle unit.');\r\n          } else {\r\n            throw new TypeError('Radius r is not a number.');\r\n          }\r\n        }\r\n      default:\r\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\r\n    }\r\n  };\r\n  Complex.prototype.valueOf = Complex.prototype.toString;\r\n\r\n  /**\r\n   * Create a Complex number from a JSON object\r\n   * @param {Object} json  A JSON Object structured as\r\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\r\n   *                       All properties are optional, default values\r\n   *                       for `re` and `im` are 0.\r\n   * @return {Complex} Returns a new Complex number\r\n   */\r\n  Complex.fromJSON = function (json) {\r\n    return new Complex(json);\r\n  };\r\n\r\n  /**\r\n   * Compare two complex numbers, `a` and `b`:\r\n   *\r\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\r\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\r\n   * - Returns 1 when the real parts are equal\r\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\r\n   * - Returns -1 when the real parts are equal\r\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\r\n   * - Returns 0 when both real and imaginary parts are equal.\r\n   *\r\n   * @params {Complex} a\r\n   * @params {Complex} b\r\n   * @returns {number} Returns the comparison result: -1, 0, or 1\r\n   */\r\n  Complex.compare = function (a, b) {\r\n    if (a.re > b.re) {\r\n      return 1;\r\n    }\r\n    if (a.re < b.re) {\r\n      return -1;\r\n    }\r\n    if (a.im > b.im) {\r\n      return 1;\r\n    }\r\n    if (a.im < b.im) {\r\n      return -1;\r\n    }\r\n    return 0;\r\n  };\r\n  return Complex;\r\n}, {\r\n  isClass: true\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}