{"ast":null,"code":"import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'mode';\nvar dependencies = ['typed', 'isNaN', 'isNumeric'];\nexport var createMode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isNaN,\n    isNumeric\n  } = _ref;\n  /**\r\n  * Computes the mode of a set of numbers or a list with values(numbers or characters).\r\n  * If there are multiple modes, it returns a list of those values.\r\n  *\r\n  * Syntax:\r\n  *\r\n  *     math.mode(a, b, c, ...)\r\n  *     math.mode(A)\r\n  *\r\n  * Examples:\r\n  *\r\n  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]\r\n  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]\r\n  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\r\n  *     math.mode('a','a','b','c')                           // returns [\"a\"]\r\n  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\r\n  *\r\n  * See also:\r\n  *\r\n  *     median,\r\n  *     mean\r\n  *\r\n  * @param {... *} args  A single matrix\r\n  * @return {*} The mode of all values\r\n  */\n  return typed(name, {\n    'Array | Matrix': _mode,\n    '...': function _(args) {\n      return _mode(args);\n    }\n  });\n\n  /**\r\n   * Calculates the mode in an 1-dimensional array\r\n   * @param {Array} values\r\n   * @return {Array} mode\r\n   * @private\r\n   */\n  function _mode(values) {\n    values = flatten(values.valueOf());\n    var num = values.length;\n    if (num === 0) {\n      throw new Error('Cannot calculate mode of an empty array');\n    }\n    var count = {};\n    var mode = [];\n    var max = 0;\n    for (var i = 0; i < values.length; i++) {\n      var value = values[i];\n      if (isNumeric(value) && isNaN(value)) {\n        throw new Error('Cannot calculate mode of an array containing NaN values');\n      }\n      if (!(value in count)) {\n        count[value] = 0;\n      }\n      count[value]++;\n      if (count[value] === max) {\n        mode.push(value);\n      } else if (count[value] > max) {\n        max = count[value];\n        mode = [value];\n      }\n    }\n    return mode;\n  }\n});","map":{"version":3,"names":["flatten","factory","name","dependencies","createMode","_ref","typed","isNaN","isNumeric","_mode","_","args","values","valueOf","num","length","Error","count","mode","max","i","value","push"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/statistics/mode.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'mode';\r\nvar dependencies = ['typed', 'isNaN', 'isNumeric'];\r\nexport var createMode = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    isNaN,\r\n    isNumeric\r\n  } = _ref;\r\n  /**\r\n  * Computes the mode of a set of numbers or a list with values(numbers or characters).\r\n  * If there are multiple modes, it returns a list of those values.\r\n  *\r\n  * Syntax:\r\n  *\r\n  *     math.mode(a, b, c, ...)\r\n  *     math.mode(A)\r\n  *\r\n  * Examples:\r\n  *\r\n  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]\r\n  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]\r\n  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\r\n  *     math.mode('a','a','b','c')                           // returns [\"a\"]\r\n  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\r\n  *\r\n  * See also:\r\n  *\r\n  *     median,\r\n  *     mean\r\n  *\r\n  * @param {... *} args  A single matrix\r\n  * @return {*} The mode of all values\r\n  */\r\n  return typed(name, {\r\n    'Array | Matrix': _mode,\r\n    '...': function _(args) {\r\n      return _mode(args);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Calculates the mode in an 1-dimensional array\r\n   * @param {Array} values\r\n   * @return {Array} mode\r\n   * @private\r\n   */\r\n  function _mode(values) {\r\n    values = flatten(values.valueOf());\r\n    var num = values.length;\r\n    if (num === 0) {\r\n      throw new Error('Cannot calculate mode of an empty array');\r\n    }\r\n    var count = {};\r\n    var mode = [];\r\n    var max = 0;\r\n    for (var i = 0; i < values.length; i++) {\r\n      var value = values[i];\r\n      if (isNumeric(value) && isNaN(value)) {\r\n        throw new Error('Cannot calculate mode of an array containing NaN values');\r\n      }\r\n      if (!(value in count)) {\r\n        count[value] = 0;\r\n      }\r\n      count[value]++;\r\n      if (count[value] === max) {\r\n        mode.push(value);\r\n      } else if (count[value] > max) {\r\n        max = count[value];\r\n        mode = [value];\r\n      }\r\n    }\r\n    return mode;\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,WAAW,CAAC;AAClD,OAAO,IAAIC,UAAU,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,KAAK;IACLC;EACF,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAEO,KAAK;IACvB,KAAK,EAAE,SAASC,CAACA,CAACC,IAAI,EAAE;MACtB,OAAOF,KAAK,CAACE,IAAI,CAAC;IACpB;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;EACE,SAASF,KAAKA,CAACG,MAAM,EAAE;IACrBA,MAAM,GAAGZ,OAAO,CAACY,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;IAClC,IAAIC,GAAG,GAAGF,MAAM,CAACG,MAAM;IACvB,IAAID,GAAG,KAAK,CAAC,EAAE;MACb,MAAM,IAAIE,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IACA,IAAIC,KAAK,GAAG,CAAC,CAAC;IACd,IAAIC,IAAI,GAAG,EAAE;IACb,IAAIC,GAAG,GAAG,CAAC;IACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,MAAM,CAACG,MAAM,EAAEK,CAAC,EAAE,EAAE;MACtC,IAAIC,KAAK,GAAGT,MAAM,CAACQ,CAAC,CAAC;MACrB,IAAIZ,SAAS,CAACa,KAAK,CAAC,IAAId,KAAK,CAACc,KAAK,CAAC,EAAE;QACpC,MAAM,IAAIL,KAAK,CAAC,yDAAyD,CAAC;MAC5E;MACA,IAAI,EAAEK,KAAK,IAAIJ,KAAK,CAAC,EAAE;QACrBA,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC;MAClB;MACAJ,KAAK,CAACI,KAAK,CAAC,EAAE;MACd,IAAIJ,KAAK,CAACI,KAAK,CAAC,KAAKF,GAAG,EAAE;QACxBD,IAAI,CAACI,IAAI,CAACD,KAAK,CAAC;MAClB,CAAC,MAAM,IAAIJ,KAAK,CAACI,KAAK,CAAC,GAAGF,GAAG,EAAE;QAC7BA,GAAG,GAAGF,KAAK,CAACI,KAAK,CAAC;QAClBH,IAAI,GAAG,CAACG,KAAK,CAAC;MAChB;IACF;IACA,OAAOH,IAAI;EACb;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}