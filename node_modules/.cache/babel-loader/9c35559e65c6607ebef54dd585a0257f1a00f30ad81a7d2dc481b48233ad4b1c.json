{"ast":null,"code":"import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'mean';\nvar dependencies = ['typed', 'add', 'divide'];\nexport var createMean = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    divide\n  } = _ref;\n  /**\r\n   * Compute the mean value of matrix or a list with values.\r\n   * In case of a multidimensional array, the mean of the flattened array\r\n   * will be calculated. When `dim` is provided, the maximum over the selected\r\n   * dimension will be calculated. Parameter `dim` is zero-based.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.mean(a, b, c, ...)\r\n   *     math.mean(A)\r\n   *     math.mean(A, dimension)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\r\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\r\n   *\r\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\r\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\r\n   *\r\n   * See also:\r\n   *\r\n   *     median, min, max, sum, prod, std, variance\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The mean of all values\r\n   */\n  return typed(name, {\n    // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n    // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmeanDim,\n    // mean(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n      return _mean(args);\n    }\n  });\n\n  /**\r\n   * Calculate the mean value in an n-dimensional array, returning a\r\n   * n-1 dimensional array\r\n   * @param {Array} array\r\n   * @param {number} dim\r\n   * @return {number} mean\r\n   * @private\r\n   */\n  function _nmeanDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      var s = Array.isArray(array) ? arraySize(array) : array.size();\n      return divide(sum, s[dim]);\n    } catch (err) {\n      throw improveErrorMessage(err, 'mean');\n    }\n  }\n\n  /**\r\n   * Recursively calculate the mean value in an n-dimensional array\r\n   * @param {Array} array\r\n   * @return {number} mean\r\n   * @private\r\n   */\n  function _mean(array) {\n    var sum;\n    var num = 0;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'mean', value);\n      }\n    });\n    if (num === 0) {\n      throw new Error('Cannot calculate the mean of an empty array');\n    }\n    return divide(sum, num);\n  }\n});","map":{"version":3,"names":["containsCollections","deepForEach","reduce","arraySize","factory","improveErrorMessage","name","dependencies","createMean","_ref","typed","add","divide","_mean","_nmeanDim","_","args","TypeError","array","dim","sum","s","Array","isArray","size","err","num","value","undefined","Error"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/statistics/mean.js"],"sourcesContent":["import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\r\nimport { arraySize } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\r\nvar name = 'mean';\r\nvar dependencies = ['typed', 'add', 'divide'];\r\nexport var createMean = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    add,\r\n    divide\r\n  } = _ref;\r\n  /**\r\n   * Compute the mean value of matrix or a list with values.\r\n   * In case of a multidimensional array, the mean of the flattened array\r\n   * will be calculated. When `dim` is provided, the maximum over the selected\r\n   * dimension will be calculated. Parameter `dim` is zero-based.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.mean(a, b, c, ...)\r\n   *     math.mean(A)\r\n   *     math.mean(A, dimension)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\r\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\r\n   *\r\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\r\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\r\n   *\r\n   * See also:\r\n   *\r\n   *     median, min, max, sum, prod, std, variance\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The mean of all values\r\n   */\r\n  return typed(name, {\r\n    // mean([a, b, c, d, ...])\r\n    'Array | Matrix': _mean,\r\n    // mean([a, b, c, d, ...], dim)\r\n    'Array | Matrix, number | BigNumber': _nmeanDim,\r\n    // mean(a, b, c, d, ...)\r\n    '...': function _(args) {\r\n      if (containsCollections(args)) {\r\n        throw new TypeError('Scalar values expected in function mean');\r\n      }\r\n      return _mean(args);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Calculate the mean value in an n-dimensional array, returning a\r\n   * n-1 dimensional array\r\n   * @param {Array} array\r\n   * @param {number} dim\r\n   * @return {number} mean\r\n   * @private\r\n   */\r\n  function _nmeanDim(array, dim) {\r\n    try {\r\n      var sum = reduce(array, dim, add);\r\n      var s = Array.isArray(array) ? arraySize(array) : array.size();\r\n      return divide(sum, s[dim]);\r\n    } catch (err) {\r\n      throw improveErrorMessage(err, 'mean');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recursively calculate the mean value in an n-dimensional array\r\n   * @param {Array} array\r\n   * @return {number} mean\r\n   * @private\r\n   */\r\n  function _mean(array) {\r\n    var sum;\r\n    var num = 0;\r\n    deepForEach(array, function (value) {\r\n      try {\r\n        sum = sum === undefined ? value : add(sum, value);\r\n        num++;\r\n      } catch (err) {\r\n        throw improveErrorMessage(err, 'mean', value);\r\n      }\r\n    });\r\n    if (num === 0) {\r\n      throw new Error('Cannot calculate the mean of an empty array');\r\n    }\r\n    return divide(sum, num);\r\n  }\r\n});"],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,WAAW,EAAEC,MAAM,QAAQ,2BAA2B;AACpF,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC;AAC7C,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,GAAG;IACHC;EACF,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB;IACA,gBAAgB,EAAEO,KAAK;IACvB;IACA,oCAAoC,EAAEC,SAAS;IAC/C;IACA,KAAK,EAAE,SAASC,CAACA,CAACC,IAAI,EAAE;MACtB,IAAIhB,mBAAmB,CAACgB,IAAI,CAAC,EAAE;QAC7B,MAAM,IAAIC,SAAS,CAAC,yCAAyC,CAAC;MAChE;MACA,OAAOJ,KAAK,CAACG,IAAI,CAAC;IACpB;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASF,SAASA,CAACI,KAAK,EAAEC,GAAG,EAAE;IAC7B,IAAI;MACF,IAAIC,GAAG,GAAGlB,MAAM,CAACgB,KAAK,EAAEC,GAAG,EAAER,GAAG,CAAC;MACjC,IAAIU,CAAC,GAAGC,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,GAAGf,SAAS,CAACe,KAAK,CAAC,GAAGA,KAAK,CAACM,IAAI,CAAC,CAAC;MAC9D,OAAOZ,MAAM,CAACQ,GAAG,EAAEC,CAAC,CAACF,GAAG,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZ,MAAMpB,mBAAmB,CAACoB,GAAG,EAAE,MAAM,CAAC;IACxC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASZ,KAAKA,CAACK,KAAK,EAAE;IACpB,IAAIE,GAAG;IACP,IAAIM,GAAG,GAAG,CAAC;IACXzB,WAAW,CAACiB,KAAK,EAAE,UAAUS,KAAK,EAAE;MAClC,IAAI;QACFP,GAAG,GAAGA,GAAG,KAAKQ,SAAS,GAAGD,KAAK,GAAGhB,GAAG,CAACS,GAAG,EAAEO,KAAK,CAAC;QACjDD,GAAG,EAAE;MACP,CAAC,CAAC,OAAOD,GAAG,EAAE;QACZ,MAAMpB,mBAAmB,CAACoB,GAAG,EAAE,MAAM,EAAEE,KAAK,CAAC;MAC/C;IACF,CAAC,CAAC;IACF,IAAID,GAAG,KAAK,CAAC,EAAE;MACb,MAAM,IAAIG,KAAK,CAAC,6CAA6C,CAAC;IAChE;IACA,OAAOjB,MAAM,CAACQ,GAAG,EAAEM,GAAG,CAAC;EACzB;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}