{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { isNegativeNumber } from '../../plain/number/index.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nvar name = 'isNegative';\nvar dependencies = ['typed', 'config'];\nexport var createIsNegative = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config\n  } = _ref;\n  /**\r\n   * Test whether a value is negative: smaller than zero.\r\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isNegative(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isNegative(3)                     // returns false\r\n   *    math.isNegative(-2)                    // returns true\r\n   *    math.isNegative(0)                     // returns false\r\n   *    math.isNegative(-0)                    // returns false\r\n   *    math.isNegative(math.bignumber(2))     // returns false\r\n   *    math.isNegative(math.fraction(-2, 5))  // returns true\r\n   *    math.isNegative('-2')                  // returns true\r\n   *    math.isNegative([2, 0, -3])            // returns [false, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isPositive, isZero, isInteger\r\n   *\r\n   * @param {number | BigNumber | bigint | Fraction | Unit | Array | Matrix} x  Value to be tested\r\n   * @return {boolean}  Returns true when `x` is larger than zero.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\n  return typed(name, {\n    number: x => nearlyEqual(x, 0, config.relTol, config.absTol) ? false : isNegativeNumber(x),\n    BigNumber: x => bigNearlyEqual(x, new x.constructor(0), config.relTol, config.absTol) ? false : x.isNeg() && !x.isZero() && !x.isNaN(),\n    bigint: x => x < 0n,\n    Fraction: x => x.s < 0n,\n    // It's enough to decide on the sign\n\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["deepMap","factory","isNegativeNumber","nearlyEqual","bigNearlyEqual","name","dependencies","createIsNegative","_ref","typed","config","number","x","relTol","absTol","BigNumber","constructor","isNeg","isZero","isNaN","bigint","Fraction","s","Unit","referToSelf","self","find","valueType","value"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/utils/isNegative.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { isNegativeNumber } from '../../plain/number/index.js';\r\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\r\nimport { nearlyEqual } from '../../utils/number.js';\r\nvar name = 'isNegative';\r\nvar dependencies = ['typed', 'config'];\r\nexport var createIsNegative = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config\r\n  } = _ref;\r\n  /**\r\n   * Test whether a value is negative: smaller than zero.\r\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\r\n   *\r\n   * The function is evaluated element-wise in case of Array or Matrix input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.isNegative(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.isNegative(3)                     // returns false\r\n   *    math.isNegative(-2)                    // returns true\r\n   *    math.isNegative(0)                     // returns false\r\n   *    math.isNegative(-0)                    // returns false\r\n   *    math.isNegative(math.bignumber(2))     // returns false\r\n   *    math.isNegative(math.fraction(-2, 5))  // returns true\r\n   *    math.isNegative('-2')                  // returns true\r\n   *    math.isNegative([2, 0, -3])            // returns [false, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isNumeric, isPositive, isZero, isInteger\r\n   *\r\n   * @param {number | BigNumber | bigint | Fraction | Unit | Array | Matrix} x  Value to be tested\r\n   * @return {boolean}  Returns true when `x` is larger than zero.\r\n   *                    Throws an error in case of an unknown data type.\r\n   */\r\n  return typed(name, {\r\n    number: x => nearlyEqual(x, 0, config.relTol, config.absTol) ? false : isNegativeNumber(x),\r\n    BigNumber: x => bigNearlyEqual(x, new x.constructor(0), config.relTol, config.absTol) ? false : x.isNeg() && !x.isZero() && !x.isNaN(),\r\n    bigint: x => x < 0n,\r\n    Fraction: x => x.s < 0n,\r\n    // It's enough to decide on the sign\r\n\r\n    Unit: typed.referToSelf(self => x => typed.find(self, x.valueType())(x.value)),\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,WAAW,IAAIC,cAAc,QAAQ,sCAAsC;AACpF,SAASD,WAAW,QAAQ,uBAAuB;AACnD,IAAIE,IAAI,GAAG,YAAY;AACvB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;AACtC,OAAO,IAAIC,gBAAgB,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC/E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBM,MAAM,EAAEC,CAAC,IAAIT,WAAW,CAACS,CAAC,EAAE,CAAC,EAAEF,MAAM,CAACG,MAAM,EAAEH,MAAM,CAACI,MAAM,CAAC,GAAG,KAAK,GAAGZ,gBAAgB,CAACU,CAAC,CAAC;IAC1FG,SAAS,EAAEH,CAAC,IAAIR,cAAc,CAACQ,CAAC,EAAE,IAAIA,CAAC,CAACI,WAAW,CAAC,CAAC,CAAC,EAAEN,MAAM,CAACG,MAAM,EAAEH,MAAM,CAACI,MAAM,CAAC,GAAG,KAAK,GAAGF,CAAC,CAACK,KAAK,CAAC,CAAC,IAAI,CAACL,CAAC,CAACM,MAAM,CAAC,CAAC,IAAI,CAACN,CAAC,CAACO,KAAK,CAAC,CAAC;IACtIC,MAAM,EAAER,CAAC,IAAIA,CAAC,GAAG,EAAE;IACnBS,QAAQ,EAAET,CAAC,IAAIA,CAAC,CAACU,CAAC,GAAG,EAAE;IACvB;;IAEAC,IAAI,EAAEd,KAAK,CAACe,WAAW,CAACC,IAAI,IAAIb,CAAC,IAAIH,KAAK,CAACiB,IAAI,CAACD,IAAI,EAAEb,CAAC,CAACe,SAAS,CAAC,CAAC,CAAC,CAACf,CAAC,CAACgB,KAAK,CAAC,CAAC;IAC9E,gBAAgB,EAAEnB,KAAK,CAACe,WAAW,CAACC,IAAI,IAAIb,CAAC,IAAIZ,OAAO,CAACY,CAAC,EAAEa,IAAI,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}