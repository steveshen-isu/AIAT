{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { randomMatrix } from './util/randomMatrix.js';\nimport { createRng } from './util/seededRNG.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'randomInt';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandomInt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    on\n  } = _ref;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  /**\r\n   * Return a random integer number larger or equal to `min` and smaller than `max`\r\n   * using a uniform distribution.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.randomInt()                // generate a random integer between 0 and 1\r\n   *     math.randomInt(max)             // generate a random integer between 0 and max\r\n   *     math.randomInt(min, max)        // generate a random integer between min and max\r\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\r\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\r\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\r\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\r\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\r\n   *\r\n   * See also:\r\n   *\r\n   *     random, pickRandom\r\n   *\r\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\r\n   *                                size and filled with random values is returned\r\n   * @param {number} [min]  Minimum boundary for the random value, included\r\n   * @param {number} [max]  Maximum boundary for the random value, excluded\r\n   * @return {number | Array | Matrix} A random integer value\r\n   */\n  return typed(name, {\n    '': () => _randomInt(0, 1),\n    number: max => _randomInt(0, max),\n    'number, number': (min, max) => _randomInt(min, max),\n    'Array | Matrix': size => _randomIntMatrix(size, 0, 1),\n    'Array | Matrix, number': (size, max) => _randomIntMatrix(size, 0, max),\n    'Array | Matrix, number, number': (size, min, max) => _randomIntMatrix(size, min, max)\n  });\n  function _randomIntMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), () => _randomInt(min, max));\n    return isMatrix(size) ? size.create(res, 'number') : res;\n  }\n  function _randomInt(min, max) {\n    return Math.floor(min + rng() * (max - min));\n  }\n});","map":{"version":3,"names":["factory","randomMatrix","createRng","isMatrix","name","dependencies","createRandomInt","_ref","typed","config","on","rng","randomSeed","curr","prev","_randomInt","number","max","number, number","min","size","_randomIntMatrix","Array | Matrix, number","Array | Matrix, number, number","res","valueOf","create","Math","floor"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/probability/randomInt.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { randomMatrix } from './util/randomMatrix.js';\r\nimport { createRng } from './util/seededRNG.js';\r\nimport { isMatrix } from '../../utils/is.js';\r\nvar name = 'randomInt';\r\nvar dependencies = ['typed', 'config', '?on'];\r\nexport var createRandomInt = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    on\r\n  } = _ref;\r\n  // seeded pseudo random number generator\r\n  var rng = createRng(config.randomSeed);\r\n  if (on) {\r\n    on('config', function (curr, prev) {\r\n      if (curr.randomSeed !== prev.randomSeed) {\r\n        rng = createRng(curr.randomSeed);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return a random integer number larger or equal to `min` and smaller than `max`\r\n   * using a uniform distribution.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.randomInt()                // generate a random integer between 0 and 1\r\n   *     math.randomInt(max)             // generate a random integer between 0 and max\r\n   *     math.randomInt(min, max)        // generate a random integer between min and max\r\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\r\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\r\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\r\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\r\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\r\n   *\r\n   * See also:\r\n   *\r\n   *     random, pickRandom\r\n   *\r\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\r\n   *                                size and filled with random values is returned\r\n   * @param {number} [min]  Minimum boundary for the random value, included\r\n   * @param {number} [max]  Maximum boundary for the random value, excluded\r\n   * @return {number | Array | Matrix} A random integer value\r\n   */\r\n  return typed(name, {\r\n    '': () => _randomInt(0, 1),\r\n    number: max => _randomInt(0, max),\r\n    'number, number': (min, max) => _randomInt(min, max),\r\n    'Array | Matrix': size => _randomIntMatrix(size, 0, 1),\r\n    'Array | Matrix, number': (size, max) => _randomIntMatrix(size, 0, max),\r\n    'Array | Matrix, number, number': (size, min, max) => _randomIntMatrix(size, min, max)\r\n  });\r\n  function _randomIntMatrix(size, min, max) {\r\n    var res = randomMatrix(size.valueOf(), () => _randomInt(min, max));\r\n    return isMatrix(size) ? size.create(res, 'number') : res;\r\n  }\r\n  function _randomInt(min, max) {\r\n    return Math.floor(min + rng() * (max - min));\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,IAAIC,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC;AAC7C,OAAO,IAAIC,eAAe,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC9E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,GAAGH,IAAI;EACR;EACA,IAAII,GAAG,GAAGT,SAAS,CAACO,MAAM,CAACG,UAAU,CAAC;EACtC,IAAIF,EAAE,EAAE;IACNA,EAAE,CAAC,QAAQ,EAAE,UAAUG,IAAI,EAAEC,IAAI,EAAE;MACjC,IAAID,IAAI,CAACD,UAAU,KAAKE,IAAI,CAACF,UAAU,EAAE;QACvCD,GAAG,GAAGT,SAAS,CAACW,IAAI,CAACD,UAAU,CAAC;MAClC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOJ,KAAK,CAACJ,IAAI,EAAE;IACjB,EAAE,EAAE,MAAMW,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;IAC1BC,MAAM,EAAEC,GAAG,IAAIF,UAAU,CAAC,CAAC,EAAEE,GAAG,CAAC;IACjC,gBAAgB,EAAEC,CAACC,GAAG,EAAEF,GAAG,KAAKF,UAAU,CAACI,GAAG,EAAEF,GAAG,CAAC;IACpD,gBAAgB,EAAEG,IAAI,IAAIC,gBAAgB,CAACD,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;IACtD,wBAAwB,EAAEE,CAACF,IAAI,EAAEH,GAAG,KAAKI,gBAAgB,CAACD,IAAI,EAAE,CAAC,EAAEH,GAAG,CAAC;IACvE,gCAAgC,EAAEM,CAACH,IAAI,EAAED,GAAG,EAAEF,GAAG,KAAKI,gBAAgB,CAACD,IAAI,EAAED,GAAG,EAAEF,GAAG;EACvF,CAAC,CAAC;EACF,SAASI,gBAAgBA,CAACD,IAAI,EAAED,GAAG,EAAEF,GAAG,EAAE;IACxC,IAAIO,GAAG,GAAGvB,YAAY,CAACmB,IAAI,CAACK,OAAO,CAAC,CAAC,EAAE,MAAMV,UAAU,CAACI,GAAG,EAAEF,GAAG,CAAC,CAAC;IAClE,OAAOd,QAAQ,CAACiB,IAAI,CAAC,GAAGA,IAAI,CAACM,MAAM,CAACF,GAAG,EAAE,QAAQ,CAAC,GAAGA,GAAG;EAC1D;EACA,SAAST,UAAUA,CAACI,GAAG,EAAEF,GAAG,EAAE;IAC5B,OAAOU,IAAI,CAACC,KAAK,CAACT,GAAG,GAAGR,GAAG,CAAC,CAAC,IAAIM,GAAG,GAAGE,GAAG,CAAC,CAAC;EAC9C;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}