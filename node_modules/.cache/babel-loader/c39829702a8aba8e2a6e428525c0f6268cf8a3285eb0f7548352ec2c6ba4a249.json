{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { unaryPlusNumber } from '../../plain/number/index.js';\nimport { safeNumberType } from '../../utils/number.js';\nvar name = 'unaryPlus';\nvar dependencies = ['typed', 'config', 'numeric'];\nexport var createUnaryPlus = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    numeric\n  } = _ref;\n  /**\r\n   * Unary plus operation.\r\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.unaryPlus(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.unaryPlus(3.5)      // returns 3.5\r\n   *    math.unaryPlus(1)     // returns 1\r\n   *\r\n   * See also:\r\n   *\r\n   *    unaryMinus, add, subtract\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | string | Complex | Unit | Array | Matrix} x\r\n   *            Input value\r\n   * @return {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix}\r\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\r\n   */\n  return typed(name, {\n    number: unaryPlusNumber,\n    Complex: function Complex(x) {\n      return x; // complex numbers are immutable\n    },\n    BigNumber: function BigNumber(x) {\n      return x; // bignumbers are immutable\n    },\n    bigint: function bigint(x) {\n      return x;\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    // deep map collection, skip zeros since unaryPlus(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\n    boolean: function boolean(x) {\n      return numeric(x ? 1 : 0, config.number);\n    },\n    string: function string(x) {\n      return numeric(x, safeNumberType(x, config));\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","unaryPlusNumber","safeNumberType","name","dependencies","createUnaryPlus","_ref","typed","config","numeric","number","Complex","x","BigNumber","bigint","Fraction","Unit","clone","referToSelf","self","boolean","string"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/unaryPlus.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { unaryPlusNumber } from '../../plain/number/index.js';\r\nimport { safeNumberType } from '../../utils/number.js';\r\nvar name = 'unaryPlus';\r\nvar dependencies = ['typed', 'config', 'numeric'];\r\nexport var createUnaryPlus = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    numeric\r\n  } = _ref;\r\n  /**\r\n   * Unary plus operation.\r\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.unaryPlus(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.unaryPlus(3.5)      // returns 3.5\r\n   *    math.unaryPlus(1)     // returns 1\r\n   *\r\n   * See also:\r\n   *\r\n   *    unaryMinus, add, subtract\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | string | Complex | Unit | Array | Matrix} x\r\n   *            Input value\r\n   * @return {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix}\r\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\r\n   */\r\n  return typed(name, {\r\n    number: unaryPlusNumber,\r\n    Complex: function Complex(x) {\r\n      return x; // complex numbers are immutable\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x; // bignumbers are immutable\r\n    },\r\n    bigint: function bigint(x) {\r\n      return x;\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return x; // fractions are immutable\r\n    },\r\n    Unit: function Unit(x) {\r\n      return x.clone();\r\n    },\r\n    // deep map collection, skip zeros since unaryPlus(0) = 0\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\r\n    boolean: function boolean(x) {\r\n      return numeric(x ? 1 : 0, config.number);\r\n    },\r\n    string: function string(x) {\r\n      return numeric(x, safeNumberType(x, config));\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,cAAc,QAAQ,uBAAuB;AACtD,IAAIC,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;AACjD,OAAO,IAAIC,eAAe,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC9E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBO,MAAM,EAAET,eAAe;IACvBU,OAAO,EAAE,SAASA,OAAOA,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAAC,CAAC;IACZ,CAAC;IACDC,SAAS,EAAE,SAASA,SAASA,CAACD,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAAC,CAAC;IACZ,CAAC;IACDE,MAAM,EAAE,SAASA,MAAMA,CAACF,CAAC,EAAE;MACzB,OAAOA,CAAC;IACV,CAAC;IACDG,QAAQ,EAAE,SAASA,QAAQA,CAACH,CAAC,EAAE;MAC7B,OAAOA,CAAC,CAAC,CAAC;IACZ,CAAC;IACDI,IAAI,EAAE,SAASA,IAAIA,CAACJ,CAAC,EAAE;MACrB,OAAOA,CAAC,CAACK,KAAK,CAAC,CAAC;IAClB,CAAC;IACD;IACA,gBAAgB,EAAEV,KAAK,CAACW,WAAW,CAACC,IAAI,IAAIP,CAAC,IAAIZ,OAAO,CAACY,CAAC,EAAEO,IAAI,EAAE,IAAI,CAAC,CAAC;IACxEC,OAAO,EAAE,SAASA,OAAOA,CAACR,CAAC,EAAE;MAC3B,OAAOH,OAAO,CAACG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAEJ,MAAM,CAACE,MAAM,CAAC;IAC1C,CAAC;IACDW,MAAM,EAAE,SAASA,MAAMA,CAACT,CAAC,EAAE;MACzB,OAAOH,OAAO,CAACG,CAAC,EAAEV,cAAc,CAACU,CAAC,EAAEJ,MAAM,CAAC,CAAC;IAC9C;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}