{"ast":null,"code":"import { errorTransform } from '../../transform/utils/errorTransform.js';\nimport { setSafeProperty } from '../../../utils/customs.js';\nexport function assignFactory(_ref) {\n  var {\n    subset,\n    matrix\n  } = _ref;\n  /**\r\n   * Replace part of an object:\r\n   *\r\n   * - Assign a property to an object\r\n   * - Replace a part of a string\r\n   * - Replace a matrix subset\r\n   *\r\n   * @param {Object | Array | Matrix | string} object\r\n   * @param {Index} index\r\n   * @param {*} value\r\n   * @return {Object | Array | Matrix | string} Returns the original object\r\n   *                                            except in case of a string\r\n   */\n  // TODO: change assign to return the value instead of the object\n  return function assign(object, index, value) {\n    try {\n      if (Array.isArray(object)) {\n        var result = matrix(object).subset(index, value).valueOf();\n\n        // shallow copy all (updated) items into the original array\n        result.forEach((item, index) => {\n          object[index] = item;\n        });\n        return object;\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index, value);\n      } else if (typeof object === 'string') {\n        // TODO: move setStringSubset into a separate util file, use that\n        return subset(object, index, value);\n      } else if (typeof object === 'object') {\n        if (!index.isObjectProperty()) {\n          throw TypeError('Cannot apply a numeric index as object property');\n        }\n        setSafeProperty(object, index.getObjectProperty(), value);\n        return object;\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}","map":{"version":3,"names":["errorTransform","setSafeProperty","assignFactory","_ref","subset","matrix","assign","object","index","value","Array","isArray","result","valueOf","forEach","item","isObjectProperty","TypeError","getObjectProperty","err"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/expression/node/utils/assign.js"],"sourcesContent":["import { errorTransform } from '../../transform/utils/errorTransform.js';\r\nimport { setSafeProperty } from '../../../utils/customs.js';\r\nexport function assignFactory(_ref) {\r\n  var {\r\n    subset,\r\n    matrix\r\n  } = _ref;\r\n  /**\r\n   * Replace part of an object:\r\n   *\r\n   * - Assign a property to an object\r\n   * - Replace a part of a string\r\n   * - Replace a matrix subset\r\n   *\r\n   * @param {Object | Array | Matrix | string} object\r\n   * @param {Index} index\r\n   * @param {*} value\r\n   * @return {Object | Array | Matrix | string} Returns the original object\r\n   *                                            except in case of a string\r\n   */\r\n  // TODO: change assign to return the value instead of the object\r\n  return function assign(object, index, value) {\r\n    try {\r\n      if (Array.isArray(object)) {\r\n        var result = matrix(object).subset(index, value).valueOf();\r\n\r\n        // shallow copy all (updated) items into the original array\r\n        result.forEach((item, index) => {\r\n          object[index] = item;\r\n        });\r\n        return object;\r\n      } else if (object && typeof object.subset === 'function') {\r\n        // Matrix\r\n        return object.subset(index, value);\r\n      } else if (typeof object === 'string') {\r\n        // TODO: move setStringSubset into a separate util file, use that\r\n        return subset(object, index, value);\r\n      } else if (typeof object === 'object') {\r\n        if (!index.isObjectProperty()) {\r\n          throw TypeError('Cannot apply a numeric index as object property');\r\n        }\r\n        setSafeProperty(object, index.getObjectProperty(), value);\r\n        return object;\r\n      } else {\r\n        throw new TypeError('Cannot apply index: unsupported type of object');\r\n      }\r\n    } catch (err) {\r\n      throw errorTransform(err);\r\n    }\r\n  };\r\n}"],"mappings":"AAAA,SAASA,cAAc,QAAQ,yCAAyC;AACxE,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,OAAO,SAASC,aAAaA,CAACC,IAAI,EAAE;EAClC,IAAI;IACFC,MAAM;IACNC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA,OAAO,SAASG,MAAMA,CAACC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC3C,IAAI;MACF,IAAIC,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,EAAE;QACzB,IAAIK,MAAM,GAAGP,MAAM,CAACE,MAAM,CAAC,CAACH,MAAM,CAACI,KAAK,EAAEC,KAAK,CAAC,CAACI,OAAO,CAAC,CAAC;;QAE1D;QACAD,MAAM,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEP,KAAK,KAAK;UAC9BD,MAAM,CAACC,KAAK,CAAC,GAAGO,IAAI;QACtB,CAAC,CAAC;QACF,OAAOR,MAAM;MACf,CAAC,MAAM,IAAIA,MAAM,IAAI,OAAOA,MAAM,CAACH,MAAM,KAAK,UAAU,EAAE;QACxD;QACA,OAAOG,MAAM,CAACH,MAAM,CAACI,KAAK,EAAEC,KAAK,CAAC;MACpC,CAAC,MAAM,IAAI,OAAOF,MAAM,KAAK,QAAQ,EAAE;QACrC;QACA,OAAOH,MAAM,CAACG,MAAM,EAAEC,KAAK,EAAEC,KAAK,CAAC;MACrC,CAAC,MAAM,IAAI,OAAOF,MAAM,KAAK,QAAQ,EAAE;QACrC,IAAI,CAACC,KAAK,CAACQ,gBAAgB,CAAC,CAAC,EAAE;UAC7B,MAAMC,SAAS,CAAC,iDAAiD,CAAC;QACpE;QACAhB,eAAe,CAACM,MAAM,EAAEC,KAAK,CAACU,iBAAiB,CAAC,CAAC,EAAET,KAAK,CAAC;QACzD,OAAOF,MAAM;MACf,CAAC,MAAM;QACL,MAAM,IAAIU,SAAS,CAAC,gDAAgD,CAAC;MACvE;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ,MAAMnB,cAAc,CAACmB,GAAG,CAAC;IAC3B;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}