{"ast":null,"code":"import { escape } from '../../utils/string.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { toSymbol } from '../../utils/latex.js';\nvar name = 'SymbolNode';\nvar dependencies = ['math', '?Unit', 'Node'];\nexport var createSymbolNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    math,\n    Unit,\n    Node\n  } = _ref;\n  /**\r\n   * Check whether some name is a valueless unit like \"inch\".\r\n   * @param {string} name\r\n   * @return {boolean}\r\n   */\n  function isValuelessUnit(name) {\n    return Unit ? Unit.isValuelessUnit(name) : false;\n  }\n  class SymbolNode extends Node {\n    /**\r\n     * @constructor SymbolNode\r\n     * @extends {Node}\r\n     * A symbol node can hold and resolve a symbol\r\n     * @param {string} name\r\n     * @extends {Node}\r\n     */\n    constructor(name) {\n      super();\n      // validate input\n      if (typeof name !== 'string') {\n        throw new TypeError('String expected for parameter \"name\"');\n      }\n      this.name = name;\n    }\n    get type() {\n      return 'SymbolNode';\n    }\n    get isSymbolNode() {\n      return true;\n    }\n\n    /**\r\n     * Compile a node into a JavaScript function.\r\n     * This basically pre-calculates as much as possible and only leaves open\r\n     * calculations which depend on a dynamic scope with variables.\r\n     * @param {Object} math     Math.js namespace with functions and constants.\r\n     * @param {Object} argNames An object with argument names as key and `true`\r\n     *                          as value. Used in the SymbolNode to optimize\r\n     *                          for arguments from user assigned functions\r\n     *                          (see FunctionAssignmentNode) or special symbols\r\n     *                          like `end` (see IndexNode).\r\n     * @return {function} Returns a function which can be called like:\r\n     *                        evalNode(scope: Object, args: Object, context: *)\r\n     */\n    _compile(math, argNames) {\n      var name = this.name;\n      if (argNames[name] === true) {\n        // this is a FunctionAssignment argument\n        // (like an x when inside the expression of a function\n        // assignment `f(x) = ...`)\n        return function (scope, args, context) {\n          return getSafeProperty(args, name);\n        };\n      } else if (name in math) {\n        return function (scope, args, context) {\n          return scope.has(name) ? scope.get(name) : getSafeProperty(math, name);\n        };\n      } else {\n        var isUnit = isValuelessUnit(name);\n        return function (scope, args, context) {\n          return scope.has(name) ? scope.get(name) : isUnit ? new Unit(null, name) : SymbolNode.onUndefinedSymbol(name);\n        };\n      }\n    }\n\n    /**\r\n     * Execute a callback for each of the child nodes of this node\r\n     * @param {function(child: Node, path: string, parent: Node)} callback\r\n     */\n    forEach(callback) {\n      // nothing to do, we don't have any children\n    }\n\n    /**\r\n     * Create a new SymbolNode with children produced by the given callback.\r\n     * Trivial since a SymbolNode has no children\r\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\r\n     * @returns {SymbolNode} Returns a clone of the node\r\n     */\n    map(callback) {\n      return this.clone();\n    }\n\n    /**\r\n     * Throws an error 'Undefined symbol {name}'\r\n     * @param {string} name\r\n     */\n    static onUndefinedSymbol(name) {\n      throw new Error('Undefined symbol ' + name);\n    }\n\n    /**\r\n     * Create a clone of this node, a shallow copy\r\n     * @return {SymbolNode}\r\n     */\n    clone() {\n      return new SymbolNode(this.name);\n    }\n\n    /**\r\n     * Get string representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\n    _toString(options) {\n      return this.name;\n    }\n\n    /**\r\n     * Get HTML representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\n    _toHTML(options) {\n      var name = escape(this.name);\n      if (name === 'true' || name === 'false') {\n        return '<span class=\"math-symbol math-boolean\">' + name + '</span>';\n      } else if (name === 'i') {\n        return '<span class=\"math-symbol math-imaginary-symbol\">' + name + '</span>';\n      } else if (name === 'Infinity') {\n        return '<span class=\"math-symbol math-infinity-symbol\">' + name + '</span>';\n      } else if (name === 'NaN') {\n        return '<span class=\"math-symbol math-nan-symbol\">' + name + '</span>';\n      } else if (name === 'null') {\n        return '<span class=\"math-symbol math-null-symbol\">' + name + '</span>';\n      } else if (name === 'undefined') {\n        return '<span class=\"math-symbol math-undefined-symbol\">' + name + '</span>';\n      }\n      return '<span class=\"math-symbol\">' + name + '</span>';\n    }\n\n    /**\r\n     * Get a JSON representation of the node\r\n     * @returns {Object}\r\n     */\n    toJSON() {\n      return {\n        mathjs: 'SymbolNode',\n        name: this.name\n      };\n    }\n\n    /**\r\n     * Instantiate a SymbolNode from its JSON representation\r\n     * @param {Object} json  An object structured like\r\n     *                       `{\"mathjs\": \"SymbolNode\", name: \"x\"}`,\r\n     *                       where mathjs is optional\r\n     * @returns {SymbolNode}\r\n     */\n    static fromJSON(json) {\n      return new SymbolNode(json.name);\n    }\n\n    /**\r\n     * Get LaTeX representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\n    _toTex(options) {\n      var isUnit = false;\n      if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {\n        isUnit = true;\n      }\n      var symbol = toSymbol(this.name, isUnit);\n      if (symbol[0] === '\\\\') {\n        // no space needed if the symbol starts with '\\'\n        return symbol;\n      }\n      // the space prevents symbols from breaking stuff like '\\cdot'\n      // if it's written right before the symbol\n      return ' ' + symbol;\n    }\n  }\n  return SymbolNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["escape","getSafeProperty","factory","toSymbol","name","dependencies","createSymbolNode","_ref","math","Unit","Node","isValuelessUnit","SymbolNode","constructor","TypeError","type","isSymbolNode","_compile","argNames","scope","args","context","has","get","isUnit","onUndefinedSymbol","forEach","callback","map","clone","Error","_toString","options","_toHTML","toJSON","mathjs","fromJSON","json","_toTex","symbol","isClass","isNode"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/expression/node/SymbolNode.js"],"sourcesContent":["import { escape } from '../../utils/string.js';\r\nimport { getSafeProperty } from '../../utils/customs.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { toSymbol } from '../../utils/latex.js';\r\nvar name = 'SymbolNode';\r\nvar dependencies = ['math', '?Unit', 'Node'];\r\nexport var createSymbolNode = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    math,\r\n    Unit,\r\n    Node\r\n  } = _ref;\r\n  /**\r\n   * Check whether some name is a valueless unit like \"inch\".\r\n   * @param {string} name\r\n   * @return {boolean}\r\n   */\r\n  function isValuelessUnit(name) {\r\n    return Unit ? Unit.isValuelessUnit(name) : false;\r\n  }\r\n  class SymbolNode extends Node {\r\n    /**\r\n     * @constructor SymbolNode\r\n     * @extends {Node}\r\n     * A symbol node can hold and resolve a symbol\r\n     * @param {string} name\r\n     * @extends {Node}\r\n     */\r\n    constructor(name) {\r\n      super();\r\n      // validate input\r\n      if (typeof name !== 'string') {\r\n        throw new TypeError('String expected for parameter \"name\"');\r\n      }\r\n      this.name = name;\r\n    }\r\n    get type() {\r\n      return 'SymbolNode';\r\n    }\r\n    get isSymbolNode() {\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Compile a node into a JavaScript function.\r\n     * This basically pre-calculates as much as possible and only leaves open\r\n     * calculations which depend on a dynamic scope with variables.\r\n     * @param {Object} math     Math.js namespace with functions and constants.\r\n     * @param {Object} argNames An object with argument names as key and `true`\r\n     *                          as value. Used in the SymbolNode to optimize\r\n     *                          for arguments from user assigned functions\r\n     *                          (see FunctionAssignmentNode) or special symbols\r\n     *                          like `end` (see IndexNode).\r\n     * @return {function} Returns a function which can be called like:\r\n     *                        evalNode(scope: Object, args: Object, context: *)\r\n     */\r\n    _compile(math, argNames) {\r\n      var name = this.name;\r\n      if (argNames[name] === true) {\r\n        // this is a FunctionAssignment argument\r\n        // (like an x when inside the expression of a function\r\n        // assignment `f(x) = ...`)\r\n        return function (scope, args, context) {\r\n          return getSafeProperty(args, name);\r\n        };\r\n      } else if (name in math) {\r\n        return function (scope, args, context) {\r\n          return scope.has(name) ? scope.get(name) : getSafeProperty(math, name);\r\n        };\r\n      } else {\r\n        var isUnit = isValuelessUnit(name);\r\n        return function (scope, args, context) {\r\n          return scope.has(name) ? scope.get(name) : isUnit ? new Unit(null, name) : SymbolNode.onUndefinedSymbol(name);\r\n        };\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Execute a callback for each of the child nodes of this node\r\n     * @param {function(child: Node, path: string, parent: Node)} callback\r\n     */\r\n    forEach(callback) {\r\n      // nothing to do, we don't have any children\r\n    }\r\n\r\n    /**\r\n     * Create a new SymbolNode with children produced by the given callback.\r\n     * Trivial since a SymbolNode has no children\r\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\r\n     * @returns {SymbolNode} Returns a clone of the node\r\n     */\r\n    map(callback) {\r\n      return this.clone();\r\n    }\r\n\r\n    /**\r\n     * Throws an error 'Undefined symbol {name}'\r\n     * @param {string} name\r\n     */\r\n    static onUndefinedSymbol(name) {\r\n      throw new Error('Undefined symbol ' + name);\r\n    }\r\n\r\n    /**\r\n     * Create a clone of this node, a shallow copy\r\n     * @return {SymbolNode}\r\n     */\r\n    clone() {\r\n      return new SymbolNode(this.name);\r\n    }\r\n\r\n    /**\r\n     * Get string representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\r\n    _toString(options) {\r\n      return this.name;\r\n    }\r\n\r\n    /**\r\n     * Get HTML representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\r\n    _toHTML(options) {\r\n      var name = escape(this.name);\r\n      if (name === 'true' || name === 'false') {\r\n        return '<span class=\"math-symbol math-boolean\">' + name + '</span>';\r\n      } else if (name === 'i') {\r\n        return '<span class=\"math-symbol math-imaginary-symbol\">' + name + '</span>';\r\n      } else if (name === 'Infinity') {\r\n        return '<span class=\"math-symbol math-infinity-symbol\">' + name + '</span>';\r\n      } else if (name === 'NaN') {\r\n        return '<span class=\"math-symbol math-nan-symbol\">' + name + '</span>';\r\n      } else if (name === 'null') {\r\n        return '<span class=\"math-symbol math-null-symbol\">' + name + '</span>';\r\n      } else if (name === 'undefined') {\r\n        return '<span class=\"math-symbol math-undefined-symbol\">' + name + '</span>';\r\n      }\r\n      return '<span class=\"math-symbol\">' + name + '</span>';\r\n    }\r\n\r\n    /**\r\n     * Get a JSON representation of the node\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n      return {\r\n        mathjs: 'SymbolNode',\r\n        name: this.name\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Instantiate a SymbolNode from its JSON representation\r\n     * @param {Object} json  An object structured like\r\n     *                       `{\"mathjs\": \"SymbolNode\", name: \"x\"}`,\r\n     *                       where mathjs is optional\r\n     * @returns {SymbolNode}\r\n     */\r\n    static fromJSON(json) {\r\n      return new SymbolNode(json.name);\r\n    }\r\n\r\n    /**\r\n     * Get LaTeX representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\r\n    _toTex(options) {\r\n      var isUnit = false;\r\n      if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {\r\n        isUnit = true;\r\n      }\r\n      var symbol = toSymbol(this.name, isUnit);\r\n      if (symbol[0] === '\\\\') {\r\n        // no space needed if the symbol starts with '\\'\r\n        return symbol;\r\n      }\r\n      // the space prevents symbols from breaking stuff like '\\cdot'\r\n      // if it's written right before the symbol\r\n      return ' ' + symbol;\r\n    }\r\n  }\r\n  return SymbolNode;\r\n}, {\r\n  isClass: true,\r\n  isNode: true\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}