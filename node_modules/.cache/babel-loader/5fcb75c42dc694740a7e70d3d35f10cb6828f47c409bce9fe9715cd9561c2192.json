{"ast":null,"code":"import { isCollection, isMatrix } from './is.js';\nimport { IndexError } from '../error/IndexError.js';\nimport { arraySize } from './array.js';\nimport { _switch } from './switch.js';\n\n/**\r\n * Test whether an array contains collections\r\n * @param {Array} array\r\n * @returns {boolean} Returns true when the array contains one or multiple\r\n *                    collections (Arrays or Matrices). Returns false otherwise.\r\n */\nexport function containsCollections(array) {\n  for (var i = 0; i < array.length; i++) {\n    if (isCollection(array[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\r\n * Recursively loop over all elements in a given multi dimensional array\r\n * and invoke the callback on each of the elements.\r\n * @param {Array | Matrix} array\r\n * @param {Function} callback     The callback method is invoked with one\r\n *                                parameter: the current element in the array\r\n */\nexport function deepForEach(array, callback) {\n  if (isMatrix(array)) {\n    array = array.valueOf();\n  }\n  for (var i = 0, ii = array.length; i < ii; i++) {\n    var value = array[i];\n    if (Array.isArray(value)) {\n      deepForEach(value, callback);\n    } else {\n      callback(value);\n    }\n  }\n}\n\n/**\r\n * Execute the callback function element wise for each element in array and any\r\n * nested array\r\n * Returns an array with the results\r\n * @param {Array | Matrix} array\r\n * @param {Function} callback   The callback is called with two parameters:\r\n *                              value1 and value2, which contain the current\r\n *                              element of both arrays.\r\n * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\r\n *\r\n * @return {Array | Matrix} res\r\n */\nexport function deepMap(array, callback, skipZeros) {\n  if (array && typeof array.map === 'function') {\n    // TODO: replace array.map with a for loop to improve performance\n    return array.map(function (x) {\n      return deepMap(x, callback, skipZeros);\n    });\n  } else {\n    return callback(array);\n  }\n}\n\n/**\r\n * Reduce a given matrix or array to a new matrix or\r\n * array with one less dimension, applying the given\r\n * callback in the selected dimension.\r\n * @param {Array | Matrix} mat\r\n * @param {number} dim\r\n * @param {Function} callback\r\n * @return {Array | Matrix} res\r\n */\nexport function reduce(mat, dim, callback) {\n  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();\n  if (dim < 0 || dim >= size.length) {\n    // TODO: would be more clear when throwing a DimensionError here\n    throw new IndexError(dim, size.length);\n  }\n  if (isMatrix(mat)) {\n    return mat.create(_reduce(mat.valueOf(), dim, callback), mat.datatype());\n  } else {\n    return _reduce(mat, dim, callback);\n  }\n}\n\n/**\r\n * Recursively reduce a matrix\r\n * @param {Array} mat\r\n * @param {number} dim\r\n * @param {Function} callback\r\n * @returns {Array} ret\r\n * @private\r\n */\nfunction _reduce(mat, dim, callback) {\n  var i, ret, val, tran;\n  if (dim <= 0) {\n    if (!Array.isArray(mat[0])) {\n      val = mat[0];\n      for (i = 1; i < mat.length; i++) {\n        val = callback(val, mat[i]);\n      }\n      return val;\n    } else {\n      tran = _switch(mat);\n      ret = [];\n      for (i = 0; i < tran.length; i++) {\n        ret[i] = _reduce(tran[i], dim - 1, callback);\n      }\n      return ret;\n    }\n  } else {\n    ret = [];\n    for (i = 0; i < mat.length; i++) {\n      ret[i] = _reduce(mat[i], dim - 1, callback);\n    }\n    return ret;\n  }\n}\n\n// TODO: document function scatter\nexport function scatter(a, j, w, x, u, mark, cindex, f, inverse, update, value) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr;\n\n  // vars\n  var k, k0, k1, i;\n\n  // check we need to process values (pattern matrix)\n  if (x) {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k];\n      // check value exists in current j\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark;\n        // add i to pattern of C\n        cindex.push(i);\n        // x(i) = A, check we need to call function this time\n        if (update) {\n          // copy value to workspace calling callback function\n          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);\n          // function was called on current row\n          u[i] = mark;\n        } else {\n          // copy value to workspace\n          x[i] = avalues[k];\n        }\n      } else {\n        // i exists in C already\n        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);\n        // function was called on current row\n        u[i] = mark;\n      }\n    }\n  } else {\n    // values in j\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n      // row\n      i = aindex[k];\n      // check value exists in current j\n      if (w[i] !== mark) {\n        // i is new entry in j\n        w[i] = mark;\n        // add i to pattern of C\n        cindex.push(i);\n      } else {\n        // indicate function was called on current row\n        u[i] = mark;\n      }\n    }\n  }\n}","map":{"version":3,"names":["isCollection","isMatrix","IndexError","arraySize","_switch","containsCollections","array","i","length","deepForEach","callback","valueOf","ii","value","Array","isArray","deepMap","skipZeros","map","x","reduce","mat","dim","size","create","_reduce","datatype","ret","val","tran","scatter","a","j","w","u","mark","cindex","f","inverse","update","avalues","_values","aindex","_index","aptr","_ptr","k","k0","k1","push"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/utils/collection.js"],"sourcesContent":["import { isCollection, isMatrix } from './is.js';\r\nimport { IndexError } from '../error/IndexError.js';\r\nimport { arraySize } from './array.js';\r\nimport { _switch } from './switch.js';\r\n\r\n/**\r\n * Test whether an array contains collections\r\n * @param {Array} array\r\n * @returns {boolean} Returns true when the array contains one or multiple\r\n *                    collections (Arrays or Matrices). Returns false otherwise.\r\n */\r\nexport function containsCollections(array) {\r\n  for (var i = 0; i < array.length; i++) {\r\n    if (isCollection(array[i])) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Recursively loop over all elements in a given multi dimensional array\r\n * and invoke the callback on each of the elements.\r\n * @param {Array | Matrix} array\r\n * @param {Function} callback     The callback method is invoked with one\r\n *                                parameter: the current element in the array\r\n */\r\nexport function deepForEach(array, callback) {\r\n  if (isMatrix(array)) {\r\n    array = array.valueOf();\r\n  }\r\n  for (var i = 0, ii = array.length; i < ii; i++) {\r\n    var value = array[i];\r\n    if (Array.isArray(value)) {\r\n      deepForEach(value, callback);\r\n    } else {\r\n      callback(value);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Execute the callback function element wise for each element in array and any\r\n * nested array\r\n * Returns an array with the results\r\n * @param {Array | Matrix} array\r\n * @param {Function} callback   The callback is called with two parameters:\r\n *                              value1 and value2, which contain the current\r\n *                              element of both arrays.\r\n * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\r\n *\r\n * @return {Array | Matrix} res\r\n */\r\nexport function deepMap(array, callback, skipZeros) {\r\n  if (array && typeof array.map === 'function') {\r\n    // TODO: replace array.map with a for loop to improve performance\r\n    return array.map(function (x) {\r\n      return deepMap(x, callback, skipZeros);\r\n    });\r\n  } else {\r\n    return callback(array);\r\n  }\r\n}\r\n\r\n/**\r\n * Reduce a given matrix or array to a new matrix or\r\n * array with one less dimension, applying the given\r\n * callback in the selected dimension.\r\n * @param {Array | Matrix} mat\r\n * @param {number} dim\r\n * @param {Function} callback\r\n * @return {Array | Matrix} res\r\n */\r\nexport function reduce(mat, dim, callback) {\r\n  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();\r\n  if (dim < 0 || dim >= size.length) {\r\n    // TODO: would be more clear when throwing a DimensionError here\r\n    throw new IndexError(dim, size.length);\r\n  }\r\n  if (isMatrix(mat)) {\r\n    return mat.create(_reduce(mat.valueOf(), dim, callback), mat.datatype());\r\n  } else {\r\n    return _reduce(mat, dim, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * Recursively reduce a matrix\r\n * @param {Array} mat\r\n * @param {number} dim\r\n * @param {Function} callback\r\n * @returns {Array} ret\r\n * @private\r\n */\r\nfunction _reduce(mat, dim, callback) {\r\n  var i, ret, val, tran;\r\n  if (dim <= 0) {\r\n    if (!Array.isArray(mat[0])) {\r\n      val = mat[0];\r\n      for (i = 1; i < mat.length; i++) {\r\n        val = callback(val, mat[i]);\r\n      }\r\n      return val;\r\n    } else {\r\n      tran = _switch(mat);\r\n      ret = [];\r\n      for (i = 0; i < tran.length; i++) {\r\n        ret[i] = _reduce(tran[i], dim - 1, callback);\r\n      }\r\n      return ret;\r\n    }\r\n  } else {\r\n    ret = [];\r\n    for (i = 0; i < mat.length; i++) {\r\n      ret[i] = _reduce(mat[i], dim - 1, callback);\r\n    }\r\n    return ret;\r\n  }\r\n}\r\n\r\n// TODO: document function scatter\r\nexport function scatter(a, j, w, x, u, mark, cindex, f, inverse, update, value) {\r\n  // a arrays\r\n  var avalues = a._values;\r\n  var aindex = a._index;\r\n  var aptr = a._ptr;\r\n\r\n  // vars\r\n  var k, k0, k1, i;\r\n\r\n  // check we need to process values (pattern matrix)\r\n  if (x) {\r\n    // values in j\r\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\r\n      // row\r\n      i = aindex[k];\r\n      // check value exists in current j\r\n      if (w[i] !== mark) {\r\n        // i is new entry in j\r\n        w[i] = mark;\r\n        // add i to pattern of C\r\n        cindex.push(i);\r\n        // x(i) = A, check we need to call function this time\r\n        if (update) {\r\n          // copy value to workspace calling callback function\r\n          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);\r\n          // function was called on current row\r\n          u[i] = mark;\r\n        } else {\r\n          // copy value to workspace\r\n          x[i] = avalues[k];\r\n        }\r\n      } else {\r\n        // i exists in C already\r\n        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);\r\n        // function was called on current row\r\n        u[i] = mark;\r\n      }\r\n    }\r\n  } else {\r\n    // values in j\r\n    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\r\n      // row\r\n      i = aindex[k];\r\n      // check value exists in current j\r\n      if (w[i] !== mark) {\r\n        // i is new entry in j\r\n        w[i] = mark;\r\n        // add i to pattern of C\r\n        cindex.push(i);\r\n      } else {\r\n        // indicate function was called on current row\r\n        u[i] = mark;\r\n      }\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}