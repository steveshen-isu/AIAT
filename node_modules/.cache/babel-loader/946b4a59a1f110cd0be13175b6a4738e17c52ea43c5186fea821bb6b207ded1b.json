{"ast":null,"code":"import { deepForEach } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { safeNumberType } from '../../utils/number.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'prod';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\nexport var createProd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    numeric\n  } = _ref;\n  /**\r\n   * Compute the product of a matrix or a list with values.\r\n   * In case of a multidimensional array or matrix, the sum of all\r\n   * elements will be calculated.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.prod(a, b, c, ...)\r\n   *     math.prod(A)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.multiply(2, 3)           // returns 6\r\n   *     math.prod(2, 3)               // returns 6\r\n   *     math.prod(2, 3, 4)            // returns 24\r\n   *     math.prod([2, 3, 4])          // returns 24\r\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, min, max, sum, std, variance\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The product of all values\r\n   */\n  return typed(name, {\n    // prod([a, b, c, d, ...])\n    'Array | Matrix': _prod,\n    // prod([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {\n      // TODO: implement prod(A, dim)\n      throw new Error('prod(A, dim) is not yet supported');\n      // return reduce(arguments[0], arguments[1], math.prod)\n    },\n    // prod(a, b, c, d, ...)\n    '...': function _(args) {\n      return _prod(args);\n    }\n  });\n\n  /**\r\n   * Recursively calculate the product of an n-dimensional array\r\n   * @param {Array} array\r\n   * @return {number} prod\r\n   * @private\r\n   */\n  function _prod(array) {\n    var prod;\n    deepForEach(array, function (value) {\n      try {\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'prod', value);\n      }\n    });\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (typeof prod === 'string') {\n      prod = numeric(prod, safeNumberType(prod, config));\n    }\n    if (prod === undefined) {\n      throw new Error('Cannot calculate prod of an empty array');\n    }\n    return prod;\n  }\n});","map":{"version":3,"names":["deepForEach","factory","safeNumberType","improveErrorMessage","name","dependencies","createProd","_ref","typed","config","multiplyScalar","numeric","_prod","Array__Matrix_number__BigNumber","array","dim","Error","_","args","prod","value","undefined","err"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/statistics/prod.js"],"sourcesContent":["import { deepForEach } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { safeNumberType } from '../../utils/number.js';\r\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\r\nvar name = 'prod';\r\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'numeric'];\r\nexport var createProd = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    multiplyScalar,\r\n    numeric\r\n  } = _ref;\r\n  /**\r\n   * Compute the product of a matrix or a list with values.\r\n   * In case of a multidimensional array or matrix, the sum of all\r\n   * elements will be calculated.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.prod(a, b, c, ...)\r\n   *     math.prod(A)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.multiply(2, 3)           // returns 6\r\n   *     math.prod(2, 3)               // returns 6\r\n   *     math.prod(2, 3, 4)            // returns 24\r\n   *     math.prod([2, 3, 4])          // returns 24\r\n   *     math.prod([[2, 5], [4, 3]])   // returns 120\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, min, max, sum, std, variance\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The product of all values\r\n   */\r\n  return typed(name, {\r\n    // prod([a, b, c, d, ...])\r\n    'Array | Matrix': _prod,\r\n    // prod([a, b, c, d, ...], dim)\r\n    'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {\r\n      // TODO: implement prod(A, dim)\r\n      throw new Error('prod(A, dim) is not yet supported');\r\n      // return reduce(arguments[0], arguments[1], math.prod)\r\n    },\r\n    // prod(a, b, c, d, ...)\r\n    '...': function _(args) {\r\n      return _prod(args);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Recursively calculate the product of an n-dimensional array\r\n   * @param {Array} array\r\n   * @return {number} prod\r\n   * @private\r\n   */\r\n  function _prod(array) {\r\n    var prod;\r\n    deepForEach(array, function (value) {\r\n      try {\r\n        prod = prod === undefined ? value : multiplyScalar(prod, value);\r\n      } catch (err) {\r\n        throw improveErrorMessage(err, 'prod', value);\r\n      }\r\n    });\r\n\r\n    // make sure returning numeric value: parse a string into a numeric value\r\n    if (typeof prod === 'string') {\r\n      prod = numeric(prod, safeNumberType(prod, config));\r\n    }\r\n    if (prod === undefined) {\r\n      throw new Error('Cannot calculate prod of an empty array');\r\n    }\r\n    return prod;\r\n  }\r\n});"],"mappings":"AAAA,SAASA,WAAW,QAAQ,2BAA2B;AACvD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,SAAS,CAAC;AACnE,OAAO,IAAIC,UAAU,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,cAAc;IACdC;EACF,CAAC,GAAGJ,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB;IACA,gBAAgB,EAAEQ,KAAK;IACvB;IACA,oCAAoC,EAAE,SAASC,+BAA+BA,CAACC,KAAK,EAAEC,GAAG,EAAE;MACzF;MACA,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;MACpD;IACF,CAAC;IACD;IACA,KAAK,EAAE,SAASC,CAACA,CAACC,IAAI,EAAE;MACtB,OAAON,KAAK,CAACM,IAAI,CAAC;IACpB;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;EACE,SAASN,KAAKA,CAACE,KAAK,EAAE;IACpB,IAAIK,IAAI;IACRnB,WAAW,CAACc,KAAK,EAAE,UAAUM,KAAK,EAAE;MAClC,IAAI;QACFD,IAAI,GAAGA,IAAI,KAAKE,SAAS,GAAGD,KAAK,GAAGV,cAAc,CAACS,IAAI,EAAEC,KAAK,CAAC;MACjE,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZ,MAAMnB,mBAAmB,CAACmB,GAAG,EAAE,MAAM,EAAEF,KAAK,CAAC;MAC/C;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;MAC5BA,IAAI,GAAGR,OAAO,CAACQ,IAAI,EAAEjB,cAAc,CAACiB,IAAI,EAAEV,MAAM,CAAC,CAAC;IACpD;IACA,IAAIU,IAAI,KAAKE,SAAS,EAAE;MACtB,MAAM,IAAIL,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IACA,OAAOG,IAAI;EACb;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}