{"ast":null,"code":"import { isBigNumber, isNumber } from '../../utils/is.js';\nimport { errorTransform } from './utils/errorTransform.js';\nimport { factory } from '../../utils/factory.js';\nimport { createConcat } from '../../function/matrix/concat.js';\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nexport var createConcatTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    isInteger\n  } = _ref;\n  var concat = createConcat({\n    typed,\n    matrix,\n    isInteger\n  });\n\n  /**\r\n   * Attach a transform function to math.range\r\n   * Adds a property transform containing the transform function.\r\n   *\r\n   * This transform changed the last `dim` parameter of function concat\r\n   * from one-based to zero based\r\n   */\n  return typed('concat', {\n    '...any': function any(args) {\n      // change last argument from one-based to zero-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      } else if (isBigNumber(last)) {\n        args[lastIndex] = last.minus(1);\n      }\n      try {\n        return concat.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["isBigNumber","isNumber","errorTransform","factory","createConcat","name","dependencies","createConcatTransform","_ref","typed","matrix","isInteger","concat","any","args","lastIndex","length","last","minus","apply","err","isTransformFunction"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/expression/transform/concat.transform.js"],"sourcesContent":["import { isBigNumber, isNumber } from '../../utils/is.js';\r\nimport { errorTransform } from './utils/errorTransform.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { createConcat } from '../../function/matrix/concat.js';\r\nvar name = 'concat';\r\nvar dependencies = ['typed', 'matrix', 'isInteger'];\r\nexport var createConcatTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    isInteger\r\n  } = _ref;\r\n  var concat = createConcat({\r\n    typed,\r\n    matrix,\r\n    isInteger\r\n  });\r\n\r\n  /**\r\n   * Attach a transform function to math.range\r\n   * Adds a property transform containing the transform function.\r\n   *\r\n   * This transform changed the last `dim` parameter of function concat\r\n   * from one-based to zero based\r\n   */\r\n  return typed('concat', {\r\n    '...any': function any(args) {\r\n      // change last argument from one-based to zero-based\r\n      var lastIndex = args.length - 1;\r\n      var last = args[lastIndex];\r\n      if (isNumber(last)) {\r\n        args[lastIndex] = last - 1;\r\n      } else if (isBigNumber(last)) {\r\n        args[lastIndex] = last.minus(1);\r\n      }\r\n      try {\r\n        return concat.apply(null, args);\r\n      } catch (err) {\r\n        throw errorTransform(err);\r\n      }\r\n    }\r\n  });\r\n}, {\r\n  isTransformFunction: true\r\n});"],"mappings":"AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,mBAAmB;AACzD,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,YAAY,QAAQ,iCAAiC;AAC9D,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,CAAC;AACnD,OAAO,IAAIC,qBAAqB,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACpF,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,GAAGH,IAAI;EACR,IAAII,MAAM,GAAGR,YAAY,CAAC;IACxBK,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOF,KAAK,CAAC,QAAQ,EAAE;IACrB,QAAQ,EAAE,SAASI,GAAGA,CAACC,IAAI,EAAE;MAC3B;MACA,IAAIC,SAAS,GAAGD,IAAI,CAACE,MAAM,GAAG,CAAC;MAC/B,IAAIC,IAAI,GAAGH,IAAI,CAACC,SAAS,CAAC;MAC1B,IAAId,QAAQ,CAACgB,IAAI,CAAC,EAAE;QAClBH,IAAI,CAACC,SAAS,CAAC,GAAGE,IAAI,GAAG,CAAC;MAC5B,CAAC,MAAM,IAAIjB,WAAW,CAACiB,IAAI,CAAC,EAAE;QAC5BH,IAAI,CAACC,SAAS,CAAC,GAAGE,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;MACjC;MACA,IAAI;QACF,OAAON,MAAM,CAACO,KAAK,CAAC,IAAI,EAAEL,IAAI,CAAC;MACjC,CAAC,CAAC,OAAOM,GAAG,EAAE;QACZ,MAAMlB,cAAc,CAACkB,GAAG,CAAC;MAC3B;IACF;EACF,CAAC,CAAC;AACJ,CAAC,EAAE;EACDC,mBAAmB,EAAE;AACvB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}