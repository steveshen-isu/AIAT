{"ast":null,"code":"import { typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { noBignumber, noFraction } from '../../utils/noop.js';\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nexport var createNumeric = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    number: _number,\n    bignumber,\n    fraction\n  } = _ref;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  };\n\n  // Load the conversion functions for each output type\n  var validOutputTypes = {\n    number: x => _number(x),\n    BigNumber: bignumber ? x => bignumber(x) : noBignumber,\n    bigint: x => BigInt(x),\n    Fraction: fraction ? x => fraction(x) : noFraction\n  };\n\n  /**\r\n   * Convert a numeric input to a specific numeric type: number, BigNumber, bigint, or Fraction.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.numeric(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.numeric('4')                           // returns 4\r\n   *    math.numeric('4', 'number')                 // returns 4\r\n   *    math.numeric('4', 'bigint')                 // returns 4n\r\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\r\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\r\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\r\n   *    math.numeric(math.fraction(2, 5), 'number') // returns 0.4\r\n   *\r\n   * See also:\r\n   *\r\n   *    number, fraction, bignumber, bigint, string, format\r\n   *\r\n   * @param {string | number | BigNumber | bigint | Fraction } value\r\n   *              A numeric value or a string containing a numeric value\r\n   * @param {string} outputType\r\n   *              Desired numeric output type.\r\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\r\n   * @return {number | BigNumber | bigint | Fraction}\r\n   *              Returns an instance of the numeric in the requested type\r\n   */\n  return function numeric(value) {\n    var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'number';\n    var check = arguments.length > 2 ? arguments[2] : undefined;\n    if (check !== undefined) {\n      throw new SyntaxError('numeric() takes one or two arguments');\n    }\n    var inputType = typeOf(value);\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});","map":{"version":3,"names":["typeOf","factory","noBignumber","noFraction","name","dependencies","createNumeric","_ref","number","_number","bignumber","fraction","validInputTypes","string","BigNumber","Fraction","validOutputTypes","x","bigint","BigInt","numeric","value","outputType","arguments","length","undefined","check","SyntaxError","inputType","TypeError","Object","keys","join"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/utils/numeric.js"],"sourcesContent":["import { typeOf } from '../../utils/is.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { noBignumber, noFraction } from '../../utils/noop.js';\r\nvar name = 'numeric';\r\nvar dependencies = ['number', '?bignumber', '?fraction'];\r\nexport var createNumeric = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    number: _number,\r\n    bignumber,\r\n    fraction\r\n  } = _ref;\r\n  var validInputTypes = {\r\n    string: true,\r\n    number: true,\r\n    BigNumber: true,\r\n    Fraction: true\r\n  };\r\n\r\n  // Load the conversion functions for each output type\r\n  var validOutputTypes = {\r\n    number: x => _number(x),\r\n    BigNumber: bignumber ? x => bignumber(x) : noBignumber,\r\n    bigint: x => BigInt(x),\r\n    Fraction: fraction ? x => fraction(x) : noFraction\r\n  };\r\n\r\n  /**\r\n   * Convert a numeric input to a specific numeric type: number, BigNumber, bigint, or Fraction.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.numeric(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.numeric('4')                           // returns 4\r\n   *    math.numeric('4', 'number')                 // returns 4\r\n   *    math.numeric('4', 'bigint')                 // returns 4n\r\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\r\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\r\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\r\n   *    math.numeric(math.fraction(2, 5), 'number') // returns 0.4\r\n   *\r\n   * See also:\r\n   *\r\n   *    number, fraction, bignumber, bigint, string, format\r\n   *\r\n   * @param {string | number | BigNumber | bigint | Fraction } value\r\n   *              A numeric value or a string containing a numeric value\r\n   * @param {string} outputType\r\n   *              Desired numeric output type.\r\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\r\n   * @return {number | BigNumber | bigint | Fraction}\r\n   *              Returns an instance of the numeric in the requested type\r\n   */\r\n  return function numeric(value) {\r\n    var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'number';\r\n    var check = arguments.length > 2 ? arguments[2] : undefined;\r\n    if (check !== undefined) {\r\n      throw new SyntaxError('numeric() takes one or two arguments');\r\n    }\r\n    var inputType = typeOf(value);\r\n    if (!(inputType in validInputTypes)) {\r\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\r\n    }\r\n    if (!(outputType in validOutputTypes)) {\r\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\r\n    }\r\n    if (outputType === inputType) {\r\n      return value;\r\n    } else {\r\n      return validOutputTypes[outputType](value);\r\n    }\r\n  };\r\n});"],"mappings":"AAAA,SAASA,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,EAAEC,UAAU,QAAQ,qBAAqB;AAC7D,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,QAAQ,EAAE,YAAY,EAAE,WAAW,CAAC;AACxD,OAAO,IAAIC,aAAa,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC5E,IAAI;IACFC,MAAM,EAAEC,OAAO;IACfC,SAAS;IACTC;EACF,CAAC,GAAGJ,IAAI;EACR,IAAIK,eAAe,GAAG;IACpBC,MAAM,EAAE,IAAI;IACZL,MAAM,EAAE,IAAI;IACZM,SAAS,EAAE,IAAI;IACfC,QAAQ,EAAE;EACZ,CAAC;;EAED;EACA,IAAIC,gBAAgB,GAAG;IACrBR,MAAM,EAAES,CAAC,IAAIR,OAAO,CAACQ,CAAC,CAAC;IACvBH,SAAS,EAAEJ,SAAS,GAAGO,CAAC,IAAIP,SAAS,CAACO,CAAC,CAAC,GAAGf,WAAW;IACtDgB,MAAM,EAAED,CAAC,IAAIE,MAAM,CAACF,CAAC,CAAC;IACtBF,QAAQ,EAAEJ,QAAQ,GAAGM,CAAC,IAAIN,QAAQ,CAACM,CAAC,CAAC,GAAGd;EAC1C,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO,SAASiB,OAAOA,CAACC,KAAK,EAAE;IAC7B,IAAIC,UAAU,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ;IAC7F,IAAIG,KAAK,GAAGH,SAAS,CAACC,MAAM,GAAG,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAGE,SAAS;IAC3D,IAAIC,KAAK,KAAKD,SAAS,EAAE;MACvB,MAAM,IAAIE,WAAW,CAAC,sCAAsC,CAAC;IAC/D;IACA,IAAIC,SAAS,GAAG5B,MAAM,CAACqB,KAAK,CAAC;IAC7B,IAAI,EAAEO,SAAS,IAAIhB,eAAe,CAAC,EAAE;MACnC,MAAM,IAAIiB,SAAS,CAAC,iBAAiB,GAAGR,KAAK,GAAG,YAAY,GAAGO,SAAS,GAAG,2BAA2B,GAAGE,MAAM,CAACC,IAAI,CAACnB,eAAe,CAAC,CAACoB,IAAI,CAAC,IAAI,CAAC,CAAC;IACnJ;IACA,IAAI,EAAEV,UAAU,IAAIN,gBAAgB,CAAC,EAAE;MACrC,MAAM,IAAIa,SAAS,CAAC,iBAAiB,GAAGR,KAAK,GAAG,YAAY,GAAGC,UAAU,GAAG,4BAA4B,GAAGQ,MAAM,CAACC,IAAI,CAACf,gBAAgB,CAAC,CAACgB,IAAI,CAAC,IAAI,CAAC,CAAC;IACtJ;IACA,IAAIV,UAAU,KAAKM,SAAS,EAAE;MAC5B,OAAOP,KAAK;IACd,CAAC,MAAM;MACL,OAAOL,gBAAgB,CAACM,UAAU,CAAC,CAACD,KAAK,CAAC;IAC5C;EACF,CAAC;AACH,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}