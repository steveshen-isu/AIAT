{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo13xDD';\nvar dependencies = ['typed'];\nexport var createMatAlgo13xDD = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).\r\n   * Callback function invoked MxN times.\r\n   *\r\n   * C(i,j,...z) = f(Aij..z, Bij..z)\r\n   *\r\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\r\n   * @param {Matrix}   b                 The DenseMatrix instance (B)\r\n   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\r\n   *\r\n   * @return {Matrix}                    DenseMatrix (C)\r\n   *\r\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\r\n   */\n  return function matAlgo13xDD(a, b, callback) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b arrays\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // c arrays\n    var csize = [];\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // validate each one of the dimension sizes\n    for (var s = 0; s < asize.length; s++) {\n      // must match\n      if (asize[s] !== bsize[s]) {\n        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n      }\n      // update dimension in c\n      csize[s] = asize[s];\n    }\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // populate cdata, iterate through dimensions\n    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];\n\n    // c matrix\n    return a.createDenseMatrix({\n      data: cdata,\n      size: csize,\n      datatype: dt\n    });\n  };\n\n  // recursive function\n  function _iterate(f, level, s, n, av, bv) {\n    // initialize array for this level\n    var cv = [];\n    // check we reach the last level\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = f(av[i], bv[i]);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\n      }\n    }\n    return cv;\n  }\n});","map":{"version":3,"names":["factory","DimensionError","name","dependencies","createMatAlgo13xDD","_ref","typed","matAlgo13xDD","a","b","callback","adata","_data","asize","_size","adt","_datatype","bdata","bsize","bdt","csize","length","s","RangeError","dt","cf","find","cdata","_iterate","createDenseMatrix","data","size","datatype","f","level","n","av","bv","cv","i","j"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo13xDD.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\r\nimport { DimensionError } from '../../../error/DimensionError.js';\r\nvar name = 'matAlgo13xDD';\r\nvar dependencies = ['typed'];\r\nexport var createMatAlgo13xDD = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).\r\n   * Callback function invoked MxN times.\r\n   *\r\n   * C(i,j,...z) = f(Aij..z, Bij..z)\r\n   *\r\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\r\n   * @param {Matrix}   b                 The DenseMatrix instance (B)\r\n   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\r\n   *\r\n   * @return {Matrix}                    DenseMatrix (C)\r\n   *\r\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\r\n   */\r\n  return function matAlgo13xDD(a, b, callback) {\r\n    // a arrays\r\n    var adata = a._data;\r\n    var asize = a._size;\r\n    var adt = a._datatype;\r\n    // b arrays\r\n    var bdata = b._data;\r\n    var bsize = b._size;\r\n    var bdt = b._datatype;\r\n    // c arrays\r\n    var csize = [];\r\n\r\n    // validate dimensions\r\n    if (asize.length !== bsize.length) {\r\n      throw new DimensionError(asize.length, bsize.length);\r\n    }\r\n\r\n    // validate each one of the dimension sizes\r\n    for (var s = 0; s < asize.length; s++) {\r\n      // must match\r\n      if (asize[s] !== bsize[s]) {\r\n        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\r\n      }\r\n      // update dimension in c\r\n      csize[s] = asize[s];\r\n    }\r\n\r\n    // datatype\r\n    var dt;\r\n    // callback signature to use\r\n    var cf = callback;\r\n\r\n    // process data types\r\n    if (typeof adt === 'string' && adt === bdt) {\r\n      // datatype\r\n      dt = adt;\r\n      // callback\r\n      cf = typed.find(callback, [dt, dt]);\r\n    }\r\n\r\n    // populate cdata, iterate through dimensions\r\n    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];\r\n\r\n    // c matrix\r\n    return a.createDenseMatrix({\r\n      data: cdata,\r\n      size: csize,\r\n      datatype: dt\r\n    });\r\n  };\r\n\r\n  // recursive function\r\n  function _iterate(f, level, s, n, av, bv) {\r\n    // initialize array for this level\r\n    var cv = [];\r\n    // check we reach the last level\r\n    if (level === s.length - 1) {\r\n      // loop arrays in last level\r\n      for (var i = 0; i < n; i++) {\r\n        // invoke callback and store value\r\n        cv[i] = f(av[i], bv[i]);\r\n      }\r\n    } else {\r\n      // iterate current level\r\n      for (var j = 0; j < n; j++) {\r\n        // iterate next level\r\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\r\n      }\r\n    }\r\n    return cv;\r\n  }\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}