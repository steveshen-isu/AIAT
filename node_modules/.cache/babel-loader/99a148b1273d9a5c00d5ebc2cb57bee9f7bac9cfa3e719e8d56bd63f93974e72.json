{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { logNumber } from '../../plain/number/index.js';\nvar name = 'log';\nvar dependencies = ['config', 'typed', 'typeOf', 'divideScalar', 'Complex'];\nexport var createLog = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    typeOf,\n    config,\n    divideScalar,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the logarithm of a value.\n   *\n   * To avoid confusion with the matrix logarithm, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.log(x)\n   *    math.log(x, base)\n   *\n   * Examples:\n   *\n   *    math.log(3.5)                  // returns 1.252762968495368\n   *    math.exp(math.log(2.4))        // returns 2.4\n   *\n   *    math.pow(10, 4)                // returns 10000\n   *    math.log(10000, 10)            // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *\n   *    math.log(1024, 2)              // returns 10\n   *    math.pow(2, 10)                // returns 1024\n   *\n   * See also:\n   *\n   *    exp, log2, log10, log1p\n   *\n   * @param {number | BigNumber | Fraction | Complex} x\n   *            Value for which to calculate the logarithm.\n   * @param {number | BigNumber | Fraction | Complex} [base=e]\n   *            Optional base for the logarithm. If not provided, the natural\n   *            logarithm of `x` is calculated.\n   * @return {number | BigNumber | Fraction | Complex}\n   *            Returns the logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return logNumber(x);\n      } else {\n        // negative value -> complex value computation\n        return new Complex(x, 0).log();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.log();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new Complex(x.toNumber(), 0).log();\n      }\n    },\n    'any, any': typed.referToSelf(self => (x, base) => {\n      // calculate logarithm for a specified base, log(x, base)\n\n      if (typeOf(x) === 'Fraction' && typeOf(base) === 'Fraction') {\n        var result = x.log(base);\n        if (result !== null) {\n          return result;\n        }\n      }\n      return divideScalar(self(x), self(base));\n    })\n  });\n});","map":{"version":3,"names":["factory","logNumber","name","dependencies","createLog","_ref","typed","typeOf","config","divideScalar","Complex","number","x","predictable","log","BigNumber","isNegative","ln","toNumber","referToSelf","self","base","result"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/log.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { logNumber } from '../../plain/number/index.js';\nvar name = 'log';\nvar dependencies = ['config', 'typed', 'typeOf', 'divideScalar', 'Complex'];\nexport var createLog = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    typeOf,\n    config,\n    divideScalar,\n    Complex\n  } = _ref;\n  /**\n   * Calculate the logarithm of a value.\n   *\n   * To avoid confusion with the matrix logarithm, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.log(x)\n   *    math.log(x, base)\n   *\n   * Examples:\n   *\n   *    math.log(3.5)                  // returns 1.252762968495368\n   *    math.exp(math.log(2.4))        // returns 2.4\n   *\n   *    math.pow(10, 4)                // returns 10000\n   *    math.log(10000, 10)            // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *\n   *    math.log(1024, 2)              // returns 10\n   *    math.pow(2, 10)                // returns 1024\n   *\n   * See also:\n   *\n   *    exp, log2, log10, log1p\n   *\n   * @param {number | BigNumber | Fraction | Complex} x\n   *            Value for which to calculate the logarithm.\n   * @param {number | BigNumber | Fraction | Complex} [base=e]\n   *            Optional base for the logarithm. If not provided, the natural\n   *            logarithm of `x` is calculated.\n   * @return {number | BigNumber | Fraction | Complex}\n   *            Returns the logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return logNumber(x);\n      } else {\n        // negative value -> complex value computation\n        return new Complex(x, 0).log();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.log();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new Complex(x.toNumber(), 0).log();\n      }\n    },\n    'any, any': typed.referToSelf(self => (x, base) => {\n      // calculate logarithm for a specified base, log(x, base)\n\n      if (typeOf(x) === 'Fraction' && typeOf(base) === 'Fraction') {\n        var result = x.log(base);\n        if (result !== null) {\n          return result;\n        }\n      }\n      return divideScalar(self(x), self(base));\n    })\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,QAAQ,6BAA6B;AACvD,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,SAAS,CAAC;AAC3E,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,MAAM;IACNC,YAAY;IACZC;EACF,CAAC,GAAGL,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBS,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,IAAI,CAAC,IAAIJ,MAAM,CAACK,WAAW,EAAE;QAChC,OAAOZ,SAAS,CAACW,CAAC,CAAC;MACrB,CAAC,MAAM;QACL;QACA,OAAO,IAAIF,OAAO,CAACE,CAAC,EAAE,CAAC,CAAC,CAACE,GAAG,CAAC,CAAC;MAChC;IACF,CAAC;IACDJ,OAAO,EAAE,SAASA,OAAOA,CAACE,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACE,GAAG,CAAC,CAAC;IAChB,CAAC;IACDC,SAAS,EAAE,SAASA,SAASA,CAACH,CAAC,EAAE;MAC/B,IAAI,CAACA,CAAC,CAACI,UAAU,CAAC,CAAC,IAAIR,MAAM,CAACK,WAAW,EAAE;QACzC,OAAOD,CAAC,CAACK,EAAE,CAAC,CAAC;MACf,CAAC,MAAM;QACL;QACA,OAAO,IAAIP,OAAO,CAACE,CAAC,CAACM,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAACJ,GAAG,CAAC,CAAC;MAC3C;IACF,CAAC;IACD,UAAU,EAAER,KAAK,CAACa,WAAW,CAACC,IAAI,IAAI,CAACR,CAAC,EAAES,IAAI,KAAK;MACjD;;MAEA,IAAId,MAAM,CAACK,CAAC,CAAC,KAAK,UAAU,IAAIL,MAAM,CAACc,IAAI,CAAC,KAAK,UAAU,EAAE;QAC3D,IAAIC,MAAM,GAAGV,CAAC,CAACE,GAAG,CAACO,IAAI,CAAC;QACxB,IAAIC,MAAM,KAAK,IAAI,EAAE;UACnB,OAAOA,MAAM;QACf;MACF;MACA,OAAOb,YAAY,CAACW,IAAI,CAACR,CAAC,CAAC,EAAEQ,IAAI,CAACC,IAAI,CAAC,CAAC;IAC1C,CAAC;EACH,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}