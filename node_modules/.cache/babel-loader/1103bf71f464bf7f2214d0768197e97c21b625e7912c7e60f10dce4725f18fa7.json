{"ast":null,"code":"import { isBigNumber, isNumber, isObject } from './is.js';\n\n/**\r\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\r\n */\n\n/**\r\n * Check if a number is integer\r\n * @param {number | boolean} value\r\n * @return {boolean} isInteger\r\n */\nexport function isInteger(value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n  return isFinite(value) ? value === Math.round(value) : false;\n}\n\n/**\r\n * Check if a string contains an integer\r\n * @param {string} str\r\n * @return {boolean} isInteger\r\n */\nexport function isIntegerStr(str) {\n  // regex matching strings like \"123\" and \"-123\"\n  return /^-?\\d+$/.test(str);\n}\n\n/**\r\n * Ensure the number type is compatible with the provided value.\r\n * If not, return 'number' instead.\r\n *\r\n * For example:\r\n *\r\n *     safeNumberType('2.3', { number: 'bigint', numberFallback: 'number' })\r\n *\r\n * will return 'number' and not 'bigint' because trying to create a bigint with\r\n * value 2.3 would throw an exception.\r\n *\r\n * @param {string} numberStr\r\n * @param {{\r\n *   number: 'number' | 'BigNumber' | 'bigint' | 'Fraction'\r\n *   numberFallback: 'number' | 'BigNumber'\r\n * }} config\r\n * @returns {'number' | 'BigNumber' | 'bigint' | 'Fraction'}\r\n */\nexport function safeNumberType(numberStr, config) {\n  if (config.number === 'bigint' && !isIntegerStr(numberStr)) {\n    return config.numberFallback;\n  }\n  return config.number;\n}\n\n/**\r\n * Calculate the sign of a number\r\n * @param {number} x\r\n * @returns {number}\r\n */\nexport var sign = Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n\n/**\r\n * Calculate the base-2 logarithm of a number\r\n * @param {number} x\r\n * @returns {number}\r\n */\nexport var log2 = Math.log2 || function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n\n/**\r\n * Calculate the base-10 logarithm of a number\r\n * @param {number} x\r\n * @returns {number}\r\n */\nexport var log10 = Math.log10 || function log10(x) {\n  return Math.log(x) / Math.LN10;\n};\n\n/**\r\n * Calculate the natural logarithm of a number + 1\r\n * @param {number} x\r\n * @returns {number}\r\n */\nexport var log1p = Math.log1p || function (x) {\n  return Math.log(x + 1);\n};\n\n/**\r\n * Calculate cubic root for a number\r\n *\r\n * Code from es6-shim.js:\r\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\r\n *\r\n * @param {number} x\r\n * @returns {number} Returns the cubic root of x\r\n */\nexport var cbrt = Math.cbrt || function cbrt(x) {\n  if (x === 0) {\n    return x;\n  }\n  var negate = x < 0;\n  var result;\n  if (negate) {\n    x = -x;\n  }\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3);\n    // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n  return negate ? -result : result;\n};\n\n/**\r\n * Calculates exponentiation minus 1\r\n * @param {number} x\r\n * @return {number} res\r\n */\nexport var expm1 = Math.expm1 || function expm1(x) {\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n};\n\n/**\r\n * Formats a number in a given base\r\n * @param {number} n\r\n * @param {number} base\r\n * @param {number} size\r\n * @returns {string}\r\n */\nfunction formatNumberToBase(n, base, size) {\n  var prefixes = {\n    2: '0b',\n    8: '0o',\n    16: '0x'\n  };\n  var prefix = prefixes[base];\n  var suffix = '';\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n    if (!isInteger(size)) {\n      throw new Error('size must be an integer');\n    }\n    if (n > 2 ** (size - 1) - 1 || n < -(2 ** (size - 1))) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n    if (!isInteger(n)) {\n      throw new Error('Value must be an integer');\n    }\n    if (n < 0) {\n      n = n + 2 ** size;\n    }\n    suffix = \"i\".concat(size);\n  }\n  var sign = '';\n  if (n < 0) {\n    n = -n;\n    sign = '-';\n  }\n  return \"\".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);\n}\n\n/**\r\n * Convert a number to a formatted string representation.\r\n *\r\n * Syntax:\r\n *\r\n *    format(value)\r\n *    format(value, options)\r\n *    format(value, precision)\r\n *    format(value, fn)\r\n *\r\n * Where:\r\n *\r\n *    {number} value   The value to be formatted\r\n *    {Object} options An object with formatting options. Available options:\r\n *                     {string} notation\r\n *                         Number notation. Choose from:\r\n *                         'fixed'          Always use regular number notation.\r\n *                                          For example '123.40' and '14000000'\r\n *                         'exponential'    Always use exponential notation.\r\n *                                          For example '1.234e+2' and '1.4e+7'\r\n *                         'engineering'    Always use engineering notation.\r\n *                                          For example '123.4e+0' and '14.0e+6'\r\n *                         'auto' (default) Regular number notation for numbers\r\n *                                          having an absolute value between\r\n *                                          `lowerExp` and `upperExp` bounds, and\r\n *                                          uses exponential notation elsewhere.\r\n *                                          Lower bound is included, upper bound\r\n *                                          is excluded.\r\n *                                          For example '123.4' and '1.4e7'.\r\n *                         'bin', 'oct, or\r\n *                         'hex'            Format the number using binary, octal,\r\n *                                          or hexadecimal notation.\r\n *                                          For example '0b1101' and '0x10fe'.\r\n *                     {number} wordSize    The word size in bits to use for formatting\r\n *                                          in binary, octal, or hexadecimal notation.\r\n *                                          To be used only with 'bin', 'oct', or 'hex'\r\n *                                          values for 'notation' option. When this option\r\n *                                          is defined the value is formatted as a signed\r\n *                                          twos complement integer of the given word size\r\n *                                          and the size suffix is appended to the output.\r\n *                                          For example\r\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\r\n *                                          Default value is undefined.\r\n *                     {number} precision   A number between 0 and 16 to round\r\n *                                          the digits of the number.\r\n *                                          In case of notations 'exponential',\r\n *                                          'engineering', and 'auto',\r\n *                                          `precision` defines the total\r\n *                                          number of significant digits returned.\r\n *                                          In case of notation 'fixed',\r\n *                                          `precision` defines the number of\r\n *                                          significant digits after the decimal\r\n *                                          point.\r\n *                                          `precision` is undefined by default,\r\n *                                          not rounding any digits.\r\n *                     {number} lowerExp    Exponent determining the lower boundary\r\n *                                          for formatting a value with an exponent\r\n *                                          when `notation='auto`.\r\n *                                          Default value is `-3`.\r\n *                     {number} upperExp    Exponent determining the upper boundary\r\n *                                          for formatting a value with an exponent\r\n *                                          when `notation='auto`.\r\n *                                          Default value is `5`.\r\n *    {Function} fn    A custom formatting function. Can be used to override the\r\n *                     built-in notations. Function `fn` is called with `value` as\r\n *                     parameter and must return a string. Is useful for example to\r\n *                     format all values inside a matrix in a particular way.\r\n *\r\n * Examples:\r\n *\r\n *    format(6.4)                                        // '6.4'\r\n *    format(1240000)                                    // '1.24e6'\r\n *    format(1/3)                                        // '0.3333333333333333'\r\n *    format(1/3, 3)                                     // '0.333'\r\n *    format(21385, 2)                                   // '21000'\r\n *    format(12.071, {notation: 'fixed'})                // '12'\r\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\r\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\r\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\r\n *\r\n * @param {number} value\r\n * @param {Object | Function | number} [options]\r\n * @return {string} str The formatted value\r\n */\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  }\n\n  // handle special cases\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  }\n  var {\n    notation,\n    precision,\n    wordSize\n  } = normalizeFormatOptions(options);\n\n  // handle the various notations\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n    case 'exponential':\n      return toExponential(value, precision);\n    case 'engineering':\n      return toEngineering(value, precision);\n    case 'bin':\n      return formatNumberToBase(value, 2, wordSize);\n    case 'oct':\n      return formatNumberToBase(value, 8, wordSize);\n    case 'hex':\n      return formatNumberToBase(value, 16, wordSize);\n    case 'auto':\n      // remove trailing zeros after the decimal point\n      return toPrecision(value, precision, options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n\n/**\r\n * Normalize format options into an object:\r\n *   {\r\n *     notation: string,\r\n *     precision: number | undefined,\r\n *     wordSize: number | undefined\r\n *   }\r\n */\nexport function normalizeFormatOptions(options) {\n  // default values for options\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n  if (options !== undefined) {\n    if (isNumber(options)) {\n      precision = options;\n    } else if (isBigNumber(options)) {\n      precision = options.toNumber();\n    } else if (isObject(options)) {\n      if (options.precision !== undefined) {\n        precision = _toNumberOrThrow(options.precision, () => {\n          throw new Error('Option \"precision\" must be a number or BigNumber');\n        });\n      }\n      if (options.wordSize !== undefined) {\n        wordSize = _toNumberOrThrow(options.wordSize, () => {\n          throw new Error('Option \"wordSize\" must be a number or BigNumber');\n        });\n      }\n      if (options.notation) {\n        notation = options.notation;\n      }\n    } else {\n      throw new Error('Unsupported type of options, number, BigNumber, or object expected');\n    }\n  }\n  return {\n    notation,\n    precision,\n    wordSize\n  };\n}\n\n/**\r\n * Split a number into sign, coefficients, and exponent\r\n * @param {number | string} value\r\n * @return {SplitValue}\r\n *              Returns an object containing sign, coefficients, and exponent\r\n */\nexport function splitNumber(value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n  return {\n    sign,\n    coefficients,\n    exponent\n  };\n}\n\n/**\r\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\r\n * @param {number | string} value\r\n * @param {number} [precision]        Optional number of significant figures to return.\r\n */\nexport function toEngineering(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n  var split = splitNumber(value);\n  var rounded = roundDigits(split, precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients;\n\n  // find nearest lower multiple of 3 for exponent\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n  if (isNumber(precision)) {\n    // add zeroes to give correct sig figs\n    while (precision > c.length || e - newExp + 1 > c.length) {\n      c.push(0);\n    }\n  } else {\n    // concatenate coefficients with necessary zeros\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\n    for (var i = 0; i < missingZeros; i++) {\n      c.push(0);\n    }\n  }\n\n  // find difference in exponents\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1;\n\n  // push decimal index over by expDiff times\n  while (expDiff > 0) {\n    decimalIdx++;\n    expDiff--;\n  }\n\n  // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n}\n\n/**\r\n * Format a number with fixed notation.\r\n * @param {number | string} value\r\n * @param {number} [precision=undefined]  Optional number of decimals after the\r\n *                                        decimal point. null by default.\r\n */\nexport function toFixed(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n  var splitValue = splitNumber(value);\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n\n  // append zeros if needed\n  var pp = p + (precision || 0);\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  }\n\n  // prepend zeros if needed\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  }\n\n  // insert a dot if needed\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n  return rounded.sign + c.join('');\n}\n\n/**\r\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\r\n * @param {number | string} value\r\n * @param {number} [precision]  Number of digits in formatted output.\r\n *                              If not provided, the maximum available digits\r\n *                              is used.\r\n */\nexport function toExponential(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  // round if needed, else create a clone\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent;\n\n  // append zeros if needed\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  }\n\n  // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n}\n\n/**\r\n * Format a number with a certain precision\r\n * @param {number | string} value\r\n * @param {number} [precision=undefined] Optional number of digits.\r\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\r\n *                                       By default:\r\n *                                         lowerExp = -3 (incl)\r\n *                                         upper = +5 (excl)\r\n * @return {string}\r\n */\nexport function toPrecision(value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  // determine lower and upper bound for exponential notation.\n  var lowerExp = _toNumberOrDefault(options === null || options === void 0 ? void 0 : options.lowerExp, -3);\n  var upperExp = _toNumberOrDefault(options === null || options === void 0 ? void 0 : options.upperExp, 5);\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\n    // exponential notation\n    return toExponential(value, precision);\n  } else {\n    var c = rounded.coefficients;\n    var e = rounded.exponent;\n\n    // append trailing zeros\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    }\n\n    // append trailing zeros\n    // TODO: simplify the next statement\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0)));\n\n    // prepend zeros\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n    return rounded.sign + c.join('');\n  }\n}\n\n/**\r\n * Round the number of digits of a number *\r\n * @param {SplitValue} split       A value split with .splitNumber(value)\r\n * @param {number} precision  A positive integer\r\n * @return {SplitValue}\r\n *              Returns an object containing sign, coefficients, and exponent\r\n *              with rounded digits\r\n */\nexport function roundDigits(split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients;\n\n  // prepend zeros if needed\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n      while (c[i] === 10) {\n        c.pop();\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n        i--;\n        c[i]++;\n      }\n    }\n  }\n  return rounded;\n}\n\n/**\r\n * Create an array filled with zeros.\r\n * @param {number} length\r\n * @return {Array}\r\n */\nfunction zeros(length) {\n  var arr = [];\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n  return arr;\n}\n\n/**\r\n * Count the number of significant digits of a number.\r\n *\r\n * For example:\r\n *   2.34 returns 3\r\n *   0.0034 returns 2\r\n *   120.5e+30 returns 4\r\n *\r\n * @param {number} value\r\n * @return {number} digits   Number of significant digits\r\n */\nexport function digits(value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n}\n\n/**\r\n * Minimum number added to one that makes the result different than one\r\n */\nexport var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n\n/**\r\n * Compares two floating point numbers.\r\n * @param {number} a - First value to compare\r\n * @param {number} b - Second value to compare\r\n * @param {number} [relTol=1e-09] - The relative tolerance, indicating the maximum allowed difference relative to the larger absolute value. Must be greater than 0.\r\n * @param {number} [absTol=1e-12] - The minimum absolute tolerance, useful for comparisons near zero. Must be at least 0.\r\n * @return {boolean} whether the two numbers are nearly equal\r\n *\r\n * @throws {Error} If `relTol` is less than or equal to 0.\r\n * @throws {Error} If `absTol` is less than 0.\r\n *\r\n * @example\r\n * nearlyEqual(1.000000001, 1.0, 1e-8);            // true\r\n * nearlyEqual(1.000000002, 1.0, 0);            // false\r\n * nearlyEqual(1.0, 1.009, undefined, 0.01);       // true\r\n * nearlyEqual(0.000000001, 0.0, undefined, 1e-8); // true\r\n */\nexport function nearlyEqual(a, b) {\n  var relTol = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e-8;\n  var absTol = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  if (relTol <= 0) {\n    throw new Error('Relative tolerance must be greater than 0');\n  }\n  if (absTol < 0) {\n    throw new Error('Absolute tolerance must be at least 0');\n  }\n\n  // NaN\n  if (isNaN(a) || isNaN(b)) {\n    return false;\n  }\n  if (!isFinite(a) || !isFinite(b)) {\n    return a === b;\n  }\n  if (a === b) {\n    return true;\n  }\n\n  // abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\n  return Math.abs(a - b) <= Math.max(relTol * Math.max(Math.abs(a), Math.abs(b)), absTol);\n}\n\n/**\r\n * Calculate the hyperbolic arccos of a number\r\n * @param {number} x\r\n * @return {number}\r\n */\nexport var acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x * x - 1) + x);\n};\nexport var asinh = Math.asinh || function (x) {\n  return Math.log(Math.sqrt(x * x + 1) + x);\n};\n\n/**\r\n * Calculate the hyperbolic arctangent of a number\r\n * @param {number} x\r\n * @return {number}\r\n */\nexport var atanh = Math.atanh || function (x) {\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n\n/**\r\n * Calculate the hyperbolic cosine of a number\r\n * @param {number} x\r\n * @returns {number}\r\n */\nexport var cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n\n/**\r\n * Calculate the hyperbolic sine of a number\r\n * @param {number} x\r\n * @returns {number}\r\n */\nexport var sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n\n/**\r\n * Calculate the hyperbolic tangent of a number\r\n * @param {number} x\r\n * @returns {number}\r\n */\nexport var tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};\n\n/**\r\n * Returns a value with the magnitude of x and the sign of y.\r\n * @param {number} x\r\n * @param {number} y\r\n * @returns {number}\r\n */\nexport function copysign(x, y) {\n  var signx = x > 0 ? true : x < 0 ? false : 1 / x === Infinity;\n  var signy = y > 0 ? true : y < 0 ? false : 1 / y === Infinity;\n  return signx ^ signy ? -x : x;\n}\nfunction _toNumberOrThrow(value, onError) {\n  if (isNumber(value)) {\n    return value;\n  } else if (isBigNumber(value)) {\n    return value.toNumber();\n  } else {\n    onError();\n  }\n}\nfunction _toNumberOrDefault(value, defaultValue) {\n  if (isNumber(value)) {\n    return value;\n  } else if (isBigNumber(value)) {\n    return value.toNumber();\n  } else {\n    return defaultValue;\n  }\n}","map":{"version":3,"names":["isBigNumber","isNumber","isObject","isInteger","value","isFinite","Math","round","isIntegerStr","str","test","safeNumberType","numberStr","config","number","numberFallback","sign","x","log2","log","LN2","log10","LN10","log1p","cbrt","negate","result","exp","expm1","formatNumberToBase","n","base","size","prefixes","prefix","suffix","Error","concat","toString","format","options","Infinity","isNaN","notation","precision","wordSize","normalizeFormatOptions","toFixed","toExponential","toEngineering","toPrecision","replace","digits","arguments","e","undefined","toNumber","_toNumberOrThrow","splitNumber","match","String","toLowerCase","SyntaxError","exponent","parseFloat","dot","indexOf","length","coefficients","zeros","split","map","d","parseInt","push","rounded","roundDigits","c","newExp","missingZeros","abs","i","expDiff","decimalIdx","decimals","slice","join","decimalVal","splitValue","p","pp","splice","first","shift","lowerExp","_toNumberOrDefault","upperExp","unshift","removed","pop","arr","DBL_EPSILON","Number","EPSILON","nearlyEqual","a","b","relTol","absTol","max","acosh","sqrt","asinh","atanh","cosh","sinh","tanh","copysign","y","signx","signy","onError","defaultValue"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/utils/number.js"],"sourcesContent":["import { isBigNumber, isNumber, isObject } from './is.js';\r\n\r\n/**\r\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\r\n */\r\n\r\n/**\r\n * Check if a number is integer\r\n * @param {number | boolean} value\r\n * @return {boolean} isInteger\r\n */\r\nexport function isInteger(value) {\r\n  if (typeof value === 'boolean') {\r\n    return true;\r\n  }\r\n  return isFinite(value) ? value === Math.round(value) : false;\r\n}\r\n\r\n/**\r\n * Check if a string contains an integer\r\n * @param {string} str\r\n * @return {boolean} isInteger\r\n */\r\nexport function isIntegerStr(str) {\r\n  // regex matching strings like \"123\" and \"-123\"\r\n  return /^-?\\d+$/.test(str);\r\n}\r\n\r\n/**\r\n * Ensure the number type is compatible with the provided value.\r\n * If not, return 'number' instead.\r\n *\r\n * For example:\r\n *\r\n *     safeNumberType('2.3', { number: 'bigint', numberFallback: 'number' })\r\n *\r\n * will return 'number' and not 'bigint' because trying to create a bigint with\r\n * value 2.3 would throw an exception.\r\n *\r\n * @param {string} numberStr\r\n * @param {{\r\n *   number: 'number' | 'BigNumber' | 'bigint' | 'Fraction'\r\n *   numberFallback: 'number' | 'BigNumber'\r\n * }} config\r\n * @returns {'number' | 'BigNumber' | 'bigint' | 'Fraction'}\r\n */\r\nexport function safeNumberType(numberStr, config) {\r\n  if (config.number === 'bigint' && !isIntegerStr(numberStr)) {\r\n    return config.numberFallback;\r\n  }\r\n  return config.number;\r\n}\r\n\r\n/**\r\n * Calculate the sign of a number\r\n * @param {number} x\r\n * @returns {number}\r\n */\r\nexport var sign = Math.sign || function (x) {\r\n  if (x > 0) {\r\n    return 1;\r\n  } else if (x < 0) {\r\n    return -1;\r\n  } else {\r\n    return 0;\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate the base-2 logarithm of a number\r\n * @param {number} x\r\n * @returns {number}\r\n */\r\nexport var log2 = Math.log2 || function log2(x) {\r\n  return Math.log(x) / Math.LN2;\r\n};\r\n\r\n/**\r\n * Calculate the base-10 logarithm of a number\r\n * @param {number} x\r\n * @returns {number}\r\n */\r\nexport var log10 = Math.log10 || function log10(x) {\r\n  return Math.log(x) / Math.LN10;\r\n};\r\n\r\n/**\r\n * Calculate the natural logarithm of a number + 1\r\n * @param {number} x\r\n * @returns {number}\r\n */\r\nexport var log1p = Math.log1p || function (x) {\r\n  return Math.log(x + 1);\r\n};\r\n\r\n/**\r\n * Calculate cubic root for a number\r\n *\r\n * Code from es6-shim.js:\r\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\r\n *\r\n * @param {number} x\r\n * @returns {number} Returns the cubic root of x\r\n */\r\nexport var cbrt = Math.cbrt || function cbrt(x) {\r\n  if (x === 0) {\r\n    return x;\r\n  }\r\n  var negate = x < 0;\r\n  var result;\r\n  if (negate) {\r\n    x = -x;\r\n  }\r\n  if (isFinite(x)) {\r\n    result = Math.exp(Math.log(x) / 3);\r\n    // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\r\n    result = (x / (result * result) + 2 * result) / 3;\r\n  } else {\r\n    result = x;\r\n  }\r\n  return negate ? -result : result;\r\n};\r\n\r\n/**\r\n * Calculates exponentiation minus 1\r\n * @param {number} x\r\n * @return {number} res\r\n */\r\nexport var expm1 = Math.expm1 || function expm1(x) {\r\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\r\n};\r\n\r\n/**\r\n * Formats a number in a given base\r\n * @param {number} n\r\n * @param {number} base\r\n * @param {number} size\r\n * @returns {string}\r\n */\r\nfunction formatNumberToBase(n, base, size) {\r\n  var prefixes = {\r\n    2: '0b',\r\n    8: '0o',\r\n    16: '0x'\r\n  };\r\n  var prefix = prefixes[base];\r\n  var suffix = '';\r\n  if (size) {\r\n    if (size < 1) {\r\n      throw new Error('size must be in greater than 0');\r\n    }\r\n    if (!isInteger(size)) {\r\n      throw new Error('size must be an integer');\r\n    }\r\n    if (n > 2 ** (size - 1) - 1 || n < -(2 ** (size - 1))) {\r\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\r\n    }\r\n    if (!isInteger(n)) {\r\n      throw new Error('Value must be an integer');\r\n    }\r\n    if (n < 0) {\r\n      n = n + 2 ** size;\r\n    }\r\n    suffix = \"i\".concat(size);\r\n  }\r\n  var sign = '';\r\n  if (n < 0) {\r\n    n = -n;\r\n    sign = '-';\r\n  }\r\n  return \"\".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);\r\n}\r\n\r\n/**\r\n * Convert a number to a formatted string representation.\r\n *\r\n * Syntax:\r\n *\r\n *    format(value)\r\n *    format(value, options)\r\n *    format(value, precision)\r\n *    format(value, fn)\r\n *\r\n * Where:\r\n *\r\n *    {number} value   The value to be formatted\r\n *    {Object} options An object with formatting options. Available options:\r\n *                     {string} notation\r\n *                         Number notation. Choose from:\r\n *                         'fixed'          Always use regular number notation.\r\n *                                          For example '123.40' and '14000000'\r\n *                         'exponential'    Always use exponential notation.\r\n *                                          For example '1.234e+2' and '1.4e+7'\r\n *                         'engineering'    Always use engineering notation.\r\n *                                          For example '123.4e+0' and '14.0e+6'\r\n *                         'auto' (default) Regular number notation for numbers\r\n *                                          having an absolute value between\r\n *                                          `lowerExp` and `upperExp` bounds, and\r\n *                                          uses exponential notation elsewhere.\r\n *                                          Lower bound is included, upper bound\r\n *                                          is excluded.\r\n *                                          For example '123.4' and '1.4e7'.\r\n *                         'bin', 'oct, or\r\n *                         'hex'            Format the number using binary, octal,\r\n *                                          or hexadecimal notation.\r\n *                                          For example '0b1101' and '0x10fe'.\r\n *                     {number} wordSize    The word size in bits to use for formatting\r\n *                                          in binary, octal, or hexadecimal notation.\r\n *                                          To be used only with 'bin', 'oct', or 'hex'\r\n *                                          values for 'notation' option. When this option\r\n *                                          is defined the value is formatted as a signed\r\n *                                          twos complement integer of the given word size\r\n *                                          and the size suffix is appended to the output.\r\n *                                          For example\r\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\r\n *                                          Default value is undefined.\r\n *                     {number} precision   A number between 0 and 16 to round\r\n *                                          the digits of the number.\r\n *                                          In case of notations 'exponential',\r\n *                                          'engineering', and 'auto',\r\n *                                          `precision` defines the total\r\n *                                          number of significant digits returned.\r\n *                                          In case of notation 'fixed',\r\n *                                          `precision` defines the number of\r\n *                                          significant digits after the decimal\r\n *                                          point.\r\n *                                          `precision` is undefined by default,\r\n *                                          not rounding any digits.\r\n *                     {number} lowerExp    Exponent determining the lower boundary\r\n *                                          for formatting a value with an exponent\r\n *                                          when `notation='auto`.\r\n *                                          Default value is `-3`.\r\n *                     {number} upperExp    Exponent determining the upper boundary\r\n *                                          for formatting a value with an exponent\r\n *                                          when `notation='auto`.\r\n *                                          Default value is `5`.\r\n *    {Function} fn    A custom formatting function. Can be used to override the\r\n *                     built-in notations. Function `fn` is called with `value` as\r\n *                     parameter and must return a string. Is useful for example to\r\n *                     format all values inside a matrix in a particular way.\r\n *\r\n * Examples:\r\n *\r\n *    format(6.4)                                        // '6.4'\r\n *    format(1240000)                                    // '1.24e6'\r\n *    format(1/3)                                        // '0.3333333333333333'\r\n *    format(1/3, 3)                                     // '0.333'\r\n *    format(21385, 2)                                   // '21000'\r\n *    format(12.071, {notation: 'fixed'})                // '12'\r\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\r\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\r\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\r\n *\r\n * @param {number} value\r\n * @param {Object | Function | number} [options]\r\n * @return {string} str The formatted value\r\n */\r\nexport function format(value, options) {\r\n  if (typeof options === 'function') {\r\n    // handle format(value, fn)\r\n    return options(value);\r\n  }\r\n\r\n  // handle special cases\r\n  if (value === Infinity) {\r\n    return 'Infinity';\r\n  } else if (value === -Infinity) {\r\n    return '-Infinity';\r\n  } else if (isNaN(value)) {\r\n    return 'NaN';\r\n  }\r\n  var {\r\n    notation,\r\n    precision,\r\n    wordSize\r\n  } = normalizeFormatOptions(options);\r\n\r\n  // handle the various notations\r\n  switch (notation) {\r\n    case 'fixed':\r\n      return toFixed(value, precision);\r\n    case 'exponential':\r\n      return toExponential(value, precision);\r\n    case 'engineering':\r\n      return toEngineering(value, precision);\r\n    case 'bin':\r\n      return formatNumberToBase(value, 2, wordSize);\r\n    case 'oct':\r\n      return formatNumberToBase(value, 8, wordSize);\r\n    case 'hex':\r\n      return formatNumberToBase(value, 16, wordSize);\r\n    case 'auto':\r\n      // remove trailing zeros after the decimal point\r\n      return toPrecision(value, precision, options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\r\n        var digits = arguments[2];\r\n        var e = arguments[4];\r\n        return digits !== '.' ? digits + e : e;\r\n      });\r\n    default:\r\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\r\n  }\r\n}\r\n\r\n/**\r\n * Normalize format options into an object:\r\n *   {\r\n *     notation: string,\r\n *     precision: number | undefined,\r\n *     wordSize: number | undefined\r\n *   }\r\n */\r\nexport function normalizeFormatOptions(options) {\r\n  // default values for options\r\n  var notation = 'auto';\r\n  var precision;\r\n  var wordSize;\r\n  if (options !== undefined) {\r\n    if (isNumber(options)) {\r\n      precision = options;\r\n    } else if (isBigNumber(options)) {\r\n      precision = options.toNumber();\r\n    } else if (isObject(options)) {\r\n      if (options.precision !== undefined) {\r\n        precision = _toNumberOrThrow(options.precision, () => {\r\n          throw new Error('Option \"precision\" must be a number or BigNumber');\r\n        });\r\n      }\r\n      if (options.wordSize !== undefined) {\r\n        wordSize = _toNumberOrThrow(options.wordSize, () => {\r\n          throw new Error('Option \"wordSize\" must be a number or BigNumber');\r\n        });\r\n      }\r\n      if (options.notation) {\r\n        notation = options.notation;\r\n      }\r\n    } else {\r\n      throw new Error('Unsupported type of options, number, BigNumber, or object expected');\r\n    }\r\n  }\r\n  return {\r\n    notation,\r\n    precision,\r\n    wordSize\r\n  };\r\n}\r\n\r\n/**\r\n * Split a number into sign, coefficients, and exponent\r\n * @param {number | string} value\r\n * @return {SplitValue}\r\n *              Returns an object containing sign, coefficients, and exponent\r\n */\r\nexport function splitNumber(value) {\r\n  // parse the input value\r\n  var match = String(value).toLowerCase().match(/^(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\r\n  if (!match) {\r\n    throw new SyntaxError('Invalid number ' + value);\r\n  }\r\n  var sign = match[1];\r\n  var digits = match[2];\r\n  var exponent = parseFloat(match[4] || '0');\r\n  var dot = digits.indexOf('.');\r\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\r\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\r\n  .replace(/^0*/, function (zeros) {\r\n    // remove leading zeros, add their count to the exponent\r\n    exponent -= zeros.length;\r\n    return '';\r\n  }).replace(/0*$/, '') // remove trailing zeros\r\n  .split('').map(function (d) {\r\n    return parseInt(d);\r\n  });\r\n  if (coefficients.length === 0) {\r\n    coefficients.push(0);\r\n    exponent++;\r\n  }\r\n  return {\r\n    sign,\r\n    coefficients,\r\n    exponent\r\n  };\r\n}\r\n\r\n/**\r\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\r\n * @param {number | string} value\r\n * @param {number} [precision]        Optional number of significant figures to return.\r\n */\r\nexport function toEngineering(value, precision) {\r\n  if (isNaN(value) || !isFinite(value)) {\r\n    return String(value);\r\n  }\r\n  var split = splitNumber(value);\r\n  var rounded = roundDigits(split, precision);\r\n  var e = rounded.exponent;\r\n  var c = rounded.coefficients;\r\n\r\n  // find nearest lower multiple of 3 for exponent\r\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\r\n  if (isNumber(precision)) {\r\n    // add zeroes to give correct sig figs\r\n    while (precision > c.length || e - newExp + 1 > c.length) {\r\n      c.push(0);\r\n    }\r\n  } else {\r\n    // concatenate coefficients with necessary zeros\r\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\r\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\r\n    for (var i = 0; i < missingZeros; i++) {\r\n      c.push(0);\r\n    }\r\n  }\r\n\r\n  // find difference in exponents\r\n  var expDiff = Math.abs(e - newExp);\r\n  var decimalIdx = 1;\r\n\r\n  // push decimal index over by expDiff times\r\n  while (expDiff > 0) {\r\n    decimalIdx++;\r\n    expDiff--;\r\n  }\r\n\r\n  // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\r\n  // otherwise concat with the rest of the coefficients\r\n  var decimals = c.slice(decimalIdx).join('');\r\n  var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\r\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\r\n  return rounded.sign + str;\r\n}\r\n\r\n/**\r\n * Format a number with fixed notation.\r\n * @param {number | string} value\r\n * @param {number} [precision=undefined]  Optional number of decimals after the\r\n *                                        decimal point. null by default.\r\n */\r\nexport function toFixed(value, precision) {\r\n  if (isNaN(value) || !isFinite(value)) {\r\n    return String(value);\r\n  }\r\n  var splitValue = splitNumber(value);\r\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\r\n  var c = rounded.coefficients;\r\n  var p = rounded.exponent + 1; // exponent may have changed\r\n\r\n  // append zeros if needed\r\n  var pp = p + (precision || 0);\r\n  if (c.length < pp) {\r\n    c = c.concat(zeros(pp - c.length));\r\n  }\r\n\r\n  // prepend zeros if needed\r\n  if (p < 0) {\r\n    c = zeros(-p + 1).concat(c);\r\n    p = 1;\r\n  }\r\n\r\n  // insert a dot if needed\r\n  if (p < c.length) {\r\n    c.splice(p, 0, p === 0 ? '0.' : '.');\r\n  }\r\n  return rounded.sign + c.join('');\r\n}\r\n\r\n/**\r\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\r\n * @param {number | string} value\r\n * @param {number} [precision]  Number of digits in formatted output.\r\n *                              If not provided, the maximum available digits\r\n *                              is used.\r\n */\r\nexport function toExponential(value, precision) {\r\n  if (isNaN(value) || !isFinite(value)) {\r\n    return String(value);\r\n  }\r\n\r\n  // round if needed, else create a clone\r\n  var split = splitNumber(value);\r\n  var rounded = precision ? roundDigits(split, precision) : split;\r\n  var c = rounded.coefficients;\r\n  var e = rounded.exponent;\r\n\r\n  // append zeros if needed\r\n  if (c.length < precision) {\r\n    c = c.concat(zeros(precision - c.length));\r\n  }\r\n\r\n  // format as `C.CCCe+EEE` or `C.CCCe-EEE`\r\n  var first = c.shift();\r\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\r\n}\r\n\r\n/**\r\n * Format a number with a certain precision\r\n * @param {number | string} value\r\n * @param {number} [precision=undefined] Optional number of digits.\r\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\r\n *                                       By default:\r\n *                                         lowerExp = -3 (incl)\r\n *                                         upper = +5 (excl)\r\n * @return {string}\r\n */\r\nexport function toPrecision(value, precision, options) {\r\n  if (isNaN(value) || !isFinite(value)) {\r\n    return String(value);\r\n  }\r\n\r\n  // determine lower and upper bound for exponential notation.\r\n  var lowerExp = _toNumberOrDefault(options === null || options === void 0 ? void 0 : options.lowerExp, -3);\r\n  var upperExp = _toNumberOrDefault(options === null || options === void 0 ? void 0 : options.upperExp, 5);\r\n  var split = splitNumber(value);\r\n  var rounded = precision ? roundDigits(split, precision) : split;\r\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\r\n    // exponential notation\r\n    return toExponential(value, precision);\r\n  } else {\r\n    var c = rounded.coefficients;\r\n    var e = rounded.exponent;\r\n\r\n    // append trailing zeros\r\n    if (c.length < precision) {\r\n      c = c.concat(zeros(precision - c.length));\r\n    }\r\n\r\n    // append trailing zeros\r\n    // TODO: simplify the next statement\r\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0)));\r\n\r\n    // prepend zeros\r\n    c = zeros(-e).concat(c);\r\n    var dot = e > 0 ? e : 0;\r\n    if (dot < c.length - 1) {\r\n      c.splice(dot + 1, 0, '.');\r\n    }\r\n    return rounded.sign + c.join('');\r\n  }\r\n}\r\n\r\n/**\r\n * Round the number of digits of a number *\r\n * @param {SplitValue} split       A value split with .splitNumber(value)\r\n * @param {number} precision  A positive integer\r\n * @return {SplitValue}\r\n *              Returns an object containing sign, coefficients, and exponent\r\n *              with rounded digits\r\n */\r\nexport function roundDigits(split, precision) {\r\n  // create a clone\r\n  var rounded = {\r\n    sign: split.sign,\r\n    coefficients: split.coefficients,\r\n    exponent: split.exponent\r\n  };\r\n  var c = rounded.coefficients;\r\n\r\n  // prepend zeros if needed\r\n  while (precision <= 0) {\r\n    c.unshift(0);\r\n    rounded.exponent++;\r\n    precision++;\r\n  }\r\n  if (c.length > precision) {\r\n    var removed = c.splice(precision, c.length - precision);\r\n    if (removed[0] >= 5) {\r\n      var i = precision - 1;\r\n      c[i]++;\r\n      while (c[i] === 10) {\r\n        c.pop();\r\n        if (i === 0) {\r\n          c.unshift(0);\r\n          rounded.exponent++;\r\n          i++;\r\n        }\r\n        i--;\r\n        c[i]++;\r\n      }\r\n    }\r\n  }\r\n  return rounded;\r\n}\r\n\r\n/**\r\n * Create an array filled with zeros.\r\n * @param {number} length\r\n * @return {Array}\r\n */\r\nfunction zeros(length) {\r\n  var arr = [];\r\n  for (var i = 0; i < length; i++) {\r\n    arr.push(0);\r\n  }\r\n  return arr;\r\n}\r\n\r\n/**\r\n * Count the number of significant digits of a number.\r\n *\r\n * For example:\r\n *   2.34 returns 3\r\n *   0.0034 returns 2\r\n *   120.5e+30 returns 4\r\n *\r\n * @param {number} value\r\n * @return {number} digits   Number of significant digits\r\n */\r\nexport function digits(value) {\r\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\r\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\r\n  .length;\r\n}\r\n\r\n/**\r\n * Minimum number added to one that makes the result different than one\r\n */\r\nexport var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\r\n\r\n/**\r\n * Compares two floating point numbers.\r\n * @param {number} a - First value to compare\r\n * @param {number} b - Second value to compare\r\n * @param {number} [relTol=1e-09] - The relative tolerance, indicating the maximum allowed difference relative to the larger absolute value. Must be greater than 0.\r\n * @param {number} [absTol=1e-12] - The minimum absolute tolerance, useful for comparisons near zero. Must be at least 0.\r\n * @return {boolean} whether the two numbers are nearly equal\r\n *\r\n * @throws {Error} If `relTol` is less than or equal to 0.\r\n * @throws {Error} If `absTol` is less than 0.\r\n *\r\n * @example\r\n * nearlyEqual(1.000000001, 1.0, 1e-8);            // true\r\n * nearlyEqual(1.000000002, 1.0, 0);            // false\r\n * nearlyEqual(1.0, 1.009, undefined, 0.01);       // true\r\n * nearlyEqual(0.000000001, 0.0, undefined, 1e-8); // true\r\n */\r\nexport function nearlyEqual(a, b) {\r\n  var relTol = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e-8;\r\n  var absTol = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\r\n  if (relTol <= 0) {\r\n    throw new Error('Relative tolerance must be greater than 0');\r\n  }\r\n  if (absTol < 0) {\r\n    throw new Error('Absolute tolerance must be at least 0');\r\n  }\r\n\r\n  // NaN\r\n  if (isNaN(a) || isNaN(b)) {\r\n    return false;\r\n  }\r\n  if (!isFinite(a) || !isFinite(b)) {\r\n    return a === b;\r\n  }\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n\r\n  // abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\r\n  return Math.abs(a - b) <= Math.max(relTol * Math.max(Math.abs(a), Math.abs(b)), absTol);\r\n}\r\n\r\n/**\r\n * Calculate the hyperbolic arccos of a number\r\n * @param {number} x\r\n * @return {number}\r\n */\r\nexport var acosh = Math.acosh || function (x) {\r\n  return Math.log(Math.sqrt(x * x - 1) + x);\r\n};\r\nexport var asinh = Math.asinh || function (x) {\r\n  return Math.log(Math.sqrt(x * x + 1) + x);\r\n};\r\n\r\n/**\r\n * Calculate the hyperbolic arctangent of a number\r\n * @param {number} x\r\n * @return {number}\r\n */\r\nexport var atanh = Math.atanh || function (x) {\r\n  return Math.log((1 + x) / (1 - x)) / 2;\r\n};\r\n\r\n/**\r\n * Calculate the hyperbolic cosine of a number\r\n * @param {number} x\r\n * @returns {number}\r\n */\r\nexport var cosh = Math.cosh || function (x) {\r\n  return (Math.exp(x) + Math.exp(-x)) / 2;\r\n};\r\n\r\n/**\r\n * Calculate the hyperbolic sine of a number\r\n * @param {number} x\r\n * @returns {number}\r\n */\r\nexport var sinh = Math.sinh || function (x) {\r\n  return (Math.exp(x) - Math.exp(-x)) / 2;\r\n};\r\n\r\n/**\r\n * Calculate the hyperbolic tangent of a number\r\n * @param {number} x\r\n * @returns {number}\r\n */\r\nexport var tanh = Math.tanh || function (x) {\r\n  var e = Math.exp(2 * x);\r\n  return (e - 1) / (e + 1);\r\n};\r\n\r\n/**\r\n * Returns a value with the magnitude of x and the sign of y.\r\n * @param {number} x\r\n * @param {number} y\r\n * @returns {number}\r\n */\r\nexport function copysign(x, y) {\r\n  var signx = x > 0 ? true : x < 0 ? false : 1 / x === Infinity;\r\n  var signy = y > 0 ? true : y < 0 ? false : 1 / y === Infinity;\r\n  return signx ^ signy ? -x : x;\r\n}\r\nfunction _toNumberOrThrow(value, onError) {\r\n  if (isNumber(value)) {\r\n    return value;\r\n  } else if (isBigNumber(value)) {\r\n    return value.toNumber();\r\n  } else {\r\n    onError();\r\n  }\r\n}\r\nfunction _toNumberOrDefault(value, defaultValue) {\r\n  if (isNumber(value)) {\r\n    return value;\r\n  } else if (isBigNumber(value)) {\r\n    return value.toNumber();\r\n  } else {\r\n    return defaultValue;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}