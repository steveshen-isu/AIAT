{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'compare';\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix', 'concat'];\nexport var createCompare = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    equalScalar,\n    matrix,\n    BigNumber,\n    Fraction,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\r\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\r\n   *\r\n   * x and y are considered equal when the relative difference between x and y\r\n   * is smaller than the configured absTol and relTol. The function cannot be used to\r\n   * compare values smaller than approximately 2.22e-16.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   * Strings are compared by their numerical value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.compare(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.compare(6, 1)           // returns 1\r\n   *    math.compare(2, 3)           // returns -1\r\n   *    math.compare(7, 7)           // returns 0\r\n   *    math.compare('10', '2')      // returns 1\r\n   *    math.compare('1000', '1e3')  // returns 0\r\n   *\r\n   *    const a = math.unit('5 cm')\r\n   *    const b = math.unit('40 mm')\r\n   *    math.compare(a, b)           // returns 1\r\n   *\r\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\r\n   *\r\n   * See also:\r\n   *\r\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | Unit | string | Array | Matrix} x First value to compare\r\n   * @param  {number | BigNumber | bigint | Fraction | Unit | string | Array | Matrix} y Second value to compare\r\n   * @return {number | BigNumber | bigint | Fraction | Array | Matrix} Returns the result of the comparison:\r\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\r\n   */\n  return typed(name, createCompareNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': function boolean_boolean(x, y) {\n      return x === y ? 0 : x > y ? 1 : -1;\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return bigNearlyEqual(x, y, config.relTol, config.absTol) ? new BigNumber(0) : new BigNumber(x.cmp(y));\n    },\n    'bigint, bigint': function bigint_bigint(x, y) {\n      return x === y ? 0n : x > y ? 1n : -1n;\n    },\n    'Fraction, Fraction': function Fraction_Fraction(x, y) {\n      return new Fraction(x.compare(y));\n    },\n    'Complex, Complex': function Complex_Complex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createCompareNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function number_number(x, y) {\n      return nearlyEqual(x, y, config.relTol, config.absTol) ? 0 : x > y ? 1 : -1;\n    }\n  });\n});","map":{"version":3,"names":["nearlyEqual","bigNearlyEqual","factory","createMatAlgo03xDSf","createMatAlgo12xSfs","createMatAlgo05xSfSf","createMatrixAlgorithmSuite","createCompareUnits","name","dependencies","createCompare","_ref","typed","config","equalScalar","matrix","BigNumber","Fraction","DenseMatrix","concat","matAlgo03xDSf","matAlgo05xSfSf","matAlgo12xSfs","matrixAlgorithmSuite","compareUnits","createCompareNumber","boolean_boolean","x","y","BigNumber_BigNumber","relTol","absTol","cmp","bigint_bigint","Fraction_Fraction","compare","Complex_Complex","TypeError","SS","DS","Ss","_ref2","number_number"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/relational/compare.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\r\nimport { nearlyEqual } from '../../utils/number.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nimport { createCompareUnits } from './compareUnits.js';\r\nvar name = 'compare';\r\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix', 'concat'];\r\nexport var createCompare = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    equalScalar,\r\n    matrix,\r\n    BigNumber,\r\n    Fraction,\r\n    DenseMatrix,\r\n    concat\r\n  } = _ref;\r\n  var matAlgo03xDSf = createMatAlgo03xDSf({\r\n    typed\r\n  });\r\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n  var compareUnits = createCompareUnits({\r\n    typed\r\n  });\r\n\r\n  /**\r\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\r\n   *\r\n   * x and y are considered equal when the relative difference between x and y\r\n   * is smaller than the configured absTol and relTol. The function cannot be used to\r\n   * compare values smaller than approximately 2.22e-16.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   * Strings are compared by their numerical value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.compare(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.compare(6, 1)           // returns 1\r\n   *    math.compare(2, 3)           // returns -1\r\n   *    math.compare(7, 7)           // returns 0\r\n   *    math.compare('10', '2')      // returns 1\r\n   *    math.compare('1000', '1e3')  // returns 0\r\n   *\r\n   *    const a = math.unit('5 cm')\r\n   *    const b = math.unit('40 mm')\r\n   *    math.compare(a, b)           // returns 1\r\n   *\r\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\r\n   *\r\n   * See also:\r\n   *\r\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | Unit | string | Array | Matrix} x First value to compare\r\n   * @param  {number | BigNumber | bigint | Fraction | Unit | string | Array | Matrix} y Second value to compare\r\n   * @return {number | BigNumber | bigint | Fraction | Array | Matrix} Returns the result of the comparison:\r\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\r\n   */\r\n  return typed(name, createCompareNumber({\r\n    typed,\r\n    config\r\n  }), {\r\n    'boolean, boolean': function boolean_boolean(x, y) {\r\n      return x === y ? 0 : x > y ? 1 : -1;\r\n    },\r\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\r\n      return bigNearlyEqual(x, y, config.relTol, config.absTol) ? new BigNumber(0) : new BigNumber(x.cmp(y));\r\n    },\r\n    'bigint, bigint': function bigint_bigint(x, y) {\r\n      return x === y ? 0n : x > y ? 1n : -1n;\r\n    },\r\n    'Fraction, Fraction': function Fraction_Fraction(x, y) {\r\n      return new Fraction(x.compare(y));\r\n    },\r\n    'Complex, Complex': function Complex_Complex() {\r\n      throw new TypeError('No ordering relation is defined for complex numbers');\r\n    }\r\n  }, compareUnits, matrixAlgorithmSuite({\r\n    SS: matAlgo05xSfSf,\r\n    DS: matAlgo03xDSf,\r\n    Ss: matAlgo12xSfs\r\n  }));\r\n});\r\nexport var createCompareNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\r\n  var {\r\n    typed,\r\n    config\r\n  } = _ref2;\r\n  return typed(name, {\r\n    'number, number': function number_number(x, y) {\r\n      return nearlyEqual(x, y, config.relTol, config.absTol) ? 0 : x > y ? 1 : -1;\r\n    }\r\n  });\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}