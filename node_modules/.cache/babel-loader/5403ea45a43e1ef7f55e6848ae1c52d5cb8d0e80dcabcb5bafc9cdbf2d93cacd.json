{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { log2Number } from '../../plain/number/index.js';\nvar name = 'log2';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createLog2 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\r\n   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.log2(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.log2(0.03125)           // returns -5\r\n   *    math.log2(16)                // returns 4\r\n   *    math.log2(16) / math.log2(2) // returns 4\r\n   *    math.pow(2, 4)               // returns 16\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, log, log1p, log10\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            Value for which to calculate the logarithm.\r\n   * @return {number | BigNumber | Complex | Array | Matrix}\r\n   *            Returns the 2-base logarithm of `x`\r\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log2Number(x);\n      } else {\n        // negative value -> complex value computation\n        return _log2Complex(new Complex(x, 0));\n      }\n    },\n    Complex: _log2Complex,\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log(2);\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log2Complex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n\n  /**\r\n   * Calculate log2 for a complex value\r\n   * @param {Complex} x\r\n   * @returns {Complex}\r\n   * @private\r\n   */\n  function _log2Complex(x) {\n    var newX = Math.sqrt(x.re * x.re + x.im * x.im);\n    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);\n  }\n});","map":{"version":3,"names":["factory","deepMap","log2Number","name","dependencies","createLog2","_ref","typed","config","Complex","number","x","predictable","_log2Complex","BigNumber","isNegative","log","toNumber","referToSelf","self","newX","Math","sqrt","re","im","log2","LN2","atan2"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/log2.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { log2Number } from '../../plain/number/index.js';\r\nvar name = 'log2';\r\nvar dependencies = ['typed', 'config', 'Complex'];\r\nexport var createLog2 = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    Complex\r\n  } = _ref;\r\n  /**\r\n   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.log2(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.log2(0.03125)           // returns -5\r\n   *    math.log2(16)                // returns 4\r\n   *    math.log2(16) / math.log2(2) // returns 4\r\n   *    math.pow(2, 4)               // returns 16\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, log, log1p, log10\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            Value for which to calculate the logarithm.\r\n   * @return {number | BigNumber | Complex | Array | Matrix}\r\n   *            Returns the 2-base logarithm of `x`\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      if (x >= 0 || config.predictable) {\r\n        return log2Number(x);\r\n      } else {\r\n        // negative value -> complex value computation\r\n        return _log2Complex(new Complex(x, 0));\r\n      }\r\n    },\r\n    Complex: _log2Complex,\r\n    BigNumber: function BigNumber(x) {\r\n      if (!x.isNegative() || config.predictable) {\r\n        return x.log(2);\r\n      } else {\r\n        // downgrade to number, return Complex valued result\r\n        return _log2Complex(new Complex(x.toNumber(), 0));\r\n      }\r\n    },\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\r\n  });\r\n\r\n  /**\r\n   * Calculate log2 for a complex value\r\n   * @param {Complex} x\r\n   * @returns {Complex}\r\n   * @private\r\n   */\r\n  function _log2Complex(x) {\r\n    var newX = Math.sqrt(x.re * x.re + x.im * x.im);\r\n    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;AACjD,OAAO,IAAIC,UAAU,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBO,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,IAAI,CAAC,IAAIH,MAAM,CAACI,WAAW,EAAE;QAChC,OAAOV,UAAU,CAACS,CAAC,CAAC;MACtB,CAAC,MAAM;QACL;QACA,OAAOE,YAAY,CAAC,IAAIJ,OAAO,CAACE,CAAC,EAAE,CAAC,CAAC,CAAC;MACxC;IACF,CAAC;IACDF,OAAO,EAAEI,YAAY;IACrBC,SAAS,EAAE,SAASA,SAASA,CAACH,CAAC,EAAE;MAC/B,IAAI,CAACA,CAAC,CAACI,UAAU,CAAC,CAAC,IAAIP,MAAM,CAACI,WAAW,EAAE;QACzC,OAAOD,CAAC,CAACK,GAAG,CAAC,CAAC,CAAC;MACjB,CAAC,MAAM;QACL;QACA,OAAOH,YAAY,CAAC,IAAIJ,OAAO,CAACE,CAAC,CAACM,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACnD;IACF,CAAC;IACD,gBAAgB,EAAEV,KAAK,CAACW,WAAW,CAACC,IAAI,IAAIR,CAAC,IAAIV,OAAO,CAACU,CAAC,EAAEQ,IAAI,CAAC;EACnE,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;EACE,SAASN,YAAYA,CAACF,CAAC,EAAE;IACvB,IAAIS,IAAI,GAAGC,IAAI,CAACC,IAAI,CAACX,CAAC,CAACY,EAAE,GAAGZ,CAAC,CAACY,EAAE,GAAGZ,CAAC,CAACa,EAAE,GAAGb,CAAC,CAACa,EAAE,CAAC;IAC/C,OAAO,IAAIf,OAAO,CAACY,IAAI,CAACI,IAAI,GAAGJ,IAAI,CAACI,IAAI,CAACL,IAAI,CAAC,GAAGC,IAAI,CAACL,GAAG,CAACI,IAAI,CAAC,GAAGC,IAAI,CAACK,GAAG,EAAEL,IAAI,CAACM,KAAK,CAAChB,CAAC,CAACa,EAAE,EAAEb,CAAC,CAACY,EAAE,CAAC,GAAGF,IAAI,CAACK,GAAG,CAAC;EAChH;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}