{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { extend } from '../../utils/object.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'divide';\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\nexport var createDivide = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    multiply,\n    equalScalar,\n    divideScalar,\n    inv\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n\n  /**\r\n   * Divide two values, `x / y`.\r\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.divide(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\r\n   *\r\n   *    const a = math.complex(5, 14)\r\n   *    const b = math.complex(4, 1)\r\n   *    math.divide(a, b)            // returns Complex 2 + 3i\r\n   *\r\n   *    const c = [[7, -6], [13, -4]]\r\n   *    const d = [[1, 2], [4, 3]]\r\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\r\n   *\r\n   *    const e = math.unit('18 km')\r\n   *    math.divide(e, 4.5)          // returns Unit 4 km\r\n   *\r\n   * See also:\r\n   *\r\n   *    multiply\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} x   Numerator\r\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Array | Matrix} y          Denominator\r\n   * @return {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\r\n   */\n  return typed('divide', extend({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n\n    'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrix_any(x, y) {\n      return matAlgo14xDs(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrix_any(x, y) {\n      return matAlgo11xS0s(x, y, divideScalar, false);\n    },\n    'Array, any': function Array_any(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function any_Array__Matrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n});","map":{"version":3,"names":["factory","extend","createMatAlgo11xS0s","createMatAlgo14xDs","name","dependencies","createDivide","_ref","typed","matrix","multiply","equalScalar","divideScalar","inv","matAlgo11xS0s","matAlgo14xDs","Array__Matrix_Array__Matrix","x","y","DenseMatrix_any","SparseMatrix_any","Array_any","valueOf","any_Array__Matrix","signatures"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/divide.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { extend } from '../../utils/object.js';\r\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\r\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\r\nvar name = 'divide';\r\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\r\nexport var createDivide = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    multiply,\r\n    equalScalar,\r\n    divideScalar,\r\n    inv\r\n  } = _ref;\r\n  var matAlgo11xS0s = createMatAlgo11xS0s({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo14xDs = createMatAlgo14xDs({\r\n    typed\r\n  });\r\n\r\n  /**\r\n   * Divide two values, `x / y`.\r\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.divide(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\r\n   *\r\n   *    const a = math.complex(5, 14)\r\n   *    const b = math.complex(4, 1)\r\n   *    math.divide(a, b)            // returns Complex 2 + 3i\r\n   *\r\n   *    const c = [[7, -6], [13, -4]]\r\n   *    const d = [[1, 2], [4, 3]]\r\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\r\n   *\r\n   *    const e = math.unit('18 km')\r\n   *    math.divide(e, 4.5)          // returns Unit 4 km\r\n   *\r\n   * See also:\r\n   *\r\n   *    multiply\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} x   Numerator\r\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Array | Matrix} y          Denominator\r\n   * @return {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\r\n   */\r\n  return typed('divide', extend({\r\n    // we extend the signatures of divideScalar with signatures dealing with matrices\r\n\r\n    'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(x, y) {\r\n      // TODO: implement matrix right division using pseudo inverse\r\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\r\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\r\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\r\n      return multiply(x, inv(y));\r\n    },\r\n    'DenseMatrix, any': function DenseMatrix_any(x, y) {\r\n      return matAlgo14xDs(x, y, divideScalar, false);\r\n    },\r\n    'SparseMatrix, any': function SparseMatrix_any(x, y) {\r\n      return matAlgo11xS0s(x, y, divideScalar, false);\r\n    },\r\n    'Array, any': function Array_any(x, y) {\r\n      // use matrix implementation\r\n      return matAlgo14xDs(matrix(x), y, divideScalar, false).valueOf();\r\n    },\r\n    'any, Array | Matrix': function any_Array__Matrix(x, y) {\r\n      return multiply(x, inv(y));\r\n    }\r\n  }, divideScalar.signatures));\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,kBAAkB,QAAQ,yCAAyC;AAC5E,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,aAAa,EAAE,cAAc,EAAE,KAAK,CAAC;AACxF,OAAO,IAAIC,YAAY,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC3E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,QAAQ;IACRC,WAAW;IACXC,YAAY;IACZC;EACF,CAAC,GAAGN,IAAI;EACR,IAAIO,aAAa,GAAGZ,mBAAmB,CAAC;IACtCM,KAAK;IACLG;EACF,CAAC,CAAC;EACF,IAAII,YAAY,GAAGZ,kBAAkB,CAAC;IACpCK;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAAC,QAAQ,EAAEP,MAAM,CAAC;IAC5B;;IAEA,gCAAgC,EAAE,SAASe,2BAA2BA,CAACC,CAAC,EAAEC,CAAC,EAAE;MAC3E;MACA;MACA;MACA;MACA,OAAOR,QAAQ,CAACO,CAAC,EAAEJ,GAAG,CAACK,CAAC,CAAC,CAAC;IAC5B,CAAC;IACD,kBAAkB,EAAE,SAASC,eAAeA,CAACF,CAAC,EAAEC,CAAC,EAAE;MACjD,OAAOH,YAAY,CAACE,CAAC,EAAEC,CAAC,EAAEN,YAAY,EAAE,KAAK,CAAC;IAChD,CAAC;IACD,mBAAmB,EAAE,SAASQ,gBAAgBA,CAACH,CAAC,EAAEC,CAAC,EAAE;MACnD,OAAOJ,aAAa,CAACG,CAAC,EAAEC,CAAC,EAAEN,YAAY,EAAE,KAAK,CAAC;IACjD,CAAC;IACD,YAAY,EAAE,SAASS,SAASA,CAACJ,CAAC,EAAEC,CAAC,EAAE;MACrC;MACA,OAAOH,YAAY,CAACN,MAAM,CAACQ,CAAC,CAAC,EAAEC,CAAC,EAAEN,YAAY,EAAE,KAAK,CAAC,CAACU,OAAO,CAAC,CAAC;IAClE,CAAC;IACD,qBAAqB,EAAE,SAASC,iBAAiBA,CAACN,CAAC,EAAEC,CAAC,EAAE;MACtD,OAAOR,QAAQ,CAACO,CAAC,EAAEJ,GAAG,CAACK,CAAC,CAAC,CAAC;IAC5B;EACF,CAAC,EAAEN,YAAY,CAACY,UAAU,CAAC,CAAC;AAC9B,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}