{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { embeddedDocs } from '../embeddedDocs/embeddedDocs.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nvar name = 'help';\nvar dependencies = ['typed', 'mathWithTransform', 'Help'];\nexport var createHelp = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    mathWithTransform,\n    Help\n  } = _ref;\n  /**\r\n   * Retrieve help on a function or data type.\r\n   * Help files are retrieved from the embedded documentation in math.docs.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.help(search)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    console.log(math.help('sin').toString())\r\n   *    console.log(math.help(math.add).toString())\r\n   *    console.log(math.help(math.add).toJSON())\r\n   *\r\n   * @param {Function | string | Object} search   A function or function name\r\n   *                                              for which to get help\r\n   * @return {Help} A help object\r\n   */\n  return typed(name, {\n    any: function any(search) {\n      var prop;\n      var searchName = search;\n      if (typeof search !== 'string') {\n        for (prop in mathWithTransform) {\n          // search in functions and constants\n          if (hasOwnProperty(mathWithTransform, prop) && search === mathWithTransform[prop]) {\n            searchName = prop;\n            break;\n          }\n        }\n\n        /* TODO: implement help for data types\r\n         if (!text) {\r\n         // search data type\r\n         for (prop in math.type) {\r\n         if (hasOwnProperty(math, prop)) {\r\n         if (search === math.type[prop]) {\r\n         text = prop\r\n         break\r\n         }\r\n         }\r\n         }\r\n         }\r\n         */\n      }\n      var doc = getSafeProperty(embeddedDocs, searchName);\n      if (!doc) {\n        var searchText = typeof searchName === 'function' ? searchName.name : searchName;\n        throw new Error('No documentation found on \"' + searchText + '\"');\n      }\n      return new Help(doc);\n    }\n  });\n});","map":{"version":3,"names":["factory","getSafeProperty","embeddedDocs","hasOwnProperty","name","dependencies","createHelp","_ref","typed","mathWithTransform","Help","any","search","prop","searchName","doc","searchText","Error"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/expression/function/help.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { getSafeProperty } from '../../utils/customs.js';\r\nimport { embeddedDocs } from '../embeddedDocs/embeddedDocs.js';\r\nimport { hasOwnProperty } from '../../utils/object.js';\r\nvar name = 'help';\r\nvar dependencies = ['typed', 'mathWithTransform', 'Help'];\r\nexport var createHelp = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    mathWithTransform,\r\n    Help\r\n  } = _ref;\r\n  /**\r\n   * Retrieve help on a function or data type.\r\n   * Help files are retrieved from the embedded documentation in math.docs.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.help(search)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    console.log(math.help('sin').toString())\r\n   *    console.log(math.help(math.add).toString())\r\n   *    console.log(math.help(math.add).toJSON())\r\n   *\r\n   * @param {Function | string | Object} search   A function or function name\r\n   *                                              for which to get help\r\n   * @return {Help} A help object\r\n   */\r\n  return typed(name, {\r\n    any: function any(search) {\r\n      var prop;\r\n      var searchName = search;\r\n      if (typeof search !== 'string') {\r\n        for (prop in mathWithTransform) {\r\n          // search in functions and constants\r\n          if (hasOwnProperty(mathWithTransform, prop) && search === mathWithTransform[prop]) {\r\n            searchName = prop;\r\n            break;\r\n          }\r\n        }\r\n\r\n        /* TODO: implement help for data types\r\n         if (!text) {\r\n         // search data type\r\n         for (prop in math.type) {\r\n         if (hasOwnProperty(math, prop)) {\r\n         if (search === math.type[prop]) {\r\n         text = prop\r\n         break\r\n         }\r\n         }\r\n         }\r\n         }\r\n         */\r\n      }\r\n      var doc = getSafeProperty(embeddedDocs, searchName);\r\n      if (!doc) {\r\n        var searchText = typeof searchName === 'function' ? searchName.name : searchName;\r\n        throw new Error('No documentation found on \"' + searchText + '\"');\r\n      }\r\n      return new Help(doc);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,eAAe,QAAQ,wBAAwB;AACxD,SAASC,YAAY,QAAQ,iCAAiC;AAC9D,SAASC,cAAc,QAAQ,uBAAuB;AACtD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,mBAAmB,EAAE,MAAM,CAAC;AACzD,OAAO,IAAIC,UAAU,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,iBAAiB;IACjBC;EACF,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBO,GAAG,EAAE,SAASA,GAAGA,CAACC,MAAM,EAAE;MACxB,IAAIC,IAAI;MACR,IAAIC,UAAU,GAAGF,MAAM;MACvB,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;QAC9B,KAAKC,IAAI,IAAIJ,iBAAiB,EAAE;UAC9B;UACA,IAAIN,cAAc,CAACM,iBAAiB,EAAEI,IAAI,CAAC,IAAID,MAAM,KAAKH,iBAAiB,CAACI,IAAI,CAAC,EAAE;YACjFC,UAAU,GAAGD,IAAI;YACjB;UACF;QACF;;QAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM;MACA,IAAIE,GAAG,GAAGd,eAAe,CAACC,YAAY,EAAEY,UAAU,CAAC;MACnD,IAAI,CAACC,GAAG,EAAE;QACR,IAAIC,UAAU,GAAG,OAAOF,UAAU,KAAK,UAAU,GAAGA,UAAU,CAACV,IAAI,GAAGU,UAAU;QAChF,MAAM,IAAIG,KAAK,CAAC,6BAA6B,GAAGD,UAAU,GAAG,GAAG,CAAC;MACnE;MACA,OAAO,IAAIN,IAAI,CAACK,GAAG,CAAC;IACtB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}