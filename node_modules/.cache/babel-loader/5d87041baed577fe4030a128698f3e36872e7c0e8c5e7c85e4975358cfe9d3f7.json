{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { asinhNumber } from '../../plain/number/index.js';\nvar name = 'asinh';\nvar dependencies = ['typed'];\nexport var createAsinh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Calculate the hyperbolic arcsine of a value,\r\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic arcsine, this function\r\n   * does not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.asinh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.asinh(0.5)       // returns 0.48121182505960347\r\n   *\r\n   * See also:\r\n   *\r\n   *    acosh, atanh\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic arcsine of x\r\n   */\n  return typed('asinh', {\n    number: asinhNumber,\n    Complex: function Complex(x) {\n      return x.asinh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.asinh();\n    }\n  });\n});","map":{"version":3,"names":["factory","asinhNumber","name","dependencies","createAsinh","_ref","typed","number","Complex","x","asinh","BigNumber"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/trigonometry/asinh.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { asinhNumber } from '../../plain/number/index.js';\r\nvar name = 'asinh';\r\nvar dependencies = ['typed'];\r\nexport var createAsinh = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Calculate the hyperbolic arcsine of a value,\r\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic arcsine, this function\r\n   * does not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.asinh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.asinh(0.5)       // returns 0.48121182505960347\r\n   *\r\n   * See also:\r\n   *\r\n   *    acosh, atanh\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic arcsine of x\r\n   */\r\n  return typed('asinh', {\r\n    number: asinhNumber,\r\n    Complex: function Complex(x) {\r\n      return x.asinh();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.asinh();\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,WAAW,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC1E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAAC,OAAO,EAAE;IACpBC,MAAM,EAAEN,WAAW;IACnBO,OAAO,EAAE,SAASA,OAAOA,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACC,KAAK,CAAC,CAAC;IAClB,CAAC;IACDC,SAAS,EAAE,SAASA,SAASA,CAACF,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACC,KAAK,CAAC,CAAC;IAClB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}