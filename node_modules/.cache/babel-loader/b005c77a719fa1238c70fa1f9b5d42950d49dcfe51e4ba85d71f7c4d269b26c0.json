{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { lcmNumber } from '../../plain/number/index.js';\nvar name = 'lcm';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'concat'];\nexport var createLcm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    concat\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var lcmTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var lcmManySignature = {};\n  lcmManySignature[\"\".concat(lcmTypes, \", \").concat(lcmTypes, \", ...\").concat(lcmTypes)] = typed.referToSelf(self => (a, b, args) => {\n    var res = self(a, b);\n    for (var i = 0; i < args.length; i++) {\n      res = self(res, args[i]);\n    }\n    return res;\n  });\n\n  /**\r\n   * Calculate the least common multiple for two or more values or arrays.\r\n   *\r\n   * lcm is defined as:\r\n   *\r\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.lcm(a, b)\r\n   *    math.lcm(a, b, c, ...)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.lcm(4, 6)               // returns 12\r\n   *    math.lcm(6, 21)              // returns 42\r\n   *    math.lcm(6, 21, 5)           // returns 210\r\n   *\r\n   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]\r\n   *\r\n   * See also:\r\n   *\r\n   *    gcd, xgcd\r\n   *\r\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\r\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\r\n   */\n  return typed(name, {\n    'number, number': lcmNumber,\n    'BigNumber, BigNumber': _lcmBigNumber,\n    'Fraction, Fraction': (x, y) => x.lcm(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }), lcmManySignature);\n\n  /**\r\n   * Calculate lcm for two BigNumbers\r\n   * @param {BigNumber} a\r\n   * @param {BigNumber} b\r\n   * @returns {BigNumber} Returns the least common multiple of a and b\r\n   * @private\r\n   */\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n    if (a.isZero()) {\n      return a;\n    }\n    if (b.isZero()) {\n      return b;\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n    var prod = a.times(b);\n    while (!b.isZero()) {\n      var t = b;\n      b = a.mod(t);\n      a = t;\n    }\n    return prod.div(a).abs();\n  }\n});","map":{"version":3,"names":["factory","createMatAlgo02xDS0","createMatAlgo06xS0S0","createMatAlgo11xS0s","createMatrixAlgorithmSuite","lcmNumber","name","dependencies","createLcm","_ref","typed","matrix","equalScalar","concat","matAlgo02xDS0","matAlgo06xS0S0","matAlgo11xS0s","matrixAlgorithmSuite","lcmTypes","lcmManySignature","referToSelf","self","a","b","args","res","i","length","_lcmBigNumber","Fraction, Fraction","x","y","lcm","SS","DS","Ss","isInt","Error","isZero","prod","times","t","mod","div","abs"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/lcm.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\r\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\r\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nimport { lcmNumber } from '../../plain/number/index.js';\r\nvar name = 'lcm';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'concat'];\r\nexport var createLcm = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    concat\r\n  } = _ref;\r\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo11xS0s = createMatAlgo11xS0s({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n  var lcmTypes = 'number | BigNumber | Fraction | Matrix | Array';\r\n  var lcmManySignature = {};\r\n  lcmManySignature[\"\".concat(lcmTypes, \", \").concat(lcmTypes, \", ...\").concat(lcmTypes)] = typed.referToSelf(self => (a, b, args) => {\r\n    var res = self(a, b);\r\n    for (var i = 0; i < args.length; i++) {\r\n      res = self(res, args[i]);\r\n    }\r\n    return res;\r\n  });\r\n\r\n  /**\r\n   * Calculate the least common multiple for two or more values or arrays.\r\n   *\r\n   * lcm is defined as:\r\n   *\r\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.lcm(a, b)\r\n   *    math.lcm(a, b, c, ...)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.lcm(4, 6)               // returns 12\r\n   *    math.lcm(6, 21)              // returns 42\r\n   *    math.lcm(6, 21, 5)           // returns 210\r\n   *\r\n   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]\r\n   *\r\n   * See also:\r\n   *\r\n   *    gcd, xgcd\r\n   *\r\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\r\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\r\n   */\r\n  return typed(name, {\r\n    'number, number': lcmNumber,\r\n    'BigNumber, BigNumber': _lcmBigNumber,\r\n    'Fraction, Fraction': (x, y) => x.lcm(y)\r\n  }, matrixAlgorithmSuite({\r\n    SS: matAlgo06xS0S0,\r\n    DS: matAlgo02xDS0,\r\n    Ss: matAlgo11xS0s\r\n  }), lcmManySignature);\r\n\r\n  /**\r\n   * Calculate lcm for two BigNumbers\r\n   * @param {BigNumber} a\r\n   * @param {BigNumber} b\r\n   * @returns {BigNumber} Returns the least common multiple of a and b\r\n   * @private\r\n   */\r\n  function _lcmBigNumber(a, b) {\r\n    if (!a.isInt() || !b.isInt()) {\r\n      throw new Error('Parameters in function lcm must be integer numbers');\r\n    }\r\n    if (a.isZero()) {\r\n      return a;\r\n    }\r\n    if (b.isZero()) {\r\n      return b;\r\n    }\r\n\r\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\r\n    // evaluate lcm here inline to reduce overhead\r\n    var prod = a.times(b);\r\n    while (!b.isZero()) {\r\n      var t = b;\r\n      b = a.mod(t);\r\n      a = t;\r\n    }\r\n    return prod.div(a).abs();\r\n  }\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}