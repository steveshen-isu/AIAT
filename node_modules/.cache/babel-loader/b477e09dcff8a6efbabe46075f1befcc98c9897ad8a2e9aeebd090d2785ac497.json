{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { cschNumber } from '../../plain/number/index.js';\nvar name = 'csch';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCsch = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\r\n   * Calculate the hyperbolic cosecant of a value,\r\n   * defined as `csch(x) = 1 / sinh(x)`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic cosecant, this function\r\n   * does not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.csch(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // csch(x) = 1/ sinh(x)\r\n   *    math.csch(0.5)       // returns 1.9190347513349437\r\n   *    1 / math.sinh(0.5)   // returns 1.9190347513349437\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, sech, coth\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic cosecant of x\r\n   */\n  return typed(name, {\n    number: cschNumber,\n    Complex: x => x.csch(),\n    BigNumber: x => new _BigNumber(1).div(x.sinh())\n  });\n});","map":{"version":3,"names":["factory","cschNumber","name","dependencies","createCsch","_ref","typed","BigNumber","_BigNumber","number","Complex","x","csch","div","sinh"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/trigonometry/csch.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { cschNumber } from '../../plain/number/index.js';\r\nvar name = 'csch';\r\nvar dependencies = ['typed', 'BigNumber'];\r\nexport var createCsch = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    BigNumber: _BigNumber\r\n  } = _ref;\r\n  /**\r\n   * Calculate the hyperbolic cosecant of a value,\r\n   * defined as `csch(x) = 1 / sinh(x)`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic cosecant, this function\r\n   * does not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.csch(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // csch(x) = 1/ sinh(x)\r\n   *    math.csch(0.5)       // returns 1.9190347513349437\r\n   *    1 / math.sinh(0.5)   // returns 1.9190347513349437\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, sech, coth\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic cosecant of x\r\n   */\r\n  return typed(name, {\r\n    number: cschNumber,\r\n    Complex: x => x.csch(),\r\n    BigNumber: x => new _BigNumber(1).div(x.sinh())\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC;AACzC,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,SAAS,EAAEC;EACb,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBO,MAAM,EAAER,UAAU;IAClBS,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC;IACtBL,SAAS,EAAEI,CAAC,IAAI,IAAIH,UAAU,CAAC,CAAC,CAAC,CAACK,GAAG,CAACF,CAAC,CAACG,IAAI,CAAC,CAAC;EAChD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}