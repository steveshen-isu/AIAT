{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nvar name = 'chain';\nvar dependencies = ['typed', 'Chain'];\nexport var createChain = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Chain\n  } = _ref;\n  /**\r\n   * Wrap any value in a chain, allowing to perform chained operations on\r\n   * the value.\r\n   *\r\n   * All methods available in the math.js library can be called upon the chain,\r\n   * and then will be evaluated with the value itself as first argument.\r\n   * The chain can be closed by executing `chain.done()`, which returns\r\n   * the final value.\r\n   *\r\n   * The chain has a number of special functions:\r\n   *\r\n   * - `done()`     Finalize the chain and return the chain's value.\r\n   * - `valueOf()`  The same as `done()`\r\n   * - `toString()` Executes `math.format()` onto the chain's value, returning\r\n   *                a string representation of the value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.chain(value)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.chain(3)\r\n   *         .add(4)\r\n   *         .subtract(2)\r\n   *         .done()     // 5\r\n   *\r\n   *     math.chain( [[1, 2], [3, 4]] )\r\n   *         .subset(math.index(0, 0), 8)\r\n   *         .multiply(3)\r\n   *         .done()     // [[24, 6], [9, 12]]\r\n   *\r\n   * @param {*} [value]   A value of any type on which to start a chained operation.\r\n   * @return {math.Chain} The created chain\r\n   */\n  return typed(name, {\n    '': function _() {\n      return new Chain();\n    },\n    any: function any(value) {\n      return new Chain(value);\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createChain","_ref","typed","Chain","_","any","value"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/type/chain/function/chain.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\r\nvar name = 'chain';\r\nvar dependencies = ['typed', 'Chain'];\r\nexport var createChain = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    Chain\r\n  } = _ref;\r\n  /**\r\n   * Wrap any value in a chain, allowing to perform chained operations on\r\n   * the value.\r\n   *\r\n   * All methods available in the math.js library can be called upon the chain,\r\n   * and then will be evaluated with the value itself as first argument.\r\n   * The chain can be closed by executing `chain.done()`, which returns\r\n   * the final value.\r\n   *\r\n   * The chain has a number of special functions:\r\n   *\r\n   * - `done()`     Finalize the chain and return the chain's value.\r\n   * - `valueOf()`  The same as `done()`\r\n   * - `toString()` Executes `math.format()` onto the chain's value, returning\r\n   *                a string representation of the value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.chain(value)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.chain(3)\r\n   *         .add(4)\r\n   *         .subtract(2)\r\n   *         .done()     // 5\r\n   *\r\n   *     math.chain( [[1, 2], [3, 4]] )\r\n   *         .subset(math.index(0, 0), 8)\r\n   *         .multiply(3)\r\n   *         .done()     // [[24, 6], [9, 12]]\r\n   *\r\n   * @param {*} [value]   A value of any type on which to start a chained operation.\r\n   * @return {math.Chain} The created chain\r\n   */\r\n  return typed(name, {\r\n    '': function _() {\r\n      return new Chain();\r\n    },\r\n    any: function any(value) {\r\n      return new Chain(value);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;AACrC,OAAO,IAAIC,WAAW,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC1E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,EAAE,EAAE,SAASM,CAACA,CAAA,EAAG;MACf,OAAO,IAAID,KAAK,CAAC,CAAC;IACpB,CAAC;IACDE,GAAG,EAAE,SAASA,GAAGA,CAACC,KAAK,EAAE;MACvB,OAAO,IAAIH,KAAK,CAACG,KAAK,CAAC;IACzB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}