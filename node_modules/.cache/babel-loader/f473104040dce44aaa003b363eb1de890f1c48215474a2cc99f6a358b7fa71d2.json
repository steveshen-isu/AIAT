{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'conj';\nvar dependencies = ['typed'];\nexport var createConj = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Compute the complex conjugate of a complex value.\r\n   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.conj(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i\r\n   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i\r\n   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i\r\n   *\r\n   * See also:\r\n   *\r\n   *    re, im, arg, abs\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            A complex number or array with complex numbers\r\n   * @return {number | BigNumber | Complex | Array | Matrix}\r\n   *            The complex conjugate of x\r\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction': x => x,\n    Complex: x => x.conjugate(),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createConj","_ref","typed","x","Complex","conjugate","referToSelf","self"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/complex/conj.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nvar name = 'conj';\r\nvar dependencies = ['typed'];\r\nexport var createConj = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Compute the complex conjugate of a complex value.\r\n   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.conj(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i\r\n   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i\r\n   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i\r\n   *\r\n   * See also:\r\n   *\r\n   *    re, im, arg, abs\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            A complex number or array with complex numbers\r\n   * @return {number | BigNumber | Complex | Array | Matrix}\r\n   *            The complex conjugate of x\r\n   */\r\n  return typed(name, {\r\n    'number | BigNumber | Fraction': x => x,\r\n    Complex: x => x.conjugate(),\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,+BAA+B,EAAEK,CAAC,IAAIA,CAAC;IACvCC,OAAO,EAAED,CAAC,IAAIA,CAAC,CAACE,SAAS,CAAC,CAAC;IAC3B,gBAAgB,EAAEH,KAAK,CAACI,WAAW,CAACC,IAAI,IAAIJ,CAAC,IAAIN,OAAO,CAACM,CAAC,EAAEI,IAAI,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}