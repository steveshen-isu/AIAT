{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'factorial';\nvar dependencies = ['typed', 'gamma'];\nexport var createFactorial = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    gamma\n  } = _ref;\n  /**\r\n   * Compute the factorial of a value\r\n   *\r\n   * Factorial only supports an integer value as argument.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.factorial(n)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.factorial(5)    // returns 120\r\n   *    math.factorial(3)    // returns 6\r\n   *\r\n   * See also:\r\n   *\r\n   *    combinations, combinationsWithRep, gamma, permutations\r\n   *\r\n   * @param {number | BigNumber | Array | Matrix} n   An integer number\r\n   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`\r\n   */\n  return typed(name, {\n    number: function number(n) {\n      if (n < 0) {\n        throw new Error('Value must be non-negative');\n      }\n      return gamma(n + 1);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.isNegative()) {\n        throw new Error('Value must be non-negative');\n      }\n      return gamma(n.plus(1));\n    },\n    'Array | Matrix': typed.referToSelf(self => n => deepMap(n, self))\n  });\n});","map":{"version":3,"names":["deepMap","factory","name","dependencies","createFactorial","_ref","typed","gamma","number","n","Error","BigNumber","isNegative","plus","referToSelf","self"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/probability/factorial.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'factorial';\r\nvar dependencies = ['typed', 'gamma'];\r\nexport var createFactorial = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    gamma\r\n  } = _ref;\r\n  /**\r\n   * Compute the factorial of a value\r\n   *\r\n   * Factorial only supports an integer value as argument.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.factorial(n)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.factorial(5)    // returns 120\r\n   *    math.factorial(3)    // returns 6\r\n   *\r\n   * See also:\r\n   *\r\n   *    combinations, combinationsWithRep, gamma, permutations\r\n   *\r\n   * @param {number | BigNumber | Array | Matrix} n   An integer number\r\n   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`\r\n   */\r\n  return typed(name, {\r\n    number: function number(n) {\r\n      if (n < 0) {\r\n        throw new Error('Value must be non-negative');\r\n      }\r\n      return gamma(n + 1);\r\n    },\r\n    BigNumber: function BigNumber(n) {\r\n      if (n.isNegative()) {\r\n        throw new Error('Value must be non-negative');\r\n      }\r\n      return gamma(n.plus(1));\r\n    },\r\n    'Array | Matrix': typed.referToSelf(self => n => deepMap(n, self))\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;AACrC,OAAO,IAAIC,eAAe,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC9E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBM,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,GAAG,CAAC,EAAE;QACT,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MACA,OAAOH,KAAK,CAACE,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;IACDE,SAAS,EAAE,SAASA,SAASA,CAACF,CAAC,EAAE;MAC/B,IAAIA,CAAC,CAACG,UAAU,CAAC,CAAC,EAAE;QAClB,MAAM,IAAIF,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MACA,OAAOH,KAAK,CAACE,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC;IACD,gBAAgB,EAAEP,KAAK,CAACQ,WAAW,CAACC,IAAI,IAAIN,CAAC,IAAIT,OAAO,CAACS,CAAC,EAAEM,IAAI,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}