{"ast":null,"code":"import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { safeNumberType } from '../../utils/number.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'min';\nvar dependencies = ['typed', 'config', 'numeric', 'smaller'];\nexport var createMin = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    numeric,\n    smaller\n  } = _ref;\n  /**\r\n   * Compute the minimum value of a matrix or a  list of values.\r\n   * In case of a multidimensional array, the minimum of the flattened array\r\n   * will be calculated. When `dim` is provided, the minimum over the selected\r\n   * dimension will be calculated. Parameter `dim` is zero-based.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.min(a, b, c, ...)\r\n   *     math.min(A)\r\n   *     math.min(A, dimension)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.min(2, 1, 4, 3)                  // returns 1\r\n   *     math.min([2, 1, 4, 3])                // returns 1\r\n   *\r\n   *     // minimum over a specified dimension (zero-based)\r\n   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]\r\n   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]\r\n   *\r\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\r\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, max, prod, std, sum, variance\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The minimum value\r\n   */\n  return typed(name, {\n    // min([a, b, c, d, ...])\n    'Array | Matrix': _min,\n    // min([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _smallest);\n    },\n    // min(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function min');\n      }\n      return _min(args);\n    }\n  });\n\n  /**\r\n   * Return the smallest of two values\r\n   * @param {*} x\r\n   * @param {*} y\r\n   * @returns {*} Returns x when x is smallest, or y when y is smallest\r\n   * @private\r\n   */\n  function _smallest(x, y) {\n    try {\n      return smaller(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'min', y);\n    }\n  }\n\n  /**\r\n   * Recursively calculate the minimum value in an n-dimensional array\r\n   * @param {Array} array\r\n   * @return {number} min\r\n   * @private\r\n   */\n  function _min(array) {\n    var min;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          min = NaN;\n        } else if (min === undefined || smaller(value, min)) {\n          min = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'min', value);\n      }\n    });\n    if (min === undefined) {\n      throw new Error('Cannot calculate min of an empty array');\n    }\n\n    // make sure returning numeric value: parse a string into a numeric value\n    if (typeof min === 'string') {\n      min = numeric(min, safeNumberType(min, config));\n    }\n    return min;\n  }\n});","map":{"version":3,"names":["containsCollections","deepForEach","reduce","factory","safeNumberType","improveErrorMessage","name","dependencies","createMin","_ref","typed","config","numeric","smaller","_min","Array__Matrix_number__BigNumber","array","dim","valueOf","_smallest","_","args","TypeError","x","y","err","min","value","isNaN","NaN","undefined","Error"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/statistics/min.js"],"sourcesContent":["import { containsCollections, deepForEach, reduce } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { safeNumberType } from '../../utils/number.js';\r\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\r\nvar name = 'min';\r\nvar dependencies = ['typed', 'config', 'numeric', 'smaller'];\r\nexport var createMin = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    numeric,\r\n    smaller\r\n  } = _ref;\r\n  /**\r\n   * Compute the minimum value of a matrix or a  list of values.\r\n   * In case of a multidimensional array, the minimum of the flattened array\r\n   * will be calculated. When `dim` is provided, the minimum over the selected\r\n   * dimension will be calculated. Parameter `dim` is zero-based.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.min(a, b, c, ...)\r\n   *     math.min(A)\r\n   *     math.min(A, dimension)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.min(2, 1, 4, 3)                  // returns 1\r\n   *     math.min([2, 1, 4, 3])                // returns 1\r\n   *\r\n   *     // minimum over a specified dimension (zero-based)\r\n   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]\r\n   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]\r\n   *\r\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\r\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, max, prod, std, sum, variance\r\n   *\r\n   * @param {... *} args  A single matrix or or multiple scalar values\r\n   * @return {*} The minimum value\r\n   */\r\n  return typed(name, {\r\n    // min([a, b, c, d, ...])\r\n    'Array | Matrix': _min,\r\n    // min([a, b, c, d, ...], dim)\r\n    'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {\r\n      return reduce(array, dim.valueOf(), _smallest);\r\n    },\r\n    // min(a, b, c, d, ...)\r\n    '...': function _(args) {\r\n      if (containsCollections(args)) {\r\n        throw new TypeError('Scalar values expected in function min');\r\n      }\r\n      return _min(args);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Return the smallest of two values\r\n   * @param {*} x\r\n   * @param {*} y\r\n   * @returns {*} Returns x when x is smallest, or y when y is smallest\r\n   * @private\r\n   */\r\n  function _smallest(x, y) {\r\n    try {\r\n      return smaller(x, y) ? x : y;\r\n    } catch (err) {\r\n      throw improveErrorMessage(err, 'min', y);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recursively calculate the minimum value in an n-dimensional array\r\n   * @param {Array} array\r\n   * @return {number} min\r\n   * @private\r\n   */\r\n  function _min(array) {\r\n    var min;\r\n    deepForEach(array, function (value) {\r\n      try {\r\n        if (isNaN(value) && typeof value === 'number') {\r\n          min = NaN;\r\n        } else if (min === undefined || smaller(value, min)) {\r\n          min = value;\r\n        }\r\n      } catch (err) {\r\n        throw improveErrorMessage(err, 'min', value);\r\n      }\r\n    });\r\n    if (min === undefined) {\r\n      throw new Error('Cannot calculate min of an empty array');\r\n    }\r\n\r\n    // make sure returning numeric value: parse a string into a numeric value\r\n    if (typeof min === 'string') {\r\n      min = numeric(min, safeNumberType(min, config));\r\n    }\r\n    return min;\r\n  }\r\n});"],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,WAAW,EAAEC,MAAM,QAAQ,2BAA2B;AACpF,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC;AAC5D,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,OAAO;IACPC;EACF,CAAC,GAAGJ,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB;IACA,gBAAgB,EAAEQ,IAAI;IACtB;IACA,oCAAoC,EAAE,SAASC,+BAA+BA,CAACC,KAAK,EAAEC,GAAG,EAAE;MACzF,OAAOf,MAAM,CAACc,KAAK,EAAEC,GAAG,CAACC,OAAO,CAAC,CAAC,EAAEC,SAAS,CAAC;IAChD,CAAC;IACD;IACA,KAAK,EAAE,SAASC,CAACA,CAACC,IAAI,EAAE;MACtB,IAAIrB,mBAAmB,CAACqB,IAAI,CAAC,EAAE;QAC7B,MAAM,IAAIC,SAAS,CAAC,wCAAwC,CAAC;MAC/D;MACA,OAAOR,IAAI,CAACO,IAAI,CAAC;IACnB;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASF,SAASA,CAACI,CAAC,EAAEC,CAAC,EAAE;IACvB,IAAI;MACF,OAAOX,OAAO,CAACU,CAAC,EAAEC,CAAC,CAAC,GAAGD,CAAC,GAAGC,CAAC;IAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,MAAMpB,mBAAmB,CAACoB,GAAG,EAAE,KAAK,EAAED,CAAC,CAAC;IAC1C;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASV,IAAIA,CAACE,KAAK,EAAE;IACnB,IAAIU,GAAG;IACPzB,WAAW,CAACe,KAAK,EAAE,UAAUW,KAAK,EAAE;MAClC,IAAI;QACF,IAAIC,KAAK,CAACD,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;UAC7CD,GAAG,GAAGG,GAAG;QACX,CAAC,MAAM,IAAIH,GAAG,KAAKI,SAAS,IAAIjB,OAAO,CAACc,KAAK,EAAED,GAAG,CAAC,EAAE;UACnDA,GAAG,GAAGC,KAAK;QACb;MACF,CAAC,CAAC,OAAOF,GAAG,EAAE;QACZ,MAAMpB,mBAAmB,CAACoB,GAAG,EAAE,KAAK,EAAEE,KAAK,CAAC;MAC9C;IACF,CAAC,CAAC;IACF,IAAID,GAAG,KAAKI,SAAS,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAC,wCAAwC,CAAC;IAC3D;;IAEA;IACA,IAAI,OAAOL,GAAG,KAAK,QAAQ,EAAE;MAC3BA,GAAG,GAAGd,OAAO,CAACc,GAAG,EAAEtB,cAAc,CAACsB,GAAG,EAAEf,MAAM,CAAC,CAAC;IACjD;IACA,OAAOe,GAAG;EACZ;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}