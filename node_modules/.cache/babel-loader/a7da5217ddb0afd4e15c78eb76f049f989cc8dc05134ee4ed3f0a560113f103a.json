{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtractScalar', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtractScalar,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    number: _number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = _number;\n  /**\r\n   * A unit can be constructed in the following ways:\r\n   *\r\n   *     const a = new Unit(value, valuelessUnit)\r\n   *     const b = new Unit(null, valuelessUnit)\r\n   *     const c = Unit.parse(str)\r\n   *\r\n   * Example usage:\r\n   *\r\n   *     const a = new Unit(5, 'cm')               // 50 mm\r\n   *     const b = Unit.parse('23 kg')             // 23 kg\r\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\r\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\r\n   *\r\n   * @class Unit\r\n   * @constructor Unit\r\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\r\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\r\n   */\n  function Unit(value, valuelessUnit) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as supplied.\n    this.skipAutomaticSimplification = true;\n    if (valuelessUnit === undefined) {\n      this.units = [];\n      this.dimensions = BASE_DIMENSIONS.map(x => 0);\n    } else if (typeof valuelessUnit === 'string') {\n      var u = Unit.parse(valuelessUnit);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else if (isUnit(valuelessUnit) && valuelessUnit.value === null) {\n      // clone from valuelessUnit\n      this.fixPrefix = valuelessUnit.fixPrefix;\n      this.skipAutomaticSimplification = valuelessUnit.skipAutomaticSimplification;\n      this.dimensions = valuelessUnit.dimensions.slice(0);\n      this.units = valuelessUnit.units.map(u => _extends({}, u));\n    } else {\n      throw new TypeError('Second parameter in Unit constructor must be a string or valueless Unit');\n    }\n    this.value = this._normalize(value);\n  }\n\n  /**\r\n   * Attach type information\r\n   */\n  Object.defineProperty(Unit, 'name', {\n    value: 'Unit'\n  });\n  Unit.prototype.constructor = Unit;\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true;\n\n  // private variables and functions for the Unit parser\n  var text, index, c;\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    }\n\n    // get number, can have a single dot\n    if (c === '.') {\n      number += c;\n      next();\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n    while (isDigit(c)) {\n      number += c;\n      next();\n    }\n\n    // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      }\n\n      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      }\n\n      // We can now safely say that this is scientific notation.\n      number = number + tentativeNumber;\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n    return number;\n  }\n  function parseUnit() {\n    var unitName = '';\n\n    // Alphanumeric characters only; matches [a-zA-Z0-9]\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    }\n\n    // Must begin with [a-zA-Z]\n    var firstC = unitName.charAt(0);\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n\n  /**\r\n   * Parse a string into a unit. The value of the unit is parsed as number,\r\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\r\n   *\r\n   * Throws an exception if the provided string does not contain a valid unit or\r\n   * cannot be parsed.\r\n   * @memberof Unit\r\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\r\n   * @return {Unit} unit\r\n   */\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false;\n\n    // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace();\n\n    // Optional number at the start of the string\n    var valueStr = parseNumber();\n    var value = null;\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n      skipWhitespace(); // Whitespace is not required here\n\n      // handle multiplication or division right after the value, like '1/s'\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    }\n\n    // Stack to keep track of powerMultipliers applied to each parentheses group\n    var powerMultiplierStack = [];\n\n    // Running product of all elements in powerMultiplierStack\n    var powerMultiplierStackProduct = 1;\n    while (true) {\n      skipWhitespace();\n\n      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      }\n\n      // Is there something here?\n      var uStr = void 0;\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      }\n\n      // Verify the unit exists and get the prefix (if any)\n      var res = _findUnit(uStr);\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct;\n      // Is there a \"^ number\"?\n      skipWhitespace();\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n        power *= p;\n      }\n\n      // Add the unit to the list\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power\n      });\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      }\n\n      // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n      skipWhitespace();\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      }\n\n      // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n      expectingUnit = false;\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      }\n\n      // Replace the unit into the auto unit system\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    }\n\n    // Has the string been entirely consumed?\n    skipWhitespace();\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    }\n\n    // Is there a trailing slash?\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    }\n\n    // Is the parentheses stack empty?\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    }\n\n    // Are there any units at all?\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n\n  /**\r\n   * create a copy of this unit\r\n   * @memberof Unit\r\n   * @return {Unit} Returns a cloned version of the unit\r\n   */\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n    return unit;\n  };\n\n  /**\r\n   * Return the type of the value of this unit\r\n   *\r\n   * @memberof Unit\r\n   * @return {string} type of the value of the unit\r\n   */\n  Unit.prototype.valueType = function () {\n    return typeOf(this.value);\n  };\n\n  /**\r\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\r\n   * @memberof Unit\r\n   * @return {boolean} True if the unit is derived\r\n   * @private\r\n   */\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n\n  /**\r\n   * Normalize a value, based on its currently set unit(s)\r\n   * @memberof Unit\r\n   * @param {number | BigNumber | Fraction | boolean} value\r\n   * @return {number | BigNumber | Fraction | boolean} normalized value\r\n   * @private\r\n   */\n  Unit.prototype._normalize = function (value) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n    var res = value;\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n    return res;\n  };\n\n  /**\r\n   * Denormalize a value, based on its currently set unit(s)\r\n   * @memberof Unit\r\n   * @param {number} value\r\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\r\n   * @return {number} denormalized value\r\n   * @private\r\n   */\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n    var res = value;\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n    return res;\n  };\n\n  /**\r\n   * Find a unit from a string\r\n   * @memberof Unit\r\n   * @param {string} str              A string like 'cm' or 'inch'\r\n   * @returns {Object | null} result  When found, an object with fields unit and\r\n   *                                  prefix is returned. Else, null is returned.\r\n   * @private\r\n   */\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n\n  /**\r\n   * Test if the given expression is a unit.\r\n   * The unit can have a prefix but cannot have a value.\r\n   * @memberof Unit\r\n   * @param {string} name   A string to be tested whether it is a value less unit.\r\n   *                        The unit can have prefix, like \"cm\"\r\n   * @return {boolean}      true if the given string is a unit\r\n   */\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n\n  /**\r\n   * check if this unit has given base unit\r\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\r\n   * @memberof Unit\r\n   * @param {BASE_UNIT | string | undefined} base\r\n   */\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n    if (!base) {\n      return false;\n    }\n\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\r\n   * Check if this unit has a base or bases equal to another base or bases\r\n   * For derived units, the exponent on each base also must match\r\n   * @memberof Unit\r\n   * @param {Unit} other\r\n   * @return {boolean} true if equal base\r\n   */\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\r\n   * Check if this unit equals another unit\r\n   * @memberof Unit\r\n   * @param {Unit} other\r\n   * @return {boolean} true if both units are equal\r\n   */\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n\n  /**\r\n   * Multiply this unit with another one or with a scalar\r\n   * @memberof Unit\r\n   * @param {Unit} other\r\n   * @return {Unit} product of this unit and the other unit\r\n   */\n  Unit.prototype.multiply = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    }\n\n    // Append other's units list onto res\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, then the result should also have a value\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n    return getNumericIfUnitless(res);\n  };\n\n  /**\r\n   * Divide a number by this unit\r\n   *\r\n   * @memberof Unit\r\n   * @param {numeric} numerator\r\n   * @param {unit} result of dividing numerator by this unit\r\n   */\n  Unit.prototype.divideInto = function (numerator) {\n    return new Unit(numerator).divide(this);\n  };\n\n  /**\r\n   * Divide this unit by another one\r\n   * @memberof Unit\r\n   * @param {Unit | numeric} other\r\n   * @return {Unit} result of dividing this unit by the other unit\r\n   */\n  Unit.prototype.divide = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    }\n\n    // Invert and append other's units list onto res\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, the result should have a value\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n    return getNumericIfUnitless(res);\n  };\n\n  /**\r\n   * Calculate the power of a unit\r\n   * @memberof Unit\r\n   * @param {number | Fraction | BigNumber} p\r\n   * @returns {Unit}      The result: this^p\r\n   */\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    }\n\n    // Adjust the power of each unit in the list\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n    if (res.value !== null) {\n      res.value = pow(res.value, p);\n\n      // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n\n  /**\r\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\r\n   * @param {Unit} unit\r\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\r\n   */\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n\n  /**\r\n   * Calculate the absolute value of a unit\r\n   * @memberof Unit\r\n   * @param {number | Fraction | BigNumber} x\r\n   * @returns {Unit}      The result: |x|, absolute value of x\r\n   */\n  Unit.prototype.abs = function () {\n    var ret = this.clone();\n    if (ret.value !== null) {\n      if (ret._isDerived() || ret.units.length === 0 || ret.units[0].unit.offset === 0) {\n        ret.value = abs(ret.value);\n      } else {\n        // To give the correct, but unexpected, results for units with an offset.\n        // For example, abs(-283.15 degC) = -263.15 degC !!!\n        // We must take the offset into consideration here\n        var convert = ret._numberConverter(); // convert to Fraction or BigNumber if needed\n        var unitValue = convert(ret.units[0].unit.value);\n        var nominalOffset = convert(ret.units[0].unit.offset);\n        var unitOffset = multiplyScalar(unitValue, nominalOffset);\n        ret.value = subtractScalar(abs(addScalar(ret.value, unitOffset)), unitOffset);\n      }\n    }\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n    return ret;\n  };\n\n  /**\r\n   * Convert the unit to a specific unit name.\r\n   * @memberof Unit\r\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\r\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\r\n   */\n  Unit.prototype.to = function (valuelessUnit) {\n    var value = this.value === null ? this._normalize(1) : this.value;\n    var other;\n    if (typeof valuelessUnit === 'string') {\n      other = Unit.parse(valuelessUnit);\n    } else if (isUnit(valuelessUnit)) {\n      other = valuelessUnit.clone();\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n    if (!this.equalBase(other)) {\n      throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n    }\n    if (other.value !== null) {\n      throw new Error('Cannot convert to a unit with a value');\n    }\n    if (this.value === null || this._isDerived() || this.units.length === 0 || other.units.length === 0 || this.units[0].unit.offset === other.units[0].unit.offset) {\n      other.value = clone(value);\n    } else {\n      /* Need to adjust value by difference in offset to convert */\n      var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      var thisUnitValue = this.units[0].unit.value;\n      var thisNominalOffset = this.units[0].unit.offset;\n      var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);\n      var otherUnitValue = other.units[0].unit.value;\n      var otherNominalOffset = other.units[0].unit.offset;\n      var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);\n      other.value = addScalar(value, convert(subtractScalar(thisUnitOffset, otherUnitOffset)));\n    }\n    other.fixPrefix = true;\n    other.skipAutomaticSimplification = true;\n    return other;\n  };\n\n  /**\r\n   * Return the value of the unit when represented with given valueless unit\r\n   * @memberof Unit\r\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\r\n   * @return {number} Returns the unit value as number.\r\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n\n  /**\r\n   * Return the value of the unit in the original numeric type\r\n   * @memberof Unit\r\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\r\n   * @return {number | BigNumber | Fraction} Returns the unit value\r\n   */\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n\n  /**\r\n   * Get a string representation of the unit.\r\n   * @memberof Unit\r\n   * @return {string}\r\n   */\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n\n  /**\r\n   * Get a JSON representation of the unit\r\n   * @memberof Unit\r\n   * @returns {Object} Returns a JSON object structured as:\r\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\r\n   */\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.units.length > 0 ? this.formatUnits() : null,\n      fixPrefix: this.fixPrefix\n    };\n  };\n\n  /**\r\n   * Instantiate a Unit from a JSON object\r\n   * @memberof Unit\r\n   * @param {Object} json  A JSON object structured as:\r\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\r\n   * @return {Unit}\r\n   */\n  Unit.fromJSON = function (json) {\n    var _json$unit;\n    var unit = new Unit(json.value, (_json$unit = json.unit) !== null && _json$unit !== void 0 ? _json$unit : undefined);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n\n  /**\r\n   * Returns the string representation of the unit.\r\n   * @memberof Unit\r\n   * @return {string}\r\n   */\n  Unit.prototype.valueOf = Unit.prototype.toString;\n\n  /**\r\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\r\n   * The returned Unit will contain a list of the \"best\" units for formatting.\r\n   */\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = [];\n\n    // Search for a matching base\n    var matchingBase;\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        }\n\n        // Is the proposed unit list \"simpler\" than the existing one?\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n    return ret;\n  };\n\n  /**\r\n   * Returns a new Unit in the SI system with the same value as this one\r\n   */\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = [];\n\n    // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    }\n\n    // Replace this unit list with the proposed list\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    if (this.value !== null) {\n      ret.value = null;\n      return this.to(ret);\n    }\n    return ret;\n  };\n\n  /**\r\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\r\n   * @memberof Unit\r\n   * @return {string}\r\n   */\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    }\n    // Remove leading \" \"\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1);\n\n    // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n    var str = strNum;\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n    str += strDen;\n    return str;\n  };\n\n  /**\r\n   * Get a string representation of the Unit, with optional formatting options.\r\n   * @memberof Unit\r\n   * @param {Object | number | Function} [options]  Formatting options. See\r\n   *                                                lib/utils/number:format for a\r\n   *                                                description of the available\r\n   *                                                options.\r\n   * @return {string}\r\n   */\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify();\n\n    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n    var isImaginary = false;\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    }\n\n    // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n    var value = simp._denormalize(simp.value);\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n    str += unitStr;\n    return str;\n  };\n\n  /**\r\n   * Calculate the best prefix using current value.\r\n   * @memberof Unit\r\n   * @returns {Object} prefix\r\n   * @private\r\n   */\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n    return bestPrefix;\n  };\n\n  /**\r\n   * Returns an array of units whose sum is equal to this unit\r\n   * @memberof Unit\r\n   * @param {Array} [parts] An array of strings or valueless units.\r\n   *\r\n   *   Example:\r\n   *\r\n   *   const u = new Unit(1, 'm')\r\n   *   u.splitUnit(['feet', 'inch'])\r\n   *     [ 3 feet, 3.3700787401575 inch ]\r\n   *\r\n   * @return {Array} An array of units.\r\n   */\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break;\n\n      // Get the numeric value of this unit\n      var xNumeric = x.toNumeric();\n\n      // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtractScalar(x, y);\n    }\n\n    // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n    var testSum = 0;\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n    ret.push(x);\n    return ret;\n  };\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      R: {\n        name: 'R',\n        value: 1e27,\n        scientific: true\n      },\n      Q: {\n        name: 'Q',\n        value: 1e30,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      },\n      r: {\n        name: 'r',\n        value: 1e-27,\n        scientific: true\n      },\n      q: {\n        name: 'q',\n        value: 1e-30,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      ronna: {\n        name: 'ronna',\n        value: 1e27,\n        scientific: true\n      },\n      quetta: {\n        name: 'quetta',\n        value: 1e30,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      },\n      ronto: {\n        name: 'ronto',\n        value: 1e-27,\n        scientific: true\n      },\n      quecto: {\n        name: 'quecto',\n        value: 1e-30,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      R: {\n        name: 'R',\n        value: 1e54,\n        scientific: true\n      },\n      Q: {\n        name: 'Q',\n        value: 1e60,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      },\n      r: {\n        name: 'r',\n        value: 1e-54,\n        scientific: true\n      },\n      q: {\n        name: 'q',\n        value: 1e-60,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      R: {\n        name: 'R',\n        value: 1e81,\n        scientific: true\n      },\n      Q: {\n        name: 'Q',\n        value: 1e90,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      },\n      r: {\n        name: 'r',\n        value: 1e-81,\n        scientific: true\n      },\n      q: {\n        name: 'q',\n        value: 1e-90,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\r\n   * Index  Dimension\r\n   * -----  ---------\r\n   *   0    Length\r\n   *   1    Mass\r\n   *   2    Time\r\n   *   3    Current\r\n   *   4    Temperature\r\n   *   5    Luminous intensity\r\n   *   6    Amount of substance\r\n   *   7    Angle\r\n   *   8    Bit (digital)\r\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\r\n   *\r\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000000061611519921875,\n      offset: 0\n    },\n    // 1/61440 gallons\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911953125,\n      offset: 0\n    },\n    // 1/1024 gallons\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000295735295625,\n      offset: 0\n    },\n    // 1/128 gallons\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00011829411825,\n      offset: 0\n    },\n    // 1/32 gallons\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882365,\n      offset: 0\n    },\n    // 1/16 gallons\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000473176473,\n      offset: 0\n    },\n    // 1/8 gallons\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000946352946,\n      offset: 0\n    },\n    // 1/4 gallons\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785411784,\n      offset: 0\n    },\n    // 3.785411784 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.117347765304,\n      offset: 0\n    },\n    // 31 gallons\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.158987294928,\n      offset: 0\n    },\n    // 42 gallons\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.238480942392,\n      offset: 0\n    },\n    // 63 gallons\n\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) * (5 / 9)\n    // K(R) = °R * (5 / 9)\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: new _Fraction(5, 9),\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: new _Fraction(5, 9),\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: new _Fraction(5, 9),\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: new _Fraction(5, 9),\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both kiloerg and kerg are acceptable\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n    /*\r\n     * Unicode breaks in browsers if charset is not specified\r\n    Ω: {\r\n      name: 'Ω',\r\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  };\n\n  // aliases (formerly plurals)\n  // note that ALIASES is only used at creation to create more entries in UNITS by copying the aliased units\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fldr: 'fluiddram',\n    fluiddrams: 'fluiddram',\n    floz: 'fluidounce',\n    fluidounces: 'fluidounce',\n    gi: 'gill',\n    gills: 'gill',\n    cp: 'cup',\n    cups: 'cup',\n    pt: 'pint',\n    pints: 'pint',\n    qt: 'quart',\n    quarts: 'quart',\n    gal: 'gallon',\n    gallons: 'gallon',\n    bbl: 'beerbarrel',\n    beerbarrels: 'beerbarrel',\n    obl: 'oilbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    amps: 'ampere',\n    amp: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n\n  /**\r\n   * Calculate the values for the angle units.\r\n   * Value is calculated as number or BigNumber depending on the configuration\r\n   * @param {{number: 'number' | 'BigNumber'}} config\r\n   */\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    }\n\n    // copy to the full names of the angles\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  }\n\n  // apply the angle values now\n  calculateAngleValues(config);\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n\n  /**\r\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\r\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\r\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\r\n   */\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  };\n\n  // Clone to create the other unit systems\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  };\n  // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  };\n\n  // Add additional unit systems here.\n\n  // Choose a unit system to seed the auto unit system.\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n\n  // Set the current unit system\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n\n  /**\r\n   * Set a unit system for formatting derived units.\r\n   * @memberof Unit\r\n   * @param {string} [name] The name of the unit system.\r\n   */\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n\n  /**\r\n   * Return the current unit system.\r\n   * @memberof Unit\r\n   * @return {string} The current unit system.\r\n   */\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n\n  /**\r\n   * Converters to convert from number to an other numeric type like BigNumber\r\n   * or Fraction\r\n   */\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      if (x !== null && x !== void 0 && x.isFraction) return new _BigNumber(String(x.n)).div(String(x.d)).times(String(x.s));\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      if (x !== null && x !== void 0 && x.isFraction) return _number(x);\n      return x;\n    }\n  };\n\n  /**\r\n   * Retrieve the right converter function corresponding with this unit's\r\n   * value\r\n   *\r\n   * @memberof Unit\r\n   * @return {Function}\r\n   */\n  Unit.prototype._numberConverter = function () {\n    var convert = Unit.typeConverters[this.valueType()];\n    if (convert) {\n      return convert;\n    }\n    throw new TypeError('Unsupported Unit value type \"' + this.valueType() + '\"');\n  };\n\n  /**\r\n   * Retrieve the right convertor function corresponding with the type\r\n   * of provided exampleValue.\r\n   *\r\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\r\n   *                        In case of an unknown type,\r\n   * @return {Function}\r\n   */\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n    return Unit.typeConverters[type];\n  };\n\n  // Add dimensions to each built-in unit\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  }\n\n  // Create aliases\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n\n  /**\r\n   * Checks if a character is a valid latin letter (upper or lower case).\r\n   * Note that this function can be overridden, for example to allow support of other alphabets.\r\n   * @memberof Unit\r\n   * @param {string} c Tested character\r\n   * @return {boolean} true if the character is a latin letter\r\n   */\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n\n  /**\r\n   * Wrapper around createUnitSingle.\r\n   * Example:\r\n   *  createUnit( {\r\n   *     foo: {\r\n   *       prefixes: 'long',\r\n   *       baseName: 'essence-of-foo'\r\n   *     },\r\n   *     bar: '40 foo',\r\n   *     baz: {\r\n   *       definition: '1 bar/hour',\r\n   *       prefixes: 'long'\r\n   *     }\r\n   *   },\r\n   *   {\r\n   *     override: true\r\n   *   })\r\n   * @memberof Unit\r\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\r\n   * @param {object} options\r\n   * @return {Unit} the last created unit\r\n   */\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    }\n\n    // Remove all units and aliases we are overriding\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    }\n\n    // TODO: traverse multiple times until all units have been added\n    var lastUnit;\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n    return lastUnit;\n  };\n\n  /**\r\n   * Create a user-defined unit and register it with the Unit type.\r\n   * Example:\r\n   *  createUnitSingle('knot', '0.514444444 m/s')\r\n   *\r\n   * @memberof Unit\r\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\r\n   * @param {string | Unit | object} definition      Definition of the unit in terms\r\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\r\n   * or an Object. If an Object, may have the following properties:\r\n   *   - definition {string | Unit} The definition of this unit.\r\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\r\n   *     The default is \"none\".\r\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\r\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\r\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\r\n   *     is 459.67. Default is 0.\r\n   *   - baseName {string} If the unit's dimension does not match that of any other\r\n   *     base unit, the name of the newly create base unit. Otherwise, this property\r\n   *     has no effect.\r\n   *\r\n   * @return {Unit}\r\n   */\n  Unit.createUnitSingle = function (name, obj) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    }\n\n    // Check collisions with existing units\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    }\n\n    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n    aliases = aliases || [];\n    offset = offset || 0;\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    }\n\n    // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n    var newUnit = {};\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n      BASE_DIMENSIONS.push(baseName);\n\n      // Push 0 onto existing base units\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      }\n\n      // Add the new base unit\n      var newBaseUnit = {\n        dimensions: []\n      };\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes,\n        offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes,\n        offset\n      };\n\n      // Create a new base if no matching base exists\n      var anyMatch = false;\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n    Unit.UNITS[name] = newUnit;\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    }\n\n    // delete the memoization cache because we created a new unit\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n\n    // delete the memoization cache because we deleted a unit\n    delete _findUnit.cache;\n  };\n\n  // expose arrays with prefixes, dimensions, units, systems\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["_defineProperty","_extends","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","isComplex","isUnit","typeOf","factory","memoize","endsWith","clone","hasOwnProperty","createBigNumberPi","createPi","name","dependencies","createUnitClass","_ref","on","config","addScalar","subtractScalar","multiplyScalar","divideScalar","pow","abs","fix","round","equal","isNumeric","format","number","_number","Complex","BigNumber","_BigNumber","Fraction","_Fraction","toNumber","Unit","value","valuelessUnit","Error","undefined","TypeError","fixPrefix","skipAutomaticSimplification","units","dimensions","BASE_DIMENSIONS","map","x","u","parse","slice","_normalize","prototype","constructor","type","text","index","c","skipWhitespace","next","isDigitDot","isDigit","charAt","revert","oldIndex","parseNumber","tentativeNumber","tentativeIndex","parseUnit","unitName","isValidAlpha","firstC","parseCharacter","toFind","str","options","unit","powerMultiplierCurrent","expectingUnit","valueStr","err","parseFloat","powerMultiplierStack","powerMultiplierStackProduct","uStr","oldC","SyntaxError","toString","res","_findUnit","power","p","prefix","i","pop","base","baseDim","key","UNIT_SYSTEMS","auto","allowNoUnits","valueType","_isDerived","Math","convert","_getNumberConverter","unitValue","unitPrefixValue","unitPower","_denormalize","prefixValue","UNITS","prefixes","_name","_unit","prefixLen","prefixName","substring","_prefix","hasher","args","limit","isValuelessUnit","hasBase","BASE_UNITS","equalBase","other","equals","multiply","_other","_i","inverted","valThis","valOther","getNumericIfUnitless","divideInto","numerator","divide","_i2","_i3","NONE","predictable","ret","offset","_numberConverter","nominalOffset","unitOffset","W","to","concat","thisUnitValue","thisNominalOffset","thisUnitOffset","otherUnitValue","otherNominalOffset","otherUnitOffset","toNumeric","toJSON","mathjs","formatUnits","fromJSON","json","_json$unit","valueOf","simplify","proposedUnitList","matchingBase","currentUnitSystem","matchingUnit","missingBaseDim","toSI","si","strNum","strDen","nNum","nDen","_i4","substr","simp","isImaginary","re","VAR","VA","_bestPrefix","unitStr","absValue","absUnitValue","bestPrefix","bestDiff","log","LN10","scientific","diff","splitUnit","parts","xNumeric","xRounded","xFixed","isNearlyEqual","y","testSum","_i5","PREFIXES","SHORT","da","h","k","M","G","T","P","E","Z","Y","R","Q","d","m","n","f","a","z","q","LONG","deca","hecto","kilo","mega","giga","tera","peta","exa","zetta","yotta","ronna","quetta","deci","centi","milli","micro","nano","pico","femto","atto","zepto","yocto","ronto","quecto","SQUARED","CUBIC","BINARY_SHORT_SI","BINARY_SHORT_IEC","Ki","Mi","Gi","Ti","Pi","Ei","Zi","Yi","BINARY_LONG_SI","BINARY_LONG_IEC","kibi","mebi","gibi","tebi","pebi","exi","zebi","yobi","BTU","MM","SHORTLONG","BINARY_SHORT","BINARY_LONG","MASS","LENGTH","TIME","CURRENT","TEMPERATURE","LUMINOUS_INTENSITY","AMOUNT_OF_SUBSTANCE","FORCE","SURFACE","VOLUME","ENERGY","POWER","PRESSURE","ELECTRIC_CHARGE","ELECTRIC_CAPACITANCE","ELECTRIC_POTENTIAL","ELECTRIC_RESISTANCE","ELECTRIC_INDUCTANCE","ELECTRIC_CONDUCTANCE","MAGNETIC_FLUX","MAGNETIC_FLUX_DENSITY","FREQUENCY","ANGLE","BIT","BASE_UNIT_NONE","UNIT_NONE","meter","inch","foot","yard","mile","link","rod","chain","angstrom","in","ft","yd","mi","li","rd","ch","mil","m2","sqin","sqft","sqyd","sqmi","sqrd","sqch","sqmil","acre","hectare","m3","L","l","litre","cuin","cuft","cuyd","teaspoon","tablespoon","drop","gtt","minim","fluiddram","fluidounce","gill","cc","cup","pint","quart","gallon","beerbarrel","oilbarrel","hogshead","g","gram","ton","tonne","grain","dram","ounce","poundmass","hundredweight","stick","stone","gr","dr","oz","lbm","cwt","s","min","second","sec","minute","hour","day","week","month","year","decade","century","millennium","hertz","reciprocal","Hz","rad","radian","deg","degree","grad","gradian","cycle","arcsec","arcmin","A","ampere","K","degC","degF","degR","kelvin","celsius","fahrenheit","rankine","mol","mole","cd","candela","N","newton","dyn","dyne","lbf","poundforce","kip","kilogramforce","J","joule","erg","Wh","eV","electronvolt","watt","hp","I","Pa","psi","atm","bar","torr","mmHg","mmH2O","cmH2O","coulomb","C","farad","F","volt","V","ohm","henry","H","siemens","S","weber","Wb","tesla","b","bits","B","bytes","ALIASES","meters","inches","feet","yards","miles","links","rods","chains","angstroms","lt","litres","liter","liters","teaspoons","tablespoons","minims","fldr","fluiddrams","floz","fluidounces","gi","gills","cp","cups","pt","pints","qt","quarts","gal","gallons","bbl","beerbarrels","obl","oilbarrels","hogsheads","gtts","grams","tons","tonnes","grains","drams","ounces","poundmasses","hundredweights","sticks","lb","lbs","kips","kgf","acres","hectares","sqfeet","sqyard","sqmile","sqmiles","mmhg","mmh2o","cmh2o","seconds","secs","minutes","mins","hours","hr","hrs","days","weeks","months","years","decades","centuries","millennia","radians","degrees","gradians","cycles","arcsecond","arcseconds","arcminute","arcminutes","BTUs","watts","joules","amperes","amps","amp","coulombs","volts","ohms","farads","webers","teslas","electronvolts","moles","bit","byte","calculateAngleValues","pi","div","times","PI","curr","prev","cgs","JSON","stringify","us","setUnitSystem","join","getUnitSystem","_key","typeConverters","isFraction","String","_key2","_name2","_unit2","alias","_key3","test","assertUnitNameIsValid","createUnit","obj","override","_key4","deleteUnit","aliases","lastUnit","_key5","createUnitSingle","defUnit","definition","baseName","ex","message","toUpperCase","newUnit","indexOf","newBaseUnit","_i6","anyMatch","_i7","match","j","_newBaseUnit","_i8","aliasName","_alias","_key6","cache","isClass"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/type/unit/Unit.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\r\nimport _extends from \"@babel/runtime/helpers/extends\";\r\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\r\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\r\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { memoize } from '../../utils/function.js';\r\nimport { endsWith } from '../../utils/string.js';\r\nimport { clone, hasOwnProperty } from '../../utils/object.js';\r\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\r\nvar name = 'Unit';\r\nvar dependencies = ['?on', 'config', 'addScalar', 'subtractScalar', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\r\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    on,\r\n    config,\r\n    addScalar,\r\n    subtractScalar,\r\n    multiplyScalar,\r\n    divideScalar,\r\n    pow,\r\n    abs,\r\n    fix,\r\n    round,\r\n    equal,\r\n    isNumeric,\r\n    format,\r\n    number: _number,\r\n    Complex,\r\n    BigNumber: _BigNumber,\r\n    Fraction: _Fraction\r\n  } = _ref;\r\n  var toNumber = _number;\r\n  /**\r\n   * A unit can be constructed in the following ways:\r\n   *\r\n   *     const a = new Unit(value, valuelessUnit)\r\n   *     const b = new Unit(null, valuelessUnit)\r\n   *     const c = Unit.parse(str)\r\n   *\r\n   * Example usage:\r\n   *\r\n   *     const a = new Unit(5, 'cm')               // 50 mm\r\n   *     const b = Unit.parse('23 kg')             // 23 kg\r\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\r\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\r\n   *\r\n   * @class Unit\r\n   * @constructor Unit\r\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\r\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\r\n   */\r\n  function Unit(value, valuelessUnit) {\r\n    if (!(this instanceof Unit)) {\r\n      throw new Error('Constructor must be called with the new operator');\r\n    }\r\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\r\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\r\n    }\r\n    this.fixPrefix = false; // if true, function format will not search for the\r\n    // best prefix but leave it as initially provided.\r\n    // fixPrefix is set true by the method Unit.to\r\n\r\n    // The justification behind this is that if the constructor is explicitly called,\r\n    // the caller wishes the units to be returned exactly as supplied.\r\n    this.skipAutomaticSimplification = true;\r\n    if (valuelessUnit === undefined) {\r\n      this.units = [];\r\n      this.dimensions = BASE_DIMENSIONS.map(x => 0);\r\n    } else if (typeof valuelessUnit === 'string') {\r\n      var u = Unit.parse(valuelessUnit);\r\n      this.units = u.units;\r\n      this.dimensions = u.dimensions;\r\n    } else if (isUnit(valuelessUnit) && valuelessUnit.value === null) {\r\n      // clone from valuelessUnit\r\n      this.fixPrefix = valuelessUnit.fixPrefix;\r\n      this.skipAutomaticSimplification = valuelessUnit.skipAutomaticSimplification;\r\n      this.dimensions = valuelessUnit.dimensions.slice(0);\r\n      this.units = valuelessUnit.units.map(u => _extends({}, u));\r\n    } else {\r\n      throw new TypeError('Second parameter in Unit constructor must be a string or valueless Unit');\r\n    }\r\n    this.value = this._normalize(value);\r\n  }\r\n\r\n  /**\r\n   * Attach type information\r\n   */\r\n  Object.defineProperty(Unit, 'name', {\r\n    value: 'Unit'\r\n  });\r\n  Unit.prototype.constructor = Unit;\r\n  Unit.prototype.type = 'Unit';\r\n  Unit.prototype.isUnit = true;\r\n\r\n  // private variables and functions for the Unit parser\r\n  var text, index, c;\r\n  function skipWhitespace() {\r\n    while (c === ' ' || c === '\\t') {\r\n      next();\r\n    }\r\n  }\r\n  function isDigitDot(c) {\r\n    return c >= '0' && c <= '9' || c === '.';\r\n  }\r\n  function isDigit(c) {\r\n    return c >= '0' && c <= '9';\r\n  }\r\n  function next() {\r\n    index++;\r\n    c = text.charAt(index);\r\n  }\r\n  function revert(oldIndex) {\r\n    index = oldIndex;\r\n    c = text.charAt(index);\r\n  }\r\n  function parseNumber() {\r\n    var number = '';\r\n    var oldIndex = index;\r\n    if (c === '+') {\r\n      next();\r\n    } else if (c === '-') {\r\n      number += c;\r\n      next();\r\n    }\r\n    if (!isDigitDot(c)) {\r\n      // a + or - must be followed by a digit\r\n      revert(oldIndex);\r\n      return null;\r\n    }\r\n\r\n    // get number, can have a single dot\r\n    if (c === '.') {\r\n      number += c;\r\n      next();\r\n      if (!isDigit(c)) {\r\n        // this is no legal number, it is just a dot\r\n        revert(oldIndex);\r\n        return null;\r\n      }\r\n    } else {\r\n      while (isDigit(c)) {\r\n        number += c;\r\n        next();\r\n      }\r\n      if (c === '.') {\r\n        number += c;\r\n        next();\r\n      }\r\n    }\r\n    while (isDigit(c)) {\r\n      number += c;\r\n      next();\r\n    }\r\n\r\n    // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\r\n    if (c === 'E' || c === 'e') {\r\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\r\n\r\n      var tentativeNumber = '';\r\n      var tentativeIndex = index;\r\n      tentativeNumber += c;\r\n      next();\r\n      if (c === '+' || c === '-') {\r\n        tentativeNumber += c;\r\n        next();\r\n      }\r\n\r\n      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\r\n      if (!isDigit(c)) {\r\n        // The e or E must belong to something else, so return the number without the e or E.\r\n        revert(tentativeIndex);\r\n        return number;\r\n      }\r\n\r\n      // We can now safely say that this is scientific notation.\r\n      number = number + tentativeNumber;\r\n      while (isDigit(c)) {\r\n        number += c;\r\n        next();\r\n      }\r\n    }\r\n    return number;\r\n  }\r\n  function parseUnit() {\r\n    var unitName = '';\r\n\r\n    // Alphanumeric characters only; matches [a-zA-Z0-9]\r\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\r\n      unitName += c;\r\n      next();\r\n    }\r\n\r\n    // Must begin with [a-zA-Z]\r\n    var firstC = unitName.charAt(0);\r\n    if (Unit.isValidAlpha(firstC)) {\r\n      return unitName;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  function parseCharacter(toFind) {\r\n    if (c === toFind) {\r\n      next();\r\n      return toFind;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse a string into a unit. The value of the unit is parsed as number,\r\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\r\n   *\r\n   * Throws an exception if the provided string does not contain a valid unit or\r\n   * cannot be parsed.\r\n   * @memberof Unit\r\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\r\n   * @return {Unit} unit\r\n   */\r\n  Unit.parse = function (str, options) {\r\n    options = options || {};\r\n    text = str;\r\n    index = -1;\r\n    c = '';\r\n    if (typeof text !== 'string') {\r\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\r\n    }\r\n    var unit = new Unit();\r\n    unit.units = [];\r\n    var powerMultiplierCurrent = 1;\r\n    var expectingUnit = false;\r\n\r\n    // A unit should follow this pattern:\r\n    // [number] ...[ [*/] unit[^number] ]\r\n    // unit[^number] ... [ [*/] unit[^number] ]\r\n\r\n    // Rules:\r\n    // number is any floating point number.\r\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\r\n    // The string may optionally begin with a number.\r\n    // Each unit may optionally be followed by ^number.\r\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\r\n    //   2m^2kg/s^2\r\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\r\n    //   4erg\r\n\r\n    next();\r\n    skipWhitespace();\r\n\r\n    // Optional number at the start of the string\r\n    var valueStr = parseNumber();\r\n    var value = null;\r\n    if (valueStr) {\r\n      if (config.number === 'BigNumber') {\r\n        value = new _BigNumber(valueStr);\r\n      } else if (config.number === 'Fraction') {\r\n        try {\r\n          // not all numbers can be turned in Fractions, for example very small numbers not\r\n          value = new _Fraction(valueStr);\r\n        } catch (err) {\r\n          value = parseFloat(valueStr);\r\n        }\r\n      } else {\r\n        // number\r\n        value = parseFloat(valueStr);\r\n      }\r\n      skipWhitespace(); // Whitespace is not required here\r\n\r\n      // handle multiplication or division right after the value, like '1/s'\r\n      if (parseCharacter('*')) {\r\n        powerMultiplierCurrent = 1;\r\n        expectingUnit = true;\r\n      } else if (parseCharacter('/')) {\r\n        powerMultiplierCurrent = -1;\r\n        expectingUnit = true;\r\n      }\r\n    }\r\n\r\n    // Stack to keep track of powerMultipliers applied to each parentheses group\r\n    var powerMultiplierStack = [];\r\n\r\n    // Running product of all elements in powerMultiplierStack\r\n    var powerMultiplierStackProduct = 1;\r\n    while (true) {\r\n      skipWhitespace();\r\n\r\n      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\r\n      // A '(' will always appear directly before a unit.\r\n      while (c === '(') {\r\n        powerMultiplierStack.push(powerMultiplierCurrent);\r\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\r\n        powerMultiplierCurrent = 1;\r\n        next();\r\n        skipWhitespace();\r\n      }\r\n\r\n      // Is there something here?\r\n      var uStr = void 0;\r\n      if (c) {\r\n        var oldC = c;\r\n        uStr = parseUnit();\r\n        if (uStr === null) {\r\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\r\n        }\r\n      } else {\r\n        // End of input.\r\n        break;\r\n      }\r\n\r\n      // Verify the unit exists and get the prefix (if any)\r\n      var res = _findUnit(uStr);\r\n      if (res === null) {\r\n        // Unit not found.\r\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\r\n      }\r\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct;\r\n      // Is there a \"^ number\"?\r\n      skipWhitespace();\r\n      if (parseCharacter('^')) {\r\n        skipWhitespace();\r\n        var p = parseNumber();\r\n        if (p === null) {\r\n          // No valid number found for the power!\r\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\r\n        }\r\n        power *= p;\r\n      }\r\n\r\n      // Add the unit to the list\r\n      unit.units.push({\r\n        unit: res.unit,\r\n        prefix: res.prefix,\r\n        power\r\n      });\r\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\r\n      }\r\n\r\n      // Check for and consume closing parentheses, popping from the stack.\r\n      // A ')' will always follow a unit.\r\n      skipWhitespace();\r\n      while (c === ')') {\r\n        if (powerMultiplierStack.length === 0) {\r\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\r\n        }\r\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\r\n        next();\r\n        skipWhitespace();\r\n      }\r\n\r\n      // \"*\" and \"/\" should mean we are expecting something to come next.\r\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\r\n      expectingUnit = false;\r\n      if (parseCharacter('*')) {\r\n        // explicit multiplication\r\n        powerMultiplierCurrent = 1;\r\n        expectingUnit = true;\r\n      } else if (parseCharacter('/')) {\r\n        // division\r\n        powerMultiplierCurrent = -1;\r\n        expectingUnit = true;\r\n      } else {\r\n        // implicit multiplication\r\n        powerMultiplierCurrent = 1;\r\n      }\r\n\r\n      // Replace the unit into the auto unit system\r\n      if (res.unit.base) {\r\n        var baseDim = res.unit.base.key;\r\n        UNIT_SYSTEMS.auto[baseDim] = {\r\n          unit: res.unit,\r\n          prefix: res.prefix\r\n        };\r\n      }\r\n    }\r\n\r\n    // Has the string been entirely consumed?\r\n    skipWhitespace();\r\n    if (c) {\r\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\r\n    }\r\n\r\n    // Is there a trailing slash?\r\n    if (expectingUnit) {\r\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\r\n    }\r\n\r\n    // Is the parentheses stack empty?\r\n    if (powerMultiplierStack.length !== 0) {\r\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\r\n    }\r\n\r\n    // Are there any units at all?\r\n    if (unit.units.length === 0 && !options.allowNoUnits) {\r\n      throw new SyntaxError('\"' + str + '\" contains no units');\r\n    }\r\n    unit.value = value !== undefined ? unit._normalize(value) : null;\r\n    return unit;\r\n  };\r\n\r\n  /**\r\n   * create a copy of this unit\r\n   * @memberof Unit\r\n   * @return {Unit} Returns a cloned version of the unit\r\n   */\r\n  Unit.prototype.clone = function () {\r\n    var unit = new Unit();\r\n    unit.fixPrefix = this.fixPrefix;\r\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\r\n    unit.value = clone(this.value);\r\n    unit.dimensions = this.dimensions.slice(0);\r\n    unit.units = [];\r\n    for (var i = 0; i < this.units.length; i++) {\r\n      unit.units[i] = {};\r\n      for (var p in this.units[i]) {\r\n        if (hasOwnProperty(this.units[i], p)) {\r\n          unit.units[i][p] = this.units[i][p];\r\n        }\r\n      }\r\n    }\r\n    return unit;\r\n  };\r\n\r\n  /**\r\n   * Return the type of the value of this unit\r\n   *\r\n   * @memberof Unit\r\n   * @return {string} type of the value of the unit\r\n   */\r\n  Unit.prototype.valueType = function () {\r\n    return typeOf(this.value);\r\n  };\r\n\r\n  /**\r\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\r\n   * @memberof Unit\r\n   * @return {boolean} True if the unit is derived\r\n   * @private\r\n   */\r\n  Unit.prototype._isDerived = function () {\r\n    if (this.units.length === 0) {\r\n      return false;\r\n    }\r\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\r\n  };\r\n\r\n  /**\r\n   * Normalize a value, based on its currently set unit(s)\r\n   * @memberof Unit\r\n   * @param {number | BigNumber | Fraction | boolean} value\r\n   * @return {number | BigNumber | Fraction | boolean} normalized value\r\n   * @private\r\n   */\r\n  Unit.prototype._normalize = function (value) {\r\n    if (value === null || value === undefined || this.units.length === 0) {\r\n      return value;\r\n    }\r\n    var res = value;\r\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\r\n\r\n    for (var i = 0; i < this.units.length; i++) {\r\n      var unitValue = convert(this.units[i].unit.value);\r\n      var unitPrefixValue = convert(this.units[i].prefix.value);\r\n      var unitPower = convert(this.units[i].power);\r\n      res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\r\n    }\r\n    return res;\r\n  };\r\n\r\n  /**\r\n   * Denormalize a value, based on its currently set unit(s)\r\n   * @memberof Unit\r\n   * @param {number} value\r\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\r\n   * @return {number} denormalized value\r\n   * @private\r\n   */\r\n  Unit.prototype._denormalize = function (value, prefixValue) {\r\n    if (value === null || value === undefined || this.units.length === 0) {\r\n      return value;\r\n    }\r\n    var res = value;\r\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\r\n\r\n    for (var i = 0; i < this.units.length; i++) {\r\n      var unitValue = convert(this.units[i].unit.value);\r\n      var unitPrefixValue = convert(this.units[i].prefix.value);\r\n      var unitPower = convert(this.units[i].power);\r\n      res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\r\n    }\r\n    return res;\r\n  };\r\n\r\n  /**\r\n   * Find a unit from a string\r\n   * @memberof Unit\r\n   * @param {string} str              A string like 'cm' or 'inch'\r\n   * @returns {Object | null} result  When found, an object with fields unit and\r\n   *                                  prefix is returned. Else, null is returned.\r\n   * @private\r\n   */\r\n  var _findUnit = memoize(str => {\r\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\r\n    if (hasOwnProperty(UNITS, str)) {\r\n      var unit = UNITS[str];\r\n      var prefix = unit.prefixes[''];\r\n      return {\r\n        unit,\r\n        prefix\r\n      };\r\n    }\r\n    for (var _name in UNITS) {\r\n      if (hasOwnProperty(UNITS, _name)) {\r\n        if (endsWith(str, _name)) {\r\n          var _unit = UNITS[_name];\r\n          var prefixLen = str.length - _name.length;\r\n          var prefixName = str.substring(0, prefixLen);\r\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\r\n          if (_prefix !== undefined) {\r\n            // store unit, prefix, and value\r\n            return {\r\n              unit: _unit,\r\n              prefix: _prefix\r\n            };\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }, {\r\n    hasher: args => args[0],\r\n    limit: 100\r\n  });\r\n\r\n  /**\r\n   * Test if the given expression is a unit.\r\n   * The unit can have a prefix but cannot have a value.\r\n   * @memberof Unit\r\n   * @param {string} name   A string to be tested whether it is a value less unit.\r\n   *                        The unit can have prefix, like \"cm\"\r\n   * @return {boolean}      true if the given string is a unit\r\n   */\r\n  Unit.isValuelessUnit = function (name) {\r\n    return _findUnit(name) !== null;\r\n  };\r\n\r\n  /**\r\n   * check if this unit has given base unit\r\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\r\n   * @memberof Unit\r\n   * @param {BASE_UNIT | string | undefined} base\r\n   */\r\n  Unit.prototype.hasBase = function (base) {\r\n    if (typeof base === 'string') {\r\n      base = BASE_UNITS[base];\r\n    }\r\n    if (!base) {\r\n      return false;\r\n    }\r\n\r\n    // All dimensions must be the same\r\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Check if this unit has a base or bases equal to another base or bases\r\n   * For derived units, the exponent on each base also must match\r\n   * @memberof Unit\r\n   * @param {Unit} other\r\n   * @return {boolean} true if equal base\r\n   */\r\n  Unit.prototype.equalBase = function (other) {\r\n    // All dimensions must be the same\r\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Check if this unit equals another unit\r\n   * @memberof Unit\r\n   * @param {Unit} other\r\n   * @return {boolean} true if both units are equal\r\n   */\r\n  Unit.prototype.equals = function (other) {\r\n    return this.equalBase(other) && equal(this.value, other.value);\r\n  };\r\n\r\n  /**\r\n   * Multiply this unit with another one or with a scalar\r\n   * @memberof Unit\r\n   * @param {Unit} other\r\n   * @return {Unit} product of this unit and the other unit\r\n   */\r\n  Unit.prototype.multiply = function (_other) {\r\n    var res = this.clone();\r\n    var other = isUnit(_other) ? _other : new Unit(_other);\r\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n      // Dimensions arrays may be of different lengths. Default to 0.\r\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\r\n    }\r\n\r\n    // Append other's units list onto res\r\n    for (var _i = 0; _i < other.units.length; _i++) {\r\n      // Make a shallow copy of every unit\r\n      var inverted = _objectSpread({}, other.units[_i]);\r\n      res.units.push(inverted);\r\n    }\r\n\r\n    // If at least one operand has a value, then the result should also have a value\r\n    if (this.value !== null || other.value !== null) {\r\n      var valThis = this.value === null ? this._normalize(1) : this.value;\r\n      var valOther = other.value === null ? other._normalize(1) : other.value;\r\n      res.value = multiplyScalar(valThis, valOther);\r\n    } else {\r\n      res.value = null;\r\n    }\r\n    if (isUnit(_other)) {\r\n      res.skipAutomaticSimplification = false;\r\n    }\r\n    return getNumericIfUnitless(res);\r\n  };\r\n\r\n  /**\r\n   * Divide a number by this unit\r\n   *\r\n   * @memberof Unit\r\n   * @param {numeric} numerator\r\n   * @param {unit} result of dividing numerator by this unit\r\n   */\r\n  Unit.prototype.divideInto = function (numerator) {\r\n    return new Unit(numerator).divide(this);\r\n  };\r\n\r\n  /**\r\n   * Divide this unit by another one\r\n   * @memberof Unit\r\n   * @param {Unit | numeric} other\r\n   * @return {Unit} result of dividing this unit by the other unit\r\n   */\r\n  Unit.prototype.divide = function (_other) {\r\n    var res = this.clone();\r\n    var other = isUnit(_other) ? _other : new Unit(_other);\r\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n      // Dimensions arrays may be of different lengths. Default to 0.\r\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\r\n    }\r\n\r\n    // Invert and append other's units list onto res\r\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\r\n      // Make a shallow copy of every unit\r\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\r\n        power: -other.units[_i2].power\r\n      });\r\n      res.units.push(inverted);\r\n    }\r\n\r\n    // If at least one operand has a value, the result should have a value\r\n    if (this.value !== null || other.value !== null) {\r\n      var valThis = this.value === null ? this._normalize(1) : this.value;\r\n      var valOther = other.value === null ? other._normalize(1) : other.value;\r\n      res.value = divideScalar(valThis, valOther);\r\n    } else {\r\n      res.value = null;\r\n    }\r\n    if (isUnit(_other)) {\r\n      res.skipAutomaticSimplification = false;\r\n    }\r\n    return getNumericIfUnitless(res);\r\n  };\r\n\r\n  /**\r\n   * Calculate the power of a unit\r\n   * @memberof Unit\r\n   * @param {number | Fraction | BigNumber} p\r\n   * @returns {Unit}      The result: this^p\r\n   */\r\n  Unit.prototype.pow = function (p) {\r\n    var res = this.clone();\r\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n      // Dimensions arrays may be of different lengths. Default to 0.\r\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\r\n    }\r\n\r\n    // Adjust the power of each unit in the list\r\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\r\n      res.units[_i3].power *= p;\r\n    }\r\n    if (res.value !== null) {\r\n      res.value = pow(res.value, p);\r\n\r\n      // only allow numeric output, we don't want to return a Complex number\r\n      // if (!isNumeric(res.value)) {\r\n      //  res.value = NaN\r\n      // }\r\n      // Update: Complex supported now\r\n    } else {\r\n      res.value = null;\r\n    }\r\n    res.skipAutomaticSimplification = false;\r\n    return getNumericIfUnitless(res);\r\n  };\r\n\r\n  /**\r\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\r\n   * @param {Unit} unit\r\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\r\n   */\r\n  function getNumericIfUnitless(unit) {\r\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\r\n      return unit.value;\r\n    } else {\r\n      return unit;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the absolute value of a unit\r\n   * @memberof Unit\r\n   * @param {number | Fraction | BigNumber} x\r\n   * @returns {Unit}      The result: |x|, absolute value of x\r\n   */\r\n  Unit.prototype.abs = function () {\r\n    var ret = this.clone();\r\n    if (ret.value !== null) {\r\n      if (ret._isDerived() || ret.units.length === 0 || ret.units[0].unit.offset === 0) {\r\n        ret.value = abs(ret.value);\r\n      } else {\r\n        // To give the correct, but unexpected, results for units with an offset.\r\n        // For example, abs(-283.15 degC) = -263.15 degC !!!\r\n        // We must take the offset into consideration here\r\n        var convert = ret._numberConverter(); // convert to Fraction or BigNumber if needed\r\n        var unitValue = convert(ret.units[0].unit.value);\r\n        var nominalOffset = convert(ret.units[0].unit.offset);\r\n        var unitOffset = multiplyScalar(unitValue, nominalOffset);\r\n        ret.value = subtractScalar(abs(addScalar(ret.value, unitOffset)), unitOffset);\r\n      }\r\n    }\r\n    for (var i in ret.units) {\r\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\r\n        ret.units[i].unit = UNITS.W;\r\n      }\r\n    }\r\n    return ret;\r\n  };\r\n\r\n  /**\r\n   * Convert the unit to a specific unit name.\r\n   * @memberof Unit\r\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\r\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\r\n   */\r\n  Unit.prototype.to = function (valuelessUnit) {\r\n    var value = this.value === null ? this._normalize(1) : this.value;\r\n    var other;\r\n    if (typeof valuelessUnit === 'string') {\r\n      other = Unit.parse(valuelessUnit);\r\n    } else if (isUnit(valuelessUnit)) {\r\n      other = valuelessUnit.clone();\r\n    } else {\r\n      throw new Error('String or Unit expected as parameter');\r\n    }\r\n    if (!this.equalBase(other)) {\r\n      throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\r\n    }\r\n    if (other.value !== null) {\r\n      throw new Error('Cannot convert to a unit with a value');\r\n    }\r\n    if (this.value === null || this._isDerived() || this.units.length === 0 || other.units.length === 0 || this.units[0].unit.offset === other.units[0].unit.offset) {\r\n      other.value = clone(value);\r\n    } else {\r\n      /* Need to adjust value by difference in offset to convert */\r\n      var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\r\n\r\n      var thisUnitValue = this.units[0].unit.value;\r\n      var thisNominalOffset = this.units[0].unit.offset;\r\n      var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);\r\n      var otherUnitValue = other.units[0].unit.value;\r\n      var otherNominalOffset = other.units[0].unit.offset;\r\n      var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);\r\n      other.value = addScalar(value, convert(subtractScalar(thisUnitOffset, otherUnitOffset)));\r\n    }\r\n    other.fixPrefix = true;\r\n    other.skipAutomaticSimplification = true;\r\n    return other;\r\n  };\r\n\r\n  /**\r\n   * Return the value of the unit when represented with given valueless unit\r\n   * @memberof Unit\r\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\r\n   * @return {number} Returns the unit value as number.\r\n   */\r\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\r\n  Unit.prototype.toNumber = function (valuelessUnit) {\r\n    return toNumber(this.toNumeric(valuelessUnit));\r\n  };\r\n\r\n  /**\r\n   * Return the value of the unit in the original numeric type\r\n   * @memberof Unit\r\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\r\n   * @return {number | BigNumber | Fraction} Returns the unit value\r\n   */\r\n  Unit.prototype.toNumeric = function (valuelessUnit) {\r\n    var other;\r\n    if (valuelessUnit) {\r\n      // Allow getting the numeric value without converting to a different unit\r\n      other = this.to(valuelessUnit);\r\n    } else {\r\n      other = this.clone();\r\n    }\r\n    if (other._isDerived() || other.units.length === 0) {\r\n      return other._denormalize(other.value);\r\n    } else {\r\n      return other._denormalize(other.value, other.units[0].prefix.value);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get a string representation of the unit.\r\n   * @memberof Unit\r\n   * @return {string}\r\n   */\r\n  Unit.prototype.toString = function () {\r\n    return this.format();\r\n  };\r\n\r\n  /**\r\n   * Get a JSON representation of the unit\r\n   * @memberof Unit\r\n   * @returns {Object} Returns a JSON object structured as:\r\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\r\n   */\r\n  Unit.prototype.toJSON = function () {\r\n    return {\r\n      mathjs: 'Unit',\r\n      value: this._denormalize(this.value),\r\n      unit: this.units.length > 0 ? this.formatUnits() : null,\r\n      fixPrefix: this.fixPrefix\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Instantiate a Unit from a JSON object\r\n   * @memberof Unit\r\n   * @param {Object} json  A JSON object structured as:\r\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\r\n   * @return {Unit}\r\n   */\r\n  Unit.fromJSON = function (json) {\r\n    var _json$unit;\r\n    var unit = new Unit(json.value, (_json$unit = json.unit) !== null && _json$unit !== void 0 ? _json$unit : undefined);\r\n    unit.fixPrefix = json.fixPrefix || false;\r\n    return unit;\r\n  };\r\n\r\n  /**\r\n   * Returns the string representation of the unit.\r\n   * @memberof Unit\r\n   * @return {string}\r\n   */\r\n  Unit.prototype.valueOf = Unit.prototype.toString;\r\n\r\n  /**\r\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\r\n   * The returned Unit will contain a list of the \"best\" units for formatting.\r\n   */\r\n  Unit.prototype.simplify = function () {\r\n    var ret = this.clone();\r\n    var proposedUnitList = [];\r\n\r\n    // Search for a matching base\r\n    var matchingBase;\r\n    for (var key in currentUnitSystem) {\r\n      if (hasOwnProperty(currentUnitSystem, key)) {\r\n        if (ret.hasBase(BASE_UNITS[key])) {\r\n          matchingBase = key;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (matchingBase === 'NONE') {\r\n      ret.units = [];\r\n    } else {\r\n      var matchingUnit;\r\n      if (matchingBase) {\r\n        // Does the unit system have a matching unit?\r\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\r\n          matchingUnit = currentUnitSystem[matchingBase];\r\n        }\r\n      }\r\n      if (matchingUnit) {\r\n        ret.units = [{\r\n          unit: matchingUnit.unit,\r\n          prefix: matchingUnit.prefix,\r\n          power: 1.0\r\n        }];\r\n      } else {\r\n        // Multiple units or units with powers are formatted like this:\r\n        // 5 (kg m^2) / (s^3 mol)\r\n        // Build an representation from the base units of the current unit system\r\n        var missingBaseDim = false;\r\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n          var baseDim = BASE_DIMENSIONS[i];\r\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\r\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\r\n              proposedUnitList.push({\r\n                unit: currentUnitSystem[baseDim].unit,\r\n                prefix: currentUnitSystem[baseDim].prefix,\r\n                power: ret.dimensions[i] || 0\r\n              });\r\n            } else {\r\n              missingBaseDim = true;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Is the proposed unit list \"simpler\" than the existing one?\r\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\r\n          // Replace this unit list with the proposed list\r\n          ret.units = proposedUnitList;\r\n        }\r\n      }\r\n    }\r\n    return ret;\r\n  };\r\n\r\n  /**\r\n   * Returns a new Unit in the SI system with the same value as this one\r\n   */\r\n  Unit.prototype.toSI = function () {\r\n    var ret = this.clone();\r\n    var proposedUnitList = [];\r\n\r\n    // Multiple units or units with powers are formatted like this:\r\n    // 5 (kg m^2) / (s^3 mol)\r\n    // Build an representation from the base units of the SI unit system\r\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\r\n      var baseDim = BASE_DIMENSIONS[i];\r\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\r\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\r\n          proposedUnitList.push({\r\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\r\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\r\n            power: ret.dimensions[i] || 0\r\n          });\r\n        } else {\r\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\r\n        }\r\n      }\r\n    }\r\n\r\n    // Replace this unit list with the proposed list\r\n    ret.units = proposedUnitList;\r\n    ret.fixPrefix = true;\r\n    ret.skipAutomaticSimplification = true;\r\n    if (this.value !== null) {\r\n      ret.value = null;\r\n      return this.to(ret);\r\n    }\r\n    return ret;\r\n  };\r\n\r\n  /**\r\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\r\n   * @memberof Unit\r\n   * @return {string}\r\n   */\r\n  Unit.prototype.formatUnits = function () {\r\n    var strNum = '';\r\n    var strDen = '';\r\n    var nNum = 0;\r\n    var nDen = 0;\r\n    for (var i = 0; i < this.units.length; i++) {\r\n      if (this.units[i].power > 0) {\r\n        nNum++;\r\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\r\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\r\n          strNum += '^' + this.units[i].power;\r\n        }\r\n      } else if (this.units[i].power < 0) {\r\n        nDen++;\r\n      }\r\n    }\r\n    if (nDen > 0) {\r\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\r\n        if (this.units[_i4].power < 0) {\r\n          if (nNum > 0) {\r\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\r\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\r\n              strDen += '^' + -this.units[_i4].power;\r\n            }\r\n          } else {\r\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\r\n            strDen += '^' + this.units[_i4].power;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Remove leading \" \"\r\n    strNum = strNum.substr(1);\r\n    strDen = strDen.substr(1);\r\n\r\n    // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\r\n    if (nNum > 1 && nDen > 0) {\r\n      strNum = '(' + strNum + ')';\r\n    }\r\n    if (nDen > 1 && nNum > 0) {\r\n      strDen = '(' + strDen + ')';\r\n    }\r\n    var str = strNum;\r\n    if (nNum > 0 && nDen > 0) {\r\n      str += ' / ';\r\n    }\r\n    str += strDen;\r\n    return str;\r\n  };\r\n\r\n  /**\r\n   * Get a string representation of the Unit, with optional formatting options.\r\n   * @memberof Unit\r\n   * @param {Object | number | Function} [options]  Formatting options. See\r\n   *                                                lib/utils/number:format for a\r\n   *                                                description of the available\r\n   *                                                options.\r\n   * @return {string}\r\n   */\r\n  Unit.prototype.format = function (options) {\r\n    // Simplfy the unit list, unless it is valueless or was created directly in the\r\n    // constructor or as the result of to or toSI\r\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify();\r\n\r\n    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\r\n    var isImaginary = false;\r\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\r\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\r\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\r\n    }\r\n    for (var i in simp.units) {\r\n      if (hasOwnProperty(simp.units, i)) {\r\n        if (simp.units[i].unit) {\r\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\r\n            simp.units[i].unit = UNITS.VAR;\r\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\r\n            simp.units[i].unit = UNITS.VA;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Now apply the best prefix\r\n    // Units must have only one unit and not have the fixPrefix flag set\r\n    if (simp.units.length === 1 && !simp.fixPrefix) {\r\n      // Units must have integer powers, otherwise the prefix will change the\r\n      // outputted value by not-an-integer-power-of-ten\r\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\r\n        // Apply the best prefix\r\n        simp.units[0].prefix = simp._bestPrefix();\r\n      }\r\n    }\r\n    var value = simp._denormalize(simp.value);\r\n    var str = simp.value !== null ? format(value, options || {}) : '';\r\n    var unitStr = simp.formatUnits();\r\n    if (simp.value && isComplex(simp.value)) {\r\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\r\n    }\r\n    if (unitStr.length > 0 && str.length > 0) {\r\n      str += ' ';\r\n    }\r\n    str += unitStr;\r\n    return str;\r\n  };\r\n\r\n  /**\r\n   * Calculate the best prefix using current value.\r\n   * @memberof Unit\r\n   * @returns {Object} prefix\r\n   * @private\r\n   */\r\n  Unit.prototype._bestPrefix = function () {\r\n    if (this.units.length !== 1) {\r\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\r\n    }\r\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\r\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\r\n    }\r\n\r\n    // find the best prefix value (resulting in the value of which\r\n    // the absolute value of the log10 is closest to zero,\r\n    // though with a little offset of 1.2 for nicer values: you get a\r\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\r\n\r\n    // Note: the units value can be any numeric type, but to find the best\r\n    // prefix it's enough to work with limited precision of a regular number\r\n    // Update: using mathjs abs since we also allow complex numbers\r\n    var absValue = this.value !== null ? abs(this.value) : 0;\r\n    var absUnitValue = abs(this.units[0].unit.value);\r\n    var bestPrefix = this.units[0].prefix;\r\n    if (absValue === 0) {\r\n      return bestPrefix;\r\n    }\r\n    var power = this.units[0].power;\r\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\r\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\r\n    bestDiff = Math.abs(bestDiff);\r\n    var prefixes = this.units[0].unit.prefixes;\r\n    for (var p in prefixes) {\r\n      if (hasOwnProperty(prefixes, p)) {\r\n        var prefix = prefixes[p];\r\n        if (prefix.scientific) {\r\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\r\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\r\n            // choose the prefix with the smallest diff, or if equal, choose the one\r\n            // with the shortest name (can happen with SHORTLONG for example)\r\n            bestPrefix = prefix;\r\n            bestDiff = diff;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return bestPrefix;\r\n  };\r\n\r\n  /**\r\n   * Returns an array of units whose sum is equal to this unit\r\n   * @memberof Unit\r\n   * @param {Array} [parts] An array of strings or valueless units.\r\n   *\r\n   *   Example:\r\n   *\r\n   *   const u = new Unit(1, 'm')\r\n   *   u.splitUnit(['feet', 'inch'])\r\n   *     [ 3 feet, 3.3700787401575 inch ]\r\n   *\r\n   * @return {Array} An array of units.\r\n   */\r\n  Unit.prototype.splitUnit = function (parts) {\r\n    var x = this.clone();\r\n    var ret = [];\r\n    for (var i = 0; i < parts.length; i++) {\r\n      // Convert x to the requested unit\r\n      x = x.to(parts[i]);\r\n      if (i === parts.length - 1) break;\r\n\r\n      // Get the numeric value of this unit\r\n      var xNumeric = x.toNumeric();\r\n\r\n      // Check to see if xNumeric is nearly equal to an integer,\r\n      // since fix can incorrectly round down if there is round-off error\r\n      var xRounded = round(xNumeric);\r\n      var xFixed = void 0;\r\n      var isNearlyEqual = equal(xRounded, xNumeric);\r\n      if (isNearlyEqual) {\r\n        xFixed = xRounded;\r\n      } else {\r\n        xFixed = fix(x.toNumeric());\r\n      }\r\n      var y = new Unit(xFixed, parts[i].toString());\r\n      ret.push(y);\r\n      x = subtractScalar(x, y);\r\n    }\r\n\r\n    // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\r\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\r\n    // all the parts so far with the original value. If they are nearly equal,\r\n    // we set the remainder to 0.\r\n    var testSum = 0;\r\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\r\n      testSum = addScalar(testSum, ret[_i5].value);\r\n    }\r\n    if (equal(testSum, this.value)) {\r\n      x.value = 0;\r\n    }\r\n    ret.push(x);\r\n    return ret;\r\n  };\r\n  var PREFIXES = {\r\n    NONE: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      }\r\n    },\r\n    SHORT: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      da: {\r\n        name: 'da',\r\n        value: 1e1,\r\n        scientific: false\r\n      },\r\n      h: {\r\n        name: 'h',\r\n        value: 1e2,\r\n        scientific: false\r\n      },\r\n      k: {\r\n        name: 'k',\r\n        value: 1e3,\r\n        scientific: true\r\n      },\r\n      M: {\r\n        name: 'M',\r\n        value: 1e6,\r\n        scientific: true\r\n      },\r\n      G: {\r\n        name: 'G',\r\n        value: 1e9,\r\n        scientific: true\r\n      },\r\n      T: {\r\n        name: 'T',\r\n        value: 1e12,\r\n        scientific: true\r\n      },\r\n      P: {\r\n        name: 'P',\r\n        value: 1e15,\r\n        scientific: true\r\n      },\r\n      E: {\r\n        name: 'E',\r\n        value: 1e18,\r\n        scientific: true\r\n      },\r\n      Z: {\r\n        name: 'Z',\r\n        value: 1e21,\r\n        scientific: true\r\n      },\r\n      Y: {\r\n        name: 'Y',\r\n        value: 1e24,\r\n        scientific: true\r\n      },\r\n      R: {\r\n        name: 'R',\r\n        value: 1e27,\r\n        scientific: true\r\n      },\r\n      Q: {\r\n        name: 'Q',\r\n        value: 1e30,\r\n        scientific: true\r\n      },\r\n      d: {\r\n        name: 'd',\r\n        value: 1e-1,\r\n        scientific: false\r\n      },\r\n      c: {\r\n        name: 'c',\r\n        value: 1e-2,\r\n        scientific: false\r\n      },\r\n      m: {\r\n        name: 'm',\r\n        value: 1e-3,\r\n        scientific: true\r\n      },\r\n      u: {\r\n        name: 'u',\r\n        value: 1e-6,\r\n        scientific: true\r\n      },\r\n      n: {\r\n        name: 'n',\r\n        value: 1e-9,\r\n        scientific: true\r\n      },\r\n      p: {\r\n        name: 'p',\r\n        value: 1e-12,\r\n        scientific: true\r\n      },\r\n      f: {\r\n        name: 'f',\r\n        value: 1e-15,\r\n        scientific: true\r\n      },\r\n      a: {\r\n        name: 'a',\r\n        value: 1e-18,\r\n        scientific: true\r\n      },\r\n      z: {\r\n        name: 'z',\r\n        value: 1e-21,\r\n        scientific: true\r\n      },\r\n      y: {\r\n        name: 'y',\r\n        value: 1e-24,\r\n        scientific: true\r\n      },\r\n      r: {\r\n        name: 'r',\r\n        value: 1e-27,\r\n        scientific: true\r\n      },\r\n      q: {\r\n        name: 'q',\r\n        value: 1e-30,\r\n        scientific: true\r\n      }\r\n    },\r\n    LONG: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      deca: {\r\n        name: 'deca',\r\n        value: 1e1,\r\n        scientific: false\r\n      },\r\n      hecto: {\r\n        name: 'hecto',\r\n        value: 1e2,\r\n        scientific: false\r\n      },\r\n      kilo: {\r\n        name: 'kilo',\r\n        value: 1e3,\r\n        scientific: true\r\n      },\r\n      mega: {\r\n        name: 'mega',\r\n        value: 1e6,\r\n        scientific: true\r\n      },\r\n      giga: {\r\n        name: 'giga',\r\n        value: 1e9,\r\n        scientific: true\r\n      },\r\n      tera: {\r\n        name: 'tera',\r\n        value: 1e12,\r\n        scientific: true\r\n      },\r\n      peta: {\r\n        name: 'peta',\r\n        value: 1e15,\r\n        scientific: true\r\n      },\r\n      exa: {\r\n        name: 'exa',\r\n        value: 1e18,\r\n        scientific: true\r\n      },\r\n      zetta: {\r\n        name: 'zetta',\r\n        value: 1e21,\r\n        scientific: true\r\n      },\r\n      yotta: {\r\n        name: 'yotta',\r\n        value: 1e24,\r\n        scientific: true\r\n      },\r\n      ronna: {\r\n        name: 'ronna',\r\n        value: 1e27,\r\n        scientific: true\r\n      },\r\n      quetta: {\r\n        name: 'quetta',\r\n        value: 1e30,\r\n        scientific: true\r\n      },\r\n      deci: {\r\n        name: 'deci',\r\n        value: 1e-1,\r\n        scientific: false\r\n      },\r\n      centi: {\r\n        name: 'centi',\r\n        value: 1e-2,\r\n        scientific: false\r\n      },\r\n      milli: {\r\n        name: 'milli',\r\n        value: 1e-3,\r\n        scientific: true\r\n      },\r\n      micro: {\r\n        name: 'micro',\r\n        value: 1e-6,\r\n        scientific: true\r\n      },\r\n      nano: {\r\n        name: 'nano',\r\n        value: 1e-9,\r\n        scientific: true\r\n      },\r\n      pico: {\r\n        name: 'pico',\r\n        value: 1e-12,\r\n        scientific: true\r\n      },\r\n      femto: {\r\n        name: 'femto',\r\n        value: 1e-15,\r\n        scientific: true\r\n      },\r\n      atto: {\r\n        name: 'atto',\r\n        value: 1e-18,\r\n        scientific: true\r\n      },\r\n      zepto: {\r\n        name: 'zepto',\r\n        value: 1e-21,\r\n        scientific: true\r\n      },\r\n      yocto: {\r\n        name: 'yocto',\r\n        value: 1e-24,\r\n        scientific: true\r\n      },\r\n      ronto: {\r\n        name: 'ronto',\r\n        value: 1e-27,\r\n        scientific: true\r\n      },\r\n      quecto: {\r\n        name: 'quecto',\r\n        value: 1e-30,\r\n        scientific: true\r\n      }\r\n    },\r\n    SQUARED: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      da: {\r\n        name: 'da',\r\n        value: 1e2,\r\n        scientific: false\r\n      },\r\n      h: {\r\n        name: 'h',\r\n        value: 1e4,\r\n        scientific: false\r\n      },\r\n      k: {\r\n        name: 'k',\r\n        value: 1e6,\r\n        scientific: true\r\n      },\r\n      M: {\r\n        name: 'M',\r\n        value: 1e12,\r\n        scientific: true\r\n      },\r\n      G: {\r\n        name: 'G',\r\n        value: 1e18,\r\n        scientific: true\r\n      },\r\n      T: {\r\n        name: 'T',\r\n        value: 1e24,\r\n        scientific: true\r\n      },\r\n      P: {\r\n        name: 'P',\r\n        value: 1e30,\r\n        scientific: true\r\n      },\r\n      E: {\r\n        name: 'E',\r\n        value: 1e36,\r\n        scientific: true\r\n      },\r\n      Z: {\r\n        name: 'Z',\r\n        value: 1e42,\r\n        scientific: true\r\n      },\r\n      Y: {\r\n        name: 'Y',\r\n        value: 1e48,\r\n        scientific: true\r\n      },\r\n      R: {\r\n        name: 'R',\r\n        value: 1e54,\r\n        scientific: true\r\n      },\r\n      Q: {\r\n        name: 'Q',\r\n        value: 1e60,\r\n        scientific: true\r\n      },\r\n      d: {\r\n        name: 'd',\r\n        value: 1e-2,\r\n        scientific: false\r\n      },\r\n      c: {\r\n        name: 'c',\r\n        value: 1e-4,\r\n        scientific: false\r\n      },\r\n      m: {\r\n        name: 'm',\r\n        value: 1e-6,\r\n        scientific: true\r\n      },\r\n      u: {\r\n        name: 'u',\r\n        value: 1e-12,\r\n        scientific: true\r\n      },\r\n      n: {\r\n        name: 'n',\r\n        value: 1e-18,\r\n        scientific: true\r\n      },\r\n      p: {\r\n        name: 'p',\r\n        value: 1e-24,\r\n        scientific: true\r\n      },\r\n      f: {\r\n        name: 'f',\r\n        value: 1e-30,\r\n        scientific: true\r\n      },\r\n      a: {\r\n        name: 'a',\r\n        value: 1e-36,\r\n        scientific: true\r\n      },\r\n      z: {\r\n        name: 'z',\r\n        value: 1e-42,\r\n        scientific: true\r\n      },\r\n      y: {\r\n        name: 'y',\r\n        value: 1e-48,\r\n        scientific: true\r\n      },\r\n      r: {\r\n        name: 'r',\r\n        value: 1e-54,\r\n        scientific: true\r\n      },\r\n      q: {\r\n        name: 'q',\r\n        value: 1e-60,\r\n        scientific: true\r\n      }\r\n    },\r\n    CUBIC: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      da: {\r\n        name: 'da',\r\n        value: 1e3,\r\n        scientific: false\r\n      },\r\n      h: {\r\n        name: 'h',\r\n        value: 1e6,\r\n        scientific: false\r\n      },\r\n      k: {\r\n        name: 'k',\r\n        value: 1e9,\r\n        scientific: true\r\n      },\r\n      M: {\r\n        name: 'M',\r\n        value: 1e18,\r\n        scientific: true\r\n      },\r\n      G: {\r\n        name: 'G',\r\n        value: 1e27,\r\n        scientific: true\r\n      },\r\n      T: {\r\n        name: 'T',\r\n        value: 1e36,\r\n        scientific: true\r\n      },\r\n      P: {\r\n        name: 'P',\r\n        value: 1e45,\r\n        scientific: true\r\n      },\r\n      E: {\r\n        name: 'E',\r\n        value: 1e54,\r\n        scientific: true\r\n      },\r\n      Z: {\r\n        name: 'Z',\r\n        value: 1e63,\r\n        scientific: true\r\n      },\r\n      Y: {\r\n        name: 'Y',\r\n        value: 1e72,\r\n        scientific: true\r\n      },\r\n      R: {\r\n        name: 'R',\r\n        value: 1e81,\r\n        scientific: true\r\n      },\r\n      Q: {\r\n        name: 'Q',\r\n        value: 1e90,\r\n        scientific: true\r\n      },\r\n      d: {\r\n        name: 'd',\r\n        value: 1e-3,\r\n        scientific: false\r\n      },\r\n      c: {\r\n        name: 'c',\r\n        value: 1e-6,\r\n        scientific: false\r\n      },\r\n      m: {\r\n        name: 'm',\r\n        value: 1e-9,\r\n        scientific: true\r\n      },\r\n      u: {\r\n        name: 'u',\r\n        value: 1e-18,\r\n        scientific: true\r\n      },\r\n      n: {\r\n        name: 'n',\r\n        value: 1e-27,\r\n        scientific: true\r\n      },\r\n      p: {\r\n        name: 'p',\r\n        value: 1e-36,\r\n        scientific: true\r\n      },\r\n      f: {\r\n        name: 'f',\r\n        value: 1e-45,\r\n        scientific: true\r\n      },\r\n      a: {\r\n        name: 'a',\r\n        value: 1e-54,\r\n        scientific: true\r\n      },\r\n      z: {\r\n        name: 'z',\r\n        value: 1e-63,\r\n        scientific: true\r\n      },\r\n      y: {\r\n        name: 'y',\r\n        value: 1e-72,\r\n        scientific: true\r\n      },\r\n      r: {\r\n        name: 'r',\r\n        value: 1e-81,\r\n        scientific: true\r\n      },\r\n      q: {\r\n        name: 'q',\r\n        value: 1e-90,\r\n        scientific: true\r\n      }\r\n    },\r\n    BINARY_SHORT_SI: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      k: {\r\n        name: 'k',\r\n        value: 1e3,\r\n        scientific: true\r\n      },\r\n      M: {\r\n        name: 'M',\r\n        value: 1e6,\r\n        scientific: true\r\n      },\r\n      G: {\r\n        name: 'G',\r\n        value: 1e9,\r\n        scientific: true\r\n      },\r\n      T: {\r\n        name: 'T',\r\n        value: 1e12,\r\n        scientific: true\r\n      },\r\n      P: {\r\n        name: 'P',\r\n        value: 1e15,\r\n        scientific: true\r\n      },\r\n      E: {\r\n        name: 'E',\r\n        value: 1e18,\r\n        scientific: true\r\n      },\r\n      Z: {\r\n        name: 'Z',\r\n        value: 1e21,\r\n        scientific: true\r\n      },\r\n      Y: {\r\n        name: 'Y',\r\n        value: 1e24,\r\n        scientific: true\r\n      }\r\n    },\r\n    BINARY_SHORT_IEC: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      Ki: {\r\n        name: 'Ki',\r\n        value: 1024,\r\n        scientific: true\r\n      },\r\n      Mi: {\r\n        name: 'Mi',\r\n        value: Math.pow(1024, 2),\r\n        scientific: true\r\n      },\r\n      Gi: {\r\n        name: 'Gi',\r\n        value: Math.pow(1024, 3),\r\n        scientific: true\r\n      },\r\n      Ti: {\r\n        name: 'Ti',\r\n        value: Math.pow(1024, 4),\r\n        scientific: true\r\n      },\r\n      Pi: {\r\n        name: 'Pi',\r\n        value: Math.pow(1024, 5),\r\n        scientific: true\r\n      },\r\n      Ei: {\r\n        name: 'Ei',\r\n        value: Math.pow(1024, 6),\r\n        scientific: true\r\n      },\r\n      Zi: {\r\n        name: 'Zi',\r\n        value: Math.pow(1024, 7),\r\n        scientific: true\r\n      },\r\n      Yi: {\r\n        name: 'Yi',\r\n        value: Math.pow(1024, 8),\r\n        scientific: true\r\n      }\r\n    },\r\n    BINARY_LONG_SI: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      kilo: {\r\n        name: 'kilo',\r\n        value: 1e3,\r\n        scientific: true\r\n      },\r\n      mega: {\r\n        name: 'mega',\r\n        value: 1e6,\r\n        scientific: true\r\n      },\r\n      giga: {\r\n        name: 'giga',\r\n        value: 1e9,\r\n        scientific: true\r\n      },\r\n      tera: {\r\n        name: 'tera',\r\n        value: 1e12,\r\n        scientific: true\r\n      },\r\n      peta: {\r\n        name: 'peta',\r\n        value: 1e15,\r\n        scientific: true\r\n      },\r\n      exa: {\r\n        name: 'exa',\r\n        value: 1e18,\r\n        scientific: true\r\n      },\r\n      zetta: {\r\n        name: 'zetta',\r\n        value: 1e21,\r\n        scientific: true\r\n      },\r\n      yotta: {\r\n        name: 'yotta',\r\n        value: 1e24,\r\n        scientific: true\r\n      }\r\n    },\r\n    BINARY_LONG_IEC: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      kibi: {\r\n        name: 'kibi',\r\n        value: 1024,\r\n        scientific: true\r\n      },\r\n      mebi: {\r\n        name: 'mebi',\r\n        value: Math.pow(1024, 2),\r\n        scientific: true\r\n      },\r\n      gibi: {\r\n        name: 'gibi',\r\n        value: Math.pow(1024, 3),\r\n        scientific: true\r\n      },\r\n      tebi: {\r\n        name: 'tebi',\r\n        value: Math.pow(1024, 4),\r\n        scientific: true\r\n      },\r\n      pebi: {\r\n        name: 'pebi',\r\n        value: Math.pow(1024, 5),\r\n        scientific: true\r\n      },\r\n      exi: {\r\n        name: 'exi',\r\n        value: Math.pow(1024, 6),\r\n        scientific: true\r\n      },\r\n      zebi: {\r\n        name: 'zebi',\r\n        value: Math.pow(1024, 7),\r\n        scientific: true\r\n      },\r\n      yobi: {\r\n        name: 'yobi',\r\n        value: Math.pow(1024, 8),\r\n        scientific: true\r\n      }\r\n    },\r\n    BTU: {\r\n      '': {\r\n        name: '',\r\n        value: 1,\r\n        scientific: true\r\n      },\r\n      MM: {\r\n        name: 'MM',\r\n        value: 1e6,\r\n        scientific: true\r\n      }\r\n    }\r\n  };\r\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\r\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\r\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\r\n\r\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\r\n   * Index  Dimension\r\n   * -----  ---------\r\n   *   0    Length\r\n   *   1    Mass\r\n   *   2    Time\r\n   *   3    Current\r\n   *   4    Temperature\r\n   *   5    Luminous intensity\r\n   *   6    Amount of substance\r\n   *   7    Angle\r\n   *   8    Bit (digital)\r\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\r\n   *\r\n   */\r\n\r\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\r\n  var BASE_UNITS = {\r\n    NONE: {\r\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    MASS: {\r\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    LENGTH: {\r\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    TIME: {\r\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    CURRENT: {\r\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\r\n    },\r\n    TEMPERATURE: {\r\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\r\n    },\r\n    LUMINOUS_INTENSITY: {\r\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\r\n    },\r\n    AMOUNT_OF_SUBSTANCE: {\r\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\r\n    },\r\n    FORCE: {\r\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    SURFACE: {\r\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    VOLUME: {\r\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    ENERGY: {\r\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    POWER: {\r\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    PRESSURE: {\r\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    ELECTRIC_CHARGE: {\r\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\r\n    },\r\n    ELECTRIC_CAPACITANCE: {\r\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\r\n    },\r\n    ELECTRIC_POTENTIAL: {\r\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\r\n    },\r\n    ELECTRIC_RESISTANCE: {\r\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\r\n    },\r\n    ELECTRIC_INDUCTANCE: {\r\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\r\n    },\r\n    ELECTRIC_CONDUCTANCE: {\r\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\r\n    },\r\n    MAGNETIC_FLUX: {\r\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\r\n    },\r\n    MAGNETIC_FLUX_DENSITY: {\r\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\r\n    },\r\n    FREQUENCY: {\r\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\r\n    },\r\n    ANGLE: {\r\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\r\n    },\r\n    BIT: {\r\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\r\n    }\r\n  };\r\n  for (var key in BASE_UNITS) {\r\n    if (hasOwnProperty(BASE_UNITS, key)) {\r\n      BASE_UNITS[key].key = key;\r\n    }\r\n  }\r\n  var BASE_UNIT_NONE = {};\r\n  var UNIT_NONE = {\r\n    name: '',\r\n    base: BASE_UNIT_NONE,\r\n    value: 1,\r\n    offset: 0,\r\n    dimensions: BASE_DIMENSIONS.map(x => 0)\r\n  };\r\n  var UNITS = {\r\n    // length\r\n    meter: {\r\n      name: 'meter',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    inch: {\r\n      name: 'inch',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0254,\r\n      offset: 0\r\n    },\r\n    foot: {\r\n      name: 'foot',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.3048,\r\n      offset: 0\r\n    },\r\n    yard: {\r\n      name: 'yard',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.9144,\r\n      offset: 0\r\n    },\r\n    mile: {\r\n      name: 'mile',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1609.344,\r\n      offset: 0\r\n    },\r\n    link: {\r\n      name: 'link',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.201168,\r\n      offset: 0\r\n    },\r\n    rod: {\r\n      name: 'rod',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 5.0292,\r\n      offset: 0\r\n    },\r\n    chain: {\r\n      name: 'chain',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 20.1168,\r\n      offset: 0\r\n    },\r\n    angstrom: {\r\n      name: 'angstrom',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1e-10,\r\n      offset: 0\r\n    },\r\n    m: {\r\n      name: 'm',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    in: {\r\n      name: 'in',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0254,\r\n      offset: 0\r\n    },\r\n    ft: {\r\n      name: 'ft',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.3048,\r\n      offset: 0\r\n    },\r\n    yd: {\r\n      name: 'yd',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.9144,\r\n      offset: 0\r\n    },\r\n    mi: {\r\n      name: 'mi',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1609.344,\r\n      offset: 0\r\n    },\r\n    li: {\r\n      name: 'li',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.201168,\r\n      offset: 0\r\n    },\r\n    rd: {\r\n      name: 'rd',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 5.029210,\r\n      offset: 0\r\n    },\r\n    ch: {\r\n      name: 'ch',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 20.1168,\r\n      offset: 0\r\n    },\r\n    mil: {\r\n      name: 'mil',\r\n      base: BASE_UNITS.LENGTH,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0000254,\r\n      offset: 0\r\n    },\r\n    // 1/1000 inch\r\n\r\n    // Surface\r\n    m2: {\r\n      name: 'm2',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.SQUARED,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    sqin: {\r\n      name: 'sqin',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.00064516,\r\n      offset: 0\r\n    },\r\n    // 645.16 mm2\r\n    sqft: {\r\n      name: 'sqft',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.09290304,\r\n      offset: 0\r\n    },\r\n    // 0.09290304 m2\r\n    sqyd: {\r\n      name: 'sqyd',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.83612736,\r\n      offset: 0\r\n    },\r\n    // 0.83612736 m2\r\n    sqmi: {\r\n      name: 'sqmi',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 2589988.110336,\r\n      offset: 0\r\n    },\r\n    // 2.589988110336 km2\r\n    sqrd: {\r\n      name: 'sqrd',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 25.29295,\r\n      offset: 0\r\n    },\r\n    // 25.29295 m2\r\n    sqch: {\r\n      name: 'sqch',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 404.6873,\r\n      offset: 0\r\n    },\r\n    // 404.6873 m2\r\n    sqmil: {\r\n      name: 'sqmil',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 6.4516e-10,\r\n      offset: 0\r\n    },\r\n    // 6.4516 * 10^-10 m2\r\n    acre: {\r\n      name: 'acre',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 4046.86,\r\n      offset: 0\r\n    },\r\n    // 4046.86 m2\r\n    hectare: {\r\n      name: 'hectare',\r\n      base: BASE_UNITS.SURFACE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 10000,\r\n      offset: 0\r\n    },\r\n    // 10000 m2\r\n\r\n    // Volume\r\n    m3: {\r\n      name: 'm3',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.CUBIC,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    L: {\r\n      name: 'L',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 0.001,\r\n      offset: 0\r\n    },\r\n    // litre\r\n    l: {\r\n      name: 'l',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 0.001,\r\n      offset: 0\r\n    },\r\n    // litre\r\n    litre: {\r\n      name: 'litre',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 0.001,\r\n      offset: 0\r\n    },\r\n    cuin: {\r\n      name: 'cuin',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1.6387064e-5,\r\n      offset: 0\r\n    },\r\n    // 1.6387064e-5 m3\r\n    cuft: {\r\n      name: 'cuft',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.028316846592,\r\n      offset: 0\r\n    },\r\n    // 28.316 846 592 L\r\n    cuyd: {\r\n      name: 'cuyd',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.764554857984,\r\n      offset: 0\r\n    },\r\n    // 764.554 857 984 L\r\n    teaspoon: {\r\n      name: 'teaspoon',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.000005,\r\n      offset: 0\r\n    },\r\n    // 5 mL\r\n    tablespoon: {\r\n      name: 'tablespoon',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.000015,\r\n      offset: 0\r\n    },\r\n    // 15 mL\r\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\r\n    drop: {\r\n      name: 'drop',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 5e-8,\r\n      offset: 0\r\n    },\r\n    // 0.05 mL = 5e-8 m3\r\n    gtt: {\r\n      name: 'gtt',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 5e-8,\r\n      offset: 0\r\n    },\r\n    // 0.05 mL = 5e-8 m3\r\n\r\n    // Liquid volume\r\n    minim: {\r\n      name: 'minim',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.000000061611519921875,\r\n      offset: 0\r\n    },\r\n    // 1/61440 gallons\r\n    fluiddram: {\r\n      name: 'fluiddram',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0000036966911953125,\r\n      offset: 0\r\n    },\r\n    // 1/1024 gallons\r\n    fluidounce: {\r\n      name: 'fluidounce',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0000295735295625,\r\n      offset: 0\r\n    },\r\n    // 1/128 gallons\r\n    gill: {\r\n      name: 'gill',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.00011829411825,\r\n      offset: 0\r\n    },\r\n    // 1/32 gallons\r\n    cc: {\r\n      name: 'cc',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1e-6,\r\n      offset: 0\r\n    },\r\n    // 1e-6 L\r\n    cup: {\r\n      name: 'cup',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.0002365882365,\r\n      offset: 0\r\n    },\r\n    // 1/16 gallons\r\n    pint: {\r\n      name: 'pint',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.000473176473,\r\n      offset: 0\r\n    },\r\n    // 1/8 gallons\r\n    quart: {\r\n      name: 'quart',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.000946352946,\r\n      offset: 0\r\n    },\r\n    // 1/4 gallons\r\n    gallon: {\r\n      name: 'gallon',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.003785411784,\r\n      offset: 0\r\n    },\r\n    // 3.785411784 L\r\n    beerbarrel: {\r\n      name: 'beerbarrel',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.117347765304,\r\n      offset: 0\r\n    },\r\n    // 31 gallons\r\n    oilbarrel: {\r\n      name: 'oilbarrel',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.158987294928,\r\n      offset: 0\r\n    },\r\n    // 42 gallons\r\n    hogshead: {\r\n      name: 'hogshead',\r\n      base: BASE_UNITS.VOLUME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 0.238480942392,\r\n      offset: 0\r\n    },\r\n    // 63 gallons\r\n\r\n    // Mass\r\n    g: {\r\n      name: 'g',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 0.001,\r\n      offset: 0\r\n    },\r\n    gram: {\r\n      name: 'gram',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 0.001,\r\n      offset: 0\r\n    },\r\n    ton: {\r\n      name: 'ton',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 907.18474,\r\n      offset: 0\r\n    },\r\n    t: {\r\n      name: 't',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1000,\r\n      offset: 0\r\n    },\r\n    tonne: {\r\n      name: 'tonne',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1000,\r\n      offset: 0\r\n    },\r\n    grain: {\r\n      name: 'grain',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 64.79891e-6,\r\n      offset: 0\r\n    },\r\n    dram: {\r\n      name: 'dram',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1.7718451953125e-3,\r\n      offset: 0\r\n    },\r\n    ounce: {\r\n      name: 'ounce',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 28.349523125e-3,\r\n      offset: 0\r\n    },\r\n    poundmass: {\r\n      name: 'poundmass',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 453.59237e-3,\r\n      offset: 0\r\n    },\r\n    hundredweight: {\r\n      name: 'hundredweight',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 45.359237,\r\n      offset: 0\r\n    },\r\n    stick: {\r\n      name: 'stick',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 115e-3,\r\n      offset: 0\r\n    },\r\n    stone: {\r\n      name: 'stone',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 6.35029318,\r\n      offset: 0\r\n    },\r\n    gr: {\r\n      name: 'gr',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 64.79891e-6,\r\n      offset: 0\r\n    },\r\n    dr: {\r\n      name: 'dr',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 1.7718451953125e-3,\r\n      offset: 0\r\n    },\r\n    oz: {\r\n      name: 'oz',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 28.349523125e-3,\r\n      offset: 0\r\n    },\r\n    lbm: {\r\n      name: 'lbm',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 453.59237e-3,\r\n      offset: 0\r\n    },\r\n    cwt: {\r\n      name: 'cwt',\r\n      base: BASE_UNITS.MASS,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 45.359237,\r\n      offset: 0\r\n    },\r\n    // Time\r\n    s: {\r\n      name: 's',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    min: {\r\n      name: 'min',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 60,\r\n      offset: 0\r\n    },\r\n    h: {\r\n      name: 'h',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 3600,\r\n      offset: 0\r\n    },\r\n    second: {\r\n      name: 'second',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    sec: {\r\n      name: 'sec',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    minute: {\r\n      name: 'minute',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 60,\r\n      offset: 0\r\n    },\r\n    hour: {\r\n      name: 'hour',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 3600,\r\n      offset: 0\r\n    },\r\n    day: {\r\n      name: 'day',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 86400,\r\n      offset: 0\r\n    },\r\n    week: {\r\n      name: 'week',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 7 * 86400,\r\n      offset: 0\r\n    },\r\n    month: {\r\n      name: 'month',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 2629800,\r\n      // 1/12th of Julian year\r\n      offset: 0\r\n    },\r\n    year: {\r\n      name: 'year',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 31557600,\r\n      // Julian year\r\n      offset: 0\r\n    },\r\n    decade: {\r\n      name: 'decade',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 315576000,\r\n      // Julian decade\r\n      offset: 0\r\n    },\r\n    century: {\r\n      name: 'century',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 3155760000,\r\n      // Julian century\r\n      offset: 0\r\n    },\r\n    millennium: {\r\n      name: 'millennium',\r\n      base: BASE_UNITS.TIME,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 31557600000,\r\n      // Julian millennium\r\n      offset: 0\r\n    },\r\n    // Frequency\r\n    hertz: {\r\n      name: 'Hertz',\r\n      base: BASE_UNITS.FREQUENCY,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0,\r\n      reciprocal: true\r\n    },\r\n    Hz: {\r\n      name: 'Hz',\r\n      base: BASE_UNITS.FREQUENCY,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0,\r\n      reciprocal: true\r\n    },\r\n    // Angle\r\n    rad: {\r\n      name: 'rad',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    radian: {\r\n      name: 'radian',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\r\n    deg: {\r\n      name: 'deg',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: null,\r\n      // will be filled in by calculateAngleValues()\r\n      offset: 0\r\n    },\r\n    degree: {\r\n      name: 'degree',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: null,\r\n      // will be filled in by calculateAngleValues()\r\n      offset: 0\r\n    },\r\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\r\n    grad: {\r\n      name: 'grad',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: null,\r\n      // will be filled in by calculateAngleValues()\r\n      offset: 0\r\n    },\r\n    gradian: {\r\n      name: 'gradian',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: null,\r\n      // will be filled in by calculateAngleValues()\r\n      offset: 0\r\n    },\r\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\r\n    cycle: {\r\n      name: 'cycle',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: null,\r\n      // will be filled in by calculateAngleValues()\r\n      offset: 0\r\n    },\r\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\r\n    arcsec: {\r\n      name: 'arcsec',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: null,\r\n      // will be filled in by calculateAngleValues()\r\n      offset: 0\r\n    },\r\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\r\n    arcmin: {\r\n      name: 'arcmin',\r\n      base: BASE_UNITS.ANGLE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: null,\r\n      // will be filled in by calculateAngleValues()\r\n      offset: 0\r\n    },\r\n    // Electric current\r\n    A: {\r\n      name: 'A',\r\n      base: BASE_UNITS.CURRENT,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    ampere: {\r\n      name: 'ampere',\r\n      base: BASE_UNITS.CURRENT,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Temperature\r\n    // K(C) = °C + 273.15\r\n    // K(F) = (°F + 459.67) * (5 / 9)\r\n    // K(R) = °R * (5 / 9)\r\n    K: {\r\n      name: 'K',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    degC: {\r\n      name: 'degC',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 273.15\r\n    },\r\n    degF: {\r\n      name: 'degF',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: new _Fraction(5, 9),\r\n      offset: 459.67\r\n    },\r\n    degR: {\r\n      name: 'degR',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: new _Fraction(5, 9),\r\n      offset: 0\r\n    },\r\n    kelvin: {\r\n      name: 'kelvin',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    celsius: {\r\n      name: 'celsius',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 273.15\r\n    },\r\n    fahrenheit: {\r\n      name: 'fahrenheit',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: new _Fraction(5, 9),\r\n      offset: 459.67\r\n    },\r\n    rankine: {\r\n      name: 'rankine',\r\n      base: BASE_UNITS.TEMPERATURE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: new _Fraction(5, 9),\r\n      offset: 0\r\n    },\r\n    // amount of substance\r\n    mol: {\r\n      name: 'mol',\r\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    mole: {\r\n      name: 'mole',\r\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // luminous intensity\r\n    cd: {\r\n      name: 'cd',\r\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    candela: {\r\n      name: 'candela',\r\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // TODO: units STERADIAN\r\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\r\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\r\n\r\n    // Force\r\n    N: {\r\n      name: 'N',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    newton: {\r\n      name: 'newton',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    dyn: {\r\n      name: 'dyn',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 0.00001,\r\n      offset: 0\r\n    },\r\n    dyne: {\r\n      name: 'dyne',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 0.00001,\r\n      offset: 0\r\n    },\r\n    lbf: {\r\n      name: 'lbf',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 4.4482216152605,\r\n      offset: 0\r\n    },\r\n    poundforce: {\r\n      name: 'poundforce',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 4.4482216152605,\r\n      offset: 0\r\n    },\r\n    kip: {\r\n      name: 'kip',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 4448.2216,\r\n      offset: 0\r\n    },\r\n    kilogramforce: {\r\n      name: 'kilogramforce',\r\n      base: BASE_UNITS.FORCE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 9.80665,\r\n      offset: 0\r\n    },\r\n    // Energy\r\n    J: {\r\n      name: 'J',\r\n      base: BASE_UNITS.ENERGY,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    joule: {\r\n      name: 'joule',\r\n      base: BASE_UNITS.ENERGY,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    erg: {\r\n      name: 'erg',\r\n      base: BASE_UNITS.ENERGY,\r\n      prefixes: PREFIXES.SHORTLONG,\r\n      // Both kiloerg and kerg are acceptable\r\n      value: 1e-7,\r\n      offset: 0\r\n    },\r\n    Wh: {\r\n      name: 'Wh',\r\n      base: BASE_UNITS.ENERGY,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 3600,\r\n      offset: 0\r\n    },\r\n    BTU: {\r\n      name: 'BTU',\r\n      base: BASE_UNITS.ENERGY,\r\n      prefixes: PREFIXES.BTU,\r\n      value: 1055.05585262,\r\n      offset: 0\r\n    },\r\n    eV: {\r\n      name: 'eV',\r\n      base: BASE_UNITS.ENERGY,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1.602176565e-19,\r\n      offset: 0\r\n    },\r\n    electronvolt: {\r\n      name: 'electronvolt',\r\n      base: BASE_UNITS.ENERGY,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1.602176565e-19,\r\n      offset: 0\r\n    },\r\n    // Power\r\n    W: {\r\n      name: 'W',\r\n      base: BASE_UNITS.POWER,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    watt: {\r\n      name: 'watt',\r\n      base: BASE_UNITS.POWER,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    hp: {\r\n      name: 'hp',\r\n      base: BASE_UNITS.POWER,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 745.6998715386,\r\n      offset: 0\r\n    },\r\n    // Electrical power units\r\n    VAR: {\r\n      name: 'VAR',\r\n      base: BASE_UNITS.POWER,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: Complex.I,\r\n      offset: 0\r\n    },\r\n    VA: {\r\n      name: 'VA',\r\n      base: BASE_UNITS.POWER,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Pressure\r\n    Pa: {\r\n      name: 'Pa',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    psi: {\r\n      name: 'psi',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 6894.75729276459,\r\n      offset: 0\r\n    },\r\n    atm: {\r\n      name: 'atm',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 101325,\r\n      offset: 0\r\n    },\r\n    bar: {\r\n      name: 'bar',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.SHORTLONG,\r\n      value: 100000,\r\n      offset: 0\r\n    },\r\n    torr: {\r\n      name: 'torr',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 133.322,\r\n      offset: 0\r\n    },\r\n    mmHg: {\r\n      name: 'mmHg',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 133.322,\r\n      offset: 0\r\n    },\r\n    mmH2O: {\r\n      name: 'mmH2O',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 9.80665,\r\n      offset: 0\r\n    },\r\n    cmH2O: {\r\n      name: 'cmH2O',\r\n      base: BASE_UNITS.PRESSURE,\r\n      prefixes: PREFIXES.NONE,\r\n      value: 98.0665,\r\n      offset: 0\r\n    },\r\n    // Electric charge\r\n    coulomb: {\r\n      name: 'coulomb',\r\n      base: BASE_UNITS.ELECTRIC_CHARGE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    C: {\r\n      name: 'C',\r\n      base: BASE_UNITS.ELECTRIC_CHARGE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Electric capacitance\r\n    farad: {\r\n      name: 'farad',\r\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    F: {\r\n      name: 'F',\r\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Electric potential\r\n    volt: {\r\n      name: 'volt',\r\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    V: {\r\n      name: 'V',\r\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Electric resistance\r\n    ohm: {\r\n      name: 'ohm',\r\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\r\n      prefixes: PREFIXES.SHORTLONG,\r\n      // Both Mohm and megaohm are acceptable\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    /*\r\n     * Unicode breaks in browsers if charset is not specified\r\n    Ω: {\r\n      name: 'Ω',\r\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    */\r\n    // Electric inductance\r\n    henry: {\r\n      name: 'henry',\r\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    H: {\r\n      name: 'H',\r\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Electric conductance\r\n    siemens: {\r\n      name: 'siemens',\r\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    S: {\r\n      name: 'S',\r\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Magnetic flux\r\n    weber: {\r\n      name: 'weber',\r\n      base: BASE_UNITS.MAGNETIC_FLUX,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    Wb: {\r\n      name: 'Wb',\r\n      base: BASE_UNITS.MAGNETIC_FLUX,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Magnetic flux density\r\n    tesla: {\r\n      name: 'tesla',\r\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\r\n      prefixes: PREFIXES.LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    T: {\r\n      name: 'T',\r\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\r\n      prefixes: PREFIXES.SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    // Binary\r\n    b: {\r\n      name: 'b',\r\n      base: BASE_UNITS.BIT,\r\n      prefixes: PREFIXES.BINARY_SHORT,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    bits: {\r\n      name: 'bits',\r\n      base: BASE_UNITS.BIT,\r\n      prefixes: PREFIXES.BINARY_LONG,\r\n      value: 1,\r\n      offset: 0\r\n    },\r\n    B: {\r\n      name: 'B',\r\n      base: BASE_UNITS.BIT,\r\n      prefixes: PREFIXES.BINARY_SHORT,\r\n      value: 8,\r\n      offset: 0\r\n    },\r\n    bytes: {\r\n      name: 'bytes',\r\n      base: BASE_UNITS.BIT,\r\n      prefixes: PREFIXES.BINARY_LONG,\r\n      value: 8,\r\n      offset: 0\r\n    }\r\n  };\r\n\r\n  // aliases (formerly plurals)\r\n  // note that ALIASES is only used at creation to create more entries in UNITS by copying the aliased units\r\n  var ALIASES = {\r\n    meters: 'meter',\r\n    inches: 'inch',\r\n    feet: 'foot',\r\n    yards: 'yard',\r\n    miles: 'mile',\r\n    links: 'link',\r\n    rods: 'rod',\r\n    chains: 'chain',\r\n    angstroms: 'angstrom',\r\n    lt: 'l',\r\n    litres: 'litre',\r\n    liter: 'litre',\r\n    liters: 'litre',\r\n    teaspoons: 'teaspoon',\r\n    tablespoons: 'tablespoon',\r\n    minims: 'minim',\r\n    fldr: 'fluiddram',\r\n    fluiddrams: 'fluiddram',\r\n    floz: 'fluidounce',\r\n    fluidounces: 'fluidounce',\r\n    gi: 'gill',\r\n    gills: 'gill',\r\n    cp: 'cup',\r\n    cups: 'cup',\r\n    pt: 'pint',\r\n    pints: 'pint',\r\n    qt: 'quart',\r\n    quarts: 'quart',\r\n    gal: 'gallon',\r\n    gallons: 'gallon',\r\n    bbl: 'beerbarrel',\r\n    beerbarrels: 'beerbarrel',\r\n    obl: 'oilbarrel',\r\n    oilbarrels: 'oilbarrel',\r\n    hogsheads: 'hogshead',\r\n    gtts: 'gtt',\r\n    grams: 'gram',\r\n    tons: 'ton',\r\n    tonnes: 'tonne',\r\n    grains: 'grain',\r\n    drams: 'dram',\r\n    ounces: 'ounce',\r\n    poundmasses: 'poundmass',\r\n    hundredweights: 'hundredweight',\r\n    sticks: 'stick',\r\n    lb: 'lbm',\r\n    lbs: 'lbm',\r\n    kips: 'kip',\r\n    kgf: 'kilogramforce',\r\n    acres: 'acre',\r\n    hectares: 'hectare',\r\n    sqfeet: 'sqft',\r\n    sqyard: 'sqyd',\r\n    sqmile: 'sqmi',\r\n    sqmiles: 'sqmi',\r\n    mmhg: 'mmHg',\r\n    mmh2o: 'mmH2O',\r\n    cmh2o: 'cmH2O',\r\n    seconds: 'second',\r\n    secs: 'second',\r\n    minutes: 'minute',\r\n    mins: 'minute',\r\n    hours: 'hour',\r\n    hr: 'hour',\r\n    hrs: 'hour',\r\n    days: 'day',\r\n    weeks: 'week',\r\n    months: 'month',\r\n    years: 'year',\r\n    decades: 'decade',\r\n    centuries: 'century',\r\n    millennia: 'millennium',\r\n    hertz: 'hertz',\r\n    radians: 'radian',\r\n    degrees: 'degree',\r\n    gradians: 'gradian',\r\n    cycles: 'cycle',\r\n    arcsecond: 'arcsec',\r\n    arcseconds: 'arcsec',\r\n    arcminute: 'arcmin',\r\n    arcminutes: 'arcmin',\r\n    BTUs: 'BTU',\r\n    watts: 'watt',\r\n    joules: 'joule',\r\n    amperes: 'ampere',\r\n    amps: 'ampere',\r\n    amp: 'ampere',\r\n    coulombs: 'coulomb',\r\n    volts: 'volt',\r\n    ohms: 'ohm',\r\n    farads: 'farad',\r\n    webers: 'weber',\r\n    teslas: 'tesla',\r\n    electronvolts: 'electronvolt',\r\n    moles: 'mole',\r\n    bit: 'bits',\r\n    byte: 'bytes'\r\n  };\r\n\r\n  /**\r\n   * Calculate the values for the angle units.\r\n   * Value is calculated as number or BigNumber depending on the configuration\r\n   * @param {{number: 'number' | 'BigNumber'}} config\r\n   */\r\n  function calculateAngleValues(config) {\r\n    if (config.number === 'BigNumber') {\r\n      var pi = createPi(_BigNumber);\r\n      UNITS.rad.value = new _BigNumber(1);\r\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\r\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\r\n      UNITS.cycle.value = pi.times(2); // 2 * pi\r\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\r\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\r\n    } else {\r\n      // number\r\n      UNITS.rad.value = 1;\r\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\r\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\r\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\r\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\r\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\r\n    }\r\n\r\n    // copy to the full names of the angles\r\n    UNITS.radian.value = UNITS.rad.value;\r\n    UNITS.degree.value = UNITS.deg.value;\r\n    UNITS.gradian.value = UNITS.grad.value;\r\n  }\r\n\r\n  // apply the angle values now\r\n  calculateAngleValues(config);\r\n  if (on) {\r\n    // recalculate the values on change of configuration\r\n    on('config', function (curr, prev) {\r\n      if (curr.number !== prev.number) {\r\n        calculateAngleValues(curr);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\r\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\r\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\r\n   */\r\n  var UNIT_SYSTEMS = {\r\n    si: {\r\n      // Base units\r\n      NONE: {\r\n        unit: UNIT_NONE,\r\n        prefix: PREFIXES.NONE['']\r\n      },\r\n      LENGTH: {\r\n        unit: UNITS.m,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      MASS: {\r\n        unit: UNITS.g,\r\n        prefix: PREFIXES.SHORT.k\r\n      },\r\n      TIME: {\r\n        unit: UNITS.s,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      CURRENT: {\r\n        unit: UNITS.A,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      TEMPERATURE: {\r\n        unit: UNITS.K,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      LUMINOUS_INTENSITY: {\r\n        unit: UNITS.cd,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      AMOUNT_OF_SUBSTANCE: {\r\n        unit: UNITS.mol,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ANGLE: {\r\n        unit: UNITS.rad,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      BIT: {\r\n        unit: UNITS.bits,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      // Derived units\r\n      FORCE: {\r\n        unit: UNITS.N,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ENERGY: {\r\n        unit: UNITS.J,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      POWER: {\r\n        unit: UNITS.W,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      PRESSURE: {\r\n        unit: UNITS.Pa,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ELECTRIC_CHARGE: {\r\n        unit: UNITS.C,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ELECTRIC_CAPACITANCE: {\r\n        unit: UNITS.F,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ELECTRIC_POTENTIAL: {\r\n        unit: UNITS.V,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ELECTRIC_RESISTANCE: {\r\n        unit: UNITS.ohm,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ELECTRIC_INDUCTANCE: {\r\n        unit: UNITS.H,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      ELECTRIC_CONDUCTANCE: {\r\n        unit: UNITS.S,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      MAGNETIC_FLUX: {\r\n        unit: UNITS.Wb,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      MAGNETIC_FLUX_DENSITY: {\r\n        unit: UNITS.T,\r\n        prefix: PREFIXES.SHORT['']\r\n      },\r\n      FREQUENCY: {\r\n        unit: UNITS.Hz,\r\n        prefix: PREFIXES.SHORT['']\r\n      }\r\n    }\r\n  };\r\n\r\n  // Clone to create the other unit systems\r\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\r\n  UNIT_SYSTEMS.cgs.LENGTH = {\r\n    unit: UNITS.m,\r\n    prefix: PREFIXES.SHORT.c\r\n  };\r\n  UNIT_SYSTEMS.cgs.MASS = {\r\n    unit: UNITS.g,\r\n    prefix: PREFIXES.SHORT['']\r\n  };\r\n  UNIT_SYSTEMS.cgs.FORCE = {\r\n    unit: UNITS.dyn,\r\n    prefix: PREFIXES.SHORT['']\r\n  };\r\n  UNIT_SYSTEMS.cgs.ENERGY = {\r\n    unit: UNITS.erg,\r\n    prefix: PREFIXES.NONE['']\r\n  };\r\n  // there are wholly 4 unique cgs systems for electricity and magnetism,\r\n  // so let's not worry about it unless somebody complains\r\n\r\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\r\n  UNIT_SYSTEMS.us.LENGTH = {\r\n    unit: UNITS.ft,\r\n    prefix: PREFIXES.NONE['']\r\n  };\r\n  UNIT_SYSTEMS.us.MASS = {\r\n    unit: UNITS.lbm,\r\n    prefix: PREFIXES.NONE['']\r\n  };\r\n  UNIT_SYSTEMS.us.TEMPERATURE = {\r\n    unit: UNITS.degF,\r\n    prefix: PREFIXES.NONE['']\r\n  };\r\n  UNIT_SYSTEMS.us.FORCE = {\r\n    unit: UNITS.lbf,\r\n    prefix: PREFIXES.NONE['']\r\n  };\r\n  UNIT_SYSTEMS.us.ENERGY = {\r\n    unit: UNITS.BTU,\r\n    prefix: PREFIXES.BTU['']\r\n  };\r\n  UNIT_SYSTEMS.us.POWER = {\r\n    unit: UNITS.hp,\r\n    prefix: PREFIXES.NONE['']\r\n  };\r\n  UNIT_SYSTEMS.us.PRESSURE = {\r\n    unit: UNITS.psi,\r\n    prefix: PREFIXES.NONE['']\r\n  };\r\n\r\n  // Add additional unit systems here.\r\n\r\n  // Choose a unit system to seed the auto unit system.\r\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\r\n\r\n  // Set the current unit system\r\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\r\n\r\n  /**\r\n   * Set a unit system for formatting derived units.\r\n   * @memberof Unit\r\n   * @param {string} [name] The name of the unit system.\r\n   */\r\n  Unit.setUnitSystem = function (name) {\r\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\r\n      currentUnitSystem = UNIT_SYSTEMS[name];\r\n    } else {\r\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Return the current unit system.\r\n   * @memberof Unit\r\n   * @return {string} The current unit system.\r\n   */\r\n  Unit.getUnitSystem = function () {\r\n    for (var _key in UNIT_SYSTEMS) {\r\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\r\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\r\n          return _key;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Converters to convert from number to an other numeric type like BigNumber\r\n   * or Fraction\r\n   */\r\n  Unit.typeConverters = {\r\n    BigNumber: function BigNumber(x) {\r\n      if (x !== null && x !== void 0 && x.isFraction) return new _BigNumber(String(x.n)).div(String(x.d)).times(String(x.s));\r\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return new _Fraction(x);\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x;\r\n    },\r\n    number: function number(x) {\r\n      if (x !== null && x !== void 0 && x.isFraction) return _number(x);\r\n      return x;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Retrieve the right converter function corresponding with this unit's\r\n   * value\r\n   *\r\n   * @memberof Unit\r\n   * @return {Function}\r\n   */\r\n  Unit.prototype._numberConverter = function () {\r\n    var convert = Unit.typeConverters[this.valueType()];\r\n    if (convert) {\r\n      return convert;\r\n    }\r\n    throw new TypeError('Unsupported Unit value type \"' + this.valueType() + '\"');\r\n  };\r\n\r\n  /**\r\n   * Retrieve the right convertor function corresponding with the type\r\n   * of provided exampleValue.\r\n   *\r\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\r\n   *                        In case of an unknown type,\r\n   * @return {Function}\r\n   */\r\n  Unit._getNumberConverter = function (type) {\r\n    if (!Unit.typeConverters[type]) {\r\n      throw new TypeError('Unsupported type \"' + type + '\"');\r\n    }\r\n    return Unit.typeConverters[type];\r\n  };\r\n\r\n  // Add dimensions to each built-in unit\r\n  for (var _key2 in UNITS) {\r\n    if (hasOwnProperty(UNITS, _key2)) {\r\n      var unit = UNITS[_key2];\r\n      unit.dimensions = unit.base.dimensions;\r\n    }\r\n  }\r\n\r\n  // Create aliases\r\n  for (var _name2 in ALIASES) {\r\n    if (hasOwnProperty(ALIASES, _name2)) {\r\n      var _unit2 = UNITS[ALIASES[_name2]];\r\n      var alias = {};\r\n      for (var _key3 in _unit2) {\r\n        if (hasOwnProperty(_unit2, _key3)) {\r\n          alias[_key3] = _unit2[_key3];\r\n        }\r\n      }\r\n      alias.name = _name2;\r\n      UNITS[_name2] = alias;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if a character is a valid latin letter (upper or lower case).\r\n   * Note that this function can be overridden, for example to allow support of other alphabets.\r\n   * @memberof Unit\r\n   * @param {string} c Tested character\r\n   * @return {boolean} true if the character is a latin letter\r\n   */\r\n  Unit.isValidAlpha = function isValidAlpha(c) {\r\n    return /^[a-zA-Z]$/.test(c);\r\n  };\r\n  function assertUnitNameIsValid(name) {\r\n    for (var i = 0; i < name.length; i++) {\r\n      c = name.charAt(i);\r\n      if (i === 0 && !Unit.isValidAlpha(c)) {\r\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\r\n      }\r\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\r\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Wrapper around createUnitSingle.\r\n   * Example:\r\n   *  createUnit( {\r\n   *     foo: {\r\n   *       prefixes: 'long',\r\n   *       baseName: 'essence-of-foo'\r\n   *     },\r\n   *     bar: '40 foo',\r\n   *     baz: {\r\n   *       definition: '1 bar/hour',\r\n   *       prefixes: 'long'\r\n   *     }\r\n   *   },\r\n   *   {\r\n   *     override: true\r\n   *   })\r\n   * @memberof Unit\r\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\r\n   * @param {object} options\r\n   * @return {Unit} the last created unit\r\n   */\r\n  Unit.createUnit = function (obj, options) {\r\n    if (typeof obj !== 'object') {\r\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\r\n    }\r\n\r\n    // Remove all units and aliases we are overriding\r\n    if (options && options.override) {\r\n      for (var _key4 in obj) {\r\n        if (hasOwnProperty(obj, _key4)) {\r\n          Unit.deleteUnit(_key4);\r\n        }\r\n        if (obj[_key4].aliases) {\r\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\r\n            Unit.deleteUnit(obj[_key4].aliases[i]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // TODO: traverse multiple times until all units have been added\r\n    var lastUnit;\r\n    for (var _key5 in obj) {\r\n      if (hasOwnProperty(obj, _key5)) {\r\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\r\n      }\r\n    }\r\n    return lastUnit;\r\n  };\r\n\r\n  /**\r\n   * Create a user-defined unit and register it with the Unit type.\r\n   * Example:\r\n   *  createUnitSingle('knot', '0.514444444 m/s')\r\n   *\r\n   * @memberof Unit\r\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\r\n   * @param {string | Unit | object} definition      Definition of the unit in terms\r\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\r\n   * or an Object. If an Object, may have the following properties:\r\n   *   - definition {string | Unit} The definition of this unit.\r\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\r\n   *     The default is \"none\".\r\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\r\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\r\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\r\n   *     is 459.67. Default is 0.\r\n   *   - baseName {string} If the unit's dimension does not match that of any other\r\n   *     base unit, the name of the newly create base unit. Otherwise, this property\r\n   *     has no effect.\r\n   *\r\n   * @return {Unit}\r\n   */\r\n  Unit.createUnitSingle = function (name, obj) {\r\n    if (typeof obj === 'undefined' || obj === null) {\r\n      obj = {};\r\n    }\r\n    if (typeof name !== 'string') {\r\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\r\n    }\r\n\r\n    // Check collisions with existing units\r\n    if (hasOwnProperty(UNITS, name)) {\r\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\r\n    }\r\n\r\n    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\r\n\r\n    assertUnitNameIsValid(name);\r\n    var defUnit = null; // The Unit from which the new unit will be created.\r\n    var aliases = [];\r\n    var offset = 0;\r\n    var definition;\r\n    var prefixes;\r\n    var baseName;\r\n    if (obj && obj.type === 'Unit') {\r\n      defUnit = obj.clone();\r\n    } else if (typeof obj === 'string') {\r\n      if (obj !== '') {\r\n        definition = obj;\r\n      }\r\n    } else if (typeof obj === 'object') {\r\n      definition = obj.definition;\r\n      prefixes = obj.prefixes;\r\n      offset = obj.offset;\r\n      baseName = obj.baseName;\r\n      if (obj.aliases) {\r\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\r\n      }\r\n    } else {\r\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\r\n    }\r\n    if (aliases) {\r\n      for (var i = 0; i < aliases.length; i++) {\r\n        if (hasOwnProperty(UNITS, aliases[i])) {\r\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\r\n        }\r\n      }\r\n    }\r\n    if (definition && typeof definition === 'string' && !defUnit) {\r\n      try {\r\n        defUnit = Unit.parse(definition, {\r\n          allowNoUnits: true\r\n        });\r\n      } catch (ex) {\r\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\r\n        throw ex;\r\n      }\r\n    } else if (definition && definition.type === 'Unit') {\r\n      defUnit = definition.clone();\r\n    }\r\n    aliases = aliases || [];\r\n    offset = offset || 0;\r\n    if (prefixes && prefixes.toUpperCase) {\r\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\r\n    } else {\r\n      prefixes = PREFIXES.NONE;\r\n    }\r\n\r\n    // If defUnit is null, it is because the user did not\r\n    // specify a defintion. So create a new base dimension.\r\n    var newUnit = {};\r\n    if (!defUnit) {\r\n      // Add a new base dimension\r\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\r\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\r\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\r\n      }\r\n      BASE_DIMENSIONS.push(baseName);\r\n\r\n      // Push 0 onto existing base units\r\n      for (var b in BASE_UNITS) {\r\n        if (hasOwnProperty(BASE_UNITS, b)) {\r\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\r\n        }\r\n      }\r\n\r\n      // Add the new base unit\r\n      var newBaseUnit = {\r\n        dimensions: []\r\n      };\r\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\r\n        newBaseUnit.dimensions[_i6] = 0;\r\n      }\r\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\r\n      newBaseUnit.key = baseName;\r\n      BASE_UNITS[baseName] = newBaseUnit;\r\n      newUnit = {\r\n        name,\r\n        value: 1,\r\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\r\n        prefixes,\r\n        offset,\r\n        base: BASE_UNITS[baseName]\r\n      };\r\n      currentUnitSystem[baseName] = {\r\n        unit: newUnit,\r\n        prefix: PREFIXES.NONE['']\r\n      };\r\n    } else {\r\n      newUnit = {\r\n        name,\r\n        value: defUnit.value,\r\n        dimensions: defUnit.dimensions.slice(0),\r\n        prefixes,\r\n        offset\r\n      };\r\n\r\n      // Create a new base if no matching base exists\r\n      var anyMatch = false;\r\n      for (var _i7 in BASE_UNITS) {\r\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\r\n          var match = true;\r\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\r\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\r\n              match = false;\r\n              break;\r\n            }\r\n          }\r\n          if (match) {\r\n            anyMatch = true;\r\n            newUnit.base = BASE_UNITS[_i7];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      if (!anyMatch) {\r\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\r\n        // Add the new base unit\r\n        var _newBaseUnit = {\r\n          dimensions: defUnit.dimensions.slice(0)\r\n        };\r\n        _newBaseUnit.key = baseName;\r\n        BASE_UNITS[baseName] = _newBaseUnit;\r\n        currentUnitSystem[baseName] = {\r\n          unit: newUnit,\r\n          prefix: PREFIXES.NONE['']\r\n        };\r\n        newUnit.base = BASE_UNITS[baseName];\r\n      }\r\n    }\r\n    Unit.UNITS[name] = newUnit;\r\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\r\n      var aliasName = aliases[_i8];\r\n      var _alias = {};\r\n      for (var _key6 in newUnit) {\r\n        if (hasOwnProperty(newUnit, _key6)) {\r\n          _alias[_key6] = newUnit[_key6];\r\n        }\r\n      }\r\n      _alias.name = aliasName;\r\n      Unit.UNITS[aliasName] = _alias;\r\n    }\r\n\r\n    // delete the memoization cache because we created a new unit\r\n    delete _findUnit.cache;\r\n    return new Unit(null, name);\r\n  };\r\n  Unit.deleteUnit = function (name) {\r\n    delete Unit.UNITS[name];\r\n\r\n    // delete the memoization cache because we deleted a unit\r\n    delete _findUnit.cache;\r\n  };\r\n\r\n  // expose arrays with prefixes, dimensions, units, systems\r\n  Unit.PREFIXES = PREFIXES;\r\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\r\n  Unit.BASE_UNITS = BASE_UNITS;\r\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\r\n  Unit.UNITS = UNITS;\r\n  return Unit;\r\n}, {\r\n  isClass: true\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}