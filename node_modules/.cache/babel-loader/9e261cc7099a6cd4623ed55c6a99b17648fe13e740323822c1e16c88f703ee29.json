{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'hasNumericValue';\nvar dependencies = ['typed', 'isNumeric'];\nexport var createHasNumericValue = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isNumeric\n  } = _ref;\n  /**\r\n   * Test whether a value is an numeric value.\r\n   *\r\n   * In case of a string, true is returned if the string contains a numeric value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.hasNumericValue(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.hasNumericValue(2)                     // returns true\r\n   *    math.hasNumericValue('2')                   // returns true\r\n   *    math.isNumeric('2')                         // returns false\r\n   *    math.hasNumericValue(0)                     // returns true\r\n   *    math.hasNumericValue(math.bignumber('500')) // returns true\r\n   *    math.hasNumericValue(math.bigint('42'))     // returns true\r\n   *    math.hasNumericValue(42n)                   // returns true\r\n   *    math.hasNumericValue(math.fraction(4))      // returns true\r\n   *    math.hasNumericValue(math.complex('2-4i'))  // returns false\r\n   *    math.hasNumericValue(false)                 // returns true\r\n   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isZero, isPositive, isNegative, isInteger, isNumeric\r\n   *\r\n   * @param {*} x       Value to be tested\r\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\r\n   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.\r\n   *                    Throws an error in case of unknown types.\r\n   */\n  return typed(name, {\n    boolean: () => true,\n    string: function string(x) {\n      return x.trim().length > 0 && !isNaN(Number(x));\n    },\n    any: function any(x) {\n      return isNumeric(x);\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createHasNumericValue","_ref","typed","isNumeric","boolean","string","x","trim","length","isNaN","Number","any"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/utils/hasNumericValue.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'hasNumericValue';\r\nvar dependencies = ['typed', 'isNumeric'];\r\nexport var createHasNumericValue = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    isNumeric\r\n  } = _ref;\r\n  /**\r\n   * Test whether a value is an numeric value.\r\n   *\r\n   * In case of a string, true is returned if the string contains a numeric value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.hasNumericValue(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.hasNumericValue(2)                     // returns true\r\n   *    math.hasNumericValue('2')                   // returns true\r\n   *    math.isNumeric('2')                         // returns false\r\n   *    math.hasNumericValue(0)                     // returns true\r\n   *    math.hasNumericValue(math.bignumber('500')) // returns true\r\n   *    math.hasNumericValue(math.bigint('42'))     // returns true\r\n   *    math.hasNumericValue(42n)                   // returns true\r\n   *    math.hasNumericValue(math.fraction(4))      // returns true\r\n   *    math.hasNumericValue(math.complex('2-4i'))  // returns false\r\n   *    math.hasNumericValue(false)                 // returns true\r\n   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    isZero, isPositive, isNegative, isInteger, isNumeric\r\n   *\r\n   * @param {*} x       Value to be tested\r\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\r\n   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.\r\n   *                    Throws an error in case of unknown types.\r\n   */\r\n  return typed(name, {\r\n    boolean: () => true,\r\n    string: function string(x) {\r\n      return x.trim().length > 0 && !isNaN(Number(x));\r\n    },\r\n    any: function any(x) {\r\n      return isNumeric(x);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,iBAAiB;AAC5B,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC;AACzC,OAAO,IAAIC,qBAAqB,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACpF,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBM,OAAO,EAAEA,CAAA,KAAM,IAAI;IACnBC,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB,OAAOA,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACJ,CAAC,CAAC,CAAC;IACjD,CAAC;IACDK,GAAG,EAAE,SAASA,GAAGA,CAACL,CAAC,EAAE;MACnB,OAAOH,SAAS,CAACG,CAAC,CAAC;IACrB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}