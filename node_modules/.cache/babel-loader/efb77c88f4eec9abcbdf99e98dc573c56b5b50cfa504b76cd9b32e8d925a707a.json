{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'equalText';\nvar dependencies = ['typed', 'compareText', 'isZero'];\nexport var createEqualText = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    compareText,\n    isZero\n  } = _ref;\n  /**\r\n   * Check equality of two strings. Comparison is case sensitive.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.equalText(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.equalText('Hello', 'Hello')     // returns true\r\n   *    math.equalText('a', 'A')             // returns false\r\n   *    math.equal('2e3', '2000')            // returns true\r\n   *    math.equalText('2e3', '2000')        // returns false\r\n   *\r\n   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]\r\n   *\r\n   * See also:\r\n   *\r\n   *    equal, compareText, compare, compareNatural\r\n   *\r\n   * @param  {string | Array | DenseMatrix} x First string to compare\r\n   * @param  {string | Array | DenseMatrix} y Second string to compare\r\n   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.\r\n   */\n  return typed(name, {\n    'any, any': function any_any(x, y) {\n      return isZero(compareText(x, y));\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createEqualText","_ref","typed","compareText","isZero","any_any","x","y"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/relational/equalText.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'equalText';\r\nvar dependencies = ['typed', 'compareText', 'isZero'];\r\nexport var createEqualText = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    compareText,\r\n    isZero\r\n  } = _ref;\r\n  /**\r\n   * Check equality of two strings. Comparison is case sensitive.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.equalText(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.equalText('Hello', 'Hello')     // returns true\r\n   *    math.equalText('a', 'A')             // returns false\r\n   *    math.equal('2e3', '2000')            // returns true\r\n   *    math.equalText('2e3', '2000')        // returns false\r\n   *\r\n   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]\r\n   *\r\n   * See also:\r\n   *\r\n   *    equal, compareText, compare, compareNatural\r\n   *\r\n   * @param  {string | Array | DenseMatrix} x First string to compare\r\n   * @param  {string | Array | DenseMatrix} y Second string to compare\r\n   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.\r\n   */\r\n  return typed(name, {\r\n    'any, any': function any_any(x, y) {\r\n      return isZero(compareText(x, y));\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,CAAC;AACrD,OAAO,IAAIC,eAAe,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC9E,IAAI;IACFC,KAAK;IACLC,WAAW;IACXC;EACF,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,UAAU,EAAE,SAASO,OAAOA,CAACC,CAAC,EAAEC,CAAC,EAAE;MACjC,OAAOH,MAAM,CAACD,WAAW,CAACG,CAAC,EAAEC,CAAC,CAAC,CAAC;IAClC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}