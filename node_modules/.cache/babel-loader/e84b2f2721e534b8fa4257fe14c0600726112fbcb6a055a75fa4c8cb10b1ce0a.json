{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'im';\nvar dependencies = ['typed'];\nexport var createIm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Get the imaginary part of a complex number.\r\n   * For a complex number `a + bi`, the function returns `b`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.im(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = math.complex(2, 3)\r\n   *    math.re(a)                     // returns number 2\r\n   *    math.im(a)                     // returns number 3\r\n   *\r\n   *    math.re(math.complex('-5.2i')) // returns number -5.2\r\n   *    math.re(math.complex(2.4))     // returns number 0\r\n   *\r\n   * See also:\r\n   *\r\n   *    re, conj, abs, arg\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            A complex number or array with complex numbers\r\n   * @return {number | BigNumber | Array | Matrix} The imaginary part of x\r\n   */\n  return typed(name, {\n    number: () => 0,\n    'BigNumber | Fraction': x => x.mul(0),\n    Complex: x => x.im,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createIm","_ref","typed","number","x","mul","Complex","im","referToSelf","self"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/complex/im.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nvar name = 'im';\r\nvar dependencies = ['typed'];\r\nexport var createIm = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Get the imaginary part of a complex number.\r\n   * For a complex number `a + bi`, the function returns `b`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.im(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = math.complex(2, 3)\r\n   *    math.re(a)                     // returns number 2\r\n   *    math.im(a)                     // returns number 3\r\n   *\r\n   *    math.re(math.complex('-5.2i')) // returns number -5.2\r\n   *    math.re(math.complex(2.4))     // returns number 0\r\n   *\r\n   * See also:\r\n   *\r\n   *    re, conj, abs, arg\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            A complex number or array with complex numbers\r\n   * @return {number | BigNumber | Array | Matrix} The imaginary part of x\r\n   */\r\n  return typed(name, {\r\n    number: () => 0,\r\n    'BigNumber | Fraction': x => x.mul(0),\r\n    Complex: x => x.im,\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,IAAIC,IAAI,GAAG,IAAI;AACf,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,QAAQ,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACvE,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAEA,CAAA,KAAM,CAAC;IACf,sBAAsB,EAAEC,CAAC,IAAIA,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC;IACrCC,OAAO,EAAEF,CAAC,IAAIA,CAAC,CAACG,EAAE;IAClB,gBAAgB,EAAEL,KAAK,CAACM,WAAW,CAACC,IAAI,IAAIL,CAAC,IAAIP,OAAO,CAACO,CAAC,EAAEK,IAAI,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}