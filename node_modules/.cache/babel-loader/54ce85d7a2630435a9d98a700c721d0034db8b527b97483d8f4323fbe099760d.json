{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'deepEqual';\nvar dependencies = ['typed', 'equal'];\nexport var createDeepEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equal\n  } = _ref;\n  /**\r\n   * Test element wise whether two matrices are equal.\r\n   * The function accepts both matrices and scalar values.\r\n   *\r\n   * Strings are compared by their numerical value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.deepEqual(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.deepEqual(2, 4)   // returns false\r\n   *\r\n   *    a = [2, 5, 1]\r\n   *    b = [2, 7, 1]\r\n   *\r\n   *    math.deepEqual(a, b)   // returns false\r\n   *    math.equal(a, b)       // returns [true, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    equal, unequal\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\r\n   *            Returns true when the input matrices have the same size and each of their elements is equal.\r\n   */\n  return typed(name, {\n    'any, any': function any_any(x, y) {\n      return _deepEqual(x.valueOf(), y.valueOf());\n    }\n  });\n\n  /**\r\n   * Test whether two arrays have the same size and all elements are equal\r\n   * @param {Array | *} x\r\n   * @param {Array | *} y\r\n   * @return {boolean} Returns true if both arrays are deep equal\r\n   */\n  function _deepEqual(x, y) {\n    if (Array.isArray(x)) {\n      if (Array.isArray(y)) {\n        var len = x.length;\n        if (len !== y.length) {\n          return false;\n        }\n        for (var i = 0; i < len; i++) {\n          if (!_deepEqual(x[i], y[i])) {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      if (Array.isArray(y)) {\n        return false;\n      } else {\n        return equal(x, y);\n      }\n    }\n  }\n});","map":{"version":3,"names":["factory","name","dependencies","createDeepEqual","_ref","typed","equal","any_any","x","y","_deepEqual","valueOf","Array","isArray","len","length","i"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/relational/deepEqual.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'deepEqual';\r\nvar dependencies = ['typed', 'equal'];\r\nexport var createDeepEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    equal\r\n  } = _ref;\r\n  /**\r\n   * Test element wise whether two matrices are equal.\r\n   * The function accepts both matrices and scalar values.\r\n   *\r\n   * Strings are compared by their numerical value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.deepEqual(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.deepEqual(2, 4)   // returns false\r\n   *\r\n   *    a = [2, 5, 1]\r\n   *    b = [2, 7, 1]\r\n   *\r\n   *    math.deepEqual(a, b)   // returns false\r\n   *    math.equal(a, b)       // returns [true, false, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    equal, unequal\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\r\n   *            Returns true when the input matrices have the same size and each of their elements is equal.\r\n   */\r\n  return typed(name, {\r\n    'any, any': function any_any(x, y) {\r\n      return _deepEqual(x.valueOf(), y.valueOf());\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Test whether two arrays have the same size and all elements are equal\r\n   * @param {Array | *} x\r\n   * @param {Array | *} y\r\n   * @return {boolean} Returns true if both arrays are deep equal\r\n   */\r\n  function _deepEqual(x, y) {\r\n    if (Array.isArray(x)) {\r\n      if (Array.isArray(y)) {\r\n        var len = x.length;\r\n        if (len !== y.length) {\r\n          return false;\r\n        }\r\n        for (var i = 0; i < len; i++) {\r\n          if (!_deepEqual(x[i], y[i])) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (Array.isArray(y)) {\r\n        return false;\r\n      } else {\r\n        return equal(x, y);\r\n      }\r\n    }\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;AACrC,OAAO,IAAIC,eAAe,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC9E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,UAAU,EAAE,SAASM,OAAOA,CAACC,CAAC,EAAEC,CAAC,EAAE;MACjC,OAAOC,UAAU,CAACF,CAAC,CAACG,OAAO,CAAC,CAAC,EAAEF,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC;IAC7C;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;EACE,SAASD,UAAUA,CAACF,CAAC,EAAEC,CAAC,EAAE;IACxB,IAAIG,KAAK,CAACC,OAAO,CAACL,CAAC,CAAC,EAAE;MACpB,IAAII,KAAK,CAACC,OAAO,CAACJ,CAAC,CAAC,EAAE;QACpB,IAAIK,GAAG,GAAGN,CAAC,CAACO,MAAM;QAClB,IAAID,GAAG,KAAKL,CAAC,CAACM,MAAM,EAAE;UACpB,OAAO,KAAK;QACd;QACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;UAC5B,IAAI,CAACN,UAAU,CAACF,CAAC,CAACQ,CAAC,CAAC,EAAEP,CAAC,CAACO,CAAC,CAAC,CAAC,EAAE;YAC3B,OAAO,KAAK;UACd;QACF;QACA,OAAO,IAAI;MACb,CAAC,MAAM;QACL,OAAO,KAAK;MACd;IACF,CAAC,MAAM;MACL,IAAIJ,KAAK,CAACC,OAAO,CAACJ,CAAC,CAAC,EAAE;QACpB,OAAO,KAAK;MACd,CAAC,MAAM;QACL,OAAOH,KAAK,CAACE,CAAC,EAAEC,CAAC,CAAC;MACpB;IACF;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}