{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'smaller';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat', 'SparseMatrix'];\nexport var createSmaller = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix,\n    concat,\n    SparseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    SparseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\r\n   * Test whether value x is smaller than y.\r\n   *\r\n   * The function returns true when x is smaller than y and the relative\r\n   * difference between x and y is smaller than the configured relTol and absTol. The\r\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   * Strings are compared by their numerical value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.smaller(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.smaller(2, 3)            // returns true\r\n   *    math.smaller(5, 2 * 2)        // returns false\r\n   *\r\n   *    const a = math.unit('5 cm')\r\n   *    const b = math.unit('2 inch')\r\n   *    math.smaller(a, b)            // returns true\r\n   *\r\n   * See also:\r\n   *\r\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\r\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\r\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\r\n   */\n  return typed(name, createSmallerNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x < y,\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.relTol, config.absTol);\n    },\n    'bigint, bigint': (x, y) => x < y,\n    'Fraction, Fraction': (x, y) => x.compare(y) === -1,\n    'Complex, Complex': function Complex_Complex(x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createSmallerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function number_number(x, y) {\n      return x < y && !nearlyEqual(x, y, config.relTol, config.absTol);\n    }\n  });\n});","map":{"version":3,"names":["nearlyEqual","bigNearlyEqual","factory","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo12xSfs","createMatrixAlgorithmSuite","createCompareUnits","name","dependencies","createSmaller","_ref","typed","config","matrix","DenseMatrix","concat","SparseMatrix","matAlgo03xDSf","matAlgo07xSSf","matAlgo12xSfs","matrixAlgorithmSuite","compareUnits","createSmallerNumber","boolean, boolean","x","y","BigNumber_BigNumber","lt","relTol","absTol","bigint, bigint","Fraction, Fraction","compare","Complex_Complex","TypeError","SS","DS","Ss","_ref2","number_number"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/relational/smaller.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\r\nimport { nearlyEqual } from '../../utils/number.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\r\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nimport { createCompareUnits } from './compareUnits.js';\r\nvar name = 'smaller';\r\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat', 'SparseMatrix'];\r\nexport var createSmaller = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    matrix,\r\n    DenseMatrix,\r\n    concat,\r\n    SparseMatrix\r\n  } = _ref;\r\n  var matAlgo03xDSf = createMatAlgo03xDSf({\r\n    typed\r\n  });\r\n  var matAlgo07xSSf = createMatAlgo07xSSf({\r\n    typed,\r\n    SparseMatrix\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n  var compareUnits = createCompareUnits({\r\n    typed\r\n  });\r\n\r\n  /**\r\n   * Test whether value x is smaller than y.\r\n   *\r\n   * The function returns true when x is smaller than y and the relative\r\n   * difference between x and y is smaller than the configured relTol and absTol. The\r\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   * Strings are compared by their numerical value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.smaller(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.smaller(2, 3)            // returns true\r\n   *    math.smaller(5, 2 * 2)        // returns false\r\n   *\r\n   *    const a = math.unit('5 cm')\r\n   *    const b = math.unit('2 inch')\r\n   *    math.smaller(a, b)            // returns true\r\n   *\r\n   * See also:\r\n   *\r\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\r\n   * @param  {number | BigNumber | bigint | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\r\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\r\n   */\r\n  return typed(name, createSmallerNumber({\r\n    typed,\r\n    config\r\n  }), {\r\n    'boolean, boolean': (x, y) => x < y,\r\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\r\n      return x.lt(y) && !bigNearlyEqual(x, y, config.relTol, config.absTol);\r\n    },\r\n    'bigint, bigint': (x, y) => x < y,\r\n    'Fraction, Fraction': (x, y) => x.compare(y) === -1,\r\n    'Complex, Complex': function Complex_Complex(x, y) {\r\n      throw new TypeError('No ordering relation is defined for complex numbers');\r\n    }\r\n  }, compareUnits, matrixAlgorithmSuite({\r\n    SS: matAlgo07xSSf,\r\n    DS: matAlgo03xDSf,\r\n    Ss: matAlgo12xSfs\r\n  }));\r\n});\r\nexport var createSmallerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\r\n  var {\r\n    typed,\r\n    config\r\n  } = _ref2;\r\n  return typed(name, {\r\n    'number, number': function number_number(x, y) {\r\n      return x < y && !nearlyEqual(x, y, config.relTol, config.absTol);\r\n    }\r\n  });\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}