{"ast":null,"code":"import { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMod } from './mod.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { ArgumentsError } from '../../error/ArgumentsError.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix', 'concat'];\nvar gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\nvar gcdManyTypesSignature = \"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes);\nfunction is1d(array) {\n  return !array.some(element => Array.isArray(element));\n}\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    config,\n    round,\n    equalScalar,\n    zeros,\n    BigNumber,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var mod = createMod({\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix,\n    concat\n  });\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\r\n   * Calculate the greatest common divisor for two or more values or arrays.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.gcd(a, b)\r\n   *    math.gcd(a, b, c, ...)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.gcd(8, 12)              // returns 4\r\n   *    math.gcd(-4, 6)              // returns 2\r\n   *    math.gcd(25, 15, -10)        // returns 5\r\n   *\r\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\r\n   *\r\n   * See also:\r\n   *\r\n   *    lcm, xgcd\r\n   *\r\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\r\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\r\n   */\n  return typed(name, {\n    'number, number': _gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': (x, y) => x.gcd(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), {\n    [gcdManyTypesSignature]: typed.referToSelf(self => (a, b, args) => {\n      var res = self(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = self(res, args[i]);\n      }\n      return res;\n    }),\n    Array: typed.referToSelf(self => array => {\n      if (array.length === 1 && Array.isArray(array[0]) && is1d(array[0])) {\n        return self(...array[0]);\n      }\n      if (is1d(array)) {\n        return self(...array);\n      }\n      throw new ArgumentsError('gcd() supports only 1d matrices!');\n    }),\n    Matrix: typed.referToSelf(self => matrix => {\n      return self(matrix.toArray());\n    })\n  });\n\n  /**\r\n  * Calculate gcd for numbers\r\n  * @param {number} a\r\n  * @param {number} b\r\n  * @returns {number} Returns the greatest common denominator of a and b\r\n  * @private\r\n  */\n  function _gcdNumber(a, b) {\n    if (!isInteger(a) || !isInteger(b)) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    var r;\n    while (b !== 0) {\n      r = mod(a, b);\n      a = b;\n      b = r;\n    }\n    return a < 0 ? -a : a;\n  }\n\n  /**\r\n   * Calculate gcd for BigNumbers\r\n   * @param {BigNumber} a\r\n   * @param {BigNumber} b\r\n   * @returns {BigNumber} Returns greatest common denominator of a and b\r\n   * @private\r\n   */\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    var zero = new BigNumber(0);\n    while (!b.isZero()) {\n      var r = mod(a, b);\n      a = b;\n      b = r;\n    }\n    return a.lt(zero) ? a.neg() : a;\n  }\n});","map":{"version":3,"names":["isInteger","factory","createMod","createMatAlgo01xDSid","createMatAlgo04xSidSid","createMatAlgo10xSids","createMatrixAlgorithmSuite","ArgumentsError","name","dependencies","gcdTypes","gcdManyTypesSignature","concat","is1d","array","some","element","Array","isArray","createGcd","_ref","typed","matrix","config","round","equalScalar","zeros","BigNumber","DenseMatrix","mod","matAlgo01xDSid","matAlgo04xSidSid","matAlgo10xSids","matrixAlgorithmSuite","_gcdNumber","_gcdBigNumber","Fraction, Fraction","x","y","gcd","SS","DS","Ss","referToSelf","self","a","b","args","res","i","length","Matrix","toArray","Error","r","isInt","zero","isZero","lt","neg"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/gcd.js"],"sourcesContent":["import { isInteger } from '../../utils/number.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { createMod } from './mod.js';\r\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\r\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\r\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nimport { ArgumentsError } from '../../error/ArgumentsError.js';\r\nvar name = 'gcd';\r\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix', 'concat'];\r\nvar gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\r\nvar gcdManyTypesSignature = \"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes);\r\nfunction is1d(array) {\r\n  return !array.some(element => Array.isArray(element));\r\n}\r\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    config,\r\n    round,\r\n    equalScalar,\r\n    zeros,\r\n    BigNumber,\r\n    DenseMatrix,\r\n    concat\r\n  } = _ref;\r\n  var mod = createMod({\r\n    typed,\r\n    config,\r\n    round,\r\n    matrix,\r\n    equalScalar,\r\n    zeros,\r\n    DenseMatrix,\r\n    concat\r\n  });\r\n  var matAlgo01xDSid = createMatAlgo01xDSid({\r\n    typed\r\n  });\r\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo10xSids = createMatAlgo10xSids({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n\r\n  /**\r\n   * Calculate the greatest common divisor for two or more values or arrays.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.gcd(a, b)\r\n   *    math.gcd(a, b, c, ...)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.gcd(8, 12)              // returns 4\r\n   *    math.gcd(-4, 6)              // returns 2\r\n   *    math.gcd(25, 15, -10)        // returns 5\r\n   *\r\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\r\n   *\r\n   * See also:\r\n   *\r\n   *    lcm, xgcd\r\n   *\r\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\r\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\r\n   */\r\n  return typed(name, {\r\n    'number, number': _gcdNumber,\r\n    'BigNumber, BigNumber': _gcdBigNumber,\r\n    'Fraction, Fraction': (x, y) => x.gcd(y)\r\n  }, matrixAlgorithmSuite({\r\n    SS: matAlgo04xSidSid,\r\n    DS: matAlgo01xDSid,\r\n    Ss: matAlgo10xSids\r\n  }), {\r\n    [gcdManyTypesSignature]: typed.referToSelf(self => (a, b, args) => {\r\n      var res = self(a, b);\r\n      for (var i = 0; i < args.length; i++) {\r\n        res = self(res, args[i]);\r\n      }\r\n      return res;\r\n    }),\r\n    Array: typed.referToSelf(self => array => {\r\n      if (array.length === 1 && Array.isArray(array[0]) && is1d(array[0])) {\r\n        return self(...array[0]);\r\n      }\r\n      if (is1d(array)) {\r\n        return self(...array);\r\n      }\r\n      throw new ArgumentsError('gcd() supports only 1d matrices!');\r\n    }),\r\n    Matrix: typed.referToSelf(self => matrix => {\r\n      return self(matrix.toArray());\r\n    })\r\n  });\r\n\r\n  /**\r\n  * Calculate gcd for numbers\r\n  * @param {number} a\r\n  * @param {number} b\r\n  * @returns {number} Returns the greatest common denominator of a and b\r\n  * @private\r\n  */\r\n  function _gcdNumber(a, b) {\r\n    if (!isInteger(a) || !isInteger(b)) {\r\n      throw new Error('Parameters in function gcd must be integer numbers');\r\n    }\r\n\r\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\r\n    var r;\r\n    while (b !== 0) {\r\n      r = mod(a, b);\r\n      a = b;\r\n      b = r;\r\n    }\r\n    return a < 0 ? -a : a;\r\n  }\r\n\r\n  /**\r\n   * Calculate gcd for BigNumbers\r\n   * @param {BigNumber} a\r\n   * @param {BigNumber} b\r\n   * @returns {BigNumber} Returns greatest common denominator of a and b\r\n   * @private\r\n   */\r\n  function _gcdBigNumber(a, b) {\r\n    if (!a.isInt() || !b.isInt()) {\r\n      throw new Error('Parameters in function gcd must be integer numbers');\r\n    }\r\n\r\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\r\n    var zero = new BigNumber(0);\r\n    while (!b.isZero()) {\r\n      var r = mod(a, b);\r\n      a = b;\r\n      b = r;\r\n    }\r\n    return a.lt(zero) ? a.neg() : a;\r\n  }\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}