{"ast":null,"code":"import { deepForEach } from '../../utils/collection.js';\nimport { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar DEFAULT_NORMALIZATION = 'unbiased';\nvar name = 'variance';\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];\nexport var createVariance = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    subtract,\n    multiply,\n    divide,\n    apply,\n    isNaN\n  } = _ref;\n  /**\r\n   * Compute the variance of a matrix or a  list with values.\r\n   * In case of a multidimensional array or matrix, the variance over all\r\n   * elements will be calculated.\r\n   *\r\n   * Additionally, it is possible to compute the variance along the rows\r\n   * or columns of a matrix by specifying the dimension as the second argument.\r\n   *\r\n   * Optionally, the type of normalization can be specified as the final\r\n   * parameter. The parameter `normalization` can be one of the following values:\r\n   *\r\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\r\n   * - 'uncorrected'        The sum of squared errors is divided by n\r\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\r\n   *\r\n   *\r\n   * Note that older browser may not like the variable name `var`. In that\r\n   * case, the function can be called as `math['var'](...)` instead of\r\n   * `math.var(...)`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.variance(a, b, c, ...)\r\n   *     math.variance(A)\r\n   *     math.variance(A, normalization)\r\n   *     math.variance(A, dimension)\r\n   *     math.variance(A, dimension, normalization)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.variance(2, 4, 6)                     // returns 4\r\n   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667\r\n   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5\r\n   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4\r\n   *\r\n   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5\r\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]\r\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]\r\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, max, min, prod, std, sum\r\n   *\r\n   * @param {Array | Matrix} array\r\n   *                        A single matrix or or multiple scalar values\r\n   * @param {string} [normalization='unbiased']\r\n   *                        Determines how to normalize the variance.\r\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\r\n   * @param dimension {number | BigNumber}\r\n   *                        Determines the axis to compute the variance for a matrix\r\n   * @return {*} The variance\r\n   */\n  return typed(name, {\n    // variance([a, b, c, d, ...])\n    'Array | Matrix': function Array__Matrix(array) {\n      return _var(array, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _var,\n    // variance([a, b, c, c, ...], dim)\n    'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {\n      return _varDim(array, dim, DEFAULT_NORMALIZATION);\n    },\n    // variance([a, b, c, c, ...], dim, normalization)\n    'Array | Matrix, number | BigNumber, string': _varDim,\n    // variance(a, b, c, d, ...)\n    '...': function _(args) {\n      return _var(args, DEFAULT_NORMALIZATION);\n    }\n  });\n\n  /**\r\n   * Recursively calculate the variance of an n-dimensional array\r\n   * @param {Array} array\r\n   * @param {string} normalization\r\n   *                        Determines how to normalize the variance:\r\n   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)\r\n   *                        - 'uncorrected' The sum of squared errors is divided by n\r\n   *                        - 'biased'      The sum of squared errors is divided by (n + 1)\r\n   * @return {number | BigNumber} variance\r\n   * @private\r\n   */\n  function _var(array, normalization) {\n    var sum;\n    var num = 0;\n    if (array.length === 0) {\n      throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n    }\n\n    // calculate the mean and number of elements\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'variance', value);\n      }\n    });\n    if (num === 0) throw new Error('Cannot calculate variance of an empty array');\n    var mean = divide(sum, num);\n\n    // calculate the variance\n    sum = undefined;\n    deepForEach(array, function (value) {\n      var diff = subtract(value, mean);\n      sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));\n    });\n    if (isNaN(sum)) {\n      return sum;\n    }\n    switch (normalization) {\n      case 'uncorrected':\n        return divide(sum, num);\n      case 'biased':\n        return divide(sum, num + 1);\n      case 'unbiased':\n        {\n          var zero = isBigNumber(sum) ? sum.mul(0) : 0;\n          return num === 1 ? zero : divide(sum, num - 1);\n        }\n      default:\n        throw new Error('Unknown normalization \"' + normalization + '\". ' + 'Choose \"unbiased\" (default), \"uncorrected\", or \"biased\".');\n    }\n  }\n  function _varDim(array, dim, normalization) {\n    try {\n      if (array.length === 0) {\n        throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\n      }\n      return apply(array, dim, x => _var(x, normalization));\n    } catch (err) {\n      throw improveErrorMessage(err, 'variance');\n    }\n  }\n});","map":{"version":3,"names":["deepForEach","isBigNumber","factory","improveErrorMessage","DEFAULT_NORMALIZATION","name","dependencies","createVariance","_ref","typed","add","subtract","multiply","divide","apply","isNaN","Array__Matrix","array","_var","Array__Matrix_number__BigNumber","dim","_varDim","_","args","normalization","sum","num","length","SyntaxError","value","undefined","err","Error","mean","diff","zero","mul","x"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/statistics/variance.js"],"sourcesContent":["import { deepForEach } from '../../utils/collection.js';\r\nimport { isBigNumber } from '../../utils/is.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\r\nvar DEFAULT_NORMALIZATION = 'unbiased';\r\nvar name = 'variance';\r\nvar dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];\r\nexport var createVariance = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    add,\r\n    subtract,\r\n    multiply,\r\n    divide,\r\n    apply,\r\n    isNaN\r\n  } = _ref;\r\n  /**\r\n   * Compute the variance of a matrix or a  list with values.\r\n   * In case of a multidimensional array or matrix, the variance over all\r\n   * elements will be calculated.\r\n   *\r\n   * Additionally, it is possible to compute the variance along the rows\r\n   * or columns of a matrix by specifying the dimension as the second argument.\r\n   *\r\n   * Optionally, the type of normalization can be specified as the final\r\n   * parameter. The parameter `normalization` can be one of the following values:\r\n   *\r\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\r\n   * - 'uncorrected'        The sum of squared errors is divided by n\r\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\r\n   *\r\n   *\r\n   * Note that older browser may not like the variable name `var`. In that\r\n   * case, the function can be called as `math['var'](...)` instead of\r\n   * `math.var(...)`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.variance(a, b, c, ...)\r\n   *     math.variance(A)\r\n   *     math.variance(A, normalization)\r\n   *     math.variance(A, dimension)\r\n   *     math.variance(A, dimension, normalization)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.variance(2, 4, 6)                     // returns 4\r\n   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667\r\n   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5\r\n   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4\r\n   *\r\n   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5\r\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]\r\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]\r\n   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]\r\n   *\r\n   * See also:\r\n   *\r\n   *    mean, median, max, min, prod, std, sum\r\n   *\r\n   * @param {Array | Matrix} array\r\n   *                        A single matrix or or multiple scalar values\r\n   * @param {string} [normalization='unbiased']\r\n   *                        Determines how to normalize the variance.\r\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\r\n   * @param dimension {number | BigNumber}\r\n   *                        Determines the axis to compute the variance for a matrix\r\n   * @return {*} The variance\r\n   */\r\n  return typed(name, {\r\n    // variance([a, b, c, d, ...])\r\n    'Array | Matrix': function Array__Matrix(array) {\r\n      return _var(array, DEFAULT_NORMALIZATION);\r\n    },\r\n    // variance([a, b, c, d, ...], normalization)\r\n    'Array | Matrix, string': _var,\r\n    // variance([a, b, c, c, ...], dim)\r\n    'Array | Matrix, number | BigNumber': function Array__Matrix_number__BigNumber(array, dim) {\r\n      return _varDim(array, dim, DEFAULT_NORMALIZATION);\r\n    },\r\n    // variance([a, b, c, c, ...], dim, normalization)\r\n    'Array | Matrix, number | BigNumber, string': _varDim,\r\n    // variance(a, b, c, d, ...)\r\n    '...': function _(args) {\r\n      return _var(args, DEFAULT_NORMALIZATION);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Recursively calculate the variance of an n-dimensional array\r\n   * @param {Array} array\r\n   * @param {string} normalization\r\n   *                        Determines how to normalize the variance:\r\n   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)\r\n   *                        - 'uncorrected' The sum of squared errors is divided by n\r\n   *                        - 'biased'      The sum of squared errors is divided by (n + 1)\r\n   * @return {number | BigNumber} variance\r\n   * @private\r\n   */\r\n  function _var(array, normalization) {\r\n    var sum;\r\n    var num = 0;\r\n    if (array.length === 0) {\r\n      throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\r\n    }\r\n\r\n    // calculate the mean and number of elements\r\n    deepForEach(array, function (value) {\r\n      try {\r\n        sum = sum === undefined ? value : add(sum, value);\r\n        num++;\r\n      } catch (err) {\r\n        throw improveErrorMessage(err, 'variance', value);\r\n      }\r\n    });\r\n    if (num === 0) throw new Error('Cannot calculate variance of an empty array');\r\n    var mean = divide(sum, num);\r\n\r\n    // calculate the variance\r\n    sum = undefined;\r\n    deepForEach(array, function (value) {\r\n      var diff = subtract(value, mean);\r\n      sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));\r\n    });\r\n    if (isNaN(sum)) {\r\n      return sum;\r\n    }\r\n    switch (normalization) {\r\n      case 'uncorrected':\r\n        return divide(sum, num);\r\n      case 'biased':\r\n        return divide(sum, num + 1);\r\n      case 'unbiased':\r\n        {\r\n          var zero = isBigNumber(sum) ? sum.mul(0) : 0;\r\n          return num === 1 ? zero : divide(sum, num - 1);\r\n        }\r\n      default:\r\n        throw new Error('Unknown normalization \"' + normalization + '\". ' + 'Choose \"unbiased\" (default), \"uncorrected\", or \"biased\".');\r\n    }\r\n  }\r\n  function _varDim(array, dim, normalization) {\r\n    try {\r\n      if (array.length === 0) {\r\n        throw new SyntaxError('Function variance requires one or more parameters (0 provided)');\r\n      }\r\n      return apply(array, dim, x => _var(x, normalization));\r\n    } catch (err) {\r\n      throw improveErrorMessage(err, 'variance');\r\n    }\r\n  }\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}