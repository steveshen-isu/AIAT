{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { unaryMinusNumber } from '../../plain/number/index.js';\nvar name = 'unaryMinus';\nvar dependencies = ['typed'];\nexport var createUnaryMinus = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Inverse the sign of a value, apply a unary minus operation.\r\n   *\r\n   * For matrices, the function is evaluated element wise. Boolean values and\r\n   * strings will be converted to a number. For complex numbers, both real and\r\n   * complex value are inverted.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.unaryMinus(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.unaryMinus(3.5)      // returns -3.5\r\n   *    math.unaryMinus(-4.2)     // returns 4.2\r\n   *\r\n   * See also:\r\n   *\r\n   *    add, subtract, unaryPlus\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\r\n   * @return {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\r\n   */\n  return typed(name, {\n    number: unaryMinusNumber,\n    'Complex | BigNumber | Fraction': x => x.neg(),\n    bigint: x => -x,\n    Unit: typed.referToSelf(self => x => {\n      var res = x.clone();\n      res.value = typed.find(self, res.valueType())(x.value);\n      return res;\n    }),\n    // deep map collection, skip zeros since unaryMinus(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true))\n\n    // TODO: add support for string\n  });\n});","map":{"version":3,"names":["factory","deepMap","unaryMinusNumber","name","dependencies","createUnaryMinus","_ref","typed","number","x","neg","bigint","Unit","referToSelf","self","res","clone","value","find","valueType"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/unaryMinus.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { unaryMinusNumber } from '../../plain/number/index.js';\r\nvar name = 'unaryMinus';\r\nvar dependencies = ['typed'];\r\nexport var createUnaryMinus = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Inverse the sign of a value, apply a unary minus operation.\r\n   *\r\n   * For matrices, the function is evaluated element wise. Boolean values and\r\n   * strings will be converted to a number. For complex numbers, both real and\r\n   * complex value are inverted.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.unaryMinus(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.unaryMinus(3.5)      // returns -3.5\r\n   *    math.unaryMinus(-4.2)     // returns 4.2\r\n   *\r\n   * See also:\r\n   *\r\n   *    add, subtract, unaryPlus\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\r\n   * @return {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\r\n   */\r\n  return typed(name, {\r\n    number: unaryMinusNumber,\r\n    'Complex | BigNumber | Fraction': x => x.neg(),\r\n    bigint: x => -x,\r\n    Unit: typed.referToSelf(self => x => {\r\n      var res = x.clone();\r\n      res.value = typed.find(self, res.valueType())(x.value);\r\n      return res;\r\n    }),\r\n    // deep map collection, skip zeros since unaryMinus(0) = 0\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true))\r\n\r\n    // TODO: add support for string\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,IAAIC,IAAI,GAAG,YAAY;AACvB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,gBAAgB,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC/E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAEN,gBAAgB;IACxB,gCAAgC,EAAEO,CAAC,IAAIA,CAAC,CAACC,GAAG,CAAC,CAAC;IAC9CC,MAAM,EAAEF,CAAC,IAAI,CAACA,CAAC;IACfG,IAAI,EAAEL,KAAK,CAACM,WAAW,CAACC,IAAI,IAAIL,CAAC,IAAI;MACnC,IAAIM,GAAG,GAAGN,CAAC,CAACO,KAAK,CAAC,CAAC;MACnBD,GAAG,CAACE,KAAK,GAAGV,KAAK,CAACW,IAAI,CAACJ,IAAI,EAAEC,GAAG,CAACI,SAAS,CAAC,CAAC,CAAC,CAACV,CAAC,CAACQ,KAAK,CAAC;MACtD,OAAOF,GAAG;IACZ,CAAC,CAAC;IACF;IACA,gBAAgB,EAAER,KAAK,CAACM,WAAW,CAACC,IAAI,IAAIL,CAAC,IAAIR,OAAO,CAACQ,CAAC,EAAEK,IAAI,EAAE,IAAI,CAAC;;IAEvE;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}