{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { log1p as _log1p } from '../../utils/number.js';\nvar name = 'log1p';\nvar dependencies = ['typed', 'config', 'divideScalar', 'log', 'Complex'];\nexport var createLog1p = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    divideScalar,\n    log,\n    Complex\n  } = _ref;\n  /**\r\n   * Calculate the logarithm of a `value+1`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.log1p(x)\r\n   *    math.log1p(x, base)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.log1p(2.5)                 // returns 1.252762968495368\r\n   *    math.exp(math.log1p(1.4))       // returns 2.4\r\n   *\r\n   *    math.pow(10, 4)                 // returns 10000\r\n   *    math.log1p(9999, 10)            // returns 4\r\n   *    math.log1p(9999) / math.log(10) // returns 4\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, log, log2, log10\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            Value for which to calculate the logarithm of `x+1`.\r\n   * @param {number | BigNumber | Complex} [base=e]\r\n   *            Optional base for the logarithm. If not provided, the natural\r\n   *            logarithm of `x+1` is calculated.\r\n   * @return {number | BigNumber | Complex | Array | Matrix}\r\n   *            Returns the logarithm of `x+1`\r\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 || config.predictable) {\n        return _log1p(x);\n      } else {\n        // negative value -> complex value computation\n        return _log1pComplex(new Complex(x, 0));\n      }\n    },\n    Complex: _log1pComplex,\n    BigNumber: function BigNumber(x) {\n      var y = x.plus(1);\n      if (!y.isNegative() || config.predictable) {\n        return y.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log1pComplex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self)),\n    'any, any': typed.referToSelf(self => (x, base) => {\n      // calculate logarithm for a specified base, log1p(x, base)\n      return divideScalar(self(x), log(base));\n    })\n  });\n\n  /**\r\n   * Calculate the natural logarithm of a complex number + 1\r\n   * @param {Complex} x\r\n   * @returns {Complex}\r\n   * @private\r\n   */\n  function _log1pComplex(x) {\n    var xRe1p = x.re + 1;\n    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));\n  }\n});","map":{"version":3,"names":["factory","deepMap","log1p","_log1p","name","dependencies","createLog1p","_ref","typed","config","divideScalar","log","Complex","number","x","predictable","_log1pComplex","BigNumber","y","plus","isNegative","ln","toNumber","referToSelf","self","base","xRe1p","re","Math","sqrt","im","atan2"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/log1p.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { log1p as _log1p } from '../../utils/number.js';\r\nvar name = 'log1p';\r\nvar dependencies = ['typed', 'config', 'divideScalar', 'log', 'Complex'];\r\nexport var createLog1p = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    divideScalar,\r\n    log,\r\n    Complex\r\n  } = _ref;\r\n  /**\r\n   * Calculate the logarithm of a `value+1`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.log1p(x)\r\n   *    math.log1p(x, base)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.log1p(2.5)                 // returns 1.252762968495368\r\n   *    math.exp(math.log1p(1.4))       // returns 2.4\r\n   *\r\n   *    math.pow(10, 4)                 // returns 10000\r\n   *    math.log1p(9999, 10)            // returns 4\r\n   *    math.log1p(9999) / math.log(10) // returns 4\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, log, log2, log10\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            Value for which to calculate the logarithm of `x+1`.\r\n   * @param {number | BigNumber | Complex} [base=e]\r\n   *            Optional base for the logarithm. If not provided, the natural\r\n   *            logarithm of `x+1` is calculated.\r\n   * @return {number | BigNumber | Complex | Array | Matrix}\r\n   *            Returns the logarithm of `x+1`\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      if (x >= -1 || config.predictable) {\r\n        return _log1p(x);\r\n      } else {\r\n        // negative value -> complex value computation\r\n        return _log1pComplex(new Complex(x, 0));\r\n      }\r\n    },\r\n    Complex: _log1pComplex,\r\n    BigNumber: function BigNumber(x) {\r\n      var y = x.plus(1);\r\n      if (!y.isNegative() || config.predictable) {\r\n        return y.ln();\r\n      } else {\r\n        // downgrade to number, return Complex valued result\r\n        return _log1pComplex(new Complex(x.toNumber(), 0));\r\n      }\r\n    },\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self)),\r\n    'any, any': typed.referToSelf(self => (x, base) => {\r\n      // calculate logarithm for a specified base, log1p(x, base)\r\n      return divideScalar(self(x), log(base));\r\n    })\r\n  });\r\n\r\n  /**\r\n   * Calculate the natural logarithm of a complex number + 1\r\n   * @param {Complex} x\r\n   * @returns {Complex}\r\n   * @private\r\n   */\r\n  function _log1pComplex(x) {\r\n    var xRe1p = x.re + 1;\r\n    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,KAAK,IAAIC,MAAM,QAAQ,uBAAuB;AACvD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,KAAK,EAAE,SAAS,CAAC;AACxE,OAAO,IAAIC,WAAW,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC1E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,YAAY;IACZC,GAAG;IACHC;EACF,CAAC,GAAGL,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBS,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,IAAI,CAAC,CAAC,IAAIL,MAAM,CAACM,WAAW,EAAE;QACjC,OAAOZ,MAAM,CAACW,CAAC,CAAC;MAClB,CAAC,MAAM;QACL;QACA,OAAOE,aAAa,CAAC,IAAIJ,OAAO,CAACE,CAAC,EAAE,CAAC,CAAC,CAAC;MACzC;IACF,CAAC;IACDF,OAAO,EAAEI,aAAa;IACtBC,SAAS,EAAE,SAASA,SAASA,CAACH,CAAC,EAAE;MAC/B,IAAII,CAAC,GAAGJ,CAAC,CAACK,IAAI,CAAC,CAAC,CAAC;MACjB,IAAI,CAACD,CAAC,CAACE,UAAU,CAAC,CAAC,IAAIX,MAAM,CAACM,WAAW,EAAE;QACzC,OAAOG,CAAC,CAACG,EAAE,CAAC,CAAC;MACf,CAAC,MAAM;QACL;QACA,OAAOL,aAAa,CAAC,IAAIJ,OAAO,CAACE,CAAC,CAACQ,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACpD;IACF,CAAC;IACD,gBAAgB,EAAEd,KAAK,CAACe,WAAW,CAACC,IAAI,IAAIV,CAAC,IAAIb,OAAO,CAACa,CAAC,EAAEU,IAAI,CAAC,CAAC;IAClE,UAAU,EAAEhB,KAAK,CAACe,WAAW,CAACC,IAAI,IAAI,CAACV,CAAC,EAAEW,IAAI,KAAK;MACjD;MACA,OAAOf,YAAY,CAACc,IAAI,CAACV,CAAC,CAAC,EAAEH,GAAG,CAACc,IAAI,CAAC,CAAC;IACzC,CAAC;EACH,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;EACE,SAAST,aAAaA,CAACF,CAAC,EAAE;IACxB,IAAIY,KAAK,GAAGZ,CAAC,CAACa,EAAE,GAAG,CAAC;IACpB,OAAO,IAAIf,OAAO,CAACgB,IAAI,CAACjB,GAAG,CAACiB,IAAI,CAACC,IAAI,CAACH,KAAK,GAAGA,KAAK,GAAGZ,CAAC,CAACgB,EAAE,GAAGhB,CAAC,CAACgB,EAAE,CAAC,CAAC,EAAEF,IAAI,CAACG,KAAK,CAACjB,CAAC,CAACgB,EAAE,EAAEJ,KAAK,CAAC,CAAC;EAC/F;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}