{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { cosh as coshNumber } from '../../utils/number.js';\nvar name = 'cosh';\nvar dependencies = ['typed'];\nexport var createCosh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Calculate the hyperbolic cosine of a value,\r\n   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic cosine, this function does\r\n   * not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.cosh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.cosh(0.5)       // returns number 1.1276259652063807\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, tanh\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic cosine of x\r\n   */\n  return typed(name, {\n    number: coshNumber,\n    'Complex | BigNumber': x => x.cosh()\n  });\n});","map":{"version":3,"names":["factory","cosh","coshNumber","name","dependencies","createCosh","_ref","typed","number","x"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/trigonometry/cosh.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { cosh as coshNumber } from '../../utils/number.js';\r\nvar name = 'cosh';\r\nvar dependencies = ['typed'];\r\nexport var createCosh = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Calculate the hyperbolic cosine of a value,\r\n   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic cosine, this function does\r\n   * not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.cosh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.cosh(0.5)       // returns number 1.1276259652063807\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, tanh\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic cosine of x\r\n   */\r\n  return typed(name, {\r\n    number: coshNumber,\r\n    'Complex | BigNumber': x => x.cosh()\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,IAAI,IAAIC,UAAU,QAAQ,uBAAuB;AAC1D,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,UAAU,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAEN,UAAU;IAClB,qBAAqB,EAAEO,CAAC,IAAIA,CAAC,CAACR,IAAI,CAAC;EACrC,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}