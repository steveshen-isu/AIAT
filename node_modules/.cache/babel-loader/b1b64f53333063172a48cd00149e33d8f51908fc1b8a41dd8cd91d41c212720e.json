{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport { factory } from '../../utils/factory.js';\nimport { format } from '../../utils/string.js';\nimport { createComplexEigs } from './eigs/complexEigs.js';\nimport { createRealSymmetric } from './eigs/realSymmetric.js';\nimport { typeOf, isNumber, isBigNumber, isComplex, isFraction } from '../../utils/is.js';\nvar name = 'eigs';\n\n// The absolute state of math.js's dependency system:\nvar dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'divideScalar', 'inv', 'bignumber', 'multiply', 'add', 'larger', 'column', 'flatten', 'number', 'complex', 'sqrt', 'diag', 'size', 'reshape', 'qr', 'usolve', 'usolveAll', 'im', 're', 'smaller', 'matrixFromColumns', 'dot'];\nexport var createEigs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    matrix,\n    addScalar,\n    subtract,\n    equal,\n    abs,\n    atan,\n    cos,\n    sin,\n    multiplyScalar,\n    divideScalar,\n    inv,\n    bignumber,\n    multiply,\n    add,\n    larger,\n    column,\n    flatten,\n    number,\n    complex,\n    sqrt,\n    diag,\n    size,\n    reshape,\n    qr,\n    usolve,\n    usolveAll,\n    im,\n    re,\n    smaller,\n    matrixFromColumns,\n    dot\n  } = _ref;\n  var doRealSymmetric = createRealSymmetric({\n    config,\n    addScalar,\n    subtract,\n    column,\n    flatten,\n    equal,\n    abs,\n    atan,\n    cos,\n    sin,\n    multiplyScalar,\n    inv,\n    bignumber,\n    complex,\n    multiply,\n    add\n  });\n  var doComplexEigs = createComplexEigs({\n    config,\n    addScalar,\n    subtract,\n    multiply,\n    multiplyScalar,\n    flatten,\n    divideScalar,\n    sqrt,\n    abs,\n    bignumber,\n    diag,\n    size,\n    reshape,\n    qr,\n    inv,\n    usolve,\n    usolveAll,\n    equal,\n    complex,\n    larger,\n    smaller,\n    matrixFromColumns,\n    dot\n  });\n\n  /**\r\n   * Compute eigenvalues and optionally eigenvectors of a square matrix.\r\n   * The eigenvalues are sorted by their absolute value, ascending, and\r\n   * returned as a vector in the `values` property of the returned project.\r\n   * An eigenvalue with algebraic multiplicity k will be listed k times, so\r\n   * that the returned `values` vector always has length equal to the size\r\n   * of the input matrix.\r\n   *\r\n   * The `eigenvectors` property of the return value provides the eigenvectors.\r\n   * It is an array of plain objects: the `value` property of each gives the\r\n   * associated eigenvalue, and the `vector` property gives the eigenvector\r\n   * itself. Note that the same `value` property will occur as many times in\r\n   * the list provided by `eigenvectors` as the geometric multiplicity of\r\n   * that value.\r\n   *\r\n   * If the algorithm fails to converge, it will throw an error â€“\r\n   * in that case, however, you may still find useful information\r\n   * in `err.values` and `err.vectors`.\r\n   *\r\n   * Note that the 'precision' option does not directly specify the _accuracy_\r\n   * of the returned eigenvalues. Rather, it determines how small an entry\r\n   * of the iterative approximations to an upper triangular matrix must be\r\n   * in order to be considered zero. The actual accuracy of the returned\r\n   * eigenvalues may be greater or less than the precision, depending on the\r\n   * conditioning of the matrix and how far apart or close the actual\r\n   * eigenvalues are. Note that currently, relatively simple, \"traditional\"\r\n   * methods of eigenvalue computation are being used; this is not a modern,\r\n   * high-precision eigenvalue computation. That said, it should typically\r\n   * produce fairly reasonable results.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.eigs(x, [prec])\r\n   *     math.eigs(x, {options})\r\n   *\r\n   * Examples:\r\n   *\r\n   *     const { eigs, multiply, column, transpose, matrixFromColumns } = math\r\n   *     const H = [[5, 2.3], [2.3, 1]]\r\n   *     const ans = eigs(H) // returns {values: [E1,E2...sorted], eigenvectors: [{value: E1, vector: v2}, {value: e, vector: v2}, ...]\r\n   *     const E = ans.values\r\n   *     const V = ans.eigenvectors\r\n   *     multiply(H, V[0].vector)) // returns multiply(E[0], V[0].vector))\r\n   *     const U = matrixFromColumns(...V.map(obj => obj.vector))\r\n   *     const UTxHxU = multiply(transpose(U), H, U) // diagonalizes H if possible\r\n   *     E[0] == UTxHxU[0][0]  // returns true always\r\n   *\r\n   *     // Compute only approximate eigenvalues:\r\n   *     const {values} = eigs(H, {eigenvectors: false, precision: 1e-6})\r\n   *\r\n   * See also:\r\n   *\r\n   *     inv\r\n   *\r\n   * @param {Array | Matrix} x  Matrix to be diagonalized\r\n   *\r\n   * @param {number | BigNumber | OptsObject} [opts] Object with keys `precision`, defaulting to config.relTol, and `eigenvectors`, defaulting to true and specifying whether to compute eigenvectors. If just a number, specifies precision.\r\n   * @return {{values: Array|Matrix, eigenvectors?: Array<EVobj>}} Object containing an array of eigenvalues and an array of {value: number|BigNumber, vector: Array|Matrix} objects. The eigenvectors property is undefined if eigenvectors were not requested.\r\n   *\r\n   */\n  return typed('eigs', {\n    // The conversion to matrix in the first two implementations,\n    // just to convert back to an array right away in\n    // computeValuesAndVectors, is unfortunate, and should perhaps be\n    // streamlined. It is done because the Matrix object carries some\n    // type information about its entries, and so constructing the matrix\n    // is a roundabout way of doing type detection.\n    Array: function Array(x) {\n      return doEigs(matrix(x));\n    },\n    'Array, number|BigNumber': function Array_numberBigNumber(x, prec) {\n      return doEigs(matrix(x), {\n        precision: prec\n      });\n    },\n    'Array, Object'(x, opts) {\n      return doEigs(matrix(x), opts);\n    },\n    Matrix: function Matrix(mat) {\n      return doEigs(mat, {\n        matricize: true\n      });\n    },\n    'Matrix, number|BigNumber': function Matrix_numberBigNumber(mat, prec) {\n      return doEigs(mat, {\n        precision: prec,\n        matricize: true\n      });\n    },\n    'Matrix, Object': function Matrix_Object(mat, opts) {\n      var useOpts = {\n        matricize: true\n      };\n      _extends(useOpts, opts);\n      return doEigs(mat, useOpts);\n    }\n  });\n  function doEigs(mat) {\n    var _opts$precision;\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var computeVectors = 'eigenvectors' in opts ? opts.eigenvectors : true;\n    var prec = (_opts$precision = opts.precision) !== null && _opts$precision !== void 0 ? _opts$precision : config.relTol;\n    var result = computeValuesAndVectors(mat, prec, computeVectors);\n    if (opts.matricize) {\n      result.values = matrix(result.values);\n      if (computeVectors) {\n        result.eigenvectors = result.eigenvectors.map(_ref2 => {\n          var {\n            value,\n            vector\n          } = _ref2;\n          return {\n            value,\n            vector: matrix(vector)\n          };\n        });\n      }\n    }\n    if (computeVectors) {\n      Object.defineProperty(result, 'vectors', {\n        enumerable: false,\n        // to make sure that the eigenvectors can still be\n        // converted to string.\n        get: () => {\n          throw new Error('eigs(M).vectors replaced with eigs(M).eigenvectors');\n        }\n      });\n    }\n    return result;\n  }\n  function computeValuesAndVectors(mat, prec, computeVectors) {\n    var arr = mat.toArray(); // NOTE: arr is guaranteed to be unaliased\n    // and so safe to modify in place\n    var asize = mat.size();\n    if (asize.length !== 2 || asize[0] !== asize[1]) {\n      throw new RangeError(\"Matrix must be square (size: \".concat(format(asize), \")\"));\n    }\n    var N = asize[0];\n    if (isReal(arr, N, prec)) {\n      coerceReal(arr, N); // modifies arr by side effect\n\n      if (isSymmetric(arr, N, prec)) {\n        var _type = coerceTypes(mat, arr, N); // modifies arr by side effect\n        return doRealSymmetric(arr, N, prec, _type, computeVectors);\n      }\n    }\n    var type = coerceTypes(mat, arr, N); // modifies arr by side effect\n    return doComplexEigs(arr, N, prec, type, computeVectors);\n  }\n\n  /** @return {boolean} */\n  function isSymmetric(arr, N, prec) {\n    for (var i = 0; i < N; i++) {\n      for (var j = i; j < N; j++) {\n        // TODO proper comparison of bignum and frac\n        if (larger(bignumber(abs(subtract(arr[i][j], arr[j][i]))), prec)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** @return {boolean} */\n  function isReal(arr, N, prec) {\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        // TODO proper comparison of bignum and frac\n        if (larger(bignumber(abs(im(arr[i][j]))), prec)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function coerceReal(arr, N) {\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        arr[i][j] = re(arr[i][j]);\n      }\n    }\n  }\n\n  /** @return {'number' | 'BigNumber' | 'Complex'} */\n  function coerceTypes(mat, arr, N) {\n    /** @type {string} */\n    var type = mat.datatype();\n    if (type === 'number' || type === 'BigNumber' || type === 'Complex') {\n      return type;\n    }\n    var hasNumber = false;\n    var hasBig = false;\n    var hasComplex = false;\n    for (var i = 0; i < N; i++) {\n      for (var j = 0; j < N; j++) {\n        var el = arr[i][j];\n        if (isNumber(el) || isFraction(el)) {\n          hasNumber = true;\n        } else if (isBigNumber(el)) {\n          hasBig = true;\n        } else if (isComplex(el)) {\n          hasComplex = true;\n        } else {\n          throw TypeError('Unsupported type in Matrix: ' + typeOf(el));\n        }\n      }\n    }\n    if (hasBig && hasComplex) {\n      console.warn('Complex BigNumbers not supported, this operation will lose precission.');\n    }\n    if (hasComplex) {\n      for (var _i = 0; _i < N; _i++) {\n        for (var _j = 0; _j < N; _j++) {\n          arr[_i][_j] = complex(arr[_i][_j]);\n        }\n      }\n      return 'Complex';\n    }\n    if (hasBig) {\n      for (var _i2 = 0; _i2 < N; _i2++) {\n        for (var _j2 = 0; _j2 < N; _j2++) {\n          arr[_i2][_j2] = bignumber(arr[_i2][_j2]);\n        }\n      }\n      return 'BigNumber';\n    }\n    if (hasNumber) {\n      for (var _i3 = 0; _i3 < N; _i3++) {\n        for (var _j3 = 0; _j3 < N; _j3++) {\n          arr[_i3][_j3] = number(arr[_i3][_j3]);\n        }\n      }\n      return 'number';\n    } else {\n      throw TypeError('Matrix contains unsupported types only.');\n    }\n  }\n});","map":{"version":3,"names":["_extends","factory","format","createComplexEigs","createRealSymmetric","typeOf","isNumber","isBigNumber","isComplex","isFraction","name","dependencies","createEigs","_ref","config","typed","matrix","addScalar","subtract","equal","abs","atan","cos","sin","multiplyScalar","divideScalar","inv","bignumber","multiply","add","larger","column","flatten","number","complex","sqrt","diag","size","reshape","qr","usolve","usolveAll","im","re","smaller","matrixFromColumns","dot","doRealSymmetric","doComplexEigs","Array","x","doEigs","Array_numberBigNumber","prec","precision","Array, Object","opts","Matrix","mat","matricize","Matrix_numberBigNumber","Matrix_Object","useOpts","_opts$precision","arguments","length","undefined","computeVectors","eigenvectors","relTol","result","computeValuesAndVectors","values","map","_ref2","value","vector","Object","defineProperty","enumerable","get","Error","arr","toArray","asize","RangeError","concat","N","isReal","coerceReal","isSymmetric","_type","coerceTypes","type","i","j","datatype","hasNumber","hasBig","hasComplex","el","TypeError","console","warn","_i","_j","_i2","_j2","_i3","_j3"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/matrix/eigs.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\r\nimport { factory } from '../../utils/factory.js';\r\nimport { format } from '../../utils/string.js';\r\nimport { createComplexEigs } from './eigs/complexEigs.js';\r\nimport { createRealSymmetric } from './eigs/realSymmetric.js';\r\nimport { typeOf, isNumber, isBigNumber, isComplex, isFraction } from '../../utils/is.js';\r\nvar name = 'eigs';\r\n\r\n// The absolute state of math.js's dependency system:\r\nvar dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'divideScalar', 'inv', 'bignumber', 'multiply', 'add', 'larger', 'column', 'flatten', 'number', 'complex', 'sqrt', 'diag', 'size', 'reshape', 'qr', 'usolve', 'usolveAll', 'im', 're', 'smaller', 'matrixFromColumns', 'dot'];\r\nexport var createEigs = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    config,\r\n    typed,\r\n    matrix,\r\n    addScalar,\r\n    subtract,\r\n    equal,\r\n    abs,\r\n    atan,\r\n    cos,\r\n    sin,\r\n    multiplyScalar,\r\n    divideScalar,\r\n    inv,\r\n    bignumber,\r\n    multiply,\r\n    add,\r\n    larger,\r\n    column,\r\n    flatten,\r\n    number,\r\n    complex,\r\n    sqrt,\r\n    diag,\r\n    size,\r\n    reshape,\r\n    qr,\r\n    usolve,\r\n    usolveAll,\r\n    im,\r\n    re,\r\n    smaller,\r\n    matrixFromColumns,\r\n    dot\r\n  } = _ref;\r\n  var doRealSymmetric = createRealSymmetric({\r\n    config,\r\n    addScalar,\r\n    subtract,\r\n    column,\r\n    flatten,\r\n    equal,\r\n    abs,\r\n    atan,\r\n    cos,\r\n    sin,\r\n    multiplyScalar,\r\n    inv,\r\n    bignumber,\r\n    complex,\r\n    multiply,\r\n    add\r\n  });\r\n  var doComplexEigs = createComplexEigs({\r\n    config,\r\n    addScalar,\r\n    subtract,\r\n    multiply,\r\n    multiplyScalar,\r\n    flatten,\r\n    divideScalar,\r\n    sqrt,\r\n    abs,\r\n    bignumber,\r\n    diag,\r\n    size,\r\n    reshape,\r\n    qr,\r\n    inv,\r\n    usolve,\r\n    usolveAll,\r\n    equal,\r\n    complex,\r\n    larger,\r\n    smaller,\r\n    matrixFromColumns,\r\n    dot\r\n  });\r\n\r\n  /**\r\n   * Compute eigenvalues and optionally eigenvectors of a square matrix.\r\n   * The eigenvalues are sorted by their absolute value, ascending, and\r\n   * returned as a vector in the `values` property of the returned project.\r\n   * An eigenvalue with algebraic multiplicity k will be listed k times, so\r\n   * that the returned `values` vector always has length equal to the size\r\n   * of the input matrix.\r\n   *\r\n   * The `eigenvectors` property of the return value provides the eigenvectors.\r\n   * It is an array of plain objects: the `value` property of each gives the\r\n   * associated eigenvalue, and the `vector` property gives the eigenvector\r\n   * itself. Note that the same `value` property will occur as many times in\r\n   * the list provided by `eigenvectors` as the geometric multiplicity of\r\n   * that value.\r\n   *\r\n   * If the algorithm fails to converge, it will throw an error â€“\r\n   * in that case, however, you may still find useful information\r\n   * in `err.values` and `err.vectors`.\r\n   *\r\n   * Note that the 'precision' option does not directly specify the _accuracy_\r\n   * of the returned eigenvalues. Rather, it determines how small an entry\r\n   * of the iterative approximations to an upper triangular matrix must be\r\n   * in order to be considered zero. The actual accuracy of the returned\r\n   * eigenvalues may be greater or less than the precision, depending on the\r\n   * conditioning of the matrix and how far apart or close the actual\r\n   * eigenvalues are. Note that currently, relatively simple, \"traditional\"\r\n   * methods of eigenvalue computation are being used; this is not a modern,\r\n   * high-precision eigenvalue computation. That said, it should typically\r\n   * produce fairly reasonable results.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.eigs(x, [prec])\r\n   *     math.eigs(x, {options})\r\n   *\r\n   * Examples:\r\n   *\r\n   *     const { eigs, multiply, column, transpose, matrixFromColumns } = math\r\n   *     const H = [[5, 2.3], [2.3, 1]]\r\n   *     const ans = eigs(H) // returns {values: [E1,E2...sorted], eigenvectors: [{value: E1, vector: v2}, {value: e, vector: v2}, ...]\r\n   *     const E = ans.values\r\n   *     const V = ans.eigenvectors\r\n   *     multiply(H, V[0].vector)) // returns multiply(E[0], V[0].vector))\r\n   *     const U = matrixFromColumns(...V.map(obj => obj.vector))\r\n   *     const UTxHxU = multiply(transpose(U), H, U) // diagonalizes H if possible\r\n   *     E[0] == UTxHxU[0][0]  // returns true always\r\n   *\r\n   *     // Compute only approximate eigenvalues:\r\n   *     const {values} = eigs(H, {eigenvectors: false, precision: 1e-6})\r\n   *\r\n   * See also:\r\n   *\r\n   *     inv\r\n   *\r\n   * @param {Array | Matrix} x  Matrix to be diagonalized\r\n   *\r\n   * @param {number | BigNumber | OptsObject} [opts] Object with keys `precision`, defaulting to config.relTol, and `eigenvectors`, defaulting to true and specifying whether to compute eigenvectors. If just a number, specifies precision.\r\n   * @return {{values: Array|Matrix, eigenvectors?: Array<EVobj>}} Object containing an array of eigenvalues and an array of {value: number|BigNumber, vector: Array|Matrix} objects. The eigenvectors property is undefined if eigenvectors were not requested.\r\n   *\r\n   */\r\n  return typed('eigs', {\r\n    // The conversion to matrix in the first two implementations,\r\n    // just to convert back to an array right away in\r\n    // computeValuesAndVectors, is unfortunate, and should perhaps be\r\n    // streamlined. It is done because the Matrix object carries some\r\n    // type information about its entries, and so constructing the matrix\r\n    // is a roundabout way of doing type detection.\r\n    Array: function Array(x) {\r\n      return doEigs(matrix(x));\r\n    },\r\n    'Array, number|BigNumber': function Array_numberBigNumber(x, prec) {\r\n      return doEigs(matrix(x), {\r\n        precision: prec\r\n      });\r\n    },\r\n    'Array, Object'(x, opts) {\r\n      return doEigs(matrix(x), opts);\r\n    },\r\n    Matrix: function Matrix(mat) {\r\n      return doEigs(mat, {\r\n        matricize: true\r\n      });\r\n    },\r\n    'Matrix, number|BigNumber': function Matrix_numberBigNumber(mat, prec) {\r\n      return doEigs(mat, {\r\n        precision: prec,\r\n        matricize: true\r\n      });\r\n    },\r\n    'Matrix, Object': function Matrix_Object(mat, opts) {\r\n      var useOpts = {\r\n        matricize: true\r\n      };\r\n      _extends(useOpts, opts);\r\n      return doEigs(mat, useOpts);\r\n    }\r\n  });\r\n  function doEigs(mat) {\r\n    var _opts$precision;\r\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n    var computeVectors = 'eigenvectors' in opts ? opts.eigenvectors : true;\r\n    var prec = (_opts$precision = opts.precision) !== null && _opts$precision !== void 0 ? _opts$precision : config.relTol;\r\n    var result = computeValuesAndVectors(mat, prec, computeVectors);\r\n    if (opts.matricize) {\r\n      result.values = matrix(result.values);\r\n      if (computeVectors) {\r\n        result.eigenvectors = result.eigenvectors.map(_ref2 => {\r\n          var {\r\n            value,\r\n            vector\r\n          } = _ref2;\r\n          return {\r\n            value,\r\n            vector: matrix(vector)\r\n          };\r\n        });\r\n      }\r\n    }\r\n    if (computeVectors) {\r\n      Object.defineProperty(result, 'vectors', {\r\n        enumerable: false,\r\n        // to make sure that the eigenvectors can still be\r\n        // converted to string.\r\n        get: () => {\r\n          throw new Error('eigs(M).vectors replaced with eigs(M).eigenvectors');\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  function computeValuesAndVectors(mat, prec, computeVectors) {\r\n    var arr = mat.toArray(); // NOTE: arr is guaranteed to be unaliased\r\n    // and so safe to modify in place\r\n    var asize = mat.size();\r\n    if (asize.length !== 2 || asize[0] !== asize[1]) {\r\n      throw new RangeError(\"Matrix must be square (size: \".concat(format(asize), \")\"));\r\n    }\r\n    var N = asize[0];\r\n    if (isReal(arr, N, prec)) {\r\n      coerceReal(arr, N); // modifies arr by side effect\r\n\r\n      if (isSymmetric(arr, N, prec)) {\r\n        var _type = coerceTypes(mat, arr, N); // modifies arr by side effect\r\n        return doRealSymmetric(arr, N, prec, _type, computeVectors);\r\n      }\r\n    }\r\n    var type = coerceTypes(mat, arr, N); // modifies arr by side effect\r\n    return doComplexEigs(arr, N, prec, type, computeVectors);\r\n  }\r\n\r\n  /** @return {boolean} */\r\n  function isSymmetric(arr, N, prec) {\r\n    for (var i = 0; i < N; i++) {\r\n      for (var j = i; j < N; j++) {\r\n        // TODO proper comparison of bignum and frac\r\n        if (larger(bignumber(abs(subtract(arr[i][j], arr[j][i]))), prec)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** @return {boolean} */\r\n  function isReal(arr, N, prec) {\r\n    for (var i = 0; i < N; i++) {\r\n      for (var j = 0; j < N; j++) {\r\n        // TODO proper comparison of bignum and frac\r\n        if (larger(bignumber(abs(im(arr[i][j]))), prec)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  function coerceReal(arr, N) {\r\n    for (var i = 0; i < N; i++) {\r\n      for (var j = 0; j < N; j++) {\r\n        arr[i][j] = re(arr[i][j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @return {'number' | 'BigNumber' | 'Complex'} */\r\n  function coerceTypes(mat, arr, N) {\r\n    /** @type {string} */\r\n    var type = mat.datatype();\r\n    if (type === 'number' || type === 'BigNumber' || type === 'Complex') {\r\n      return type;\r\n    }\r\n    var hasNumber = false;\r\n    var hasBig = false;\r\n    var hasComplex = false;\r\n    for (var i = 0; i < N; i++) {\r\n      for (var j = 0; j < N; j++) {\r\n        var el = arr[i][j];\r\n        if (isNumber(el) || isFraction(el)) {\r\n          hasNumber = true;\r\n        } else if (isBigNumber(el)) {\r\n          hasBig = true;\r\n        } else if (isComplex(el)) {\r\n          hasComplex = true;\r\n        } else {\r\n          throw TypeError('Unsupported type in Matrix: ' + typeOf(el));\r\n        }\r\n      }\r\n    }\r\n    if (hasBig && hasComplex) {\r\n      console.warn('Complex BigNumbers not supported, this operation will lose precission.');\r\n    }\r\n    if (hasComplex) {\r\n      for (var _i = 0; _i < N; _i++) {\r\n        for (var _j = 0; _j < N; _j++) {\r\n          arr[_i][_j] = complex(arr[_i][_j]);\r\n        }\r\n      }\r\n      return 'Complex';\r\n    }\r\n    if (hasBig) {\r\n      for (var _i2 = 0; _i2 < N; _i2++) {\r\n        for (var _j2 = 0; _j2 < N; _j2++) {\r\n          arr[_i2][_j2] = bignumber(arr[_i2][_j2]);\r\n        }\r\n      }\r\n      return 'BigNumber';\r\n    }\r\n    if (hasNumber) {\r\n      for (var _i3 = 0; _i3 < N; _i3++) {\r\n        for (var _j3 = 0; _j3 < N; _j3++) {\r\n          arr[_i3][_j3] = number(arr[_i3][_j3]);\r\n        }\r\n      }\r\n      return 'number';\r\n    } else {\r\n      throw TypeError('Matrix contains unsupported types only.');\r\n    }\r\n  }\r\n});"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,gCAAgC;AACrD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,iBAAiB,QAAQ,uBAAuB;AACzD,SAASC,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,MAAM,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,mBAAmB;AACxF,IAAIC,IAAI,GAAG,MAAM;;AAEjB;AACA,IAAIC,YAAY,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,gBAAgB,EAAE,cAAc,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,mBAAmB,EAAE,KAAK,CAAC;AAC/V,OAAO,IAAIC,UAAU,GAAG,eAAeX,OAAO,CAACS,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,MAAM;IACNC,KAAK;IACLC,MAAM;IACNC,SAAS;IACTC,QAAQ;IACRC,KAAK;IACLC,GAAG;IACHC,IAAI;IACJC,GAAG;IACHC,GAAG;IACHC,cAAc;IACdC,YAAY;IACZC,GAAG;IACHC,SAAS;IACTC,QAAQ;IACRC,GAAG;IACHC,MAAM;IACNC,MAAM;IACNC,OAAO;IACPC,MAAM;IACNC,OAAO;IACPC,IAAI;IACJC,IAAI;IACJC,IAAI;IACJC,OAAO;IACPC,EAAE;IACFC,MAAM;IACNC,SAAS;IACTC,EAAE;IACFC,EAAE;IACFC,OAAO;IACPC,iBAAiB;IACjBC;EACF,CAAC,GAAGjC,IAAI;EACR,IAAIkC,eAAe,GAAG3C,mBAAmB,CAAC;IACxCU,MAAM;IACNG,SAAS;IACTC,QAAQ;IACRa,MAAM;IACNC,OAAO;IACPb,KAAK;IACLC,GAAG;IACHC,IAAI;IACJC,GAAG;IACHC,GAAG;IACHC,cAAc;IACdE,GAAG;IACHC,SAAS;IACTO,OAAO;IACPN,QAAQ;IACRC;EACF,CAAC,CAAC;EACF,IAAImB,aAAa,GAAG7C,iBAAiB,CAAC;IACpCW,MAAM;IACNG,SAAS;IACTC,QAAQ;IACRU,QAAQ;IACRJ,cAAc;IACdQ,OAAO;IACPP,YAAY;IACZU,IAAI;IACJf,GAAG;IACHO,SAAS;IACTS,IAAI;IACJC,IAAI;IACJC,OAAO;IACPC,EAAE;IACFb,GAAG;IACHc,MAAM;IACNC,SAAS;IACTtB,KAAK;IACLe,OAAO;IACPJ,MAAM;IACNc,OAAO;IACPC,iBAAiB;IACjBC;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO/B,KAAK,CAAC,MAAM,EAAE;IACnB;IACA;IACA;IACA;IACA;IACA;IACAkC,KAAK,EAAE,SAASA,KAAKA,CAACC,CAAC,EAAE;MACvB,OAAOC,MAAM,CAACnC,MAAM,CAACkC,CAAC,CAAC,CAAC;IAC1B,CAAC;IACD,yBAAyB,EAAE,SAASE,qBAAqBA,CAACF,CAAC,EAAEG,IAAI,EAAE;MACjE,OAAOF,MAAM,CAACnC,MAAM,CAACkC,CAAC,CAAC,EAAE;QACvBI,SAAS,EAAED;MACb,CAAC,CAAC;IACJ,CAAC;IACD,eAAeE,CAACL,CAAC,EAAEM,IAAI,EAAE;MACvB,OAAOL,MAAM,CAACnC,MAAM,CAACkC,CAAC,CAAC,EAAEM,IAAI,CAAC;IAChC,CAAC;IACDC,MAAM,EAAE,SAASA,MAAMA,CAACC,GAAG,EAAE;MAC3B,OAAO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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}