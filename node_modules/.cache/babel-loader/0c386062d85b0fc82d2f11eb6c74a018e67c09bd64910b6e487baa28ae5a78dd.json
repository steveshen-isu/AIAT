{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'acos';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAcos = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\r\n   * Calculate the inverse cosine of a value.\r\n   *\r\n   * To avoid confusion with the matrix arccosine, this function does not\r\n   * apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.acos(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.acos(0.5)           // returns number 1.0471975511965979\r\n   *    math.acos(math.cos(1.5)) // returns number 1.5\r\n   *\r\n   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i\r\n   *\r\n   * See also:\r\n   *\r\n   *    cos, atan, asin\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} The arc cosine of x\r\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= -1 && x <= 1 || config.predictable) {\n        return Math.acos(x);\n      } else {\n        return new Complex(x, 0).acos();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.acos();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.acos();\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createAcos","_ref","typed","config","Complex","number","x","predictable","Math","acos","BigNumber"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/trigonometry/acos.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'acos';\r\nvar dependencies = ['typed', 'config', 'Complex'];\r\nexport var createAcos = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    Complex\r\n  } = _ref;\r\n  /**\r\n   * Calculate the inverse cosine of a value.\r\n   *\r\n   * To avoid confusion with the matrix arccosine, this function does not\r\n   * apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.acos(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.acos(0.5)           // returns number 1.0471975511965979\r\n   *    math.acos(math.cos(1.5)) // returns number 1.5\r\n   *\r\n   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i\r\n   *\r\n   * See also:\r\n   *\r\n   *    cos, atan, asin\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} The arc cosine of x\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      if (x >= -1 && x <= 1 || config.predictable) {\r\n        return Math.acos(x);\r\n      } else {\r\n        return new Complex(x, 0).acos();\r\n      }\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.acos();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.acos();\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;AACjD,OAAO,IAAIC,UAAU,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBO,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,IAAI,CAAC,CAAC,IAAIA,CAAC,IAAI,CAAC,IAAIH,MAAM,CAACI,WAAW,EAAE;QAC3C,OAAOC,IAAI,CAACC,IAAI,CAACH,CAAC,CAAC;MACrB,CAAC,MAAM;QACL,OAAO,IAAIF,OAAO,CAACE,CAAC,EAAE,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC;MACjC;IACF,CAAC;IACDL,OAAO,EAAE,SAASA,OAAOA,CAACE,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACG,IAAI,CAAC,CAAC;IACjB,CAAC;IACDC,SAAS,EAAE,SAASA,SAASA,CAACJ,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACG,IAAI,CAAC,CAAC;IACjB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}