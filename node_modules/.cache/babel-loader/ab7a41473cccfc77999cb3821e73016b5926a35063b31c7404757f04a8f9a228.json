{"ast":null,"code":"import { isBigNumber, isMatrix, isArray } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'index';\nvar dependencies = ['typed', 'Index'];\nexport var createIndex = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index\n  } = _ref;\n  /**\r\n   * Create an index. An Index can store ranges having start, step, and end\r\n   * for multiple dimensions.\r\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.index(range1, range2, ...)\r\n   *\r\n   * Where each range can be any of:\r\n   *\r\n   * - A number\r\n   * - A string for getting/setting an object property\r\n   * - An instance of `Range`\r\n   * - A one-dimensional Array or a Matrix with numbers or booleans\r\n   *\r\n   * Indexes must be zero-based, integer numbers.\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const b = [1, 2, 3, 4, 5]\r\n   *    math.subset(b, math.index([1, 2, 3]))                         // returns [2, 3, 4]\r\n   *    math.subset(b, math.index([false, true, true, true, false]))  // returns [2, 3, 4]\r\n   *\r\n   *    const a = math.matrix([[1, 2], [3, 4]])\r\n   *    a.subset(math.index(0, 1))             // returns 2\r\n   *    a.subset(math.index(0, [false, true])) // returns 2\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, complex, matrix, number, string, unit\r\n   *\r\n   * @param {...*} ranges   Zero or more ranges or numbers.\r\n   * @return {Index}        Returns the created index\r\n   */\n  return typed(name, {\n    '...number | string | BigNumber | Range | Array | Matrix': function number__string__BigNumber__Range__Array__Matrix(args) {\n      var ranges = args.map(function (arg) {\n        if (isBigNumber(arg)) {\n          return arg.toNumber(); // convert BigNumber to Number\n        } else if (isArray(arg) || isMatrix(arg)) {\n          return arg.map(function (elem) {\n            // convert BigNumber to Number\n            return isBigNumber(elem) ? elem.toNumber() : elem;\n          });\n        } else {\n          return arg;\n        }\n      });\n      var res = new Index();\n      Index.apply(res, ranges);\n      return res;\n    }\n  });\n});","map":{"version":3,"names":["isBigNumber","isMatrix","isArray","factory","name","dependencies","createIndex","_ref","typed","Index","number__string__BigNumber__Range__Array__Matrix","args","ranges","map","arg","toNumber","elem","res","apply"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/type/matrix/function/index.js"],"sourcesContent":["import { isBigNumber, isMatrix, isArray } from '../../../utils/is.js';\r\nimport { factory } from '../../../utils/factory.js';\r\nvar name = 'index';\r\nvar dependencies = ['typed', 'Index'];\r\nexport var createIndex = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    Index\r\n  } = _ref;\r\n  /**\r\n   * Create an index. An Index can store ranges having start, step, and end\r\n   * for multiple dimensions.\r\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.index(range1, range2, ...)\r\n   *\r\n   * Where each range can be any of:\r\n   *\r\n   * - A number\r\n   * - A string for getting/setting an object property\r\n   * - An instance of `Range`\r\n   * - A one-dimensional Array or a Matrix with numbers or booleans\r\n   *\r\n   * Indexes must be zero-based, integer numbers.\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const b = [1, 2, 3, 4, 5]\r\n   *    math.subset(b, math.index([1, 2, 3]))                         // returns [2, 3, 4]\r\n   *    math.subset(b, math.index([false, true, true, true, false]))  // returns [2, 3, 4]\r\n   *\r\n   *    const a = math.matrix([[1, 2], [3, 4]])\r\n   *    a.subset(math.index(0, 1))             // returns 2\r\n   *    a.subset(math.index(0, [false, true])) // returns 2\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, complex, matrix, number, string, unit\r\n   *\r\n   * @param {...*} ranges   Zero or more ranges or numbers.\r\n   * @return {Index}        Returns the created index\r\n   */\r\n  return typed(name, {\r\n    '...number | string | BigNumber | Range | Array | Matrix': function number__string__BigNumber__Range__Array__Matrix(args) {\r\n      var ranges = args.map(function (arg) {\r\n        if (isBigNumber(arg)) {\r\n          return arg.toNumber(); // convert BigNumber to Number\r\n        } else if (isArray(arg) || isMatrix(arg)) {\r\n          return arg.map(function (elem) {\r\n            // convert BigNumber to Number\r\n            return isBigNumber(elem) ? elem.toNumber() : elem;\r\n          });\r\n        } else {\r\n          return arg;\r\n        }\r\n      });\r\n      var res = new Index();\r\n      Index.apply(res, ranges);\r\n      return res;\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,WAAW,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,sBAAsB;AACrE,SAASC,OAAO,QAAQ,2BAA2B;AACnD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;AACrC,OAAO,IAAIC,WAAW,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC1E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,yDAAyD,EAAE,SAASM,+CAA+CA,CAACC,IAAI,EAAE;MACxH,IAAIC,MAAM,GAAGD,IAAI,CAACE,GAAG,CAAC,UAAUC,GAAG,EAAE;QACnC,IAAId,WAAW,CAACc,GAAG,CAAC,EAAE;UACpB,OAAOA,GAAG,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,MAAM,IAAIb,OAAO,CAACY,GAAG,CAAC,IAAIb,QAAQ,CAACa,GAAG,CAAC,EAAE;UACxC,OAAOA,GAAG,CAACD,GAAG,CAAC,UAAUG,IAAI,EAAE;YAC7B;YACA,OAAOhB,WAAW,CAACgB,IAAI,CAAC,GAAGA,IAAI,CAACD,QAAQ,CAAC,CAAC,GAAGC,IAAI;UACnD,CAAC,CAAC;QACJ,CAAC,MAAM;UACL,OAAOF,GAAG;QACZ;MACF,CAAC,CAAC;MACF,IAAIG,GAAG,GAAG,IAAIR,KAAK,CAAC,CAAC;MACrBA,KAAK,CAACS,KAAK,CAACD,GAAG,EAAEL,MAAM,CAAC;MACxB,OAAOK,GAAG;IACZ;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}