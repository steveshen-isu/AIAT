{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ROG\\\\ai-solver\\\\src\\\\components\\\\chatbox.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, memo } from 'react';\nimport 'C:/Users/ROG/node_modules/katex/dist/katex.min.css';\nimport katex from 'katex';\nimport Typewriter from './Typewriter';\nimport TypewriterResponse from './TypeWriterResponse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst currentUrl = window.location.href;\nconst ipAddress = currentUrl.split(':')[1].split('/')[2];\nfunction ChatBox() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [message, setMessage] = useState('');\n  const [responses, setResponses] = useState([]);\n  const [pastedImage, setPastedImage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const sendMessage = async () => {\n    if (!message && !pastedImage) return;\n    setLoading(true);\n    try {\n      const fullConversation = [...responses.map(item => [{\n        role: 'user',\n        content: item.query\n      }, {\n        role: 'assistant',\n        content: item.response\n      }]).flat(), {\n        role: 'user',\n        content: message\n      } // Add the current message as the latest user input\n      ];\n      const requestBody = {\n        conversation: fullConversation,\n        image: pastedImage\n      };\n      const response = await fetch('http://' + ipAddress + ':200/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      const data = await response.json();\n      setResponses(prev => [...prev, {\n        query: message,\n        response: data.response\n      }]);\n      setMessage('');\n      setPastedImage(null);\n    } catch (error) {\n      console.error('Error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const typewriterEffectResponse = async (content, setDisplayContent) => {\n    let isMounted = true;\n    content = content.replace(/\\\\\\[\\s*/g, '\\\\['); // Replace \\[ with \\( and remove leading spaces\n    content = content.replace(/\\s*\\\\\\]/g, '\\\\]'); // Replace \\] with \\) and remove trailing spaces\n    console.log(content);\n    const regex = /(\\\\\\(.*?\\\\\\))|(\\\\\\[[\\s\\S]*?\\\\\\])|(\\\\begin\\{array\\}[\\s\\S]*?\\\\end\\{array\\})|(\\\\textit\\{.*?\\})|(\\\\textbf\\{.*?\\})/g;\n    const parts = content.split(regex).filter(part => part !== null && part !== undefined && part !== '');\n    let displayContent = '';\n    console.log(parts);\n    for (const part of parts) {\n      if (part.startsWith('\\\\(') || part.startsWith('\\\\[') || part.startsWith('\\\\begin') || part.startsWith('\\\\textit') || part.startsWith('\\\\textbf')) {\n        // Process LaTeX content\n\n        try {\n          const isDisplayMode = part.startsWith('\\\\[');\n          const mathContent = part.replace(/\\\\[\\(\\[\\)\\]]/g, ''); // Strip the delimiters\n          const renderedMath = katex.renderToString(mathContent, {\n            throwOnError: false,\n            displayMode: isDisplayMode\n          });\n\n          // Simulate typing the LaTeX\n          for (let i = 0; i < renderedMath.length; i++) {\n            displayContent += renderedMath[i];\n            if (isMounted) setDisplayContent(displayContent);\n            /*                     await delayRandomTime(); \r\n             */\n          }\n        } catch (e) {\n          console.error('Error rendering LaTeX:', e);\n          displayContent += `<span class=\"error\">Failed to render LaTeX: ${part}</span>`;\n          if (isMounted) setDisplayContent(displayContent);\n        }\n      } else {\n        // Process plain text content\n        for (let i = 0; i < part.length; i++) {\n          displayContent += part[i] === '\\n' ? '<br />' : part[i];\n          if (isMounted) setDisplayContent(displayContent);\n          await textdelayRandomTime();\n        }\n      }\n    }\n  };\n  const textdelayRandomTime = () => {\n    return new Promise(resolve => {\n      const randomDelay = Math.floor(Math.random() * 20) + 5; // Delay between 50ms to 250ms\n      setTimeout(resolve, randomDelay);\n    });\n  };\n\n  // Main component to handle the content rendering\n\n  const TypewriterRendererResponse = /*#__PURE__*/_s( /*#__PURE__*/memo(_s(({\n    content\n  }) => {\n    _s();\n    const [displayContent, setDisplayContent] = useState('');\n    useEffect(() => {\n      let isMounted = true;\n      // Start the typewriter effect when the component loads\n\n      setDisplayContent(''); // Reset before running\n      typewriterEffectResponse(content, setDisplayContent);\n      return () => {\n        isMounted = false;\n      };\n    }, [content]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'left',\n          // Align text to the left\n          width: '60vw',\n          margin: '0 auto',\n          // Center the div horizontally\n          padding: '10px',\n          // Add padding\n          maxWidth: '1300px',\n          // Set a max width for the container\n          marginLeft: '1vw',\n          // Add some space from the left\n          border: '0px solid gray',\n          // Gray border\n          backgroundColor: 'black',\n          // Black background\n          color: 'white',\n          // White text color for contrast\n          fontFamily: 'Segoe UI, sans-serif',\n          // Font family\n          fontSize: '18px',\n          // Font size\n          fontWeight: 'lighter',\n          // Bold text\n          fontStyle: 'normal',\n          // Italic text\n          lineHeight: '1.6',\n          // Line height for readability\n          letterSpacing: '1px' // Space between letters\n        },\n        dangerouslySetInnerHTML: {\n          __html: displayContent\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this);\n  }, \"CWF/jOCr/6dzKRDifOVVHM2M7Es=\")), \"CWF/jOCr/6dzKRDifOVVHM2M7Es=\");\n  const handlePaste = event => {\n    const items = event.clipboardData.items;\n    for (const item of items) {\n      if (item.type.startsWith('image/')) {\n        const file = item.getAsFile();\n        const reader = new FileReader();\n        reader.onload = e => {\n          setPastedImage(e.target.result);\n        };\n        reader.readAsDataURL(file);\n        break;\n      }\n    }\n  };\n  const removeImage = () => {\n    setPastedImage(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: /*#__PURE__*/_jsxDEV(Typewriter, {\n        text: \"Talk to me about your question or copy your image including your question\",\n        speed: 20\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"custom-textarea\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      onPaste: handlePaste,\n      rows: \"4\",\n      cols: \"50\",\n      placeholder: \"Type your message or paste an image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), pastedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: /*#__PURE__*/_jsxDEV(Typewriter, {\n          text: \"pasted image:\",\n          speed: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: pastedImage,\n        alt: \"Pasted content\",\n        style: {\n          maxWidth: '100%',\n          height: 'auto'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: removeImage,\n        style: {\n          marginTop: '10px'\n        },\n        children: \"Remove Pasted Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      disabled: loading,\n      style: {\n        marginTop: '10px'\n      },\n      children: loading ? 'Sending...' : 'Send'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: responses.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"You:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(TypewriterResponse, {\n            content: item.query\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"GPT:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 28\n          }, this), \"                         \", /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(TypewriterResponse, {\n              content: item.response\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 64\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n}\n_s2(ChatBox, \"ftp0sRsK8+NLlqHVUSzIplEBqZE=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","memo","katex","Typewriter","TypewriterResponse","jsxDEV","_jsxDEV","currentUrl","window","location","href","ipAddress","split","ChatBox","_s2","_s","$RefreshSig$","message","setMessage","responses","setResponses","pastedImage","setPastedImage","loading","setLoading","sendMessage","fullConversation","map","item","role","content","query","response","flat","requestBody","conversation","image","fetch","method","headers","body","JSON","stringify","data","json","prev","error","console","typewriterEffectResponse","setDisplayContent","isMounted","replace","log","regex","parts","filter","part","undefined","displayContent","startsWith","isDisplayMode","mathContent","renderedMath","renderToString","throwOnError","displayMode","i","length","e","textdelayRandomTime","Promise","resolve","randomDelay","Math","floor","random","setTimeout","TypewriterRendererResponse","children","style","textAlign","width","margin","padding","maxWidth","marginLeft","border","backgroundColor","color","fontFamily","fontSize","fontWeight","fontStyle","lineHeight","letterSpacing","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","handlePaste","event","items","clipboardData","type","file","getAsFile","reader","FileReader","onload","target","result","readAsDataURL","removeImage","text","speed","className","value","onChange","onPaste","rows","cols","placeholder","src","alt","height","onClick","marginTop","disabled","index","marginBottom","_c","$RefreshReg$"],"sources":["C:/Users/ROG/ai-solver/src/components/chatbox.js"],"sourcesContent":["import React, { useState, useEffect, memo } from 'react';\r\nimport 'C:/Users/ROG/node_modules/katex/dist/katex.min.css';\r\nimport katex from 'katex';\r\nimport Typewriter from './Typewriter';\r\nimport TypewriterResponse from './TypeWriterResponse';\r\nconst currentUrl = window.location.href;\r\n\r\nconst ipAddress = currentUrl.split(':')[1].split('/')[2];\r\nfunction ChatBox() {\r\n    const [message, setMessage] = useState('');\r\n    const [responses, setResponses] = useState([]);\r\n    const [pastedImage, setPastedImage] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const sendMessage = async () => {\r\n        if (!message && !pastedImage) return;\r\n\r\n        setLoading(true);\r\n        try {\r\n            const fullConversation = [\r\n                ...responses.map((item) => [\r\n                  { role: 'user', content: item.query },\r\n                  { role: 'assistant', content: item.response },\r\n                ]).flat(),\r\n                { role: 'user', content: message }, // Add the current message as the latest user input\r\n              ];\r\n              const requestBody = {\r\n                conversation: fullConversation,\r\n                image: pastedImage,\r\n              };\r\n\r\n            const response = await fetch('http://' + ipAddress + ':200/api/chat', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(requestBody),\r\n            });\r\n\r\n            const data = await response.json();\r\n            setResponses((prev) => [\r\n                ...prev,\r\n                { query: message, response: data.response },\r\n            ]);\r\n            setMessage('');\r\n            setPastedImage(null);\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const typewriterEffectResponse = async (content, setDisplayContent) => {\r\n        let isMounted = true;\r\n        content = content.replace(/\\\\\\[\\s*/g, '\\\\[');  // Replace \\[ with \\( and remove leading spaces\r\n        content = content.replace(/\\s*\\\\\\]/g, '\\\\]');  // Replace \\] with \\) and remove trailing spaces\r\n        console.log(content);\r\n        const regex = /(\\\\\\(.*?\\\\\\))|(\\\\\\[[\\s\\S]*?\\\\\\])|(\\\\begin\\{array\\}[\\s\\S]*?\\\\end\\{array\\})|(\\\\textit\\{.*?\\})|(\\\\textbf\\{.*?\\})/g;\r\n        const parts = content.split(regex).filter(part => part !== null && part !== undefined && part !== '');\r\n        let displayContent = '';\r\n        console.log(parts);\r\n        for (const part of parts) {\r\n            if (part.startsWith('\\\\(') || part.startsWith('\\\\[') || part.startsWith('\\\\begin') || part.startsWith('\\\\textit') || part.startsWith('\\\\textbf')) {\r\n                // Process LaTeX content\r\n\r\n                try {\r\n                    const isDisplayMode = part.startsWith('\\\\[');\r\n                    const mathContent = part.replace(/\\\\[\\(\\[\\)\\]]/g, '');  // Strip the delimiters\r\n                    const renderedMath = katex.renderToString(mathContent, { throwOnError: false, displayMode: isDisplayMode });\r\n\r\n                    // Simulate typing the LaTeX\r\n                    for (let i = 0; i < renderedMath.length; i++) {\r\n                        displayContent += renderedMath[i];\r\n\r\n\r\n                        if (isMounted) setDisplayContent(displayContent);\r\n/*                     await delayRandomTime(); \r\n */                }\r\n                } catch (e) {\r\n                    console.error('Error rendering LaTeX:', e);\r\n                    displayContent += `<span class=\"error\">Failed to render LaTeX: ${part}</span>`;\r\n                    if (isMounted) setDisplayContent(displayContent);\r\n                }\r\n            } else {\r\n                // Process plain text content\r\n                for (let i = 0; i < part.length; i++) {\r\n                    displayContent += part[i] === '\\n' ? '<br />' : part[i];\r\n                    if (isMounted) setDisplayContent(displayContent);\r\n                    await textdelayRandomTime();\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    const textdelayRandomTime = () => {\r\n        return new Promise(resolve => {\r\n            const randomDelay = Math.floor(Math.random() * 20) + 5; // Delay between 50ms to 250ms\r\n            setTimeout(resolve, randomDelay);\r\n        });\r\n    };\r\n\r\n    // Main component to handle the content rendering\r\n\r\n\r\n\r\n    const TypewriterRendererResponse = memo(({ content }) => {\r\n        const [displayContent, setDisplayContent] = useState('');\r\n\r\n        useEffect(() => {\r\n            let isMounted = true;\r\n            // Start the typewriter effect when the component loads\r\n\r\n            setDisplayContent(''); // Reset before running\r\n            typewriterEffectResponse(content, setDisplayContent);\r\n            return () => {\r\n                isMounted = false;\r\n            }\r\n        }, [content]);\r\n\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                        textAlign: 'left',         // Align text to the left\r\n                        width: '60vw',\r\n                        margin: '0 auto',          // Center the div horizontally\r\n                        padding: '10px',           // Add padding\r\n                        maxWidth: '1300px',         // Set a max width for the container\r\n                        marginLeft: '1vw',        // Add some space from the left\r\n                        border: '0px solid gray',  // Gray border\r\n                        backgroundColor: 'black',  // Black background\r\n                        color: 'white',            // White text color for contrast\r\n                        fontFamily: 'Segoe UI, sans-serif',  // Font family\r\n                        fontSize: '18px',          // Font size\r\n                        fontWeight: 'lighter',        // Bold text\r\n                        fontStyle: 'normal',       // Italic text\r\n                        lineHeight: '1.6',         // Line height for readability\r\n                        letterSpacing: '1px'       // Space between letters\r\n                    }}\r\n                    dangerouslySetInnerHTML={{ __html: displayContent }}\r\n                />\r\n            </div>\r\n        );\r\n    });\r\n\r\n\r\n    const handlePaste = (event) => {\r\n        const items = event.clipboardData.items;\r\n        for (const item of items) {\r\n            if (item.type.startsWith('image/')) {\r\n                const file = item.getAsFile();\r\n                const reader = new FileReader();\r\n\r\n                reader.onload = (e) => {\r\n                    setPastedImage(e.target.result);\r\n                };\r\n\r\n                reader.readAsDataURL(file);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n\r\n    const removeImage = () => {\r\n        setPastedImage(null);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>\r\n                <Typewriter text=\"Talk to me about your question or copy your image including your question\" speed={20} />\r\n            </h1>\r\n\r\n            <textarea\r\n                className=\"custom-textarea\"\r\n                value={message}\r\n                onChange={(e) => setMessage(e.target.value)}\r\n                onPaste={handlePaste}\r\n                rows=\"4\"\r\n                cols=\"50\"\r\n                placeholder=\"Type your message or paste an image...\"\r\n            />\r\n\r\n            {pastedImage && (\r\n                <div>\r\n                    <h1>\r\n                        <Typewriter text=\"pasted image:\" speed={20} />\r\n                    </h1>\r\n                    <img src={pastedImage} alt=\"Pasted content\" style={{ maxWidth: '100%', height: 'auto' }} />\r\n                    <button onClick={removeImage} style={{ marginTop: '10px' }}>Remove Pasted Image</button>\r\n                </div>\r\n            )}\r\n\r\n            <button onClick={sendMessage} disabled={loading} style={{ marginTop: '10px' }}>\r\n                {loading ? 'Sending...' : 'Send'}\r\n            </button>\r\n\r\n            <div>\r\n                {responses.map((item, index) => (\r\n                    <div key={index} style={{ marginBottom: '20px' }}>\r\n                        <p><b>You:</b>\r\n                            <TypewriterResponse content={item.query} />\r\n                        </p>\r\n                        <p><b>GPT:</b>                         <div>\r\n                            <TypewriterResponse content={item.response} />\r\n                        </div></p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatBox;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,IAAI,QAAQ,OAAO;AACxD,OAAO,oDAAoD;AAC3D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,kBAAkB,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACtD,MAAMC,UAAU,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI;AAEvC,MAAMC,SAAS,GAAGJ,UAAU,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACxD,SAASC,OAAOA,CAAA,EAAG;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACf,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACwB,OAAO,EAAEC,UAAU,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAM0B,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAACR,OAAO,IAAI,CAACI,WAAW,EAAE;IAE9BG,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACA,MAAME,gBAAgB,GAAG,CACrB,GAAGP,SAAS,CAACQ,GAAG,CAAEC,IAAI,IAAK,CACzB;QAAEC,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEF,IAAI,CAACG;MAAM,CAAC,EACrC;QAAEF,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAEF,IAAI,CAACI;MAAS,CAAC,CAC9C,CAAC,CAACC,IAAI,CAAC,CAAC,EACT;QAAEJ,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEb;MAAQ,CAAC,CAAE;MAAA,CACrC;MACD,MAAMiB,WAAW,GAAG;QAClBC,YAAY,EAAET,gBAAgB;QAC9BU,KAAK,EAAEf;MACT,CAAC;MAEH,MAAMW,QAAQ,GAAG,MAAMK,KAAK,CAAC,SAAS,GAAG1B,SAAS,GAAG,eAAe,EAAE;QAClE2B,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW;MACpC,CAAC,CAAC;MAEF,MAAMS,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClCxB,YAAY,CAAEyB,IAAI,IAAK,CACnB,GAAGA,IAAI,EACP;QAAEd,KAAK,EAAEd,OAAO;QAAEe,QAAQ,EAAEW,IAAI,CAACX;MAAS,CAAC,CAC9C,CAAC;MACFd,UAAU,CAAC,EAAE,CAAC;MACdI,cAAc,CAAC,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC,CAAC,SAAS;MACNtB,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,MAAMwB,wBAAwB,GAAG,MAAAA,CAAOlB,OAAO,EAAEmB,iBAAiB,KAAK;IACnE,IAAIC,SAAS,GAAG,IAAI;IACpBpB,OAAO,GAAGA,OAAO,CAACqB,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAE;IAC/CrB,OAAO,GAAGA,OAAO,CAACqB,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAE;IAC/CJ,OAAO,CAACK,GAAG,CAACtB,OAAO,CAAC;IACpB,MAAMuB,KAAK,GAAG,gHAAgH;IAC9H,MAAMC,KAAK,GAAGxB,OAAO,CAAClB,KAAK,CAACyC,KAAK,CAAC,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKC,SAAS,IAAID,IAAI,KAAK,EAAE,CAAC;IACrG,IAAIE,cAAc,GAAG,EAAE;IACvBX,OAAO,CAACK,GAAG,CAACE,KAAK,CAAC;IAClB,KAAK,MAAME,IAAI,IAAIF,KAAK,EAAE;MACtB,IAAIE,IAAI,CAACG,UAAU,CAAC,KAAK,CAAC,IAAIH,IAAI,CAACG,UAAU,CAAC,KAAK,CAAC,IAAIH,IAAI,CAACG,UAAU,CAAC,SAAS,CAAC,IAAIH,IAAI,CAACG,UAAU,CAAC,UAAU,CAAC,IAAIH,IAAI,CAACG,UAAU,CAAC,UAAU,CAAC,EAAE;QAC9I;;QAEA,IAAI;UACA,MAAMC,aAAa,GAAGJ,IAAI,CAACG,UAAU,CAAC,KAAK,CAAC;UAC5C,MAAME,WAAW,GAAGL,IAAI,CAACL,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,CAAE;UACxD,MAAMW,YAAY,GAAG5D,KAAK,CAAC6D,cAAc,CAACF,WAAW,EAAE;YAAEG,YAAY,EAAE,KAAK;YAAEC,WAAW,EAAEL;UAAc,CAAC,CAAC;;UAE3G;UACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,YAAY,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;YAC1CR,cAAc,IAAII,YAAY,CAACI,CAAC,CAAC;YAGjC,IAAIhB,SAAS,EAAED,iBAAiB,CAACS,cAAc,CAAC;YACxE;AACA;UAAmB;QACH,CAAC,CAAC,OAAOU,CAAC,EAAE;UACRrB,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEsB,CAAC,CAAC;UAC1CV,cAAc,IAAK,+CAA8CF,IAAK,SAAQ;UAC9E,IAAIN,SAAS,EAAED,iBAAiB,CAACS,cAAc,CAAC;QACpD;MACJ,CAAC,MAAM;QACH;QACA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,IAAI,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;UAClCR,cAAc,IAAIF,IAAI,CAACU,CAAC,CAAC,KAAK,IAAI,GAAG,QAAQ,GAAGV,IAAI,CAACU,CAAC,CAAC;UACvD,IAAIhB,SAAS,EAAED,iBAAiB,CAACS,cAAc,CAAC;UAChD,MAAMW,mBAAmB,CAAC,CAAC;QAC/B;MACJ;IACJ;EACJ,CAAC;EAGD,MAAMA,mBAAmB,GAAGA,CAAA,KAAM;IAC9B,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;MAC1B,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;MACxDC,UAAU,CAACL,OAAO,EAAEC,WAAW,CAAC;IACpC,CAAC,CAAC;EACN,CAAC;;EAED;;EAIA,MAAMK,0BAA0B,gBAAA9D,EAAA,eAAGd,IAAI,CAAAc,EAAA,CAAC,CAAC;IAAEe;EAAQ,CAAC,KAAK;IAAAf,EAAA;IACrD,MAAM,CAAC2C,cAAc,EAAET,iBAAiB,CAAC,GAAGlD,QAAQ,CAAC,EAAE,CAAC;IAExDC,SAAS,CAAC,MAAM;MACZ,IAAIkD,SAAS,GAAG,IAAI;MACpB;;MAEAD,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;MACvBD,wBAAwB,CAAClB,OAAO,EAAEmB,iBAAiB,CAAC;MACpD,OAAO,MAAM;QACTC,SAAS,GAAG,KAAK;MACrB,CAAC;IACL,CAAC,EAAE,CAACpB,OAAO,CAAC,CAAC;IAEb,oBACIxB,OAAA;MAAAwE,QAAA,eACIxE,OAAA;QACIyE,KAAK,EAAE;UACHC,SAAS,EAAE,MAAM;UAAU;UAC3BC,KAAK,EAAE,MAAM;UACbC,MAAM,EAAE,QAAQ;UAAW;UAC3BC,OAAO,EAAE,MAAM;UAAY;UAC3BC,QAAQ,EAAE,QAAQ;UAAU;UAC5BC,UAAU,EAAE,KAAK;UAAS;UAC1BC,MAAM,EAAE,gBAAgB;UAAG;UAC3BC,eAAe,EAAE,OAAO;UAAG;UAC3BC,KAAK,EAAE,OAAO;UAAa;UAC3BC,UAAU,EAAE,sBAAsB;UAAG;UACrCC,QAAQ,EAAE,MAAM;UAAW;UAC3BC,UAAU,EAAE,SAAS;UAAS;UAC9BC,SAAS,EAAE,QAAQ;UAAQ;UAC3BC,UAAU,EAAE,KAAK;UAAU;UAC3BC,aAAa,EAAE,KAAK,CAAO;QAC/B,CAAE;QACFC,uBAAuB,EAAE;UAAEC,MAAM,EAAEtC;QAAe;MAAE;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAEd,CAAC,kCAAC;EAGF,MAAMC,WAAW,GAAIC,KAAK,IAAK;IAC3B,MAAMC,KAAK,GAAGD,KAAK,CAACE,aAAa,CAACD,KAAK;IACvC,KAAK,MAAM3E,IAAI,IAAI2E,KAAK,EAAE;MACtB,IAAI3E,IAAI,CAAC6E,IAAI,CAAC9C,UAAU,CAAC,QAAQ,CAAC,EAAE;QAChC,MAAM+C,IAAI,GAAG9E,IAAI,CAAC+E,SAAS,CAAC,CAAC;QAC7B,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;QAE/BD,MAAM,CAACE,MAAM,GAAI1C,CAAC,IAAK;UACnB9C,cAAc,CAAC8C,CAAC,CAAC2C,MAAM,CAACC,MAAM,CAAC;QACnC,CAAC;QAEDJ,MAAM,CAACK,aAAa,CAACP,IAAI,CAAC;QAC1B;MACJ;IACJ;EACJ,CAAC;EAED,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACtB5F,cAAc,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,oBACIhB,OAAA;IAAAwE,QAAA,gBACIxE,OAAA;MAAAwE,QAAA,eACIxE,OAAA,CAACH,UAAU;QAACgH,IAAI,EAAC,2EAA2E;QAACC,KAAK,EAAE;MAAG;QAAAnB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1G,CAAC,eAEL9F,OAAA;MACI+G,SAAS,EAAC,iBAAiB;MAC3BC,KAAK,EAAErG,OAAQ;MACfsG,QAAQ,EAAGnD,CAAC,IAAKlD,UAAU,CAACkD,CAAC,CAAC2C,MAAM,CAACO,KAAK,CAAE;MAC5CE,OAAO,EAAEnB,WAAY;MACrBoB,IAAI,EAAC,GAAG;MACRC,IAAI,EAAC,IAAI;MACTC,WAAW,EAAC;IAAwC;MAAA1B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC,EAED/E,WAAW,iBACRf,OAAA;MAAAwE,QAAA,gBACIxE,OAAA;QAAAwE,QAAA,eACIxE,OAAA,CAACH,UAAU;UAACgH,IAAI,EAAC,eAAe;UAACC,KAAK,EAAE;QAAG;UAAAnB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC,eACL9F,OAAA;QAAKsH,GAAG,EAAEvG,WAAY;QAACwG,GAAG,EAAC,gBAAgB;QAAC9C,KAAK,EAAE;UAAEK,QAAQ,EAAE,MAAM;UAAE0C,MAAM,EAAE;QAAO;MAAE;QAAA7B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC3F9F,OAAA;QAAQyH,OAAO,EAAEb,WAAY;QAACnC,KAAK,EAAE;UAAEiD,SAAS,EAAE;QAAO,CAAE;QAAAlD,QAAA,EAAC;MAAmB;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvF,CACR,eAED9F,OAAA;MAAQyH,OAAO,EAAEtG,WAAY;MAACwG,QAAQ,EAAE1G,OAAQ;MAACwD,KAAK,EAAE;QAAEiD,SAAS,EAAE;MAAO,CAAE;MAAAlD,QAAA,EACzEvD,OAAO,GAAG,YAAY,GAAG;IAAM;MAAA0E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eAET9F,OAAA;MAAAwE,QAAA,EACK3D,SAAS,CAACQ,GAAG,CAAC,CAACC,IAAI,EAAEsG,KAAK,kBACvB5H,OAAA;QAAiByE,KAAK,EAAE;UAAEoD,YAAY,EAAE;QAAO,CAAE;QAAArD,QAAA,gBAC7CxE,OAAA;UAAAwE,QAAA,gBAAGxE,OAAA;YAAAwE,QAAA,EAAG;UAAI;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACV9F,OAAA,CAACF,kBAAkB;YAAC0B,OAAO,EAAEF,IAAI,CAACG;UAAM;YAAAkE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC,eACJ9F,OAAA;UAAAwE,QAAA,gBAAGxE,OAAA;YAAAwE,QAAA,EAAG;UAAI;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,6BAAyB,eAAA9F,OAAA;YAAAwE,QAAA,eACnCxE,OAAA,CAACF,kBAAkB;cAAC0B,OAAO,EAAEF,IAAI,CAACI;YAAS;cAAAiE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA,GANJ8B,KAAK;QAAAjC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACtF,GAAA,CA7MQD,OAAO;AAAAuH,EAAA,GAAPvH,OAAO;AA+MhB,eAAeA,OAAO;AAAC,IAAAuH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}