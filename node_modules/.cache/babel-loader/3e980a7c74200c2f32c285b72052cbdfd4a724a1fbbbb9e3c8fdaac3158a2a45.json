{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport { isInteger } from './number.js';\nimport { isNumber, isBigNumber, isArray, isString } from './is.js';\nimport { format } from './string.js';\nimport { DimensionError } from '../error/DimensionError.js';\nimport { IndexError } from '../error/IndexError.js';\nimport { deepStrictEqual } from './object.js';\n\n/**\r\n * Calculate the size of a multi dimensional array.\r\n * This function checks the size of the first entry, it does not validate\r\n * whether all dimensions match. (use function `validate` for that)\r\n * @param {Array} x\r\n * @Return {Number[]} size\r\n */\nexport function arraySize(x) {\n  var s = [];\n  while (Array.isArray(x)) {\n    s.push(x.length);\n    x = x[0];\n  }\n  return s;\n}\n\n/**\r\n * Recursively validate whether each element in a multi dimensional array\r\n * has a size corresponding to the provided size array.\r\n * @param {Array} array    Array to be validated\r\n * @param {number[]} size  Array with the size of each dimension\r\n * @param {number} dim   Current dimension\r\n * @throws DimensionError\r\n * @private\r\n */\nfunction _validate(array, size, dim) {\n  var i;\n  var len = array.length;\n  if (len !== size[dim]) {\n    throw new DimensionError(len, size[dim]);\n  }\n  if (dim < size.length - 1) {\n    // recursively validate each child array\n    var dimNext = dim + 1;\n    for (i = 0; i < len; i++) {\n      var child = array[i];\n      if (!Array.isArray(child)) {\n        throw new DimensionError(size.length - 1, size.length, '<');\n      }\n      _validate(array[i], size, dimNext);\n    }\n  } else {\n    // last dimension. none of the childs may be an array\n    for (i = 0; i < len; i++) {\n      if (Array.isArray(array[i])) {\n        throw new DimensionError(size.length + 1, size.length, '>');\n      }\n    }\n  }\n}\n\n/**\r\n * Validate whether each element in a multi dimensional array has\r\n * a size corresponding to the provided size array.\r\n * @param {Array} array    Array to be validated\r\n * @param {number[]} size  Array with the size of each dimension\r\n * @throws DimensionError\r\n */\nexport function validate(array, size) {\n  var isScalar = size.length === 0;\n  if (isScalar) {\n    // scalar\n    if (Array.isArray(array)) {\n      throw new DimensionError(array.length, 0);\n    }\n  } else {\n    // array\n    _validate(array, size, 0);\n  }\n}\n\n/**\r\n * Validate whether the source of the index matches the size of the Array\r\n * @param {Array | Matrix} array    Array to be validated\r\n * @param {Index} index  Index with the source information to validate\r\n * @throws DimensionError\r\n */\nexport function validateIndexSourceSize(value, index) {\n  var valueSize = value.isMatrix ? value._size : arraySize(value);\n  var sourceSize = index._sourceSize;\n  // checks if the source size is not null and matches the valueSize\n  sourceSize.forEach((sourceDim, i) => {\n    if (sourceDim !== null && sourceDim !== valueSize[i]) {\n      throw new DimensionError(sourceDim, valueSize[i]);\n    }\n  });\n}\n\n/**\r\n * Test whether index is an integer number with index >= 0 and index < length\r\n * when length is provided\r\n * @param {number} index    Zero-based index\r\n * @param {number} [length] Length of the array\r\n */\nexport function validateIndex(index, length) {\n  if (index !== undefined) {\n    if (!isNumber(index) || !isInteger(index)) {\n      throw new TypeError('Index must be an integer (value: ' + index + ')');\n    }\n    if (index < 0 || typeof length === 'number' && index >= length) {\n      throw new IndexError(index, length);\n    }\n  }\n}\n\n/**\r\n * Test if and index has empty values\r\n * @param {number} index    Zero-based index\r\n */\nexport function isEmptyIndex(index) {\n  for (var i = 0; i < index._dimensions.length; ++i) {\n    var dimension = index._dimensions[i];\n    if (dimension._data && isArray(dimension._data)) {\n      if (dimension._size[0] === 0) {\n        return true;\n      }\n    } else if (dimension.isRange) {\n      if (dimension.start === dimension.end) {\n        return true;\n      }\n    } else if (isString(dimension)) {\n      if (dimension.length === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\r\n * Resize a multi dimensional array. The resized array is returned.\r\n * @param {Array | number} array         Array to be resized\r\n * @param {number[]} size Array with the size of each dimension\r\n * @param {*} [defaultValue=0]  Value to be filled in in new entries,\r\n *                              zero by default. Specify for example `null`,\r\n *                              to clearly see entries that are not explicitly\r\n *                              set.\r\n * @return {Array} array         The resized array\r\n */\nexport function resize(array, size, defaultValue) {\n  // check the type of the arguments\n  if (!Array.isArray(size)) {\n    throw new TypeError('Array expected');\n  }\n  if (size.length === 0) {\n    throw new Error('Resizing to scalar is not supported');\n  }\n\n  // check whether size contains positive integers\n  size.forEach(function (value) {\n    if (!isNumber(value) || !isInteger(value) || value < 0) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');\n    }\n  });\n\n  // convert number to an array\n  if (isNumber(array) || isBigNumber(array)) {\n    array = [array];\n  }\n\n  // recursively resize the array\n  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;\n  _resize(array, size, 0, _defaultValue);\n  return array;\n}\n\n/**\r\n * Recursively resize a multi dimensional array\r\n * @param {Array} array         Array to be resized\r\n * @param {number[]} size       Array with the size of each dimension\r\n * @param {number} dim          Current dimension\r\n * @param {*} [defaultValue]    Value to be filled in in new entries,\r\n *                              undefined by default.\r\n * @private\r\n */\nfunction _resize(array, size, dim, defaultValue) {\n  var i;\n  var elem;\n  var oldLen = array.length;\n  var newLen = size[dim];\n  var minLen = Math.min(oldLen, newLen);\n\n  // apply new length\n  array.length = newLen;\n  if (dim < size.length - 1) {\n    // non-last dimension\n    var dimNext = dim + 1;\n\n    // resize existing child arrays\n    for (i = 0; i < minLen; i++) {\n      // resize child array\n      elem = array[i];\n      if (!Array.isArray(elem)) {\n        elem = [elem]; // add a dimension\n        array[i] = elem;\n      }\n      _resize(elem, size, dimNext, defaultValue);\n    }\n\n    // create new child arrays\n    for (i = minLen; i < newLen; i++) {\n      // get child array\n      elem = [];\n      array[i] = elem;\n\n      // resize new child array\n      _resize(elem, size, dimNext, defaultValue);\n    }\n  } else {\n    // last dimension\n\n    // remove dimensions of existing values\n    for (i = 0; i < minLen; i++) {\n      while (Array.isArray(array[i])) {\n        array[i] = array[i][0];\n      }\n    }\n\n    // fill new elements with the default value\n    for (i = minLen; i < newLen; i++) {\n      array[i] = defaultValue;\n    }\n  }\n}\n\n/**\r\n * Re-shape a multi dimensional array to fit the specified dimensions\r\n * @param {Array} array           Array to be reshaped\r\n * @param {number[]} sizes        List of sizes for each dimension\r\n * @returns {Array}               Array whose data has been formatted to fit the\r\n *                                specified dimensions\r\n *\r\n * @throws {DimensionError}       If the product of the new dimension sizes does\r\n *                                not equal that of the old ones\r\n */\nexport function reshape(array, sizes) {\n  var flatArray = flatten(array);\n  var currentLength = flatArray.length;\n  if (!Array.isArray(array) || !Array.isArray(sizes)) {\n    throw new TypeError('Array expected');\n  }\n  if (sizes.length === 0) {\n    throw new DimensionError(0, currentLength, '!=');\n  }\n  sizes = processSizesWildcard(sizes, currentLength);\n  var newLength = product(sizes);\n  if (currentLength !== newLength) {\n    throw new DimensionError(newLength, currentLength, '!=');\n  }\n  try {\n    return _reshape(flatArray, sizes);\n  } catch (e) {\n    if (e instanceof DimensionError) {\n      throw new DimensionError(newLength, currentLength, '!=');\n    }\n    throw e;\n  }\n}\n\n/**\r\n * Replaces the wildcard -1 in the sizes array.\r\n * @param {number[]} sizes  List of sizes for each dimension. At most on wildcard.\r\n * @param {number} currentLength  Number of elements in the array.\r\n * @throws {Error}                If more than one wildcard or unable to replace it.\r\n * @returns {number[]}      The sizes array with wildcard replaced.\r\n */\nexport function processSizesWildcard(sizes, currentLength) {\n  var newLength = product(sizes);\n  var processedSizes = sizes.slice();\n  var WILDCARD = -1;\n  var wildCardIndex = sizes.indexOf(WILDCARD);\n  var isMoreThanOneWildcard = sizes.indexOf(WILDCARD, wildCardIndex + 1) >= 0;\n  if (isMoreThanOneWildcard) {\n    throw new Error('More than one wildcard in sizes');\n  }\n  var hasWildcard = wildCardIndex >= 0;\n  var canReplaceWildcard = currentLength % newLength === 0;\n  if (hasWildcard) {\n    if (canReplaceWildcard) {\n      processedSizes[wildCardIndex] = -currentLength / newLength;\n    } else {\n      throw new Error('Could not replace wildcard, since ' + currentLength + ' is no multiple of ' + -newLength);\n    }\n  }\n  return processedSizes;\n}\n\n/**\r\n * Computes the product of all array elements.\r\n * @param {number[]} array Array of factors\r\n * @returns {number}            Product of all elements\r\n */\nfunction product(array) {\n  return array.reduce((prev, curr) => prev * curr, 1);\n}\n\n/**\r\n * Iteratively re-shape a multi dimensional array to fit the specified dimensions\r\n * @param {Array} array           Array to be reshaped\r\n * @param {number[]} sizes  List of sizes for each dimension\r\n * @returns {Array}               Array whose data has been formatted to fit the\r\n *                                specified dimensions\r\n */\n\nfunction _reshape(array, sizes) {\n  // testing if there are enough elements for the requested shape\n  var tmpArray = array;\n  var tmpArray2;\n  // for each dimensions starting by the last one and ignoring the first one\n  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {\n    var size = sizes[sizeIndex];\n    tmpArray2 = [];\n\n    // aggregate the elements of the current tmpArray in elements of the requested size\n    var length = tmpArray.length / size;\n    for (var i = 0; i < length; i++) {\n      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));\n    }\n    // set it as the new tmpArray for the next loop turn or for return\n    tmpArray = tmpArray2;\n  }\n  return tmpArray;\n}\n\n/**\r\n * Squeeze a multi dimensional array\r\n * @param {Array} array\r\n * @param {Array} [size]\r\n * @returns {Array} returns the array itself\r\n */\nexport function squeeze(array, size) {\n  var s = size || arraySize(array);\n\n  // squeeze outer dimensions\n  while (Array.isArray(array) && array.length === 1) {\n    array = array[0];\n    s.shift();\n  }\n\n  // find the first dimension to be squeezed\n  var dims = s.length;\n  while (s[dims - 1] === 1) {\n    dims--;\n  }\n\n  // squeeze inner dimensions\n  if (dims < s.length) {\n    array = _squeeze(array, dims, 0);\n    s.length = dims;\n  }\n  return array;\n}\n\n/**\r\n * Recursively squeeze a multi dimensional array\r\n * @param {Array} array\r\n * @param {number} dims Required number of dimensions\r\n * @param {number} dim  Current dimension\r\n * @returns {Array | *} Returns the squeezed array\r\n * @private\r\n */\nfunction _squeeze(array, dims, dim) {\n  var i, ii;\n  if (dim < dims) {\n    var next = dim + 1;\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _squeeze(array[i], dims, next);\n    }\n  } else {\n    while (Array.isArray(array)) {\n      array = array[0];\n    }\n  }\n  return array;\n}\n\n/**\r\n * Unsqueeze a multi dimensional array: add dimensions when missing\r\n *\r\n * Paramter `size` will be mutated to match the new, unqueezed matrix size.\r\n *\r\n * @param {Array} array\r\n * @param {number} dims       Desired number of dimensions of the array\r\n * @param {number} [outer]    Number of outer dimensions to be added\r\n * @param {Array} [size] Current size of array.\r\n * @returns {Array} returns the array itself\r\n * @private\r\n */\nexport function unsqueeze(array, dims, outer, size) {\n  var s = size || arraySize(array);\n\n  // unsqueeze outer dimensions\n  if (outer) {\n    for (var i = 0; i < outer; i++) {\n      array = [array];\n      s.unshift(1);\n    }\n  }\n\n  // unsqueeze inner dimensions\n  array = _unsqueeze(array, dims, 0);\n  while (s.length < dims) {\n    s.push(1);\n  }\n  return array;\n}\n\n/**\r\n * Recursively unsqueeze a multi dimensional array\r\n * @param {Array} array\r\n * @param {number} dims Required number of dimensions\r\n * @param {number} dim  Current dimension\r\n * @returns {Array | *} Returns the squeezed array\r\n * @private\r\n */\nfunction _unsqueeze(array, dims, dim) {\n  var i, ii;\n  if (Array.isArray(array)) {\n    var next = dim + 1;\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _unsqueeze(array[i], dims, next);\n    }\n  } else {\n    for (var d = dim; d < dims; d++) {\n      array = [array];\n    }\n  }\n  return array;\n}\n/**\r\n * Flatten a multi dimensional array, put all elements in a one dimensional\r\n * array\r\n * @param {Array} array   A multi dimensional array\r\n * @return {Array}        The flattened array (1 dimensional)\r\n */\nexport function flatten(array) {\n  if (!Array.isArray(array)) {\n    // if not an array, return as is\n    return array;\n  }\n  var flat = [];\n  array.forEach(function callback(value) {\n    if (Array.isArray(value)) {\n      value.forEach(callback); // traverse through sub-arrays recursively\n    } else {\n      flat.push(value);\n    }\n  });\n  return flat;\n}\n\n/**\r\n * A safe map\r\n * @param {Array} array\r\n * @param {function} callback\r\n */\nexport function map(array, callback) {\n  return Array.prototype.map.call(array, callback);\n}\n\n/**\r\n * A safe forEach\r\n * @param {Array} array\r\n * @param {function} callback\r\n */\nexport function forEach(array, callback) {\n  Array.prototype.forEach.call(array, callback);\n}\n\n/**\r\n * A safe filter\r\n * @param {Array} array\r\n * @param {function} callback\r\n */\nexport function filter(array, callback) {\n  if (arraySize(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n  return Array.prototype.filter.call(array, callback);\n}\n\n/**\r\n * Filter values in a callback given a regular expression\r\n * @param {Array} array\r\n * @param {RegExp} regexp\r\n * @return {Array} Returns the filtered array\r\n * @private\r\n */\nexport function filterRegExp(array, regexp) {\n  if (arraySize(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n  return Array.prototype.filter.call(array, entry => regexp.test(entry));\n}\n\n/**\r\n * A safe join\r\n * @param {Array} array\r\n * @param {string} separator\r\n */\nexport function join(array, separator) {\n  return Array.prototype.join.call(array, separator);\n}\n\n/**\r\n * Assign a numeric identifier to every element of a sorted array\r\n * @param {Array} a  An array\r\n * @return {Array} An array of objects containing the original value and its identifier\r\n */\nexport function identify(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n  if (a.length === 0) {\n    return a;\n  }\n  var b = [];\n  var count = 0;\n  b[0] = {\n    value: a[0],\n    identifier: 0\n  };\n  for (var i = 1; i < a.length; i++) {\n    if (a[i] === a[i - 1]) {\n      count++;\n    } else {\n      count = 0;\n    }\n    b.push({\n      value: a[i],\n      identifier: count\n    });\n  }\n  return b;\n}\n\n/**\r\n * Remove the numeric identifier from the elements\r\n * @param {array} a  An array\r\n * @return {array} An array of values without identifiers\r\n */\nexport function generalize(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n  if (a.length === 0) {\n    return a;\n  }\n  var b = [];\n  for (var i = 0; i < a.length; i++) {\n    b.push(a[i].value);\n  }\n  return b;\n}\n\n/**\r\n * Check the datatype of a given object\r\n * This is a low level implementation that should only be used by\r\n * parent Matrix classes such as SparseMatrix or DenseMatrix\r\n * This method does not validate Array Matrix shape\r\n * @param {Array} array\r\n * @param {function} typeOf   Callback function to use to determine the type of a value\r\n * @return {string}\r\n */\nexport function getArrayDataType(array, typeOf) {\n  var type; // to hold type info\n  var length = 0; // to hold length value to ensure it has consistent sizes\n\n  for (var i = 0; i < array.length; i++) {\n    var item = array[i];\n    var _isArray = Array.isArray(item);\n\n    // Saving the target matrix row size\n    if (i === 0 && _isArray) {\n      length = item.length;\n    }\n\n    // If the current item is an array but the length does not equal the targetVectorSize\n    if (_isArray && item.length !== length) {\n      return undefined;\n    }\n    var itemType = _isArray ? getArrayDataType(item, typeOf) // recurse into a nested array\n    : typeOf(item);\n    if (type === undefined) {\n      type = itemType; // first item\n    } else if (type !== itemType) {\n      return 'mixed';\n    } else {\n      // we're good, everything has the same type so far\n    }\n  }\n  return type;\n}\n\n/**\r\n * Return the last item from an array\r\n * @param {array}\r\n * @returns {*}\r\n */\nexport function last(array) {\n  return array[array.length - 1];\n}\n\n/**\r\n * Get all but the last element of array.\r\n * @param {array}\r\n * @returns {*}\r\n */\nexport function initial(array) {\n  return array.slice(0, array.length - 1);\n}\n\n/**\r\n * Recursively concatenate two matrices.\r\n * The contents of the matrices is not cloned.\r\n * @param {Array} a             Multi dimensional array\r\n * @param {Array} b             Multi dimensional array\r\n * @param {number} concatDim    The dimension on which to concatenate (zero-based)\r\n * @param {number} dim          The current dim (zero-based)\r\n * @return {Array} c            The concatenated matrix\r\n * @private\r\n */\nfunction concatRecursive(a, b, concatDim, dim) {\n  if (dim < concatDim) {\n    // recurse into next dimension\n    if (a.length !== b.length) {\n      throw new DimensionError(a.length, b.length);\n    }\n    var c = [];\n    for (var i = 0; i < a.length; i++) {\n      c[i] = concatRecursive(a[i], b[i], concatDim, dim + 1);\n    }\n    return c;\n  } else {\n    // concatenate this dimension\n    return a.concat(b);\n  }\n}\n\n/**\r\n * Concatenates many arrays in the specified direction\r\n * @param {...Array} arrays All the arrays to concatenate\r\n * @param {number} concatDim The dimension on which to concatenate (zero-based)\r\n * @returns\r\n*/\nexport function concat() {\n  var arrays = Array.prototype.slice.call(arguments, 0, -1);\n  var concatDim = Array.prototype.slice.call(arguments, -1);\n  if (arrays.length === 1) {\n    return arrays[0];\n  }\n  if (arrays.length > 1) {\n    return arrays.slice(1).reduce(function (A, B) {\n      return concatRecursive(A, B, concatDim, 0);\n    }, arrays[0]);\n  } else {\n    throw new Error('Wrong number of arguments in function concat');\n  }\n}\n\n/**\r\n * Receives two or more sizes and get's the broadcasted size for both.\r\n * @param  {...number[]} sizes Sizes to broadcast together\r\n * @returns\r\n */\nexport function broadcastSizes() {\n  for (var _len = arguments.length, sizes = new Array(_len), _key = 0; _key < _len; _key++) {\n    sizes[_key] = arguments[_key];\n  }\n  var dimensions = sizes.map(s => s.length);\n  var N = Math.max(...dimensions);\n  var sizeMax = new Array(N).fill(null);\n  // check for every size\n  for (var i = 0; i < sizes.length; i++) {\n    var size = sizes[i];\n    var dim = dimensions[i];\n    for (var j = 0; j < dim; j++) {\n      var n = N - dim + j;\n      if (size[j] > sizeMax[n]) {\n        sizeMax[n] = size[j];\n      }\n    }\n  }\n  for (var _i = 0; _i < sizes.length; _i++) {\n    checkBroadcastingRules(sizes[_i], sizeMax);\n  }\n  return sizeMax;\n}\n\n/**\r\n * Checks if it's possible to broadcast a size to another size\r\n * @param {number[]} size The size of the array to check\r\n * @param {number[]} toSize The size of the array to validate if it can be broadcasted to\r\n */\nexport function checkBroadcastingRules(size, toSize) {\n  var N = toSize.length;\n  var dim = size.length;\n  for (var j = 0; j < dim; j++) {\n    var n = N - dim + j;\n    if (size[j] < toSize[n] && size[j] > 1 || size[j] > toSize[n]) {\n      throw new Error(\"shape missmatch: missmatch is found in arg with shape (\".concat(size, \") not possible to broadcast dimension \").concat(dim, \" with size \").concat(size[j], \" to size \").concat(toSize[n]));\n    }\n  }\n}\n\n/**\r\n * Broadcasts a single array to a certain size\r\n * @param {array} array Array to be broadcasted\r\n * @param {number[]} toSize Size to broadcast the array\r\n * @returns The broadcasted array\r\n */\nexport function broadcastTo(array, toSize) {\n  var Asize = arraySize(array);\n  if (deepStrictEqual(Asize, toSize)) {\n    return array;\n  }\n  checkBroadcastingRules(Asize, toSize);\n  var broadcastedSize = broadcastSizes(Asize, toSize);\n  var N = broadcastedSize.length;\n  var paddedSize = [...Array(N - Asize.length).fill(1), ...Asize];\n  var A = clone(array);\n  // reshape A if needed to make it ready for concat\n  if (Asize.length < N) {\n    A = reshape(A, paddedSize);\n    Asize = arraySize(A);\n  }\n\n  // stretches the array on each dimension to make it the same size as index\n  for (var dim = 0; dim < N; dim++) {\n    if (Asize[dim] < broadcastedSize[dim]) {\n      A = stretch(A, broadcastedSize[dim], dim);\n      Asize = arraySize(A);\n    }\n  }\n  return A;\n}\n\n/**\r\n * Broadcasts arrays and returns the broadcasted arrays in an array\r\n * @param  {...Array | any} arrays\r\n * @returns\r\n */\nexport function broadcastArrays() {\n  for (var _len2 = arguments.length, arrays = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    arrays[_key2] = arguments[_key2];\n  }\n  if (arrays.length === 0) {\n    throw new Error('Insuficient number of argumnets in function broadcastArrays');\n  }\n  if (arrays.length === 1) {\n    return arrays[0];\n  }\n  var sizes = arrays.map(function (array) {\n    return arraySize(array);\n  });\n  var broadcastedSize = broadcastSizes(...sizes);\n  var broadcastedArrays = [];\n  arrays.forEach(function (array) {\n    broadcastedArrays.push(broadcastTo(array, broadcastedSize));\n  });\n  return broadcastedArrays;\n}\n\n/**\r\n * stretches a matrix up to a certain size in a certain dimension\r\n * @param {Array} arrayToStretch\r\n * @param {number[]} sizeToStretch\r\n * @param {number} dimToStretch\r\n * @returns\r\n */\nexport function stretch(arrayToStretch, sizeToStretch, dimToStretch) {\n  return concat(...Array(sizeToStretch).fill(arrayToStretch), dimToStretch);\n}\n\n/**\r\n* Retrieves a single element from an array given an index.\r\n*\r\n* @param {Array} array - The array from which to retrieve the value.\r\n* @param {Array<number>} idx - An array of indices specifying the position of the desired element in each dimension.\r\n* @returns {*} - The value at the specified position in the array.\r\n*\r\n* @example\r\n* const arr = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];\r\n* const index = [1, 0, 1];\r\n* console.log(getValue(arr, index)); // 6\r\n*/\nexport function get(array, index) {\n  if (!Array.isArray(array)) {\n    throw new Error('Array expected');\n  }\n  var size = arraySize(array);\n  if (index.length !== size.length) {\n    throw new DimensionError(index.length, size.length);\n  }\n  for (var x = 0; x < index.length; x++) {\n    validateIndex(index[x], size[x]);\n  }\n  return index.reduce((acc, curr) => acc[curr], array);\n}\n\n/**\r\n * Recursive function to map a multi-dimensional array.\r\n *\r\n * @param {*} value - The current value being processed in the array.\r\n * @param {Array} index - The index of the current value being processed in the array.\r\n * @param {Array} array - The array being processed.\r\n * @param {Function} callback - Function that produces the element of the new Array, taking three arguments: the value of the element, the index of the element, and the Array being processed.\r\n * @returns {*} The new array with each element being the result of the callback function.\r\n */\nexport function recurse(value, index, array, callback) {\n  if (Array.isArray(value)) {\n    return value.map(function (child, i) {\n      // we create a copy of the index array and append the new index value\n      return recurse(child, index.concat(i), array, callback);\n    });\n  } else {\n    // invoke the callback function with the right number of arguments\n    return callback(value, index, array);\n  }\n}\n\n/**\r\n * Deep clones a multidimensional array\r\n * @param {Array} array\r\n * @returns cloned array\r\n */\nexport function clone(array) {\n  return _extends([], array);\n}","map":{"version":3,"names":["_extends","isInteger","isNumber","isBigNumber","isArray","isString","format","DimensionError","IndexError","deepStrictEqual","arraySize","x","s","Array","push","length","_validate","array","size","dim","i","len","dimNext","child","validate","isScalar","validateIndexSourceSize","value","index","valueSize","isMatrix","_size","sourceSize","_sourceSize","forEach","sourceDim","validateIndex","undefined","TypeError","isEmptyIndex","_dimensions","dimension","_data","isRange","start","end","resize","defaultValue","Error","_defaultValue","_resize","elem","oldLen","newLen","minLen","Math","min","reshape","sizes","flatArray","flatten","currentLength","processSizesWildcard","newLength","product","_reshape","e","processedSizes","slice","WILDCARD","wildCardIndex","indexOf","isMoreThanOneWildcard","hasWildcard","canReplaceWildcard","reduce","prev","curr","tmpArray","tmpArray2","sizeIndex","squeeze","shift","dims","_squeeze","ii","next","unsqueeze","outer","unshift","_unsqueeze","d","flat","callback","map","prototype","call","filter","filterRegExp","regexp","entry","test","join","separator","identify","a","b","count","identifier","generalize","getArrayDataType","typeOf","type","item","_isArray","itemType","last","initial","concatRecursive","concatDim","c","concat","arrays","arguments","A","B","broadcastSizes","_len","_key","dimensions","N","max","sizeMax","fill","j","n","_i","checkBroadcastingRules","toSize","broadcastTo","Asize","broadcastedSize","paddedSize","clone","stretch","broadcastArrays","_len2","_key2","broadcastedArrays","arrayToStretch","sizeToStretch","dimToStretch","get","acc","recurse"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/utils/array.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\r\nimport { isInteger } from './number.js';\r\nimport { isNumber, isBigNumber, isArray, isString } from './is.js';\r\nimport { format } from './string.js';\r\nimport { DimensionError } from '../error/DimensionError.js';\r\nimport { IndexError } from '../error/IndexError.js';\r\nimport { deepStrictEqual } from './object.js';\r\n\r\n/**\r\n * Calculate the size of a multi dimensional array.\r\n * This function checks the size of the first entry, it does not validate\r\n * whether all dimensions match. (use function `validate` for that)\r\n * @param {Array} x\r\n * @Return {Number[]} size\r\n */\r\nexport function arraySize(x) {\r\n  var s = [];\r\n  while (Array.isArray(x)) {\r\n    s.push(x.length);\r\n    x = x[0];\r\n  }\r\n  return s;\r\n}\r\n\r\n/**\r\n * Recursively validate whether each element in a multi dimensional array\r\n * has a size corresponding to the provided size array.\r\n * @param {Array} array    Array to be validated\r\n * @param {number[]} size  Array with the size of each dimension\r\n * @param {number} dim   Current dimension\r\n * @throws DimensionError\r\n * @private\r\n */\r\nfunction _validate(array, size, dim) {\r\n  var i;\r\n  var len = array.length;\r\n  if (len !== size[dim]) {\r\n    throw new DimensionError(len, size[dim]);\r\n  }\r\n  if (dim < size.length - 1) {\r\n    // recursively validate each child array\r\n    var dimNext = dim + 1;\r\n    for (i = 0; i < len; i++) {\r\n      var child = array[i];\r\n      if (!Array.isArray(child)) {\r\n        throw new DimensionError(size.length - 1, size.length, '<');\r\n      }\r\n      _validate(array[i], size, dimNext);\r\n    }\r\n  } else {\r\n    // last dimension. none of the childs may be an array\r\n    for (i = 0; i < len; i++) {\r\n      if (Array.isArray(array[i])) {\r\n        throw new DimensionError(size.length + 1, size.length, '>');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Validate whether each element in a multi dimensional array has\r\n * a size corresponding to the provided size array.\r\n * @param {Array} array    Array to be validated\r\n * @param {number[]} size  Array with the size of each dimension\r\n * @throws DimensionError\r\n */\r\nexport function validate(array, size) {\r\n  var isScalar = size.length === 0;\r\n  if (isScalar) {\r\n    // scalar\r\n    if (Array.isArray(array)) {\r\n      throw new DimensionError(array.length, 0);\r\n    }\r\n  } else {\r\n    // array\r\n    _validate(array, size, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * Validate whether the source of the index matches the size of the Array\r\n * @param {Array | Matrix} array    Array to be validated\r\n * @param {Index} index  Index with the source information to validate\r\n * @throws DimensionError\r\n */\r\nexport function validateIndexSourceSize(value, index) {\r\n  var valueSize = value.isMatrix ? value._size : arraySize(value);\r\n  var sourceSize = index._sourceSize;\r\n  // checks if the source size is not null and matches the valueSize\r\n  sourceSize.forEach((sourceDim, i) => {\r\n    if (sourceDim !== null && sourceDim !== valueSize[i]) {\r\n      throw new DimensionError(sourceDim, valueSize[i]);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Test whether index is an integer number with index >= 0 and index < length\r\n * when length is provided\r\n * @param {number} index    Zero-based index\r\n * @param {number} [length] Length of the array\r\n */\r\nexport function validateIndex(index, length) {\r\n  if (index !== undefined) {\r\n    if (!isNumber(index) || !isInteger(index)) {\r\n      throw new TypeError('Index must be an integer (value: ' + index + ')');\r\n    }\r\n    if (index < 0 || typeof length === 'number' && index >= length) {\r\n      throw new IndexError(index, length);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Test if and index has empty values\r\n * @param {number} index    Zero-based index\r\n */\r\nexport function isEmptyIndex(index) {\r\n  for (var i = 0; i < index._dimensions.length; ++i) {\r\n    var dimension = index._dimensions[i];\r\n    if (dimension._data && isArray(dimension._data)) {\r\n      if (dimension._size[0] === 0) {\r\n        return true;\r\n      }\r\n    } else if (dimension.isRange) {\r\n      if (dimension.start === dimension.end) {\r\n        return true;\r\n      }\r\n    } else if (isString(dimension)) {\r\n      if (dimension.length === 0) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Resize a multi dimensional array. The resized array is returned.\r\n * @param {Array | number} array         Array to be resized\r\n * @param {number[]} size Array with the size of each dimension\r\n * @param {*} [defaultValue=0]  Value to be filled in in new entries,\r\n *                              zero by default. Specify for example `null`,\r\n *                              to clearly see entries that are not explicitly\r\n *                              set.\r\n * @return {Array} array         The resized array\r\n */\r\nexport function resize(array, size, defaultValue) {\r\n  // check the type of the arguments\r\n  if (!Array.isArray(size)) {\r\n    throw new TypeError('Array expected');\r\n  }\r\n  if (size.length === 0) {\r\n    throw new Error('Resizing to scalar is not supported');\r\n  }\r\n\r\n  // check whether size contains positive integers\r\n  size.forEach(function (value) {\r\n    if (!isNumber(value) || !isInteger(value) || value < 0) {\r\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');\r\n    }\r\n  });\r\n\r\n  // convert number to an array\r\n  if (isNumber(array) || isBigNumber(array)) {\r\n    array = [array];\r\n  }\r\n\r\n  // recursively resize the array\r\n  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;\r\n  _resize(array, size, 0, _defaultValue);\r\n  return array;\r\n}\r\n\r\n/**\r\n * Recursively resize a multi dimensional array\r\n * @param {Array} array         Array to be resized\r\n * @param {number[]} size       Array with the size of each dimension\r\n * @param {number} dim          Current dimension\r\n * @param {*} [defaultValue]    Value to be filled in in new entries,\r\n *                              undefined by default.\r\n * @private\r\n */\r\nfunction _resize(array, size, dim, defaultValue) {\r\n  var i;\r\n  var elem;\r\n  var oldLen = array.length;\r\n  var newLen = size[dim];\r\n  var minLen = Math.min(oldLen, newLen);\r\n\r\n  // apply new length\r\n  array.length = newLen;\r\n  if (dim < size.length - 1) {\r\n    // non-last dimension\r\n    var dimNext = dim + 1;\r\n\r\n    // resize existing child arrays\r\n    for (i = 0; i < minLen; i++) {\r\n      // resize child array\r\n      elem = array[i];\r\n      if (!Array.isArray(elem)) {\r\n        elem = [elem]; // add a dimension\r\n        array[i] = elem;\r\n      }\r\n      _resize(elem, size, dimNext, defaultValue);\r\n    }\r\n\r\n    // create new child arrays\r\n    for (i = minLen; i < newLen; i++) {\r\n      // get child array\r\n      elem = [];\r\n      array[i] = elem;\r\n\r\n      // resize new child array\r\n      _resize(elem, size, dimNext, defaultValue);\r\n    }\r\n  } else {\r\n    // last dimension\r\n\r\n    // remove dimensions of existing values\r\n    for (i = 0; i < minLen; i++) {\r\n      while (Array.isArray(array[i])) {\r\n        array[i] = array[i][0];\r\n      }\r\n    }\r\n\r\n    // fill new elements with the default value\r\n    for (i = minLen; i < newLen; i++) {\r\n      array[i] = defaultValue;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Re-shape a multi dimensional array to fit the specified dimensions\r\n * @param {Array} array           Array to be reshaped\r\n * @param {number[]} sizes        List of sizes for each dimension\r\n * @returns {Array}               Array whose data has been formatted to fit the\r\n *                                specified dimensions\r\n *\r\n * @throws {DimensionError}       If the product of the new dimension sizes does\r\n *                                not equal that of the old ones\r\n */\r\nexport function reshape(array, sizes) {\r\n  var flatArray = flatten(array);\r\n  var currentLength = flatArray.length;\r\n  if (!Array.isArray(array) || !Array.isArray(sizes)) {\r\n    throw new TypeError('Array expected');\r\n  }\r\n  if (sizes.length === 0) {\r\n    throw new DimensionError(0, currentLength, '!=');\r\n  }\r\n  sizes = processSizesWildcard(sizes, currentLength);\r\n  var newLength = product(sizes);\r\n  if (currentLength !== newLength) {\r\n    throw new DimensionError(newLength, currentLength, '!=');\r\n  }\r\n  try {\r\n    return _reshape(flatArray, sizes);\r\n  } catch (e) {\r\n    if (e instanceof DimensionError) {\r\n      throw new DimensionError(newLength, currentLength, '!=');\r\n    }\r\n    throw e;\r\n  }\r\n}\r\n\r\n/**\r\n * Replaces the wildcard -1 in the sizes array.\r\n * @param {number[]} sizes  List of sizes for each dimension. At most on wildcard.\r\n * @param {number} currentLength  Number of elements in the array.\r\n * @throws {Error}                If more than one wildcard or unable to replace it.\r\n * @returns {number[]}      The sizes array with wildcard replaced.\r\n */\r\nexport function processSizesWildcard(sizes, currentLength) {\r\n  var newLength = product(sizes);\r\n  var processedSizes = sizes.slice();\r\n  var WILDCARD = -1;\r\n  var wildCardIndex = sizes.indexOf(WILDCARD);\r\n  var isMoreThanOneWildcard = sizes.indexOf(WILDCARD, wildCardIndex + 1) >= 0;\r\n  if (isMoreThanOneWildcard) {\r\n    throw new Error('More than one wildcard in sizes');\r\n  }\r\n  var hasWildcard = wildCardIndex >= 0;\r\n  var canReplaceWildcard = currentLength % newLength === 0;\r\n  if (hasWildcard) {\r\n    if (canReplaceWildcard) {\r\n      processedSizes[wildCardIndex] = -currentLength / newLength;\r\n    } else {\r\n      throw new Error('Could not replace wildcard, since ' + currentLength + ' is no multiple of ' + -newLength);\r\n    }\r\n  }\r\n  return processedSizes;\r\n}\r\n\r\n/**\r\n * Computes the product of all array elements.\r\n * @param {number[]} array Array of factors\r\n * @returns {number}            Product of all elements\r\n */\r\nfunction product(array) {\r\n  return array.reduce((prev, curr) => prev * curr, 1);\r\n}\r\n\r\n/**\r\n * Iteratively re-shape a multi dimensional array to fit the specified dimensions\r\n * @param {Array} array           Array to be reshaped\r\n * @param {number[]} sizes  List of sizes for each dimension\r\n * @returns {Array}               Array whose data has been formatted to fit the\r\n *                                specified dimensions\r\n */\r\n\r\nfunction _reshape(array, sizes) {\r\n  // testing if there are enough elements for the requested shape\r\n  var tmpArray = array;\r\n  var tmpArray2;\r\n  // for each dimensions starting by the last one and ignoring the first one\r\n  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {\r\n    var size = sizes[sizeIndex];\r\n    tmpArray2 = [];\r\n\r\n    // aggregate the elements of the current tmpArray in elements of the requested size\r\n    var length = tmpArray.length / size;\r\n    for (var i = 0; i < length; i++) {\r\n      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));\r\n    }\r\n    // set it as the new tmpArray for the next loop turn or for return\r\n    tmpArray = tmpArray2;\r\n  }\r\n  return tmpArray;\r\n}\r\n\r\n/**\r\n * Squeeze a multi dimensional array\r\n * @param {Array} array\r\n * @param {Array} [size]\r\n * @returns {Array} returns the array itself\r\n */\r\nexport function squeeze(array, size) {\r\n  var s = size || arraySize(array);\r\n\r\n  // squeeze outer dimensions\r\n  while (Array.isArray(array) && array.length === 1) {\r\n    array = array[0];\r\n    s.shift();\r\n  }\r\n\r\n  // find the first dimension to be squeezed\r\n  var dims = s.length;\r\n  while (s[dims - 1] === 1) {\r\n    dims--;\r\n  }\r\n\r\n  // squeeze inner dimensions\r\n  if (dims < s.length) {\r\n    array = _squeeze(array, dims, 0);\r\n    s.length = dims;\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Recursively squeeze a multi dimensional array\r\n * @param {Array} array\r\n * @param {number} dims Required number of dimensions\r\n * @param {number} dim  Current dimension\r\n * @returns {Array | *} Returns the squeezed array\r\n * @private\r\n */\r\nfunction _squeeze(array, dims, dim) {\r\n  var i, ii;\r\n  if (dim < dims) {\r\n    var next = dim + 1;\r\n    for (i = 0, ii = array.length; i < ii; i++) {\r\n      array[i] = _squeeze(array[i], dims, next);\r\n    }\r\n  } else {\r\n    while (Array.isArray(array)) {\r\n      array = array[0];\r\n    }\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Unsqueeze a multi dimensional array: add dimensions when missing\r\n *\r\n * Paramter `size` will be mutated to match the new, unqueezed matrix size.\r\n *\r\n * @param {Array} array\r\n * @param {number} dims       Desired number of dimensions of the array\r\n * @param {number} [outer]    Number of outer dimensions to be added\r\n * @param {Array} [size] Current size of array.\r\n * @returns {Array} returns the array itself\r\n * @private\r\n */\r\nexport function unsqueeze(array, dims, outer, size) {\r\n  var s = size || arraySize(array);\r\n\r\n  // unsqueeze outer dimensions\r\n  if (outer) {\r\n    for (var i = 0; i < outer; i++) {\r\n      array = [array];\r\n      s.unshift(1);\r\n    }\r\n  }\r\n\r\n  // unsqueeze inner dimensions\r\n  array = _unsqueeze(array, dims, 0);\r\n  while (s.length < dims) {\r\n    s.push(1);\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Recursively unsqueeze a multi dimensional array\r\n * @param {Array} array\r\n * @param {number} dims Required number of dimensions\r\n * @param {number} dim  Current dimension\r\n * @returns {Array | *} Returns the squeezed array\r\n * @private\r\n */\r\nfunction _unsqueeze(array, dims, dim) {\r\n  var i, ii;\r\n  if (Array.isArray(array)) {\r\n    var next = dim + 1;\r\n    for (i = 0, ii = array.length; i < ii; i++) {\r\n      array[i] = _unsqueeze(array[i], dims, next);\r\n    }\r\n  } else {\r\n    for (var d = dim; d < dims; d++) {\r\n      array = [array];\r\n    }\r\n  }\r\n  return array;\r\n}\r\n/**\r\n * Flatten a multi dimensional array, put all elements in a one dimensional\r\n * array\r\n * @param {Array} array   A multi dimensional array\r\n * @return {Array}        The flattened array (1 dimensional)\r\n */\r\nexport function flatten(array) {\r\n  if (!Array.isArray(array)) {\r\n    // if not an array, return as is\r\n    return array;\r\n  }\r\n  var flat = [];\r\n  array.forEach(function callback(value) {\r\n    if (Array.isArray(value)) {\r\n      value.forEach(callback); // traverse through sub-arrays recursively\r\n    } else {\r\n      flat.push(value);\r\n    }\r\n  });\r\n  return flat;\r\n}\r\n\r\n/**\r\n * A safe map\r\n * @param {Array} array\r\n * @param {function} callback\r\n */\r\nexport function map(array, callback) {\r\n  return Array.prototype.map.call(array, callback);\r\n}\r\n\r\n/**\r\n * A safe forEach\r\n * @param {Array} array\r\n * @param {function} callback\r\n */\r\nexport function forEach(array, callback) {\r\n  Array.prototype.forEach.call(array, callback);\r\n}\r\n\r\n/**\r\n * A safe filter\r\n * @param {Array} array\r\n * @param {function} callback\r\n */\r\nexport function filter(array, callback) {\r\n  if (arraySize(array).length !== 1) {\r\n    throw new Error('Only one dimensional matrices supported');\r\n  }\r\n  return Array.prototype.filter.call(array, callback);\r\n}\r\n\r\n/**\r\n * Filter values in a callback given a regular expression\r\n * @param {Array} array\r\n * @param {RegExp} regexp\r\n * @return {Array} Returns the filtered array\r\n * @private\r\n */\r\nexport function filterRegExp(array, regexp) {\r\n  if (arraySize(array).length !== 1) {\r\n    throw new Error('Only one dimensional matrices supported');\r\n  }\r\n  return Array.prototype.filter.call(array, entry => regexp.test(entry));\r\n}\r\n\r\n/**\r\n * A safe join\r\n * @param {Array} array\r\n * @param {string} separator\r\n */\r\nexport function join(array, separator) {\r\n  return Array.prototype.join.call(array, separator);\r\n}\r\n\r\n/**\r\n * Assign a numeric identifier to every element of a sorted array\r\n * @param {Array} a  An array\r\n * @return {Array} An array of objects containing the original value and its identifier\r\n */\r\nexport function identify(a) {\r\n  if (!Array.isArray(a)) {\r\n    throw new TypeError('Array input expected');\r\n  }\r\n  if (a.length === 0) {\r\n    return a;\r\n  }\r\n  var b = [];\r\n  var count = 0;\r\n  b[0] = {\r\n    value: a[0],\r\n    identifier: 0\r\n  };\r\n  for (var i = 1; i < a.length; i++) {\r\n    if (a[i] === a[i - 1]) {\r\n      count++;\r\n    } else {\r\n      count = 0;\r\n    }\r\n    b.push({\r\n      value: a[i],\r\n      identifier: count\r\n    });\r\n  }\r\n  return b;\r\n}\r\n\r\n/**\r\n * Remove the numeric identifier from the elements\r\n * @param {array} a  An array\r\n * @return {array} An array of values without identifiers\r\n */\r\nexport function generalize(a) {\r\n  if (!Array.isArray(a)) {\r\n    throw new TypeError('Array input expected');\r\n  }\r\n  if (a.length === 0) {\r\n    return a;\r\n  }\r\n  var b = [];\r\n  for (var i = 0; i < a.length; i++) {\r\n    b.push(a[i].value);\r\n  }\r\n  return b;\r\n}\r\n\r\n/**\r\n * Check the datatype of a given object\r\n * This is a low level implementation that should only be used by\r\n * parent Matrix classes such as SparseMatrix or DenseMatrix\r\n * This method does not validate Array Matrix shape\r\n * @param {Array} array\r\n * @param {function} typeOf   Callback function to use to determine the type of a value\r\n * @return {string}\r\n */\r\nexport function getArrayDataType(array, typeOf) {\r\n  var type; // to hold type info\r\n  var length = 0; // to hold length value to ensure it has consistent sizes\r\n\r\n  for (var i = 0; i < array.length; i++) {\r\n    var item = array[i];\r\n    var _isArray = Array.isArray(item);\r\n\r\n    // Saving the target matrix row size\r\n    if (i === 0 && _isArray) {\r\n      length = item.length;\r\n    }\r\n\r\n    // If the current item is an array but the length does not equal the targetVectorSize\r\n    if (_isArray && item.length !== length) {\r\n      return undefined;\r\n    }\r\n    var itemType = _isArray ? getArrayDataType(item, typeOf) // recurse into a nested array\r\n    : typeOf(item);\r\n    if (type === undefined) {\r\n      type = itemType; // first item\r\n    } else if (type !== itemType) {\r\n      return 'mixed';\r\n    } else {\r\n      // we're good, everything has the same type so far\r\n    }\r\n  }\r\n  return type;\r\n}\r\n\r\n/**\r\n * Return the last item from an array\r\n * @param {array}\r\n * @returns {*}\r\n */\r\nexport function last(array) {\r\n  return array[array.length - 1];\r\n}\r\n\r\n/**\r\n * Get all but the last element of array.\r\n * @param {array}\r\n * @returns {*}\r\n */\r\nexport function initial(array) {\r\n  return array.slice(0, array.length - 1);\r\n}\r\n\r\n/**\r\n * Recursively concatenate two matrices.\r\n * The contents of the matrices is not cloned.\r\n * @param {Array} a             Multi dimensional array\r\n * @param {Array} b             Multi dimensional array\r\n * @param {number} concatDim    The dimension on which to concatenate (zero-based)\r\n * @param {number} dim          The current dim (zero-based)\r\n * @return {Array} c            The concatenated matrix\r\n * @private\r\n */\r\nfunction concatRecursive(a, b, concatDim, dim) {\r\n  if (dim < concatDim) {\r\n    // recurse into next dimension\r\n    if (a.length !== b.length) {\r\n      throw new DimensionError(a.length, b.length);\r\n    }\r\n    var c = [];\r\n    for (var i = 0; i < a.length; i++) {\r\n      c[i] = concatRecursive(a[i], b[i], concatDim, dim + 1);\r\n    }\r\n    return c;\r\n  } else {\r\n    // concatenate this dimension\r\n    return a.concat(b);\r\n  }\r\n}\r\n\r\n/**\r\n * Concatenates many arrays in the specified direction\r\n * @param {...Array} arrays All the arrays to concatenate\r\n * @param {number} concatDim The dimension on which to concatenate (zero-based)\r\n * @returns\r\n*/\r\nexport function concat() {\r\n  var arrays = Array.prototype.slice.call(arguments, 0, -1);\r\n  var concatDim = Array.prototype.slice.call(arguments, -1);\r\n  if (arrays.length === 1) {\r\n    return arrays[0];\r\n  }\r\n  if (arrays.length > 1) {\r\n    return arrays.slice(1).reduce(function (A, B) {\r\n      return concatRecursive(A, B, concatDim, 0);\r\n    }, arrays[0]);\r\n  } else {\r\n    throw new Error('Wrong number of arguments in function concat');\r\n  }\r\n}\r\n\r\n/**\r\n * Receives two or more sizes and get's the broadcasted size for both.\r\n * @param  {...number[]} sizes Sizes to broadcast together\r\n * @returns\r\n */\r\nexport function broadcastSizes() {\r\n  for (var _len = arguments.length, sizes = new Array(_len), _key = 0; _key < _len; _key++) {\r\n    sizes[_key] = arguments[_key];\r\n  }\r\n  var dimensions = sizes.map(s => s.length);\r\n  var N = Math.max(...dimensions);\r\n  var sizeMax = new Array(N).fill(null);\r\n  // check for every size\r\n  for (var i = 0; i < sizes.length; i++) {\r\n    var size = sizes[i];\r\n    var dim = dimensions[i];\r\n    for (var j = 0; j < dim; j++) {\r\n      var n = N - dim + j;\r\n      if (size[j] > sizeMax[n]) {\r\n        sizeMax[n] = size[j];\r\n      }\r\n    }\r\n  }\r\n  for (var _i = 0; _i < sizes.length; _i++) {\r\n    checkBroadcastingRules(sizes[_i], sizeMax);\r\n  }\r\n  return sizeMax;\r\n}\r\n\r\n/**\r\n * Checks if it's possible to broadcast a size to another size\r\n * @param {number[]} size The size of the array to check\r\n * @param {number[]} toSize The size of the array to validate if it can be broadcasted to\r\n */\r\nexport function checkBroadcastingRules(size, toSize) {\r\n  var N = toSize.length;\r\n  var dim = size.length;\r\n  for (var j = 0; j < dim; j++) {\r\n    var n = N - dim + j;\r\n    if (size[j] < toSize[n] && size[j] > 1 || size[j] > toSize[n]) {\r\n      throw new Error(\"shape missmatch: missmatch is found in arg with shape (\".concat(size, \") not possible to broadcast dimension \").concat(dim, \" with size \").concat(size[j], \" to size \").concat(toSize[n]));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Broadcasts a single array to a certain size\r\n * @param {array} array Array to be broadcasted\r\n * @param {number[]} toSize Size to broadcast the array\r\n * @returns The broadcasted array\r\n */\r\nexport function broadcastTo(array, toSize) {\r\n  var Asize = arraySize(array);\r\n  if (deepStrictEqual(Asize, toSize)) {\r\n    return array;\r\n  }\r\n  checkBroadcastingRules(Asize, toSize);\r\n  var broadcastedSize = broadcastSizes(Asize, toSize);\r\n  var N = broadcastedSize.length;\r\n  var paddedSize = [...Array(N - Asize.length).fill(1), ...Asize];\r\n  var A = clone(array);\r\n  // reshape A if needed to make it ready for concat\r\n  if (Asize.length < N) {\r\n    A = reshape(A, paddedSize);\r\n    Asize = arraySize(A);\r\n  }\r\n\r\n  // stretches the array on each dimension to make it the same size as index\r\n  for (var dim = 0; dim < N; dim++) {\r\n    if (Asize[dim] < broadcastedSize[dim]) {\r\n      A = stretch(A, broadcastedSize[dim], dim);\r\n      Asize = arraySize(A);\r\n    }\r\n  }\r\n  return A;\r\n}\r\n\r\n/**\r\n * Broadcasts arrays and returns the broadcasted arrays in an array\r\n * @param  {...Array | any} arrays\r\n * @returns\r\n */\r\nexport function broadcastArrays() {\r\n  for (var _len2 = arguments.length, arrays = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n    arrays[_key2] = arguments[_key2];\r\n  }\r\n  if (arrays.length === 0) {\r\n    throw new Error('Insuficient number of argumnets in function broadcastArrays');\r\n  }\r\n  if (arrays.length === 1) {\r\n    return arrays[0];\r\n  }\r\n  var sizes = arrays.map(function (array) {\r\n    return arraySize(array);\r\n  });\r\n  var broadcastedSize = broadcastSizes(...sizes);\r\n  var broadcastedArrays = [];\r\n  arrays.forEach(function (array) {\r\n    broadcastedArrays.push(broadcastTo(array, broadcastedSize));\r\n  });\r\n  return broadcastedArrays;\r\n}\r\n\r\n/**\r\n * stretches a matrix up to a certain size in a certain dimension\r\n * @param {Array} arrayToStretch\r\n * @param {number[]} sizeToStretch\r\n * @param {number} dimToStretch\r\n * @returns\r\n */\r\nexport function stretch(arrayToStretch, sizeToStretch, dimToStretch) {\r\n  return concat(...Array(sizeToStretch).fill(arrayToStretch), dimToStretch);\r\n}\r\n\r\n/**\r\n* Retrieves a single element from an array given an index.\r\n*\r\n* @param {Array} array - The array from which to retrieve the value.\r\n* @param {Array<number>} idx - An array of indices specifying the position of the desired element in each dimension.\r\n* @returns {*} - The value at the specified position in the array.\r\n*\r\n* @example\r\n* const arr = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];\r\n* const index = [1, 0, 1];\r\n* console.log(getValue(arr, index)); // 6\r\n*/\r\nexport function get(array, index) {\r\n  if (!Array.isArray(array)) {\r\n    throw new Error('Array expected');\r\n  }\r\n  var size = arraySize(array);\r\n  if (index.length !== size.length) {\r\n    throw new DimensionError(index.length, size.length);\r\n  }\r\n  for (var x = 0; x < index.length; x++) {\r\n    validateIndex(index[x], size[x]);\r\n  }\r\n  return index.reduce((acc, curr) => acc[curr], array);\r\n}\r\n\r\n/**\r\n * Recursive function to map a multi-dimensional array.\r\n *\r\n * @param {*} value - The current value being processed in the array.\r\n * @param {Array} index - The index of the current value being processed in the array.\r\n * @param {Array} array - The array being processed.\r\n * @param {Function} callback - Function that produces the element of the new Array, taking three arguments: the value of the element, the index of the element, and the Array being processed.\r\n * @returns {*} The new array with each element being the result of the callback function.\r\n */\r\nexport function recurse(value, index, array, callback) {\r\n  if (Array.isArray(value)) {\r\n    return value.map(function (child, i) {\r\n      // we create a copy of the index array and append the new index value\r\n      return recurse(child, index.concat(i), array, callback);\r\n    });\r\n  } else {\r\n    // invoke the callback function with the right number of arguments\r\n    return callback(value, index, array);\r\n  }\r\n}\r\n\r\n/**\r\n * Deep clones a multidimensional array\r\n * @param {Array} array\r\n * @returns cloned array\r\n */\r\nexport function clone(array) {\r\n  return _extends([], array);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}