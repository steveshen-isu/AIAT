{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nvar name = 'createUnit';\nvar dependencies = ['typed', 'Unit'];\nexport var createCreateUnit = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Unit\n  } = _ref;\n  /**\r\n   * Create a user-defined unit and register it with the Unit type.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.createUnit({\r\n   *       baseUnit1: {\r\n   *         aliases: [string, ...]\r\n   *         prefixes: object\r\n   *       },\r\n   *       unit2: {\r\n   *         definition: string,\r\n   *         aliases: [string, ...]\r\n   *         prefixes: object,\r\n   *         offset: number\r\n   *       },\r\n   *       unit3: string    // Shortcut\r\n   *     })\r\n   *\r\n   *     // Another shortcut:\r\n   *     math.createUnit(string, unit : string, [object])\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.createUnit('foo')\r\n   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})\r\n   *     math.createUnit('mph', '1 mile/hour')\r\n   *     math.createUnit('km', math.unit(1000, 'm'))\r\n   *\r\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\r\n   * @param {string, UnitDefinition, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\r\n   * @param {Object} options   (optional) An object containing any of the following properties:\r\n   *     - `prefixes {string}` \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\r\n   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']\r\n   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\r\n   *\r\n   * See also:\r\n   *\r\n   *     unit\r\n   *\r\n   * @return {Unit} The new unit\r\n   */\n  return typed(name, {\n    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.\n    'Object, Object': function Object_Object(obj, options) {\n      return Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    Object: function Object(obj) {\n      return Unit.createUnit(obj, {});\n    },\n    // Shortcut method for creating one unit.\n    'string, Unit | string | Object, Object': function string_Unit__string__Object_Object(name, def, options) {\n      var obj = {};\n      obj[name] = def;\n      return Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    'string, Unit | string | Object': function string_Unit__string__Object(name, def) {\n      var obj = {};\n      obj[name] = def;\n      return Unit.createUnit(obj, {});\n    },\n    // Without a definition, creates a base unit.\n    string: function string(name) {\n      var obj = {};\n      obj[name] = {};\n      return Unit.createUnit(obj, {});\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createCreateUnit","_ref","typed","Unit","Object_Object","obj","options","createUnit","Object","string_Unit__string__Object_Object","def","string_Unit__string__Object","string"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/type/unit/function/createUnit.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\r\nvar name = 'createUnit';\r\nvar dependencies = ['typed', 'Unit'];\r\nexport var createCreateUnit = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    Unit\r\n  } = _ref;\r\n  /**\r\n   * Create a user-defined unit and register it with the Unit type.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.createUnit({\r\n   *       baseUnit1: {\r\n   *         aliases: [string, ...]\r\n   *         prefixes: object\r\n   *       },\r\n   *       unit2: {\r\n   *         definition: string,\r\n   *         aliases: [string, ...]\r\n   *         prefixes: object,\r\n   *         offset: number\r\n   *       },\r\n   *       unit3: string    // Shortcut\r\n   *     })\r\n   *\r\n   *     // Another shortcut:\r\n   *     math.createUnit(string, unit : string, [object])\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.createUnit('foo')\r\n   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})\r\n   *     math.createUnit('mph', '1 mile/hour')\r\n   *     math.createUnit('km', math.unit(1000, 'm'))\r\n   *\r\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\r\n   * @param {string, UnitDefinition, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\r\n   * @param {Object} options   (optional) An object containing any of the following properties:\r\n   *     - `prefixes {string}` \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\r\n   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']\r\n   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\r\n   *\r\n   * See also:\r\n   *\r\n   *     unit\r\n   *\r\n   * @return {Unit} The new unit\r\n   */\r\n  return typed(name, {\r\n    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.\r\n    'Object, Object': function Object_Object(obj, options) {\r\n      return Unit.createUnit(obj, options);\r\n    },\r\n    // Same as above but without the options.\r\n    Object: function Object(obj) {\r\n      return Unit.createUnit(obj, {});\r\n    },\r\n    // Shortcut method for creating one unit.\r\n    'string, Unit | string | Object, Object': function string_Unit__string__Object_Object(name, def, options) {\r\n      var obj = {};\r\n      obj[name] = def;\r\n      return Unit.createUnit(obj, options);\r\n    },\r\n    // Same as above but without the options.\r\n    'string, Unit | string | Object': function string_Unit__string__Object(name, def) {\r\n      var obj = {};\r\n      obj[name] = def;\r\n      return Unit.createUnit(obj, {});\r\n    },\r\n    // Without a definition, creates a base unit.\r\n    string: function string(name) {\r\n      var obj = {};\r\n      obj[name] = {};\r\n      return Unit.createUnit(obj, {});\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,IAAIC,IAAI,GAAG,YAAY;AACvB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC;AACpC,OAAO,IAAIC,gBAAgB,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC/E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB;IACA,gBAAgB,EAAE,SAASM,aAAaA,CAACC,GAAG,EAAEC,OAAO,EAAE;MACrD,OAAOH,IAAI,CAACI,UAAU,CAACF,GAAG,EAAEC,OAAO,CAAC;IACtC,CAAC;IACD;IACAE,MAAM,EAAE,SAASA,MAAMA,CAACH,GAAG,EAAE;MAC3B,OAAOF,IAAI,CAACI,UAAU,CAACF,GAAG,EAAE,CAAC,CAAC,CAAC;IACjC,CAAC;IACD;IACA,wCAAwC,EAAE,SAASI,kCAAkCA,CAACX,IAAI,EAAEY,GAAG,EAAEJ,OAAO,EAAE;MACxG,IAAID,GAAG,GAAG,CAAC,CAAC;MACZA,GAAG,CAACP,IAAI,CAAC,GAAGY,GAAG;MACf,OAAOP,IAAI,CAACI,UAAU,CAACF,GAAG,EAAEC,OAAO,CAAC;IACtC,CAAC;IACD;IACA,gCAAgC,EAAE,SAASK,2BAA2BA,CAACb,IAAI,EAAEY,GAAG,EAAE;MAChF,IAAIL,GAAG,GAAG,CAAC,CAAC;MACZA,GAAG,CAACP,IAAI,CAAC,GAAGY,GAAG;MACf,OAAOP,IAAI,CAACI,UAAU,CAACF,GAAG,EAAE,CAAC,CAAC,CAAC;IACjC,CAAC;IACD;IACAO,MAAM,EAAE,SAASA,MAAMA,CAACd,IAAI,EAAE;MAC5B,IAAIO,GAAG,GAAG,CAAC,CAAC;MACZA,GAAG,CAACP,IAAI,CAAC,GAAG,CAAC,CAAC;MACd,OAAOK,IAAI,CAACI,UAAU,CAACF,GAAG,EAAE,CAAC,CAAC,CAAC;IACjC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}