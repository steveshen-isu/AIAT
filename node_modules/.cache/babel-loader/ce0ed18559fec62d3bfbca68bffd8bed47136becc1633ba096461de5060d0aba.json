{"ast":null,"code":"import { flatten as flattenArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'flatten';\nvar dependencies = ['typed'];\nexport var createFlatten = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Flatten a multidimensional matrix into a single dimensional matrix.\r\n   * A new matrix is returned, the original matrix is left untouched.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.flatten(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\r\n   *\r\n   * See also:\r\n   *\r\n   *    concat, resize, size, squeeze\r\n   *\r\n   * @param {Matrix | Array} x   Matrix to be flattened\r\n   * @return {Matrix | Array} Returns the flattened matrix\r\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return flattenArray(x);\n    },\n    Matrix: function Matrix(x) {\n      // Return the same matrix type as x (Dense or Sparse Matrix)\n      // Return the same data type as x\n      return x.create(flattenArray(x.toArray()), x.datatype());\n    }\n  });\n});","map":{"version":3,"names":["flatten","flattenArray","factory","name","dependencies","createFlatten","_ref","typed","Array","x","Matrix","create","toArray","datatype"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/matrix/flatten.js"],"sourcesContent":["import { flatten as flattenArray } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'flatten';\r\nvar dependencies = ['typed'];\r\nexport var createFlatten = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Flatten a multidimensional matrix into a single dimensional matrix.\r\n   * A new matrix is returned, the original matrix is left untouched.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.flatten(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\r\n   *\r\n   * See also:\r\n   *\r\n   *    concat, resize, size, squeeze\r\n   *\r\n   * @param {Matrix | Array} x   Matrix to be flattened\r\n   * @return {Matrix | Array} Returns the flattened matrix\r\n   */\r\n  return typed(name, {\r\n    Array: function Array(x) {\r\n      return flattenArray(x);\r\n    },\r\n    Matrix: function Matrix(x) {\r\n      // Return the same matrix type as x (Dense or Sparse Matrix)\r\n      // Return the same data type as x\r\n      return x.create(flattenArray(x.toArray()), x.datatype());\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,IAAIC,YAAY,QAAQ,sBAAsB;AAC9D,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC5E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBK,KAAK,EAAE,SAASA,KAAKA,CAACC,CAAC,EAAE;MACvB,OAAOR,YAAY,CAACQ,CAAC,CAAC;IACxB,CAAC;IACDC,MAAM,EAAE,SAASA,MAAMA,CAACD,CAAC,EAAE;MACzB;MACA;MACA,OAAOA,CAAC,CAACE,MAAM,CAACV,YAAY,CAACQ,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,EAAEH,CAAC,CAACI,QAAQ,CAAC,CAAC,CAAC;IAC1D;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}