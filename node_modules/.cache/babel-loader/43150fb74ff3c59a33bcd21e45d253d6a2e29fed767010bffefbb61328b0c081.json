{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ROG\\\\ai-solver\\\\src\\\\components\\\\PlotGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst currentUrl = window.location.href;\nconst ipAddress = currentUrl.split(':')[1].split('/')[2];\nfunction PlotGenerator() {\n  _s();\n  const [mathFunction, setMathFunction] = useState('');\n  const [plotCode, setPlotCode] = useState('1'); // Store code from the backend\n  const [plotUrl, setPlotUrl] = useState(null); // URL of the generated plot image\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Send the user's math function request to the backend\n    const res = await fetch('http://' + ipAddress + ':200/api/generate-plot', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        mathFunction: mathFunction\n      })\n    });\n    const data = await res.json();\n    setPlotCode(data.plotCode); // Generated code from OpenAI\n    setPlotUrl(data.plotUrl); // Plot URL from the backend (if plot is returned as an image)\n  };\n  console.log(plotCode);\n  console.log(plotUrl);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white',\n        // Use camelCase for CSS properties\n        fontSize: '32px',\n        // font-size becomes fontSize\n        textAlign: 'center',\n        // text-align becomes textAlign\n        fontFamily: 'Segoe UI, sans-serif',\n        // font-family becomes fontFamily\n        fontWeight: 'lighter',\n        // Bold text\n        fontStyle: 'normal' // Italic text\n      },\n      children: \"Plot a function or anything that you are intereseted in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"                        \", /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"custom-textarea\",\n            id: \"question\",\n            value: mathFunction,\n            onChange: e => setMathFunction(e.target.value),\n            rows: \"4\",\n            cols: \"50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit-button\",\n            type: \"submit\",\n            onClick: () => {\n              setPlotCode(null);\n              setPlotUrl(null);\n            },\n            children: \"\\u25BA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), plotCode && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"loading-animation\",\n      className: \"loading-animation\",\n      style: {\n        display: plotCode ? 'none' : 'inline-block'\n      } // Dynamically control visibility\n      ,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot\",\n        children: \".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot\",\n        children: \".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot\",\n        children: \".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this), plotUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated Plot:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: plotUrl,\n        alt: \"Generated plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(PlotGenerator, \"rfnG4nYTXtmBJhyslaHSeID/zXU=\");\n_c = PlotGenerator;\nexport default PlotGenerator;\nvar _c;\n$RefreshReg$(_c, \"PlotGenerator\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","currentUrl","window","location","href","ipAddress","split","PlotGenerator","_s","mathFunction","setMathFunction","plotCode","setPlotCode","plotUrl","setPlotUrl","handleSubmit","e","preventDefault","res","fetch","method","headers","body","JSON","stringify","data","json","console","log","children","style","color","fontSize","textAlign","fontFamily","fontWeight","fontStyle","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","id","value","onChange","target","rows","cols","type","onClick","display","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/ROG/ai-solver/src/components/PlotGenerator.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\nconst currentUrl = window.location.href;\r\n\r\nconst ipAddress = currentUrl.split(':')[1].split('/')[2];\r\n\r\n\r\n\r\nfunction PlotGenerator() {\r\n    const [mathFunction, setMathFunction] = useState('');\r\n    const [plotCode, setPlotCode] = useState('1'); // Store code from the backend\r\n    const [plotUrl, setPlotUrl] = useState(null);   // URL of the generated plot image\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Send the user's math function request to the backend\r\n        const res = await fetch('http://' + ipAddress + ':200/api/generate-plot', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                mathFunction: mathFunction,\r\n            }),\r\n        });\r\n\r\n        const data = await res.json();\r\n        setPlotCode(data.plotCode);  // Generated code from OpenAI\r\n        setPlotUrl(data.plotUrl);    // Plot URL from the backend (if plot is returned as an image)\r\n    };\r\n    console.log(plotCode);\r\n    console.log(plotUrl);\r\n    \r\n    return (\r\n        <div>\r\n            <h1 style={{\r\n                color: 'white',            // Use camelCase for CSS properties\r\n                fontSize: '32px',         // font-size becomes fontSize\r\n                textAlign: 'center',      // text-align becomes textAlign\r\n                fontFamily: 'Segoe UI, sans-serif',  // font-family becomes fontFamily\r\n                fontWeight: 'lighter',        // Bold text\r\n                fontStyle: 'normal',       // Italic text\r\n            }}>\r\n                Plot a function or anything that you are intereseted in\r\n            </h1>\r\n            <div className=\"input-wrapper\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <div>\r\n                        {/*                         <label htmlFor=\"question\">Your Question:</label>\r\n */}                        <textarea className=\"custom-textarea\"\r\n                            id=\"question\"\r\n                            value={mathFunction}\r\n                            onChange={(e) => setMathFunction(e.target.value)}\r\n                            rows=\"4\"\r\n                            cols=\"50\"\r\n                        />\r\n\r\n                        <button className=\"submit-button\" type=\"submit\" onClick={() => {\r\n                            setPlotCode(null);\r\n                            setPlotUrl(null);\r\n                        }}>&#9658;</button>\r\n                    </div>\r\n                </form>\r\n\r\n            </div>\r\n            {plotCode && (\r\n                <div\r\n                    id=\"loading-animation\"\r\n                    className=\"loading-animation\"\r\n                    style={{ display: plotCode ? 'none' : 'inline-block' }} // Dynamically control visibility\r\n                >\r\n                    <span className=\"dot\">.</span>\r\n                    <span className=\"dot\">.</span>\r\n                    <span className=\"dot\">.</span>\r\n                </div>\r\n            )}\r\n\r\n\r\n            {plotUrl && (\r\n                <div>\r\n                    <h3>Generated Plot:</h3>\r\n                    <img src={plotUrl} alt=\"Generated plot\" />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default PlotGenerator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}