{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo11xS0s';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo11xS0s = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\r\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\r\n   * Callback function invoked NZ times (number of nonzero items in S).\r\n   *\r\n   *\r\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\r\n   * C(i,j) = ┤\r\n   *          └  0          ; otherwise\r\n   *\r\n   *\r\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\r\n   * @param {Scalar}   b                 The Scalar value\r\n   * @param {Function} callback          The f(Aij,b) operation to invoke\r\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\r\n   *\r\n   * @return {Matrix}                    SparseMatrix (C)\r\n   *\r\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\r\n   */\n  return function matAlgo11xS0s(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k];\n        // invoke callback\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);\n        // check value is zero\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    }\n    // update ptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return s.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","map":{"version":3,"names":["factory","name","dependencies","createMatAlgo11xS0s","_ref","typed","equalScalar","matAlgo11xS0s","s","b","callback","inverse","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","Error","rows","columns","dt","eq","zero","cf","find","convert","cvalues","cindex","cptr","j","length","k0","k1","k","i","v","push","createSparseMatrix","values","index","ptr","size","datatype"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo11xS0s.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\r\nvar name = 'matAlgo11xS0s';\r\nvar dependencies = ['typed', 'equalScalar'];\r\nexport var createMatAlgo11xS0s = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    equalScalar\r\n  } = _ref;\r\n  /**\r\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\r\n   * Callback function invoked NZ times (number of nonzero items in S).\r\n   *\r\n   *\r\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\r\n   * C(i,j) = ┤\r\n   *          └  0          ; otherwise\r\n   *\r\n   *\r\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\r\n   * @param {Scalar}   b                 The Scalar value\r\n   * @param {Function} callback          The f(Aij,b) operation to invoke\r\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\r\n   *\r\n   * @return {Matrix}                    SparseMatrix (C)\r\n   *\r\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\r\n   */\r\n  return function matAlgo11xS0s(s, b, callback, inverse) {\r\n    // sparse matrix arrays\r\n    var avalues = s._values;\r\n    var aindex = s._index;\r\n    var aptr = s._ptr;\r\n    var asize = s._size;\r\n    var adt = s._datatype;\r\n\r\n    // sparse matrix cannot be a Pattern matrix\r\n    if (!avalues) {\r\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\r\n    }\r\n\r\n    // rows & columns\r\n    var rows = asize[0];\r\n    var columns = asize[1];\r\n\r\n    // datatype\r\n    var dt;\r\n    // equal signature to use\r\n    var eq = equalScalar;\r\n    // zero value\r\n    var zero = 0;\r\n    // callback signature to use\r\n    var cf = callback;\r\n\r\n    // process data types\r\n    if (typeof adt === 'string') {\r\n      // datatype\r\n      dt = adt;\r\n      // find signature that matches (dt, dt)\r\n      eq = typed.find(equalScalar, [dt, dt]);\r\n      // convert 0 to the same datatype\r\n      zero = typed.convert(0, dt);\r\n      // convert b to the same datatype\r\n      b = typed.convert(b, dt);\r\n      // callback\r\n      cf = typed.find(callback, [dt, dt]);\r\n    }\r\n\r\n    // result arrays\r\n    var cvalues = [];\r\n    var cindex = [];\r\n    var cptr = [];\r\n\r\n    // loop columns\r\n    for (var j = 0; j < columns; j++) {\r\n      // initialize ptr\r\n      cptr[j] = cindex.length;\r\n      // values in j\r\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\r\n        // row\r\n        var i = aindex[k];\r\n        // invoke callback\r\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);\r\n        // check value is zero\r\n        if (!eq(v, zero)) {\r\n          // push index & value\r\n          cindex.push(i);\r\n          cvalues.push(v);\r\n        }\r\n      }\r\n    }\r\n    // update ptr\r\n    cptr[columns] = cindex.length;\r\n\r\n    // return sparse matrix\r\n    return s.createSparseMatrix({\r\n      values: cvalues,\r\n      index: cindex,\r\n      ptr: cptr,\r\n      size: [rows, columns],\r\n      datatype: dt\r\n    });\r\n  };\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,IAAIC,IAAI,GAAG,eAAe;AAC1B,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,aAAa,CAAC;AAC3C,OAAO,IAAIC,mBAAmB,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAClF,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO,SAASG,aAAaA,CAACC,CAAC,EAAEC,CAAC,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IACrD;IACA,IAAIC,OAAO,GAAGJ,CAAC,CAACK,OAAO;IACvB,IAAIC,MAAM,GAAGN,CAAC,CAACO,MAAM;IACrB,IAAIC,IAAI,GAAGR,CAAC,CAACS,IAAI;IACjB,IAAIC,KAAK,GAAGV,CAAC,CAACW,KAAK;IACnB,IAAIC,GAAG,GAAGZ,CAAC,CAACa,SAAS;;IAErB;IACA,IAAI,CAACT,OAAO,EAAE;MACZ,MAAM,IAAIU,KAAK,CAAC,oEAAoE,CAAC;IACvF;;IAEA;IACA,IAAIC,IAAI,GAAGL,KAAK,CAAC,CAAC,CAAC;IACnB,IAAIM,OAAO,GAAGN,KAAK,CAAC,CAAC,CAAC;;IAEtB;IACA,IAAIO,EAAE;IACN;IACA,IAAIC,EAAE,GAAGpB,WAAW;IACpB;IACA,IAAIqB,IAAI,GAAG,CAAC;IACZ;IACA,IAAIC,EAAE,GAAGlB,QAAQ;;IAEjB;IACA,IAAI,OAAOU,GAAG,KAAK,QAAQ,EAAE;MAC3B;MACAK,EAAE,GAAGL,GAAG;MACR;MACAM,EAAE,GAAGrB,KAAK,CAACwB,IAAI,CAACvB,WAAW,EAAE,CAACmB,EAAE,EAAEA,EAAE,CAAC,CAAC;MACtC;MACAE,IAAI,GAAGtB,KAAK,CAACyB,OAAO,CAAC,CAAC,EAAEL,EAAE,CAAC;MAC3B;MACAhB,CAAC,GAAGJ,KAAK,CAACyB,OAAO,CAACrB,CAAC,EAAEgB,EAAE,CAAC;MACxB;MACAG,EAAE,GAAGvB,KAAK,CAACwB,IAAI,CAACnB,QAAQ,EAAE,CAACe,EAAE,EAAEA,EAAE,CAAC,CAAC;IACrC;;IAEA;IACA,IAAIM,OAAO,GAAG,EAAE;IAChB,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIC,IAAI,GAAG,EAAE;;IAEb;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,OAAO,EAAEU,CAAC,EAAE,EAAE;MAChC;MACAD,IAAI,CAACC,CAAC,CAAC,GAAGF,MAAM,CAACG,MAAM;MACvB;MACA,KAAK,IAAIC,EAAE,GAAGpB,IAAI,CAACkB,CAAC,CAAC,EAAEG,EAAE,GAAGrB,IAAI,CAACkB,CAAC,GAAG,CAAC,CAAC,EAAEI,CAAC,GAAGF,EAAE,EAAEE,CAAC,GAAGD,EAAE,EAAEC,CAAC,EAAE,EAAE;QAC5D;QACA,IAAIC,CAAC,GAAGzB,MAAM,CAACwB,CAAC,CAAC;QACjB;QACA,IAAIE,CAAC,GAAG7B,OAAO,GAAGiB,EAAE,CAACnB,CAAC,EAAEG,OAAO,CAAC0B,CAAC,CAAC,CAAC,GAAGV,EAAE,CAAChB,OAAO,CAAC0B,CAAC,CAAC,EAAE7B,CAAC,CAAC;QACvD;QACA,IAAI,CAACiB,EAAE,CAACc,CAAC,EAAEb,IAAI,CAAC,EAAE;UAChB;UACAK,MAAM,CAACS,IAAI,CAACF,CAAC,CAAC;UACdR,OAAO,CAACU,IAAI,CAACD,CAAC,CAAC;QACjB;MACF;IACF;IACA;IACAP,IAAI,CAACT,OAAO,CAAC,GAAGQ,MAAM,CAACG,MAAM;;IAE7B;IACA,OAAO3B,CAAC,CAACkC,kBAAkB,CAAC;MAC1BC,MAAM,EAAEZ,OAAO;MACfa,KAAK,EAAEZ,MAAM;MACba,GAAG,EAAEZ,IAAI;MACTa,IAAI,EAAE,CAACvB,IAAI,EAAEC,OAAO,CAAC;MACrBuB,QAAQ,EAAEtB;IACZ,CAAC,CAAC;EACJ,CAAC;AACH,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}