{"ast":null,"code":"import { optimizeCallback } from '../../utils/optimizeCallback.js';\nimport { factory } from '../../utils/factory.js';\nimport { recurse } from '../../utils/array.js';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEach = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\r\n   *\r\n   * The callback is invoked with three arguments: the current value,\r\n   * the current index, and the matrix operated upon.\r\n   * Note that because the matrix/array might be\r\n   * multidimensional, the \"index\" argument is always an array of numbers giving\r\n   * the index in each dimension. This is true even for vectors: the \"index\"\r\n   * argument is an array of length 1, rather than simply a number.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.forEach(x, callback)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.forEach([1, 2, 3], function(value) {\r\n   *      console.log(value)\r\n   *    })\r\n   *    // outputs 1, 2, 3\r\n   *\r\n   * See also:\r\n   *\r\n   *    filter, map, sort\r\n   *\r\n   * @param {Matrix | Array} x    The matrix to iterate on.\r\n   * @param {Function} callback   The callback function is invoked with three\r\n   *                              parameters: the value of the element, the index\r\n   *                              of the element, and the Matrix/array being traversed.\r\n   */\n  return typed(name, {\n    'Array, function': _forEach,\n    'Matrix, function': function Matrix_function(x, callback) {\n      x.forEach(callback);\n    }\n  });\n});\n\n/**\r\n * forEach for a multidimensional array\r\n * @param {Array} array\r\n * @param {Function} callback\r\n * @private\r\n */\nfunction _forEach(array, callback) {\n  recurse(array, [], array, optimizeCallback(callback, array, name));\n}","map":{"version":3,"names":["optimizeCallback","factory","recurse","name","dependencies","createForEach","_ref","typed","_forEach","Matrix_function","x","callback","forEach","array"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/matrix/forEach.js"],"sourcesContent":["import { optimizeCallback } from '../../utils/optimizeCallback.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { recurse } from '../../utils/array.js';\r\nvar name = 'forEach';\r\nvar dependencies = ['typed'];\r\nexport var createForEach = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\r\n   *\r\n   * The callback is invoked with three arguments: the current value,\r\n   * the current index, and the matrix operated upon.\r\n   * Note that because the matrix/array might be\r\n   * multidimensional, the \"index\" argument is always an array of numbers giving\r\n   * the index in each dimension. This is true even for vectors: the \"index\"\r\n   * argument is an array of length 1, rather than simply a number.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.forEach(x, callback)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.forEach([1, 2, 3], function(value) {\r\n   *      console.log(value)\r\n   *    })\r\n   *    // outputs 1, 2, 3\r\n   *\r\n   * See also:\r\n   *\r\n   *    filter, map, sort\r\n   *\r\n   * @param {Matrix | Array} x    The matrix to iterate on.\r\n   * @param {Function} callback   The callback function is invoked with three\r\n   *                              parameters: the value of the element, the index\r\n   *                              of the element, and the Matrix/array being traversed.\r\n   */\r\n  return typed(name, {\r\n    'Array, function': _forEach,\r\n    'Matrix, function': function Matrix_function(x, callback) {\r\n      x.forEach(callback);\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * forEach for a multidimensional array\r\n * @param {Array} array\r\n * @param {Function} callback\r\n * @private\r\n */\r\nfunction _forEach(array, callback) {\r\n  recurse(array, [], array, optimizeCallback(callback, array, name));\r\n}"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,iCAAiC;AAClE,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,aAAa,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC5E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,iBAAiB,EAAEK,QAAQ;IAC3B,kBAAkB,EAAE,SAASC,eAAeA,CAACC,CAAC,EAAEC,QAAQ,EAAE;MACxDD,CAAC,CAACE,OAAO,CAACD,QAAQ,CAAC;IACrB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,SAASH,QAAQA,CAACK,KAAK,EAAEF,QAAQ,EAAE;EACjCT,OAAO,CAACW,KAAK,EAAE,EAAE,EAAEA,KAAK,EAAEb,gBAAgB,CAACW,QAAQ,EAAEE,KAAK,EAAEV,IAAI,CAAC,CAAC;AACpE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}