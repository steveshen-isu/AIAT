{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { nearlyEqual, splitNumber } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { roundNumber } from '../../plain/number/index.js';\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport var createRound = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    equalScalar,\n    zeros,\n    BigNumber: _BigNumber,\n    DenseMatrix\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  function toExponent(epsilon) {\n    return Math.abs(splitNumber(epsilon).exponent);\n  }\n\n  /**\r\n   * Round a value towards the nearest rounded value.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.round(x)\r\n   *    math.round(x, n)\r\n   *    math.round(unit, valuelessUnit)\r\n   *    math.round(unit, n, valuelessUnit)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.round(3.22)             // returns number 3\r\n   *    math.round(3.82)             // returns number 4\r\n   *    math.round(-4.2)             // returns number -4\r\n   *    math.round(-4.7)             // returns number -5\r\n   *    math.round(3.22, 1)          // returns number 3.2\r\n   *    math.round(3.88, 1)          // returns number 3.9\r\n   *    math.round(-4.21, 1)         // returns number -4.2\r\n   *    math.round(-4.71, 1)         // returns number -4.7\r\n   *    math.round(math.pi, 3)       // returns number 3.142\r\n   *    math.round(123.45678, 2)     // returns number 123.46\r\n   *\r\n   *    const c = math.complex(3.2, -2.7)\r\n   *    math.round(c)                // returns Complex 3 - 3i\r\n   *\r\n   *    const unit = math.unit('3.241 cm')\r\n   *    const cm = math.unit('cm')\r\n   *    const mm = math.unit('mm')\r\n   *    math.round(unit, 1, cm)      // returns Unit 3.2 cm\r\n   *    math.round(unit, 1, mm)      // returns Unit 32.4 mm\r\n   *\r\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\r\n   *\r\n   * See also:\r\n   *\r\n   *    ceil, fix, floor\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x  Value to be rounded\r\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\r\n   * @param  {Unit} [valuelessUnit]                                        A valueless unit\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Rounded value\r\n   */\n  return typed(name, {\n    number: function number(x) {\n      // Handle round off errors by first rounding to relTol precision\n      var xEpsilon = roundNumber(x, toExponent(config.relTol));\n      var xSelected = nearlyEqual(x, xEpsilon, config.relTol, config.absTol) ? xEpsilon : x;\n      return roundNumber(xSelected);\n    },\n    'number, number': function number_number(x, n) {\n      // Same as number: unless user specifies more decimals than relTol\n      var epsilonExponent = toExponent(config.relTol);\n      if (n >= epsilonExponent) {\n        return roundNumber(x, n);\n      }\n      var xEpsilon = roundNumber(x, epsilonExponent);\n      var xSelected = nearlyEqual(x, xEpsilon, config.relTol, config.absTol) ? xEpsilon : x;\n      return roundNumber(xSelected, n);\n    },\n    'number, BigNumber': function number_BigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return new _BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function Complex_number(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Complex, BigNumber': function Complex_BigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      var _n = n.toNumber();\n      return x.round(_n);\n    },\n    BigNumber: function BigNumber(x) {\n      // Handle round off errors by first rounding to relTol precision\n      var xEpsilon = new _BigNumber(x).toDecimalPlaces(toExponent(config.relTol));\n      var xSelected = bigNearlyEqual(x, xEpsilon, config.relTol, config.absTol) ? xEpsilon : x;\n      return xSelected.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      // Same as BigNumber: unless user specifies more decimals than relTol\n      var epsilonExponent = toExponent(config.relTol);\n      if (n >= epsilonExponent) {\n        return x.toDecimalPlaces(n.toNumber());\n      }\n      var xEpsilon = x.toDecimalPlaces(epsilonExponent);\n      var xSelected = bigNearlyEqual(x, xEpsilon, config.relTol, config.absTol) ? xEpsilon : x;\n      return xSelected.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function Fraction_number(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Fraction, BigNumber': function Fraction_BigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n.toNumber());\n    },\n    'Unit, number, Unit': typed.referToSelf(self => function (x, n, unit) {\n      var valueless = x.toNumeric(unit);\n      return unit.multiply(self(valueless, n));\n    }),\n    'Unit, BigNumber, Unit': typed.referToSelf(self => (x, n, unit) => self(x, n.toNumber(), unit)),\n    'Array | Matrix, number | BigNumber, Unit': typed.referToSelf(self => (x, n, unit) => {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, value => self(value, n, unit), true);\n    }),\n    'Array | Matrix | Unit, Unit': typed.referToSelf(self => (x, unit) => self(x, 0, unit)),\n    'Array | Matrix': typed.referToSelf(self => x => {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, self, true);\n    }),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      return matAlgo11xS0s(x, n, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      return matAlgo14xDs(x, n, self, false);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), n, self, false).valueOf();\n    }),\n    'number | Complex | BigNumber | Fraction, SparseMatrix': typed.referToSelf(self => (x, n) => {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(n.size(), n.storage());\n      }\n      return matAlgo12xSfs(n, x, self, true);\n    }),\n    'number | Complex | BigNumber | Fraction, DenseMatrix': typed.referToSelf(self => (x, n) => {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(n.size(), n.storage());\n      }\n      return matAlgo14xDs(n, x, self, true);\n    }),\n    'number | Complex | BigNumber | Fraction, Array': typed.referToSelf(self => (x, n) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(n), x, self, true).valueOf();\n    })\n  });\n});","map":{"version":3,"names":["factory","deepMap","nearlyEqual","splitNumber","bigNearlyEqual","createMatAlgo11xS0s","createMatAlgo12xSfs","createMatAlgo14xDs","roundNumber","NO_INT","name","dependencies","createRound","_ref","typed","config","matrix","equalScalar","zeros","BigNumber","_BigNumber","DenseMatrix","matAlgo11xS0s","matAlgo12xSfs","matAlgo14xDs","toExponent","epsilon","Math","abs","exponent","number","x","xEpsilon","relTol","xSelected","absTol","number_number","n","epsilonExponent","number_BigNumber","isInteger","TypeError","toDecimalPlaces","toNumber","Complex","round","Complex_number","Complex_BigNumber","_n","BigNumber_BigNumber","Fraction","Fraction_number","Fraction_BigNumber","referToSelf","self","unit","valueless","toNumeric","multiply","value","valueOf","size","storage"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/round.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { nearlyEqual, splitNumber } from '../../utils/number.js';\r\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\r\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\r\nimport { roundNumber } from '../../plain/number/index.js';\r\nvar NO_INT = 'Number of decimals in function round must be an integer';\r\nvar name = 'round';\r\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\r\nexport var createRound = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    matrix,\r\n    equalScalar,\r\n    zeros,\r\n    BigNumber: _BigNumber,\r\n    DenseMatrix\r\n  } = _ref;\r\n  var matAlgo11xS0s = createMatAlgo11xS0s({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matAlgo14xDs = createMatAlgo14xDs({\r\n    typed\r\n  });\r\n  function toExponent(epsilon) {\r\n    return Math.abs(splitNumber(epsilon).exponent);\r\n  }\r\n\r\n  /**\r\n   * Round a value towards the nearest rounded value.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.round(x)\r\n   *    math.round(x, n)\r\n   *    math.round(unit, valuelessUnit)\r\n   *    math.round(unit, n, valuelessUnit)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.round(3.22)             // returns number 3\r\n   *    math.round(3.82)             // returns number 4\r\n   *    math.round(-4.2)             // returns number -4\r\n   *    math.round(-4.7)             // returns number -5\r\n   *    math.round(3.22, 1)          // returns number 3.2\r\n   *    math.round(3.88, 1)          // returns number 3.9\r\n   *    math.round(-4.21, 1)         // returns number -4.2\r\n   *    math.round(-4.71, 1)         // returns number -4.7\r\n   *    math.round(math.pi, 3)       // returns number 3.142\r\n   *    math.round(123.45678, 2)     // returns number 123.46\r\n   *\r\n   *    const c = math.complex(3.2, -2.7)\r\n   *    math.round(c)                // returns Complex 3 - 3i\r\n   *\r\n   *    const unit = math.unit('3.241 cm')\r\n   *    const cm = math.unit('cm')\r\n   *    const mm = math.unit('mm')\r\n   *    math.round(unit, 1, cm)      // returns Unit 3.2 cm\r\n   *    math.round(unit, 1, mm)      // returns Unit 32.4 mm\r\n   *\r\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\r\n   *\r\n   * See also:\r\n   *\r\n   *    ceil, fix, floor\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x  Value to be rounded\r\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\r\n   * @param  {Unit} [valuelessUnit]                                        A valueless unit\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Rounded value\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      // Handle round off errors by first rounding to relTol precision\r\n      var xEpsilon = roundNumber(x, toExponent(config.relTol));\r\n      var xSelected = nearlyEqual(x, xEpsilon, config.relTol, config.absTol) ? xEpsilon : x;\r\n      return roundNumber(xSelected);\r\n    },\r\n    'number, number': function number_number(x, n) {\r\n      // Same as number: unless user specifies more decimals than relTol\r\n      var epsilonExponent = toExponent(config.relTol);\r\n      if (n >= epsilonExponent) {\r\n        return roundNumber(x, n);\r\n      }\r\n      var xEpsilon = roundNumber(x, epsilonExponent);\r\n      var xSelected = nearlyEqual(x, xEpsilon, config.relTol, config.absTol) ? xEpsilon : x;\r\n      return roundNumber(xSelected, n);\r\n    },\r\n    'number, BigNumber': function number_BigNumber(x, n) {\r\n      if (!n.isInteger()) {\r\n        throw new TypeError(NO_INT);\r\n      }\r\n      return new _BigNumber(x).toDecimalPlaces(n.toNumber());\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.round();\r\n    },\r\n    'Complex, number': function Complex_number(x, n) {\r\n      if (n % 1) {\r\n        throw new TypeError(NO_INT);\r\n      }\r\n      return x.round(n);\r\n    },\r\n    'Complex, BigNumber': function Complex_BigNumber(x, n) {\r\n      if (!n.isInteger()) {\r\n        throw new TypeError(NO_INT);\r\n      }\r\n      var _n = n.toNumber();\r\n      return x.round(_n);\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      // Handle round off errors by first rounding to relTol precision\r\n      var xEpsilon = new _BigNumber(x).toDecimalPlaces(toExponent(config.relTol));\r\n      var xSelected = bigNearlyEqual(x, xEpsilon, config.relTol, config.absTol) ? xEpsilon : x;\r\n      return xSelected.toDecimalPlaces(0);\r\n    },\r\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, n) {\r\n      if (!n.isInteger()) {\r\n        throw new TypeError(NO_INT);\r\n      }\r\n\r\n      // Same as BigNumber: unless user specifies more decimals than relTol\r\n      var epsilonExponent = toExponent(config.relTol);\r\n      if (n >= epsilonExponent) {\r\n        return x.toDecimalPlaces(n.toNumber());\r\n      }\r\n      var xEpsilon = x.toDecimalPlaces(epsilonExponent);\r\n      var xSelected = bigNearlyEqual(x, xEpsilon, config.relTol, config.absTol) ? xEpsilon : x;\r\n      return xSelected.toDecimalPlaces(n.toNumber());\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return x.round();\r\n    },\r\n    'Fraction, number': function Fraction_number(x, n) {\r\n      if (n % 1) {\r\n        throw new TypeError(NO_INT);\r\n      }\r\n      return x.round(n);\r\n    },\r\n    'Fraction, BigNumber': function Fraction_BigNumber(x, n) {\r\n      if (!n.isInteger()) {\r\n        throw new TypeError(NO_INT);\r\n      }\r\n      return x.round(n.toNumber());\r\n    },\r\n    'Unit, number, Unit': typed.referToSelf(self => function (x, n, unit) {\r\n      var valueless = x.toNumeric(unit);\r\n      return unit.multiply(self(valueless, n));\r\n    }),\r\n    'Unit, BigNumber, Unit': typed.referToSelf(self => (x, n, unit) => self(x, n.toNumber(), unit)),\r\n    'Array | Matrix, number | BigNumber, Unit': typed.referToSelf(self => (x, n, unit) => {\r\n      // deep map collection, skip zeros since round(0) = 0\r\n      return deepMap(x, value => self(value, n, unit), true);\r\n    }),\r\n    'Array | Matrix | Unit, Unit': typed.referToSelf(self => (x, unit) => self(x, 0, unit)),\r\n    'Array | Matrix': typed.referToSelf(self => x => {\r\n      // deep map collection, skip zeros since round(0) = 0\r\n      return deepMap(x, self, true);\r\n    }),\r\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, n) => {\r\n      return matAlgo11xS0s(x, n, self, false);\r\n    }),\r\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, n) => {\r\n      return matAlgo14xDs(x, n, self, false);\r\n    }),\r\n    'Array, number | BigNumber': typed.referToSelf(self => (x, n) => {\r\n      // use matrix implementation\r\n      return matAlgo14xDs(matrix(x), n, self, false).valueOf();\r\n    }),\r\n    'number | Complex | BigNumber | Fraction, SparseMatrix': typed.referToSelf(self => (x, n) => {\r\n      // check scalar is zero\r\n      if (equalScalar(x, 0)) {\r\n        // do not execute algorithm, result will be a zero matrix\r\n        return zeros(n.size(), n.storage());\r\n      }\r\n      return matAlgo12xSfs(n, x, self, true);\r\n    }),\r\n    'number | Complex | BigNumber | Fraction, DenseMatrix': typed.referToSelf(self => (x, n) => {\r\n      // check scalar is zero\r\n      if (equalScalar(x, 0)) {\r\n        // do not execute algorithm, result will be a zero matrix\r\n        return zeros(n.size(), n.storage());\r\n      }\r\n      return matAlgo14xDs(n, x, self, true);\r\n    }),\r\n    'number | Complex | BigNumber | Fraction, Array': typed.referToSelf(self => (x, n) => {\r\n      // use matrix implementation\r\n      return matAlgo14xDs(matrix(n), x, self, true).valueOf();\r\n    })\r\n  });\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}