{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { acscNumber } from '../../plain/number/index.js';\nvar name = 'acsc';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAcsc = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\r\n   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\r\n   *\r\n   * To avoid confusion with the matrix arccosecant, this function does not\r\n   * apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.acsc(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.acsc(2)             // returns 0.5235987755982989\r\n   *    math.acsc(0.5)           // returns Complex 1.5707963267948966 -1.3169578969248166i\r\n   *    math.acsc(math.csc(1.5)) // returns number ~1.5\r\n   *\r\n   * See also:\r\n   *\r\n   *    csc, asin, asec\r\n   *\r\n   * @param {number | BigNumber | Complex} x   Function input\r\n   * @return {number | BigNumber | Complex} The arc cosecant of x\r\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return acscNumber(x);\n      }\n      return new Complex(x, 0).acsc();\n    },\n    Complex: function Complex(x) {\n      return x.acsc();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).asin();\n    }\n  });\n});","map":{"version":3,"names":["factory","acscNumber","name","dependencies","createAcsc","_ref","typed","config","Complex","BigNumber","_BigNumber","number","x","predictable","acsc","div","asin"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/trigonometry/acsc.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { acscNumber } from '../../plain/number/index.js';\r\nvar name = 'acsc';\r\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\r\nexport var createAcsc = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    Complex,\r\n    BigNumber: _BigNumber\r\n  } = _ref;\r\n  /**\r\n   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\r\n   *\r\n   * To avoid confusion with the matrix arccosecant, this function does not\r\n   * apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.acsc(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.acsc(2)             // returns 0.5235987755982989\r\n   *    math.acsc(0.5)           // returns Complex 1.5707963267948966 -1.3169578969248166i\r\n   *    math.acsc(math.csc(1.5)) // returns number ~1.5\r\n   *\r\n   * See also:\r\n   *\r\n   *    csc, asin, asec\r\n   *\r\n   * @param {number | BigNumber | Complex} x   Function input\r\n   * @return {number | BigNumber | Complex} The arc cosecant of x\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      if (x <= -1 || x >= 1 || config.predictable) {\r\n        return acscNumber(x);\r\n      }\r\n      return new Complex(x, 0).acsc();\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.acsc();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return new _BigNumber(1).div(x).asin();\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC;AAC9D,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,OAAO;IACPC,SAAS,EAAEC;EACb,CAAC,GAAGL,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBS,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,IAAI,CAAC,CAAC,IAAIA,CAAC,IAAI,CAAC,IAAIL,MAAM,CAACM,WAAW,EAAE;QAC3C,OAAOZ,UAAU,CAACW,CAAC,CAAC;MACtB;MACA,OAAO,IAAIJ,OAAO,CAACI,CAAC,EAAE,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC;IACjC,CAAC;IACDN,OAAO,EAAE,SAASA,OAAOA,CAACI,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACE,IAAI,CAAC,CAAC;IACjB,CAAC;IACDL,SAAS,EAAE,SAASA,SAASA,CAACG,CAAC,EAAE;MAC/B,OAAO,IAAIF,UAAU,CAAC,CAAC,CAAC,CAACK,GAAG,CAACH,CAAC,CAAC,CAACI,IAAI,CAAC,CAAC;IACxC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}