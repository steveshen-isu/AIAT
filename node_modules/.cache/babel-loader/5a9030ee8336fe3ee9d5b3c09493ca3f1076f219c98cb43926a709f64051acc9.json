{"ast":null,"code":"import { isBigNumber, isMatrix } from '../../utils/is.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { ArgumentsError } from '../../error/ArgumentsError.js';\nimport { isInteger } from '../../utils/number.js';\nimport { format } from '../../utils/string.js';\nimport { clone } from '../../utils/object.js';\nimport { resize as arrayResize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'resize';\nvar dependencies = ['config', 'matrix'];\nexport var createResize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    matrix\n  } = _ref;\n  /**\r\n   * Resize a matrix\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.resize(x, size)\r\n   *     math.resize(x, size, defaultValue)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]\r\n   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]\r\n   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]\r\n   *     math.resize(\"hello\", [8], \"!\")    // returns string 'hello!!!'\r\n   *\r\n   * See also:\r\n   *\r\n   *     size, squeeze, subset, reshape\r\n   *\r\n   * @param {Array | Matrix | *} x             Matrix to be resized\r\n   * @param {Array | Matrix} size              One dimensional array with numbers\r\n   * @param {number | string} [defaultValue=0] Zero by default, except in\r\n   *                                           case of a string, in that case\r\n   *                                           defaultValue = ' '\r\n   * @return {* | Array | Matrix} A resized clone of matrix `x`\r\n   */\n  // TODO: rework resize to a typed-function\n  return function resize(x, size, defaultValue) {\n    if (arguments.length !== 2 && arguments.length !== 3) {\n      throw new ArgumentsError('resize', arguments.length, 2, 3);\n    }\n    if (isMatrix(size)) {\n      size = size.valueOf(); // get Array\n    }\n    if (isBigNumber(size[0])) {\n      // convert bignumbers to numbers\n      size = size.map(function (value) {\n        return !isBigNumber(value) ? value : value.toNumber();\n      });\n    }\n\n    // check x is a Matrix\n    if (isMatrix(x)) {\n      // use optimized matrix implementation, return copy\n      return x.resize(size, defaultValue, true);\n    }\n    if (typeof x === 'string') {\n      // resize string\n      return _resizeString(x, size, defaultValue);\n    }\n\n    // check result should be a matrix\n    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';\n    if (size.length === 0) {\n      // output a scalar\n      while (Array.isArray(x)) {\n        x = x[0];\n      }\n      return clone(x);\n    } else {\n      // output an array/matrix\n      if (!Array.isArray(x)) {\n        x = [x];\n      }\n      x = clone(x);\n      var res = arrayResize(x, size, defaultValue);\n      return asMatrix ? matrix(res) : res;\n    }\n  };\n\n  /**\r\n   * Resize a string\r\n   * @param {string} str\r\n   * @param {number[]} size\r\n   * @param {string} [defaultChar=' ']\r\n   * @private\r\n   */\n  function _resizeString(str, size, defaultChar) {\n    if (defaultChar !== undefined) {\n      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {\n        throw new TypeError('Single character expected as defaultValue');\n      }\n    } else {\n      defaultChar = ' ';\n    }\n    if (size.length !== 1) {\n      throw new DimensionError(size.length, 1);\n    }\n    var len = size[0];\n    if (typeof len !== 'number' || !isInteger(len)) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');\n    }\n    if (str.length > len) {\n      return str.substring(0, len);\n    } else if (str.length < len) {\n      var res = str;\n      for (var i = 0, ii = len - str.length; i < ii; i++) {\n        res += defaultChar;\n      }\n      return res;\n    } else {\n      return str;\n    }\n  }\n});","map":{"version":3,"names":["isBigNumber","isMatrix","DimensionError","ArgumentsError","isInteger","format","clone","resize","arrayResize","factory","name","dependencies","createResize","_ref","config","matrix","x","size","defaultValue","arguments","length","valueOf","map","value","toNumber","_resizeString","asMatrix","Array","isArray","res","str","defaultChar","undefined","TypeError","len","substring","i","ii"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/matrix/resize.js"],"sourcesContent":["import { isBigNumber, isMatrix } from '../../utils/is.js';\r\nimport { DimensionError } from '../../error/DimensionError.js';\r\nimport { ArgumentsError } from '../../error/ArgumentsError.js';\r\nimport { isInteger } from '../../utils/number.js';\r\nimport { format } from '../../utils/string.js';\r\nimport { clone } from '../../utils/object.js';\r\nimport { resize as arrayResize } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'resize';\r\nvar dependencies = ['config', 'matrix'];\r\nexport var createResize = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    config,\r\n    matrix\r\n  } = _ref;\r\n  /**\r\n   * Resize a matrix\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.resize(x, size)\r\n   *     math.resize(x, size, defaultValue)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]\r\n   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]\r\n   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]\r\n   *     math.resize(\"hello\", [8], \"!\")    // returns string 'hello!!!'\r\n   *\r\n   * See also:\r\n   *\r\n   *     size, squeeze, subset, reshape\r\n   *\r\n   * @param {Array | Matrix | *} x             Matrix to be resized\r\n   * @param {Array | Matrix} size              One dimensional array with numbers\r\n   * @param {number | string} [defaultValue=0] Zero by default, except in\r\n   *                                           case of a string, in that case\r\n   *                                           defaultValue = ' '\r\n   * @return {* | Array | Matrix} A resized clone of matrix `x`\r\n   */\r\n  // TODO: rework resize to a typed-function\r\n  return function resize(x, size, defaultValue) {\r\n    if (arguments.length !== 2 && arguments.length !== 3) {\r\n      throw new ArgumentsError('resize', arguments.length, 2, 3);\r\n    }\r\n    if (isMatrix(size)) {\r\n      size = size.valueOf(); // get Array\r\n    }\r\n    if (isBigNumber(size[0])) {\r\n      // convert bignumbers to numbers\r\n      size = size.map(function (value) {\r\n        return !isBigNumber(value) ? value : value.toNumber();\r\n      });\r\n    }\r\n\r\n    // check x is a Matrix\r\n    if (isMatrix(x)) {\r\n      // use optimized matrix implementation, return copy\r\n      return x.resize(size, defaultValue, true);\r\n    }\r\n    if (typeof x === 'string') {\r\n      // resize string\r\n      return _resizeString(x, size, defaultValue);\r\n    }\r\n\r\n    // check result should be a matrix\r\n    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';\r\n    if (size.length === 0) {\r\n      // output a scalar\r\n      while (Array.isArray(x)) {\r\n        x = x[0];\r\n      }\r\n      return clone(x);\r\n    } else {\r\n      // output an array/matrix\r\n      if (!Array.isArray(x)) {\r\n        x = [x];\r\n      }\r\n      x = clone(x);\r\n      var res = arrayResize(x, size, defaultValue);\r\n      return asMatrix ? matrix(res) : res;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Resize a string\r\n   * @param {string} str\r\n   * @param {number[]} size\r\n   * @param {string} [defaultChar=' ']\r\n   * @private\r\n   */\r\n  function _resizeString(str, size, defaultChar) {\r\n    if (defaultChar !== undefined) {\r\n      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {\r\n        throw new TypeError('Single character expected as defaultValue');\r\n      }\r\n    } else {\r\n      defaultChar = ' ';\r\n    }\r\n    if (size.length !== 1) {\r\n      throw new DimensionError(size.length, 1);\r\n    }\r\n    var len = size[0];\r\n    if (typeof len !== 'number' || !isInteger(len)) {\r\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');\r\n    }\r\n    if (str.length > len) {\r\n      return str.substring(0, len);\r\n    } else if (str.length < len) {\r\n      var res = str;\r\n      for (var i = 0, ii = len - str.length; i < ii; i++) {\r\n        res += defaultChar;\r\n      }\r\n      return res;\r\n    } else {\r\n      return str;\r\n    }\r\n  }\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}