{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'unequal';\nvar dependencies = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix', 'concat', 'SparseMatrix'];\nexport var createUnequal = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    equalScalar,\n    matrix,\n    DenseMatrix,\n    concat,\n    SparseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    SparseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\r\n   * Test whether two values are unequal.\r\n   *\r\n   * The function tests whether the relative difference between x and y is\r\n   * larger than the configured relTol and absTol. The function cannot be used to compare\r\n   * values smaller than approximately 2.22e-16.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\r\n   * Strings are compared by their numerical value.\r\n   *\r\n   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\r\n   * with everything except `null`, and `undefined` is unequal with everything\r\n   * except `undefined`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.unequal(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.unequal(2 + 2, 3)       // returns true\r\n   *    math.unequal(2 + 2, 4)       // returns false\r\n   *\r\n   *    const a = math.unit('50 cm')\r\n   *    const b = math.unit('5 m')\r\n   *    math.unequal(a, b)           // returns false\r\n   *\r\n   *    const c = [2, 5, 1]\r\n   *    const d = [2, 7, 1]\r\n   *\r\n   *    math.unequal(c, d)           // returns [false, true, false]\r\n   *    math.deepEqual(c, d)         // returns false\r\n   *\r\n   *    math.unequal(0, null)        // returns true\r\n   * See also:\r\n   *\r\n   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\r\n   *\r\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\r\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\r\n   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false\r\n   */\n  return typed(name, createUnequalNumber({\n    typed,\n    equalScalar\n  }), matrixAlgorithmSuite({\n    elop: _unequal,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n  function _unequal(x, y) {\n    return !equalScalar(x, y);\n  }\n});\nexport var createUnequalNumber = factory(name, ['typed', 'equalScalar'], _ref2 => {\n  var {\n    typed,\n    equalScalar\n  } = _ref2;\n  return typed(name, {\n    'any, any': function any_any(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y !== null;\n      }\n      if (y === null) {\n        return x !== null;\n      }\n      if (x === undefined) {\n        return y !== undefined;\n      }\n      if (y === undefined) {\n        return x !== undefined;\n      }\n      return !equalScalar(x, y);\n    }\n  });\n});","map":{"version":3,"names":["factory","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo12xSfs","createMatrixAlgorithmSuite","name","dependencies","createUnequal","_ref","typed","config","equalScalar","matrix","DenseMatrix","concat","SparseMatrix","matAlgo03xDSf","matAlgo07xSSf","matAlgo12xSfs","matrixAlgorithmSuite","createUnequalNumber","elop","_unequal","SS","DS","Ss","x","y","_ref2","any_any","undefined"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/relational/unequal.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\r\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'unequal';\r\nvar dependencies = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix', 'concat', 'SparseMatrix'];\r\nexport var createUnequal = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    equalScalar,\r\n    matrix,\r\n    DenseMatrix,\r\n    concat,\r\n    SparseMatrix\r\n  } = _ref;\r\n  var matAlgo03xDSf = createMatAlgo03xDSf({\r\n    typed\r\n  });\r\n  var matAlgo07xSSf = createMatAlgo07xSSf({\r\n    typed,\r\n    SparseMatrix\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n\r\n  /**\r\n   * Test whether two values are unequal.\r\n   *\r\n   * The function tests whether the relative difference between x and y is\r\n   * larger than the configured relTol and absTol. The function cannot be used to compare\r\n   * values smaller than approximately 2.22e-16.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\r\n   * Strings are compared by their numerical value.\r\n   *\r\n   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\r\n   * with everything except `null`, and `undefined` is unequal with everything\r\n   * except `undefined`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.unequal(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.unequal(2 + 2, 3)       // returns true\r\n   *    math.unequal(2 + 2, 4)       // returns false\r\n   *\r\n   *    const a = math.unit('50 cm')\r\n   *    const b = math.unit('5 m')\r\n   *    math.unequal(a, b)           // returns false\r\n   *\r\n   *    const c = [2, 5, 1]\r\n   *    const d = [2, 7, 1]\r\n   *\r\n   *    math.unequal(c, d)           // returns [false, true, false]\r\n   *    math.deepEqual(c, d)         // returns false\r\n   *\r\n   *    math.unequal(0, null)        // returns true\r\n   * See also:\r\n   *\r\n   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\r\n   *\r\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\r\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\r\n   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false\r\n   */\r\n  return typed(name, createUnequalNumber({\r\n    typed,\r\n    equalScalar\r\n  }), matrixAlgorithmSuite({\r\n    elop: _unequal,\r\n    SS: matAlgo07xSSf,\r\n    DS: matAlgo03xDSf,\r\n    Ss: matAlgo12xSfs\r\n  }));\r\n  function _unequal(x, y) {\r\n    return !equalScalar(x, y);\r\n  }\r\n});\r\nexport var createUnequalNumber = factory(name, ['typed', 'equalScalar'], _ref2 => {\r\n  var {\r\n    typed,\r\n    equalScalar\r\n  } = _ref2;\r\n  return typed(name, {\r\n    'any, any': function any_any(x, y) {\r\n      // strict equality for null and undefined?\r\n      if (x === null) {\r\n        return y !== null;\r\n      }\r\n      if (y === null) {\r\n        return x !== null;\r\n      }\r\n      if (x === undefined) {\r\n        return y !== undefined;\r\n      }\r\n      if (y === undefined) {\r\n        return x !== undefined;\r\n      }\r\n      return !equalScalar(x, y);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,mBAAmB,QAAQ,0CAA0C;AAC9E,SAASC,0BAA0B,QAAQ,iDAAiD;AAC5F,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,cAAc,CAAC;AACxG,OAAO,IAAIC,aAAa,GAAG,eAAeP,OAAO,CAACK,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC5E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,WAAW;IACXC,MAAM;IACNC,WAAW;IACXC,MAAM;IACNC;EACF,CAAC,GAAGP,IAAI;EACR,IAAIQ,aAAa,GAAGf,mBAAmB,CAAC;IACtCQ;EACF,CAAC,CAAC;EACF,IAAIQ,aAAa,GAAGf,mBAAmB,CAAC;IACtCO,KAAK;IACLM;EACF,CAAC,CAAC;EACF,IAAIG,aAAa,GAAGf,mBAAmB,CAAC;IACtCM,KAAK;IACLI;EACF,CAAC,CAAC;EACF,IAAIM,oBAAoB,GAAGf,0BAA0B,CAAC;IACpDK,KAAK;IACLG,MAAM;IACNE;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOL,KAAK,CAACJ,IAAI,EAAEe,mBAAmB,CAAC;IACrCX,KAAK;IACLE;EACF,CAAC,CAAC,EAAEQ,oBAAoB,CAAC;IACvBE,IAAI,EAAEC,QAAQ;IACdC,EAAE,EAAEN,aAAa;IACjBO,EAAE,EAAER,aAAa;IACjBS,EAAE,EAAEP;EACN,CAAC,CAAC,CAAC;EACH,SAASI,QAAQA,CAACI,CAAC,EAAEC,CAAC,EAAE;IACtB,OAAO,CAAChB,WAAW,CAACe,CAAC,EAAEC,CAAC,CAAC;EAC3B;AACF,CAAC,CAAC;AACF,OAAO,IAAIP,mBAAmB,GAAGpB,OAAO,CAACK,IAAI,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC,EAAEuB,KAAK,IAAI;EAChF,IAAI;IACFnB,KAAK;IACLE;EACF,CAAC,GAAGiB,KAAK;EACT,OAAOnB,KAAK,CAACJ,IAAI,EAAE;IACjB,UAAU,EAAE,SAASwB,OAAOA,CAACH,CAAC,EAAEC,CAAC,EAAE;MACjC;MACA,IAAID,CAAC,KAAK,IAAI,EAAE;QACd,OAAOC,CAAC,KAAK,IAAI;MACnB;MACA,IAAIA,CAAC,KAAK,IAAI,EAAE;QACd,OAAOD,CAAC,KAAK,IAAI;MACnB;MACA,IAAIA,CAAC,KAAKI,SAAS,EAAE;QACnB,OAAOH,CAAC,KAAKG,SAAS;MACxB;MACA,IAAIH,CAAC,KAAKG,SAAS,EAAE;QACnB,OAAOJ,CAAC,KAAKI,SAAS;MACxB;MACA,OAAO,CAACnB,WAAW,CAACe,CAAC,EAAEC,CAAC,CAAC;IAC3B;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}