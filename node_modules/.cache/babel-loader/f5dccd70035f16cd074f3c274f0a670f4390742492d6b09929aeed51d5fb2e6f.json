{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'parser';\nvar dependencies = ['typed', 'Parser'];\nexport var createParser = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Parser\n  } = _ref;\n  /**\r\n   * Create a parser. The function creates a new `math.Parser` object.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.parser()\r\n   *\r\n   * Examples:\r\n   *\r\n   *     const parser = new math.parser()\r\n   *\r\n   *     // evaluate expressions\r\n   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5\r\n   *     const b = parser.evaluate('sqrt(-4)')        // 2i\r\n   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm\r\n   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476\r\n   *\r\n   *     // define variables and functions\r\n   *     parser.evaluate('x = 7 / 2')             // 3.5\r\n   *     parser.evaluate('x + 3')                 // 6.5\r\n   *     parser.evaluate('f(x, y) = x^y')         // f(x, y)\r\n   *     parser.evaluate('f(2, 3)')               // 8\r\n   *\r\n   *     // get and set variables and functions\r\n   *     const x = parser.get('x')                // 3.5\r\n   *     const f = parser.get('f')                // function\r\n   *     const g = f(3, 2)                        // 9\r\n   *     parser.set('h', 500)\r\n   *     const i = parser.evaluate('h / 2')       // 250\r\n   *     parser.set('hello', function (name) {\r\n   *       return 'hello, ' + name + '!'\r\n   *     })\r\n   *     parser.evaluate('hello(\"user\")')         // \"hello, user!\"\r\n   *\r\n   *     // clear defined functions and variables\r\n   *     parser.clear()\r\n   *\r\n   * See also:\r\n   *\r\n   *    evaluate, compile, parse\r\n   *\r\n   * @return {Parser} Parser\r\n   */\n  return typed(name, {\n    '': function _() {\n      return new Parser();\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createParser","_ref","typed","Parser","_"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/expression/function/parser.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'parser';\r\nvar dependencies = ['typed', 'Parser'];\r\nexport var createParser = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    Parser\r\n  } = _ref;\r\n  /**\r\n   * Create a parser. The function creates a new `math.Parser` object.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.parser()\r\n   *\r\n   * Examples:\r\n   *\r\n   *     const parser = new math.parser()\r\n   *\r\n   *     // evaluate expressions\r\n   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5\r\n   *     const b = parser.evaluate('sqrt(-4)')        // 2i\r\n   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm\r\n   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476\r\n   *\r\n   *     // define variables and functions\r\n   *     parser.evaluate('x = 7 / 2')             // 3.5\r\n   *     parser.evaluate('x + 3')                 // 6.5\r\n   *     parser.evaluate('f(x, y) = x^y')         // f(x, y)\r\n   *     parser.evaluate('f(2, 3)')               // 8\r\n   *\r\n   *     // get and set variables and functions\r\n   *     const x = parser.get('x')                // 3.5\r\n   *     const f = parser.get('f')                // function\r\n   *     const g = f(3, 2)                        // 9\r\n   *     parser.set('h', 500)\r\n   *     const i = parser.evaluate('h / 2')       // 250\r\n   *     parser.set('hello', function (name) {\r\n   *       return 'hello, ' + name + '!'\r\n   *     })\r\n   *     parser.evaluate('hello(\"user\")')         // \"hello, user!\"\r\n   *\r\n   *     // clear defined functions and variables\r\n   *     parser.clear()\r\n   *\r\n   * See also:\r\n   *\r\n   *    evaluate, compile, parse\r\n   *\r\n   * @return {Parser} Parser\r\n   */\r\n  return typed(name, {\r\n    '': function _() {\r\n      return new Parser();\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;AACtC,OAAO,IAAIC,YAAY,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC3E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,EAAE,EAAE,SAASM,CAACA,CAAA,EAAG;MACf,OAAO,IAAID,MAAM,CAAC,CAAC;IACrB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}