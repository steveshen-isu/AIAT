{"ast":null,"code":"import { flatten } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\nvar name = 'mad';\nvar dependencies = ['typed', 'abs', 'map', 'median', 'subtract'];\nexport var createMad = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    map,\n    median,\n    subtract\n  } = _ref;\n  /**\r\n   * Compute the median absolute deviation of a matrix or a list with values.\r\n   * The median absolute deviation is defined as the median of the absolute\r\n   * deviations from the median.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.mad(a, b, c, ...)\r\n   *     math.mad(A)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.mad(10, 20, 30)             // returns 10\r\n   *     math.mad([1, 2, 3])              // returns 1\r\n   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5\r\n   *\r\n   * See also:\r\n   *\r\n   *     median, mean, std, abs\r\n   *\r\n   * @param {Array | Matrix} array\r\n   *                        A single matrix or multiple scalar values.\r\n   * @return {*} The median absolute deviation.\r\n   */\n  return typed(name, {\n    // mad([a, b, c, d, ...])\n    'Array | Matrix': _mad,\n    // mad(a, b, c, d, ...)\n    '...': function _(args) {\n      return _mad(args);\n    }\n  });\n  function _mad(array) {\n    array = flatten(array.valueOf());\n    if (array.length === 0) {\n      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');\n    }\n    try {\n      var med = median(array);\n      return median(map(array, function (value) {\n        return abs(subtract(value, med));\n      }));\n    } catch (err) {\n      if (err instanceof TypeError && err.message.includes('median')) {\n        throw new TypeError(err.message.replace('median', 'mad'));\n      } else {\n        throw improveErrorMessage(err, 'mad');\n      }\n    }\n  }\n});","map":{"version":3,"names":["flatten","factory","improveErrorMessage","name","dependencies","createMad","_ref","typed","abs","map","median","subtract","_mad","_","args","array","valueOf","length","Error","med","value","err","TypeError","message","includes","replace"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/statistics/mad.js"],"sourcesContent":["import { flatten } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { improveErrorMessage } from './utils/improveErrorMessage.js';\r\nvar name = 'mad';\r\nvar dependencies = ['typed', 'abs', 'map', 'median', 'subtract'];\r\nexport var createMad = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    abs,\r\n    map,\r\n    median,\r\n    subtract\r\n  } = _ref;\r\n  /**\r\n   * Compute the median absolute deviation of a matrix or a list with values.\r\n   * The median absolute deviation is defined as the median of the absolute\r\n   * deviations from the median.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.mad(a, b, c, ...)\r\n   *     math.mad(A)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.mad(10, 20, 30)             // returns 10\r\n   *     math.mad([1, 2, 3])              // returns 1\r\n   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5\r\n   *\r\n   * See also:\r\n   *\r\n   *     median, mean, std, abs\r\n   *\r\n   * @param {Array | Matrix} array\r\n   *                        A single matrix or multiple scalar values.\r\n   * @return {*} The median absolute deviation.\r\n   */\r\n  return typed(name, {\r\n    // mad([a, b, c, d, ...])\r\n    'Array | Matrix': _mad,\r\n    // mad(a, b, c, d, ...)\r\n    '...': function _(args) {\r\n      return _mad(args);\r\n    }\r\n  });\r\n  function _mad(array) {\r\n    array = flatten(array.valueOf());\r\n    if (array.length === 0) {\r\n      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');\r\n    }\r\n    try {\r\n      var med = median(array);\r\n      return median(map(array, function (value) {\r\n        return abs(subtract(value, med));\r\n      }));\r\n    } catch (err) {\r\n      if (err instanceof TypeError && err.message.includes('median')) {\r\n        throw new TypeError(err.message.replace('median', 'mad'));\r\n      } else {\r\n        throw improveErrorMessage(err, 'mad');\r\n      }\r\n    }\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC;AAChE,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC,KAAK;IACLC,GAAG;IACHC,GAAG;IACHC,MAAM;IACNC;EACF,CAAC,GAAGL,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB;IACA,gBAAgB,EAAES,IAAI;IACtB;IACA,KAAK,EAAE,SAASC,CAACA,CAACC,IAAI,EAAE;MACtB,OAAOF,IAAI,CAACE,IAAI,CAAC;IACnB;EACF,CAAC,CAAC;EACF,SAASF,IAAIA,CAACG,KAAK,EAAE;IACnBA,KAAK,GAAGf,OAAO,CAACe,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC;IAChC,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;MACtB,MAAM,IAAIC,KAAK,CAAC,oEAAoE,CAAC;IACvF;IACA,IAAI;MACF,IAAIC,GAAG,GAAGT,MAAM,CAACK,KAAK,CAAC;MACvB,OAAOL,MAAM,CAACD,GAAG,CAACM,KAAK,EAAE,UAAUK,KAAK,EAAE;QACxC,OAAOZ,GAAG,CAACG,QAAQ,CAACS,KAAK,EAAED,GAAG,CAAC,CAAC;MAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ,IAAIA,GAAG,YAAYC,SAAS,IAAID,GAAG,CAACE,OAAO,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC9D,MAAM,IAAIF,SAAS,CAACD,GAAG,CAACE,OAAO,CAACE,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;MAC3D,CAAC,MAAM;QACL,MAAMvB,mBAAmB,CAACmB,GAAG,EAAE,KAAK,CAAC;MACvC;IACF;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}