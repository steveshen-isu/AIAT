{"ast":null,"code":"import { isParenthesisNode } from '../../utils/is.js';\nimport { isConstantNode, isVariableNode, isNumericNode, isConstantExpression } from './simplify/wildcards.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { createEmptyMap, createMap } from '../../utils/map.js';\nvar name = 'simplify';\nvar dependencies = ['typed', 'parse', 'equal', 'resolve', 'simplifyConstant', 'simplifyCore', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode', 'replacer'];\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse,\n    equal,\n    resolve,\n    simplifyConstant,\n    simplifyCore,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode,\n    replacer\n  } = _ref;\n  var {\n    hasProperty,\n    isCommutative,\n    isAssociative,\n    mergeContext,\n    flatten,\n    unflattenr,\n    unflattenl,\n    createMakeNodeFunction,\n    defaultContext,\n    realContext,\n    positiveContext\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n\n  /**\r\n   * Simplify an expression tree.\r\n   *\r\n   * A list of rules are applied to an expression, repeating over the list until\r\n   * no further changes are made.\r\n   * It's possible to pass a custom set of rules to the function as second\r\n   * argument. A rule can be specified as an object, string, or function:\r\n   *\r\n   *     const rules = [\r\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\r\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\r\n   *       function (node) {\r\n   *         // ... return a new node or return the node unchanged\r\n   *         return node\r\n   *       }\r\n   *     ]\r\n   *\r\n   * String and object rules consist of a left and right pattern. The left is\r\n   * used to match against the expression and the right determines what matches\r\n   * are replaced with. The main difference between a pattern and a normal\r\n   * expression is that variables starting with the following characters are\r\n   * interpreted as wildcards:\r\n   *\r\n   * - 'n' - Matches any node [Node]\r\n   * - 'c' - Matches a constant literal (5 or 3.2) [ConstantNode]\r\n   * - 'cl' - Matches a constant literal; same as c [ConstantNode]\r\n   * - 'cd' - Matches a decimal literal (5 or -3.2) [ConstantNode or unaryMinus wrapping a ConstantNode]\r\n   * - 'ce' - Matches a constant expression (-5 or √3) [Expressions consisting of only ConstantNodes, functions, and operators]\r\n   * - 'v' - Matches a variable; anything not matched by c (-5 or x) [Node that is not a ConstantNode]\r\n   * - 'vl' - Matches a variable literal (x or y) [SymbolNode]\r\n   * - 'vd' - Matches a non-decimal expression; anything not matched by cd (x or √3) [Node that is not a ConstantNode or unaryMinus that is wrapping a ConstantNode]\r\n   * - 've' - Matches a variable expression; anything not matched by ce (x or 2x) [Expressions that contain a SymbolNode or other non-constant term]\r\n   *\r\n   * The default list of rules is exposed on the function as `simplify.rules`\r\n   * and can be used as a basis to built a set of custom rules. Note that since\r\n   * the `simplifyCore` function is in the default list of rules, by default\r\n   * simplify will convert any function calls in the expression that have\r\n   * operator equivalents to their operator forms.\r\n   *\r\n   * To specify a rule as a string, separate the left and right pattern by '->'\r\n   * When specifying a rule as an object, the following keys are meaningful:\r\n   * - l - the left pattern\r\n   * - r - the right pattern\r\n   * - s - in lieu of l and r, the string form that is broken at -> to give them\r\n   * - repeat - whether to repeat this rule until the expression stabilizes\r\n   * - assuming - gives a context object, as in the 'context' option to\r\n   *     simplify. Every property in the context object must match the current\r\n   *     context in order, or else the rule will not be applied.\r\n   * - imposeContext - gives a context object, as in the 'context' option to\r\n   *     simplify. Any settings specified will override the incoming context\r\n   *     for all matches of this rule.\r\n   *\r\n   * For more details on the theory, see:\r\n   *\r\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\r\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\r\n   *\r\n   *  An optional `options` argument can be passed as last argument of `simplify`.\r\n   *  Currently available options (defaults in parentheses):\r\n   *  - `consoleDebug` (false): whether to write the expression being simplified\r\n   *    and any changes to it, along with the rule responsible, to console\r\n   *  - `context` (simplify.defaultContext): an object giving properties of\r\n   *    each operator, which determine what simplifications are allowed. The\r\n   *    currently meaningful properties are commutative, associative,\r\n   *    total (whether the operation is defined for all arguments), and\r\n   *    trivial (whether the operation applied to a single argument leaves\r\n   *    that argument unchanged). The default context is very permissive and\r\n   *    allows almost all simplifications. Only properties differing from\r\n   *    the default need to be specified; the default context is used as a\r\n   *    fallback. Additional contexts `simplify.realContext` and\r\n   *    `simplify.positiveContext` are supplied to cause simplify to perform\r\n   *    just simplifications guaranteed to preserve all values of the expression\r\n   *    assuming all variables and subexpressions are real numbers or\r\n   *    positive real numbers, respectively. (Note that these are in some cases\r\n   *    more restrictive than the default context; for example, the default\r\n   *    context will allow `x/x` to simplify to 1, whereas\r\n   *    `simplify.realContext` will not, as `0/0` is not equal to 1.)\r\n   *  - `exactFractions` (true): whether to try to convert all constants to\r\n   *    exact rational numbers.\r\n   *  - `fractionsLimit` (10000): when `exactFractions` is true, constants will\r\n   *    be expressed as fractions only when both numerator and denominator\r\n   *    are smaller than `fractionsLimit`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.simplify(expr)\r\n   *     math.simplify(expr, rules)\r\n   *     math.simplify(expr, rules)\r\n   *     math.simplify(expr, rules, scope)\r\n   *     math.simplify(expr, rules, scope, options)\r\n   *     math.simplify(expr, scope)\r\n   *     math.simplify(expr, scope, options)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\r\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\r\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\r\n   *     math.simplify(f)                          // Node \"2 * x\"\r\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\r\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\r\n   *\r\n   * See also:\r\n   *\r\n   *     simplifyCore, derivative, evaluate, parse, rationalize, resolve\r\n   *\r\n   * @param {Node | string} expr\r\n   *            The expression to be simplified\r\n   * @param {SimplifyRule[]} [rules]\r\n   *            Optional list with custom rules\r\n   * @param {Object} [scope] Optional scope with variables\r\n   * @param {SimplifyOptions} [options] Optional configuration settings\r\n   * @return {Node} Returns the simplified form of `expr`\r\n   */\n  typed.addConversion({\n    from: 'Object',\n    to: 'Map',\n    convert: createMap\n  });\n  var simplify = typed('simplify', {\n    Node: _simplify,\n    'Node, Map': (expr, scope) => _simplify(expr, false, scope),\n    'Node, Map, Object': (expr, scope, options) => _simplify(expr, false, scope, options),\n    'Node, Array': _simplify,\n    'Node, Array, Map': _simplify,\n    'Node, Array, Map, Object': _simplify\n  });\n  typed.removeConversion({\n    from: 'Object',\n    to: 'Map',\n    convert: createMap\n  });\n  simplify.defaultContext = defaultContext;\n  simplify.realContext = realContext;\n  simplify.positiveContext = positiveContext;\n  function removeParens(node) {\n    return node.transform(function (node) {\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\n    });\n  }\n\n  // All constants that are allowed in rules\n  var SUPPORTED_CONSTANTS = {\n    true: true,\n    false: true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true\n    // null: false,\n    // undefined: false,\n    // version: false,\n  };\n\n  // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n  simplify.rules = [simplifyCore,\n  // { l: 'n+0', r: 'n' },     // simplifyCore\n  // { l: 'n^0', r: '1' },     // simplifyCore\n  // { l: '0*n', r: '0' },     // simplifyCore\n  // { l: 'n/n', r: '1'},      // simplifyCore\n  // { l: 'n^1', r: 'n' },     // simplifyCore\n  // { l: '+n1', r:'n1' },     // simplifyCore\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\n  {\n    l: 'log(e)',\n    r: '1'\n  },\n  // temporary rules\n  // Note initially we tend constants to the right because like-term\n  // collection prefers the left, and we would rather collect nonconstants\n  {\n    s: 'n-n1 -> n+-n1',\n    // temporarily replace 'subtract' so we can further flatten the 'add' operator\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n-n -> 0',\n    // partial alternative when we can't always subtract\n    assuming: {\n      subtract: {\n        total: false\n      }\n    }\n  }, {\n    s: '-(cl*v) -> v * (-cl)',\n    // make non-constant terms positive\n    assuming: {\n      multiply: {\n        commutative: true\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(cl*v) -> (-cl) * v',\n    // non-commutative version, part 1\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(v*cl) -> v * (-cl)',\n    // non-commutative version, part 2\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    l: '-(n1/n2)',\n    r: '-n1/n2'\n  }, {\n    l: '-v',\n    r: 'v * (-1)'\n  },\n  // finish making non-constant terms positive\n  {\n    l: '(n1 + n2)*(-1)',\n    r: 'n1*(-1) + n2*(-1)',\n    repeat: true\n  },\n  // expand negations to achieve as much sign cancellation as possible\n  {\n    l: 'n/n1^n2',\n    r: 'n*n1^-n2'\n  },\n  // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n  {\n    l: 'n/n1',\n    r: 'n*n1^-1'\n  }, {\n    s: '(n1*n2)^n3 -> n1^n3 * n2^n3',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: '(n1*n2)^(-1) -> n2^(-1) * n1^(-1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  },\n  // expand nested exponentiation\n  {\n    s: '(n ^ n1) ^ n2 -> n ^ (n1 * n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // 1/(1/n) = n needs 1/n to exist\n  },\n  // collect like factors; into a sum, only do this for nonconstants\n  {\n    l: ' vd   * ( vd   * n1 + n2)',\n    r: 'vd^2       * n1 +  vd   * n2'\n  }, {\n    s: ' vd   * (vd^n4 * n1 + n2)   ->  vd^(1+n4)  * n1 +  vd   * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // v*1/v = v^(1+-1) needs 1/v\n  }, {\n    s: 'vd^n3 * ( vd   * n1 + n2)   ->  vd^(n3+1)  * n1 + vd^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    s: 'vd^n3 * (vd^n4 * n1 + n2)   ->  vd^(n3+n4) * n1 + vd^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    l: 'n*n',\n    r: 'n^2'\n  }, {\n    s: 'n * n^n1 -> n^(n1+1)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // n*1/n = n^(-1+1) needs 1/n\n  }, {\n    s: 'n^n1 * n^n2 -> n^(n1+n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // ditto for n^2*1/n^2\n  },\n  // Unfortunately, to deal with more complicated cancellations, it\n  // becomes necessary to simplify constants twice per pass. It's not\n  // terribly expensive compared to matching rules, so this should not\n  // pose a performance problem.\n  simplifyConstant,\n  // First: before collecting like terms\n\n  // collect like terms\n  {\n    s: 'n+n -> 2*n',\n    assuming: {\n      add: {\n        total: true\n      }\n    } // 2 = 1 + 1 needs to exist\n  }, {\n    l: 'n+-n',\n    r: '0'\n  }, {\n    l: 'vd*n + vd',\n    r: 'vd*(n+1)'\n  },\n  // NOTE: leftmost position is special:\n  {\n    l: 'n3*n1 + n3*n2',\n    r: 'n3*(n1+n2)'\n  },\n  // All sub-monomials tried there.\n  {\n    l: 'n3^(-n4)*n1 +   n3  * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+1) *n2)'\n  }, {\n    l: 'n3^(-n4)*n1 + n3^n5 * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+n5)*n2)'\n  },\n  // noncommutative additional cases (term collection & factoring)\n  {\n    s: 'n*vd + vd -> (n+1)*vd',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'vd + n*vd -> (1+n)*vd',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3 + n2*n3 -> (n1+n2)*n3',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n^n1 * n -> n^(n1+1)',\n    assuming: {\n      divide: {\n        total: true\n      },\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3    -> (n1 + n2*n3^(n4 +  1))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3^n5 -> (n1 + n2*n3^(n4 + n5))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    l: 'n*cd + cd',\n    r: '(n+1)*cd'\n  }, {\n    s: 'cd*n + cd -> cd*(n+1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'cd + cd*n -> cd*(1+n)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, simplifyConstant,\n  // Second: before returning expressions to \"standard form\"\n\n  // make factors positive (and undo 'make non-constant terms positive')\n  {\n    s: '(-n)*n1 -> -(n*n1)',\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n1*(-n) -> -(n1*n)',\n    // in case * non-commutative\n    assuming: {\n      subtract: {\n        total: true\n      },\n      multiply: {\n        commutative: false\n      }\n    }\n  },\n  // final ordering of constants\n  {\n    s: 'ce+ve -> ve+ce',\n    assuming: {\n      add: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      add: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'vd*cd -> cd*vd',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      multiply: {\n        commutative: false\n      }\n    }\n  },\n  // undo temporary rules\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\n  {\n    l: 'n+-n1',\n    r: 'n-n1'\n  },\n  // undo replace 'subtract'\n  {\n    l: 'n+-(n1)',\n    r: 'n-(n1)'\n  }, {\n    s: 'n*(n1^-1) -> n/n1',\n    // undo replace 'divide'; for * commutative\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n  }, {\n    s: 'n*n1^-n2 -> n/n1^n2',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n  }, {\n    s: 'n^-1 -> 1/n',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n  }, {\n    l: 'n^1',\n    r: 'n'\n  },\n  // can be produced by power cancellation\n  {\n    s: 'n*(n1/n2) -> (n*n1)/n2',\n    // '*' before '/'\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    s: 'n-(n1+n2) -> n-n1-n2',\n    // '-' before '+'\n    assuming: {\n      addition: {\n        associative: true,\n        commutative: true\n      }\n    }\n  },\n  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n\n  // simplifyConstant can leave an extra factor of 1, which can always\n  // be eliminated, since the identity always commutes\n  {\n    l: '1*n',\n    r: 'n',\n    imposeContext: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: 'n1/(n2/n3) -> (n1*n3)/n2',\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    l: 'n1/(-n2)',\n    r: '-n1/n2'\n  }];\n\n  /**\r\n   * Takes any rule object as allowed by the specification in simplify\r\n   * and puts it in a standard form used by applyRule\r\n   */\n  function _canonicalizeRule(ruleObject, context) {\n    var newRule = {};\n    if (ruleObject.s) {\n      var lr = ruleObject.s.split('->');\n      if (lr.length === 2) {\n        newRule.l = lr[0];\n        newRule.r = lr[1];\n      } else {\n        throw SyntaxError('Could not parse rule: ' + ruleObject.s);\n      }\n    } else {\n      newRule.l = ruleObject.l;\n      newRule.r = ruleObject.r;\n    }\n    newRule.l = removeParens(parse(newRule.l));\n    newRule.r = removeParens(parse(newRule.r));\n    for (var prop of ['imposeContext', 'repeat', 'assuming']) {\n      if (prop in ruleObject) {\n        newRule[prop] = ruleObject[prop];\n      }\n    }\n    if (ruleObject.evaluate) {\n      newRule.evaluate = parse(ruleObject.evaluate);\n    }\n    if (isAssociative(newRule.l, context)) {\n      var nonCommutative = !isCommutative(newRule.l, context);\n      var leftExpandsym;\n      // Gen. the LHS placeholder used in this NC-context specific expansion rules\n      if (nonCommutative) leftExpandsym = _getExpandPlaceholderSymbol();\n      var makeNode = createMakeNodeFunction(newRule.l);\n      var expandsym = _getExpandPlaceholderSymbol();\n      newRule.expanded = {};\n      newRule.expanded.l = makeNode([newRule.l, expandsym]);\n      // Push the expandsym into the deepest possible branch.\n      // This helps to match the newRule against nodes returned from getSplits() later on.\n      flatten(newRule.expanded.l, context);\n      unflattenr(newRule.expanded.l, context);\n      newRule.expanded.r = makeNode([newRule.r, expandsym]);\n\n      // In and for a non-commutative context, attempting with yet additional expansion rules makes\n      // way for more matches cases of multi-arg expressions; such that associative rules (such as\n      // 'n*n -> n^2') can be applied to exprs. such as 'a * b * b' and 'a * b * b * a'.\n      if (nonCommutative) {\n        // 'Non-commutative' 1: LHS (placeholder) only\n        newRule.expandedNC1 = {};\n        newRule.expandedNC1.l = makeNode([leftExpandsym, newRule.l]);\n        newRule.expandedNC1.r = makeNode([leftExpandsym, newRule.r]);\n        // 'Non-commutative' 2: farmost LHS and RHS placeholders\n        newRule.expandedNC2 = {};\n        newRule.expandedNC2.l = makeNode([leftExpandsym, newRule.expanded.l]);\n        newRule.expandedNC2.r = makeNode([leftExpandsym, newRule.expanded.r]);\n      }\n    }\n    return newRule;\n  }\n\n  /**\r\n   * Parse the string array of rules into nodes\r\n   *\r\n   * Example syntax for rules:\r\n   *\r\n   * Position constants to the left in a product:\r\n   * { l: 'n1 * c1', r: 'c1 * n1' }\r\n   * n1 is any Node, and c1 is a ConstantNode.\r\n   *\r\n   * Apply difference of squares formula:\r\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\r\n   * n1, n2 mean any Node.\r\n   *\r\n   * Short hand notation:\r\n   * 'n1 * c1 -> c1 * n1'\r\n   */\n  function _buildRules(rules, context) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var newRule = void 0;\n      var ruleType = typeof rule;\n      switch (ruleType) {\n        case 'string':\n          rule = {\n            s: rule\n          };\n        /* falls through */\n        case 'object':\n          newRule = _canonicalizeRule(rule, context);\n          break;\n        case 'function':\n          newRule = rule;\n          break;\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      }\n      // console.log('Adding rule: ' + rules[i])\n      // console.log(newRule)\n      ruleSet.push(newRule);\n    }\n    return ruleSet;\n  }\n  var _lastsym = 0;\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n  function _simplify(expr, rules) {\n    var scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : createEmptyMap();\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var debug = options.consoleDebug;\n    rules = _buildRules(rules || simplify.rules, options.context);\n    var res = resolve(expr, scope);\n    res = removeParens(res);\n    var visited = {};\n    var str = res.toString({\n      parenthesis: 'all'\n    });\n    while (!visited[str]) {\n      visited[str] = true;\n      _lastsym = 0; // counter for placeholder symbols\n      var laststr = str;\n      if (debug) console.log('Working on: ', str);\n      for (var i = 0; i < rules.length; i++) {\n        var rulestr = '';\n        if (typeof rules[i] === 'function') {\n          res = rules[i](res, options);\n          if (debug) rulestr = rules[i].name;\n        } else {\n          flatten(res, options.context);\n          res = applyRule(res, rules[i], options.context);\n          if (debug) {\n            rulestr = \"\".concat(rules[i].l.toString(), \" -> \").concat(rules[i].r.toString());\n          }\n        }\n        if (debug) {\n          var newstr = res.toString({\n            parenthesis: 'all'\n          });\n          if (newstr !== laststr) {\n            console.log('Applying', rulestr, 'produced', newstr);\n            laststr = newstr;\n          }\n        }\n        /* Use left-heavy binary tree internally,\r\n         * since custom rule functions may expect it\r\n         */\n        unflattenl(res, options.context);\n      }\n      str = res.toString({\n        parenthesis: 'all'\n      });\n    }\n    return res;\n  }\n  function mapRule(nodes, rule, context) {\n    var resNodes = nodes;\n    if (nodes) {\n      for (var i = 0; i < nodes.length; ++i) {\n        var newNode = applyRule(nodes[i], rule, context);\n        if (newNode !== nodes[i]) {\n          if (resNodes === nodes) {\n            resNodes = nodes.slice();\n          }\n          resNodes[i] = newNode;\n        }\n      }\n    }\n    return resNodes;\n  }\n\n  /**\r\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\r\n   *\r\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\r\n   * @param  {Object | Function} rule\r\n   * @param  {Object} context -- information about assumed properties of operators\r\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\r\n   */\n  function applyRule(node, rule, context) {\n    //    console.log('Entering applyRule(\"', rule.l.toString({parenthesis:'all'}), '->', rule.r.toString({parenthesis:'all'}), '\",', node.toString({parenthesis:'all'}),')')\n\n    // check that the assumptions for this rule are satisfied by the current\n    // context:\n    if (rule.assuming) {\n      for (var symbol in rule.assuming) {\n        for (var property in rule.assuming[symbol]) {\n          if (hasProperty(symbol, property, context) !== rule.assuming[symbol][property]) {\n            return node;\n          }\n        }\n      }\n    }\n    var mergedContext = mergeContext(rule.imposeContext, context);\n\n    // Do not clone node unless we find a match\n    var res = node;\n\n    // First replace our child nodes with their simplified versions\n    // If a child could not be simplified, applying the rule to it\n    // will have no effect since the node is returned unchanged\n    if (res instanceof OperatorNode || res instanceof FunctionNode) {\n      var newArgs = mapRule(res.args, rule, context);\n      if (newArgs !== res.args) {\n        res = res.clone();\n        res.args = newArgs;\n      }\n    } else if (res instanceof ParenthesisNode) {\n      if (res.content) {\n        var newContent = applyRule(res.content, rule, context);\n        if (newContent !== res.content) {\n          res = new ParenthesisNode(newContent);\n        }\n      }\n    } else if (res instanceof ArrayNode) {\n      var newItems = mapRule(res.items, rule, context);\n      if (newItems !== res.items) {\n        res = new ArrayNode(newItems);\n      }\n    } else if (res instanceof AccessorNode) {\n      var newObj = res.object;\n      if (res.object) {\n        newObj = applyRule(res.object, rule, context);\n      }\n      var newIndex = res.index;\n      if (res.index) {\n        newIndex = applyRule(res.index, rule, context);\n      }\n      if (newObj !== res.object || newIndex !== res.index) {\n        res = new AccessorNode(newObj, newIndex);\n      }\n    } else if (res instanceof IndexNode) {\n      var newDims = mapRule(res.dimensions, rule, context);\n      if (newDims !== res.dimensions) {\n        res = new IndexNode(newDims);\n      }\n    } else if (res instanceof ObjectNode) {\n      var changed = false;\n      var newProps = {};\n      for (var prop in res.properties) {\n        newProps[prop] = applyRule(res.properties[prop], rule, context);\n        if (newProps[prop] !== res.properties[prop]) {\n          changed = true;\n        }\n      }\n      if (changed) {\n        res = new ObjectNode(newProps);\n      }\n    }\n\n    // Try to match a rule against this node\n    var repl = rule.r;\n    var matches = _ruleMatch(rule.l, res, mergedContext)[0];\n\n    // If the rule is associative operator, we can try matching it while allowing additional terms.\n    // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n    if (!matches && rule.expanded) {\n      repl = rule.expanded.r;\n      matches = _ruleMatch(rule.expanded.l, res, mergedContext)[0];\n    }\n    // Additional, non-commutative context expansion-rules\n    if (!matches && rule.expandedNC1) {\n      repl = rule.expandedNC1.r;\n      matches = _ruleMatch(rule.expandedNC1.l, res, mergedContext)[0];\n      if (!matches) {\n        // Existence of NC1 implies NC2\n        repl = rule.expandedNC2.r;\n        matches = _ruleMatch(rule.expandedNC2.l, res, mergedContext)[0];\n      }\n    }\n    if (matches) {\n      // const before = res.toString({parenthesis: 'all'})\n\n      // Create a new node by cloning the rhs of the matched rule\n      // we keep any implicit multiplication state if relevant\n      var implicit = res.implicit;\n      res = repl.clone();\n      if (implicit && 'implicit' in repl) {\n        res.implicit = true;\n      }\n\n      // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\n      res = res.transform(function (node) {\n        if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\n          return matches.placeholders[node.name].clone();\n        } else {\n          return node;\n        }\n      });\n\n      // const after = res.toString({parenthesis: 'all'})\n      // console.log('Simplified ' + before + ' to ' + after)\n    }\n    if (rule.repeat && res !== node) {\n      res = applyRule(res, rule, context);\n    }\n    return res;\n  }\n\n  /**\r\n   * Get (binary) combinations of a flattened binary node\r\n   * e.g. +(node1, node2, node3) -> [\r\n   *        +(node1,  +(node2, node3)),\r\n   *        +(node2,  +(node1, node3)),\r\n   *        +(node3,  +(node1, node2))]\r\n   *\r\n   */\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n    if (isCommutative(node, context)) {\n      for (var i = 0; i < node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    } else {\n      // Keep order, but try all parenthesizations\n      for (var _i = 1; _i < node.args.length; _i++) {\n        var left = node.args[0];\n        if (_i > 1) {\n          left = makeNode(node.args.slice(0, _i));\n        }\n        rightArgs = node.args.slice(_i);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([left, right]));\n      }\n    }\n    return res;\n  }\n\n  /**\r\n   * Returns the set union of two match-placeholders or null if there is a conflict.\r\n   */\n  function mergeMatch(match1, match2) {\n    var res = {\n      placeholders: {}\n    };\n\n    // Some matches may not have placeholders; this is OK\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    } else if (!match1.placeholders) {\n      return match2;\n    } else if (!match2.placeholders) {\n      return match1;\n    }\n\n    // Placeholders with the same key must match exactly\n    for (var key in match1.placeholders) {\n      if (hasOwnProperty(match1.placeholders, key)) {\n        res.placeholders[key] = match1.placeholders[key];\n        if (hasOwnProperty(match2.placeholders, key)) {\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\n            return null;\n          }\n        }\n      }\n    }\n    for (var _key in match2.placeholders) {\n      if (hasOwnProperty(match2.placeholders, _key)) {\n        res.placeholders[_key] = match2.placeholders[_key];\n      }\n    }\n    return res;\n  }\n\n  /**\r\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\r\n   * Each list represents matches found in one child of a node.\r\n   */\n  function combineChildMatches(list1, list2) {\n    var res = [];\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n    var merged;\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n    return res;\n  }\n\n  /**\r\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\r\n   * Each list represents matches found in one child of a node.\r\n   * Returns a list of unique matches.\r\n   */\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n    for (var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i], replacer);\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n    return uniqueSets;\n  }\n\n  /**\r\n   * Determines whether node matches rule.\r\n   *\r\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\r\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\r\n   * @param {Object} context -- provides assumed properties of operators\r\n   * @param {Boolean} isSplit -- whether we are in process of splitting an\r\n   *                    n-ary operator node into possible binary combinations.\r\n   *                    Defaults to false.\r\n   * @return {Object} Information about the match, if it exists.\r\n   */\n  function _ruleMatch(rule, node, context, isSplit) {\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\n    //    console.log('rule = ' + rule)\n    //    console.log('node = ' + node)\n\n    //    console.log('Entering _ruleMatch(', rule.toString({parenthesis:'all'}), ', ', node.toString({parenthesis:'all'}), ', ', context, ')')\n    var res = [{\n      placeholders: {}\n    }];\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      } else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      }\n\n      // rule and node match. Search the children of rule and node.\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node, context) && node.args.length === rule.args.length || isSplit) {\n        // Expect non-associative operators to match exactly,\n        // except in any order if operator is commutative\n        var childMatches = [];\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i], context);\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            break;\n          }\n          // The child matched, so add the information returned from the child to our result\n          childMatches.push(childMatch);\n        }\n        if (childMatches.length !== rule.args.length) {\n          if (!isCommutative(node, context) ||\n          // exact match in order needed\n          rule.args.length === 1) {\n            // nothing to commute\n            return [];\n          }\n          if (rule.args.length > 2) {\n            /* Need to generate all permutations and try them.\r\n             * It's a bit complicated, and unlikely to come up since there\r\n             * are very few ternary or higher operators. So punt for now.\r\n             */\n            throw new Error('permuting >2 commutative non-associative rule arguments not yet implemented');\n          }\n          /* Exactly two arguments, try them reversed */\n          var leftMatch = _ruleMatch(rule.args[0], node.args[1], context);\n          if (leftMatch.length === 0) {\n            return [];\n          }\n          var rightMatch = _ruleMatch(rule.args[1], node.args[0], context);\n          if (rightMatch.length === 0) {\n            return [];\n          }\n          childMatches = [leftMatch, rightMatch];\n        }\n        res = mergeChildMatches(childMatches);\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\n        // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule\n        // matches for each of them and return their union.\n        var splits = getSplits(node, context);\n        var splitMatches = [];\n        for (var _i2 = 0; _i2 < splits.length; _i2++) {\n          var matchSet = _ruleMatch(rule, splits[_i2], context, true); // recursing at the same tree depth here\n          splitMatches = splitMatches.concat(matchSet);\n        }\n        return splitMatches;\n      } else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      } else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    } else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first one or two characters of the symbol node name.\n      // These meanings are expalined in the documentation for simplify()\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n      if (SUPPORTED_CONSTANTS[rule.name]) {\n        // built-in constant must match exactly\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } else {\n        // wildcards are composed of up to two alphabetic or underscore characters\n        switch (rule.name[1] >= 'a' && rule.name[1] <= 'z' ? rule.name.substring(0, 2) : rule.name[0]) {\n          case 'n':\n          case '_p':\n            // rule matches _anything_, so assign this node to the rule.name placeholder\n            // Assign node to the rule.name placeholder.\n            // Our parent will check for matches among placeholders.\n            res[0].placeholders[rule.name] = node;\n            break;\n          case 'c':\n          case 'cl':\n            // rule matches a ConstantNode\n            if (isConstantNode(node)) {\n              res[0].placeholders[rule.name] = node;\n            } else {\n              // mis-match: rule does not encompass current node\n              return [];\n            }\n            break;\n          case 'v':\n            // rule matches anything other than a ConstantNode\n            if (!isConstantNode(node)) {\n              res[0].placeholders[rule.name] = node;\n            } else {\n              // mis-match: rule does not encompass current node\n              return [];\n            }\n            break;\n          case 'vl':\n            // rule matches VariableNode\n            if (isVariableNode(node)) {\n              res[0].placeholders[rule.name] = node;\n            } else {\n              // mis-match: rule does not encompass current node\n              return [];\n            }\n            break;\n          case 'cd':\n            // rule matches a ConstantNode or unaryMinus-wrapped ConstantNode\n            if (isNumericNode(node)) {\n              res[0].placeholders[rule.name] = node;\n            } else {\n              // mis-match: rule does not encompass current node\n              return [];\n            }\n            break;\n          case 'vd':\n            // rule matches anything other than a ConstantNode or unaryMinus-wrapped ConstantNode\n            if (!isNumericNode(node)) {\n              res[0].placeholders[rule.name] = node;\n            } else {\n              // mis-match: rule does not encompass current node\n              return [];\n            }\n            break;\n          case 'ce':\n            // rule matches expressions that have a constant value\n            if (isConstantExpression(node)) {\n              res[0].placeholders[rule.name] = node;\n            } else {\n              // mis-match: rule does not encompass current node\n              return [];\n            }\n            break;\n          case 've':\n            // rule matches expressions that do not have a constant value\n            if (!isConstantExpression(node)) {\n              res[0].placeholders[rule.name] = node;\n            } else {\n              // mis-match: rule does not encompass current node\n              return [];\n            }\n            break;\n          default:\n            throw new Error('Invalid symbol in rule: ' + rule.name);\n        }\n      }\n    } else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if (!equal(rule.value, node.value)) {\n        return [];\n      }\n    } else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    }\n\n    // It's a match!\n\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\n    return res;\n  }\n\n  /**\r\n   * Determines whether p and q (and all their children nodes) are identical.\r\n   *\r\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\r\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\r\n   * @return {Object} Information about the match, if it exists.\r\n   */\n  function _exactMatch(p, q) {\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\n      if (!equal(p.value, q.value)) {\n        return false;\n      }\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\n      if (p.name !== q.name) {\n        return false;\n      }\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      } else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n      if (p.args.length !== q.args.length) {\n        return false;\n      }\n      for (var i = 0; i < p.args.length; i++) {\n        if (!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n    return true;\n  }\n  return simplify;\n});","map":{"version":3,"names":["isParenthesisNode","isConstantNode","isVariableNode","isNumericNode","isConstantExpression","factory","createUtil","hasOwnProperty","createEmptyMap","createMap","name","dependencies","createSimplify","_ref","typed","parse","equal","resolve","simplifyConstant","simplifyCore","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","ParenthesisNode","SymbolNode","replacer","hasProperty","isCommutative","isAssociative","mergeContext","flatten","unflattenr","unflattenl","createMakeNodeFunction","defaultContext","realContext","positiveContext","addConversion","from","to","convert","simplify","Node","_simplify","Node, Map","expr","scope","Node, Map, Object","options","removeConversion","removeParens","node","transform","content","SUPPORTED_CONSTANTS","true","false","e","i","Infinity","LN2","LN10","LOG2E","LOG10E","NaN","phi","pi","SQRT1_2","SQRT2","tau","rules","l","r","s","assuming","subtract","total","multiply","commutative","repeat","divide","add","imposeContext","associative","addition","_canonicalizeRule","ruleObject","context","newRule","lr","split","length","SyntaxError","prop","evaluate","nonCommutative","leftExpandsym","_getExpandPlaceholderSymbol","makeNode","expandsym","expanded","expandedNC1","expandedNC2","_buildRules","ruleSet","rule","ruleType","TypeError","push","_lastsym","arguments","undefined","debug","consoleDebug","res","visited","str","toString","parenthesis","laststr","console","log","rulestr","applyRule","concat","newstr","mapRule","nodes","resNodes","newNode","slice","symbol","property","mergedContext","newArgs","args","clone","newContent","newItems","items","newObj","object","newIndex","index","newDims","dimensions","changed","newProps","properties","repl","matches","_ruleMatch","implicit","isSymbolNode","placeholders","getSplits","right","rightArgs","splice","_i","left","mergeMatch","match1","match2","key","_exactMatch","_key","combineChildMatches","list1","list2","merged","i1","i2","mergeChildMatches","childMatches","sets","reduce","uniqueSets","unique","JSON","stringify","isSplit","op","fn","childMatch","Error","leftMatch","rightMatch","splits","splitMatches","_i2","matchSet","substring","value","p","q"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/algebra/simplify.js"],"sourcesContent":["import { isParenthesisNode } from '../../utils/is.js';\r\nimport { isConstantNode, isVariableNode, isNumericNode, isConstantExpression } from './simplify/wildcards.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { createUtil } from './simplify/util.js';\r\nimport { hasOwnProperty } from '../../utils/object.js';\r\nimport { createEmptyMap, createMap } from '../../utils/map.js';\r\nvar name = 'simplify';\r\nvar dependencies = ['typed', 'parse', 'equal', 'resolve', 'simplifyConstant', 'simplifyCore', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode', 'replacer'];\r\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    parse,\r\n    equal,\r\n    resolve,\r\n    simplifyConstant,\r\n    simplifyCore,\r\n    AccessorNode,\r\n    ArrayNode,\r\n    ConstantNode,\r\n    FunctionNode,\r\n    IndexNode,\r\n    ObjectNode,\r\n    OperatorNode,\r\n    ParenthesisNode,\r\n    SymbolNode,\r\n    replacer\r\n  } = _ref;\r\n  var {\r\n    hasProperty,\r\n    isCommutative,\r\n    isAssociative,\r\n    mergeContext,\r\n    flatten,\r\n    unflattenr,\r\n    unflattenl,\r\n    createMakeNodeFunction,\r\n    defaultContext,\r\n    realContext,\r\n    positiveContext\r\n  } = createUtil({\r\n    FunctionNode,\r\n    OperatorNode,\r\n    SymbolNode\r\n  });\r\n\r\n  /**\r\n   * Simplify an expression tree.\r\n   *\r\n   * A list of rules are applied to an expression, repeating over the list until\r\n   * no further changes are made.\r\n   * It's possible to pass a custom set of rules to the function as second\r\n   * argument. A rule can be specified as an object, string, or function:\r\n   *\r\n   *     const rules = [\r\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\r\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\r\n   *       function (node) {\r\n   *         // ... return a new node or return the node unchanged\r\n   *         return node\r\n   *       }\r\n   *     ]\r\n   *\r\n   * String and object rules consist of a left and right pattern. The left is\r\n   * used to match against the expression and the right determines what matches\r\n   * are replaced with. The main difference between a pattern and a normal\r\n   * expression is that variables starting with the following characters are\r\n   * interpreted as wildcards:\r\n   *\r\n   * - 'n' - Matches any node [Node]\r\n   * - 'c' - Matches a constant literal (5 or 3.2) [ConstantNode]\r\n   * - 'cl' - Matches a constant literal; same as c [ConstantNode]\r\n   * - 'cd' - Matches a decimal literal (5 or -3.2) [ConstantNode or unaryMinus wrapping a ConstantNode]\r\n   * - 'ce' - Matches a constant expression (-5 or √3) [Expressions consisting of only ConstantNodes, functions, and operators]\r\n   * - 'v' - Matches a variable; anything not matched by c (-5 or x) [Node that is not a ConstantNode]\r\n   * - 'vl' - Matches a variable literal (x or y) [SymbolNode]\r\n   * - 'vd' - Matches a non-decimal expression; anything not matched by cd (x or √3) [Node that is not a ConstantNode or unaryMinus that is wrapping a ConstantNode]\r\n   * - 've' - Matches a variable expression; anything not matched by ce (x or 2x) [Expressions that contain a SymbolNode or other non-constant term]\r\n   *\r\n   * The default list of rules is exposed on the function as `simplify.rules`\r\n   * and can be used as a basis to built a set of custom rules. Note that since\r\n   * the `simplifyCore` function is in the default list of rules, by default\r\n   * simplify will convert any function calls in the expression that have\r\n   * operator equivalents to their operator forms.\r\n   *\r\n   * To specify a rule as a string, separate the left and right pattern by '->'\r\n   * When specifying a rule as an object, the following keys are meaningful:\r\n   * - l - the left pattern\r\n   * - r - the right pattern\r\n   * - s - in lieu of l and r, the string form that is broken at -> to give them\r\n   * - repeat - whether to repeat this rule until the expression stabilizes\r\n   * - assuming - gives a context object, as in the 'context' option to\r\n   *     simplify. Every property in the context object must match the current\r\n   *     context in order, or else the rule will not be applied.\r\n   * - imposeContext - gives a context object, as in the 'context' option to\r\n   *     simplify. Any settings specified will override the incoming context\r\n   *     for all matches of this rule.\r\n   *\r\n   * For more details on the theory, see:\r\n   *\r\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\r\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\r\n   *\r\n   *  An optional `options` argument can be passed as last argument of `simplify`.\r\n   *  Currently available options (defaults in parentheses):\r\n   *  - `consoleDebug` (false): whether to write the expression being simplified\r\n   *    and any changes to it, along with the rule responsible, to console\r\n   *  - `context` (simplify.defaultContext): an object giving properties of\r\n   *    each operator, which determine what simplifications are allowed. The\r\n   *    currently meaningful properties are commutative, associative,\r\n   *    total (whether the operation is defined for all arguments), and\r\n   *    trivial (whether the operation applied to a single argument leaves\r\n   *    that argument unchanged). The default context is very permissive and\r\n   *    allows almost all simplifications. Only properties differing from\r\n   *    the default need to be specified; the default context is used as a\r\n   *    fallback. Additional contexts `simplify.realContext` and\r\n   *    `simplify.positiveContext` are supplied to cause simplify to perform\r\n   *    just simplifications guaranteed to preserve all values of the expression\r\n   *    assuming all variables and subexpressions are real numbers or\r\n   *    positive real numbers, respectively. (Note that these are in some cases\r\n   *    more restrictive than the default context; for example, the default\r\n   *    context will allow `x/x` to simplify to 1, whereas\r\n   *    `simplify.realContext` will not, as `0/0` is not equal to 1.)\r\n   *  - `exactFractions` (true): whether to try to convert all constants to\r\n   *    exact rational numbers.\r\n   *  - `fractionsLimit` (10000): when `exactFractions` is true, constants will\r\n   *    be expressed as fractions only when both numerator and denominator\r\n   *    are smaller than `fractionsLimit`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.simplify(expr)\r\n   *     math.simplify(expr, rules)\r\n   *     math.simplify(expr, rules)\r\n   *     math.simplify(expr, rules, scope)\r\n   *     math.simplify(expr, rules, scope, options)\r\n   *     math.simplify(expr, scope)\r\n   *     math.simplify(expr, scope, options)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\r\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\r\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\r\n   *     math.simplify(f)                          // Node \"2 * x\"\r\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\r\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\r\n   *\r\n   * See also:\r\n   *\r\n   *     simplifyCore, derivative, evaluate, parse, rationalize, resolve\r\n   *\r\n   * @param {Node | string} expr\r\n   *            The expression to be simplified\r\n   * @param {SimplifyRule[]} [rules]\r\n   *            Optional list with custom rules\r\n   * @param {Object} [scope] Optional scope with variables\r\n   * @param {SimplifyOptions} [options] Optional configuration settings\r\n   * @return {Node} Returns the simplified form of `expr`\r\n   */\r\n  typed.addConversion({\r\n    from: 'Object',\r\n    to: 'Map',\r\n    convert: createMap\r\n  });\r\n  var simplify = typed('simplify', {\r\n    Node: _simplify,\r\n    'Node, Map': (expr, scope) => _simplify(expr, false, scope),\r\n    'Node, Map, Object': (expr, scope, options) => _simplify(expr, false, scope, options),\r\n    'Node, Array': _simplify,\r\n    'Node, Array, Map': _simplify,\r\n    'Node, Array, Map, Object': _simplify\r\n  });\r\n  typed.removeConversion({\r\n    from: 'Object',\r\n    to: 'Map',\r\n    convert: createMap\r\n  });\r\n  simplify.defaultContext = defaultContext;\r\n  simplify.realContext = realContext;\r\n  simplify.positiveContext = positiveContext;\r\n  function removeParens(node) {\r\n    return node.transform(function (node) {\r\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\r\n    });\r\n  }\r\n\r\n  // All constants that are allowed in rules\r\n  var SUPPORTED_CONSTANTS = {\r\n    true: true,\r\n    false: true,\r\n    e: true,\r\n    i: true,\r\n    Infinity: true,\r\n    LN2: true,\r\n    LN10: true,\r\n    LOG2E: true,\r\n    LOG10E: true,\r\n    NaN: true,\r\n    phi: true,\r\n    pi: true,\r\n    SQRT1_2: true,\r\n    SQRT2: true,\r\n    tau: true\r\n    // null: false,\r\n    // undefined: false,\r\n    // version: false,\r\n  };\r\n\r\n  // Array of strings, used to build the ruleSet.\r\n  // Each l (left side) and r (right side) are parsed by\r\n  // the expression parser into a node tree.\r\n  // Left hand sides are matched to subtrees within the\r\n  // expression to be parsed and replaced with the right\r\n  // hand side.\r\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\r\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\r\n  // It is possible to get into an infinite loop with conflicting rules\r\n  simplify.rules = [simplifyCore,\r\n  // { l: 'n+0', r: 'n' },     // simplifyCore\r\n  // { l: 'n^0', r: '1' },     // simplifyCore\r\n  // { l: '0*n', r: '0' },     // simplifyCore\r\n  // { l: 'n/n', r: '1'},      // simplifyCore\r\n  // { l: 'n^1', r: 'n' },     // simplifyCore\r\n  // { l: '+n1', r:'n1' },     // simplifyCore\r\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\r\n  {\r\n    l: 'log(e)',\r\n    r: '1'\r\n  },\r\n  // temporary rules\r\n  // Note initially we tend constants to the right because like-term\r\n  // collection prefers the left, and we would rather collect nonconstants\r\n  {\r\n    s: 'n-n1 -> n+-n1',\r\n    // temporarily replace 'subtract' so we can further flatten the 'add' operator\r\n    assuming: {\r\n      subtract: {\r\n        total: true\r\n      }\r\n    }\r\n  }, {\r\n    s: 'n-n -> 0',\r\n    // partial alternative when we can't always subtract\r\n    assuming: {\r\n      subtract: {\r\n        total: false\r\n      }\r\n    }\r\n  }, {\r\n    s: '-(cl*v) -> v * (-cl)',\r\n    // make non-constant terms positive\r\n    assuming: {\r\n      multiply: {\r\n        commutative: true\r\n      },\r\n      subtract: {\r\n        total: true\r\n      }\r\n    }\r\n  }, {\r\n    s: '-(cl*v) -> (-cl) * v',\r\n    // non-commutative version, part 1\r\n    assuming: {\r\n      multiply: {\r\n        commutative: false\r\n      },\r\n      subtract: {\r\n        total: true\r\n      }\r\n    }\r\n  }, {\r\n    s: '-(v*cl) -> v * (-cl)',\r\n    // non-commutative version, part 2\r\n    assuming: {\r\n      multiply: {\r\n        commutative: false\r\n      },\r\n      subtract: {\r\n        total: true\r\n      }\r\n    }\r\n  }, {\r\n    l: '-(n1/n2)',\r\n    r: '-n1/n2'\r\n  }, {\r\n    l: '-v',\r\n    r: 'v * (-1)'\r\n  },\r\n  // finish making non-constant terms positive\r\n  {\r\n    l: '(n1 + n2)*(-1)',\r\n    r: 'n1*(-1) + n2*(-1)',\r\n    repeat: true\r\n  },\r\n  // expand negations to achieve as much sign cancellation as possible\r\n  {\r\n    l: 'n/n1^n2',\r\n    r: 'n*n1^-n2'\r\n  },\r\n  // temporarily replace 'divide' so we can further flatten the 'multiply' operator\r\n  {\r\n    l: 'n/n1',\r\n    r: 'n*n1^-1'\r\n  }, {\r\n    s: '(n1*n2)^n3 -> n1^n3 * n2^n3',\r\n    assuming: {\r\n      multiply: {\r\n        commutative: true\r\n      }\r\n    }\r\n  }, {\r\n    s: '(n1*n2)^(-1) -> n2^(-1) * n1^(-1)',\r\n    assuming: {\r\n      multiply: {\r\n        commutative: false\r\n      }\r\n    }\r\n  },\r\n  // expand nested exponentiation\r\n  {\r\n    s: '(n ^ n1) ^ n2 -> n ^ (n1 * n2)',\r\n    assuming: {\r\n      divide: {\r\n        total: true\r\n      }\r\n    } // 1/(1/n) = n needs 1/n to exist\r\n  },\r\n  // collect like factors; into a sum, only do this for nonconstants\r\n  {\r\n    l: ' vd   * ( vd   * n1 + n2)',\r\n    r: 'vd^2       * n1 +  vd   * n2'\r\n  }, {\r\n    s: ' vd   * (vd^n4 * n1 + n2)   ->  vd^(1+n4)  * n1 +  vd   * n2',\r\n    assuming: {\r\n      divide: {\r\n        total: true\r\n      }\r\n    } // v*1/v = v^(1+-1) needs 1/v\r\n  }, {\r\n    s: 'vd^n3 * ( vd   * n1 + n2)   ->  vd^(n3+1)  * n1 + vd^n3 * n2',\r\n    assuming: {\r\n      divide: {\r\n        total: true\r\n      }\r\n    }\r\n  }, {\r\n    s: 'vd^n3 * (vd^n4 * n1 + n2)   ->  vd^(n3+n4) * n1 + vd^n3 * n2',\r\n    assuming: {\r\n      divide: {\r\n        total: true\r\n      }\r\n    }\r\n  }, {\r\n    l: 'n*n',\r\n    r: 'n^2'\r\n  }, {\r\n    s: 'n * n^n1 -> n^(n1+1)',\r\n    assuming: {\r\n      divide: {\r\n        total: true\r\n      }\r\n    } // n*1/n = n^(-1+1) needs 1/n\r\n  }, {\r\n    s: 'n^n1 * n^n2 -> n^(n1+n2)',\r\n    assuming: {\r\n      divide: {\r\n        total: true\r\n      }\r\n    } // ditto for n^2*1/n^2\r\n  },\r\n  // Unfortunately, to deal with more complicated cancellations, it\r\n  // becomes necessary to simplify constants twice per pass. It's not\r\n  // terribly expensive compared to matching rules, so this should not\r\n  // pose a performance problem.\r\n  simplifyConstant,\r\n  // First: before collecting like terms\r\n\r\n  // collect like terms\r\n  {\r\n    s: 'n+n -> 2*n',\r\n    assuming: {\r\n      add: {\r\n        total: true\r\n      }\r\n    } // 2 = 1 + 1 needs to exist\r\n  }, {\r\n    l: 'n+-n',\r\n    r: '0'\r\n  }, {\r\n    l: 'vd*n + vd',\r\n    r: 'vd*(n+1)'\r\n  },\r\n  // NOTE: leftmost position is special:\r\n  {\r\n    l: 'n3*n1 + n3*n2',\r\n    r: 'n3*(n1+n2)'\r\n  },\r\n  // All sub-monomials tried there.\r\n  {\r\n    l: 'n3^(-n4)*n1 +   n3  * n2',\r\n    r: 'n3^(-n4)*(n1 + n3^(n4+1) *n2)'\r\n  }, {\r\n    l: 'n3^(-n4)*n1 + n3^n5 * n2',\r\n    r: 'n3^(-n4)*(n1 + n3^(n4+n5)*n2)'\r\n  },\r\n  // noncommutative additional cases (term collection & factoring)\r\n  {\r\n    s: 'n*vd + vd -> (n+1)*vd',\r\n    assuming: {\r\n      multiply: {\r\n        commutative: false\r\n      }\r\n    }\r\n  }, {\r\n    s: 'vd + n*vd -> (1+n)*vd',\r\n    assuming: {\r\n      multiply: {\r\n        commutative: false\r\n      }\r\n    }\r\n  }, {\r\n    s: 'n1*n3 + n2*n3 -> (n1+n2)*n3',\r\n    assuming: {\r\n      multiply: {\r\n        commutative: false\r\n      }\r\n    }\r\n  }, {\r\n    s: 'n^n1 * n -> n^(n1+1)',\r\n    assuming: {\r\n      divide: {\r\n        total: true\r\n      },\r\n      multiply: {\r\n        commutative: false\r\n      }\r\n    }\r\n  }, {\r\n    s: 'n1*n3^(-n4) + n2 * n3    -> (n1 + n2*n3^(n4 +  1))*n3^(-n4)',\r\n    assuming: {\r\n      multiply: {\r\n        commutative: false\r\n      }\r\n    }\r\n  }, {\r\n    s: 'n1*n3^(-n4) + n2 * n3^n5 -> (n1 + n2*n3^(n4 + n5))*n3^(-n4)',\r\n    assuming: {\r\n      multiply: {\r\n        commutative: false\r\n      }\r\n    }\r\n  }, {\r\n    l: 'n*cd + cd',\r\n    r: '(n+1)*cd'\r\n  }, {\r\n    s: 'cd*n + cd -> cd*(n+1)',\r\n    assuming: {\r\n      multiply: {\r\n        commutative: false\r\n      }\r\n    }\r\n  }, {\r\n    s: 'cd + cd*n -> cd*(1+n)',\r\n    assuming: {\r\n      multiply: {\r\n        commutative: false\r\n      }\r\n    }\r\n  }, simplifyConstant,\r\n  // Second: before returning expressions to \"standard form\"\r\n\r\n  // make factors positive (and undo 'make non-constant terms positive')\r\n  {\r\n    s: '(-n)*n1 -> -(n*n1)',\r\n    assuming: {\r\n      subtract: {\r\n        total: true\r\n      }\r\n    }\r\n  }, {\r\n    s: 'n1*(-n) -> -(n1*n)',\r\n    // in case * non-commutative\r\n    assuming: {\r\n      subtract: {\r\n        total: true\r\n      },\r\n      multiply: {\r\n        commutative: false\r\n      }\r\n    }\r\n  },\r\n  // final ordering of constants\r\n  {\r\n    s: 'ce+ve -> ve+ce',\r\n    assuming: {\r\n      add: {\r\n        commutative: true\r\n      }\r\n    },\r\n    imposeContext: {\r\n      add: {\r\n        commutative: false\r\n      }\r\n    }\r\n  }, {\r\n    s: 'vd*cd -> cd*vd',\r\n    assuming: {\r\n      multiply: {\r\n        commutative: true\r\n      }\r\n    },\r\n    imposeContext: {\r\n      multiply: {\r\n        commutative: false\r\n      }\r\n    }\r\n  },\r\n  // undo temporary rules\r\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\r\n  {\r\n    l: 'n+-n1',\r\n    r: 'n-n1'\r\n  },\r\n  // undo replace 'subtract'\r\n  {\r\n    l: 'n+-(n1)',\r\n    r: 'n-(n1)'\r\n  }, {\r\n    s: 'n*(n1^-1) -> n/n1',\r\n    // undo replace 'divide'; for * commutative\r\n    assuming: {\r\n      multiply: {\r\n        commutative: true\r\n      }\r\n    } // o.w. / not conventional\r\n  }, {\r\n    s: 'n*n1^-n2 -> n/n1^n2',\r\n    assuming: {\r\n      multiply: {\r\n        commutative: true\r\n      }\r\n    } // o.w. / not conventional\r\n  }, {\r\n    s: 'n^-1 -> 1/n',\r\n    assuming: {\r\n      multiply: {\r\n        commutative: true\r\n      }\r\n    } // o.w. / not conventional\r\n  }, {\r\n    l: 'n^1',\r\n    r: 'n'\r\n  },\r\n  // can be produced by power cancellation\r\n  {\r\n    s: 'n*(n1/n2) -> (n*n1)/n2',\r\n    // '*' before '/'\r\n    assuming: {\r\n      multiply: {\r\n        associative: true\r\n      }\r\n    }\r\n  }, {\r\n    s: 'n-(n1+n2) -> n-n1-n2',\r\n    // '-' before '+'\r\n    assuming: {\r\n      addition: {\r\n        associative: true,\r\n        commutative: true\r\n      }\r\n    }\r\n  },\r\n  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\r\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\r\n\r\n  // simplifyConstant can leave an extra factor of 1, which can always\r\n  // be eliminated, since the identity always commutes\r\n  {\r\n    l: '1*n',\r\n    r: 'n',\r\n    imposeContext: {\r\n      multiply: {\r\n        commutative: true\r\n      }\r\n    }\r\n  }, {\r\n    s: 'n1/(n2/n3) -> (n1*n3)/n2',\r\n    assuming: {\r\n      multiply: {\r\n        associative: true\r\n      }\r\n    }\r\n  }, {\r\n    l: 'n1/(-n2)',\r\n    r: '-n1/n2'\r\n  }];\r\n\r\n  /**\r\n   * Takes any rule object as allowed by the specification in simplify\r\n   * and puts it in a standard form used by applyRule\r\n   */\r\n  function _canonicalizeRule(ruleObject, context) {\r\n    var newRule = {};\r\n    if (ruleObject.s) {\r\n      var lr = ruleObject.s.split('->');\r\n      if (lr.length === 2) {\r\n        newRule.l = lr[0];\r\n        newRule.r = lr[1];\r\n      } else {\r\n        throw SyntaxError('Could not parse rule: ' + ruleObject.s);\r\n      }\r\n    } else {\r\n      newRule.l = ruleObject.l;\r\n      newRule.r = ruleObject.r;\r\n    }\r\n    newRule.l = removeParens(parse(newRule.l));\r\n    newRule.r = removeParens(parse(newRule.r));\r\n    for (var prop of ['imposeContext', 'repeat', 'assuming']) {\r\n      if (prop in ruleObject) {\r\n        newRule[prop] = ruleObject[prop];\r\n      }\r\n    }\r\n    if (ruleObject.evaluate) {\r\n      newRule.evaluate = parse(ruleObject.evaluate);\r\n    }\r\n    if (isAssociative(newRule.l, context)) {\r\n      var nonCommutative = !isCommutative(newRule.l, context);\r\n      var leftExpandsym;\r\n      // Gen. the LHS placeholder used in this NC-context specific expansion rules\r\n      if (nonCommutative) leftExpandsym = _getExpandPlaceholderSymbol();\r\n      var makeNode = createMakeNodeFunction(newRule.l);\r\n      var expandsym = _getExpandPlaceholderSymbol();\r\n      newRule.expanded = {};\r\n      newRule.expanded.l = makeNode([newRule.l, expandsym]);\r\n      // Push the expandsym into the deepest possible branch.\r\n      // This helps to match the newRule against nodes returned from getSplits() later on.\r\n      flatten(newRule.expanded.l, context);\r\n      unflattenr(newRule.expanded.l, context);\r\n      newRule.expanded.r = makeNode([newRule.r, expandsym]);\r\n\r\n      // In and for a non-commutative context, attempting with yet additional expansion rules makes\r\n      // way for more matches cases of multi-arg expressions; such that associative rules (such as\r\n      // 'n*n -> n^2') can be applied to exprs. such as 'a * b * b' and 'a * b * b * a'.\r\n      if (nonCommutative) {\r\n        // 'Non-commutative' 1: LHS (placeholder) only\r\n        newRule.expandedNC1 = {};\r\n        newRule.expandedNC1.l = makeNode([leftExpandsym, newRule.l]);\r\n        newRule.expandedNC1.r = makeNode([leftExpandsym, newRule.r]);\r\n        // 'Non-commutative' 2: farmost LHS and RHS placeholders\r\n        newRule.expandedNC2 = {};\r\n        newRule.expandedNC2.l = makeNode([leftExpandsym, newRule.expanded.l]);\r\n        newRule.expandedNC2.r = makeNode([leftExpandsym, newRule.expanded.r]);\r\n      }\r\n    }\r\n    return newRule;\r\n  }\r\n\r\n  /**\r\n   * Parse the string array of rules into nodes\r\n   *\r\n   * Example syntax for rules:\r\n   *\r\n   * Position constants to the left in a product:\r\n   * { l: 'n1 * c1', r: 'c1 * n1' }\r\n   * n1 is any Node, and c1 is a ConstantNode.\r\n   *\r\n   * Apply difference of squares formula:\r\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\r\n   * n1, n2 mean any Node.\r\n   *\r\n   * Short hand notation:\r\n   * 'n1 * c1 -> c1 * n1'\r\n   */\r\n  function _buildRules(rules, context) {\r\n    // Array of rules to be used to simplify expressions\r\n    var ruleSet = [];\r\n    for (var i = 0; i < rules.length; i++) {\r\n      var rule = rules[i];\r\n      var newRule = void 0;\r\n      var ruleType = typeof rule;\r\n      switch (ruleType) {\r\n        case 'string':\r\n          rule = {\r\n            s: rule\r\n          };\r\n        /* falls through */\r\n        case 'object':\r\n          newRule = _canonicalizeRule(rule, context);\r\n          break;\r\n        case 'function':\r\n          newRule = rule;\r\n          break;\r\n        default:\r\n          throw TypeError('Unsupported type of rule: ' + ruleType);\r\n      }\r\n      // console.log('Adding rule: ' + rules[i])\r\n      // console.log(newRule)\r\n      ruleSet.push(newRule);\r\n    }\r\n    return ruleSet;\r\n  }\r\n  var _lastsym = 0;\r\n  function _getExpandPlaceholderSymbol() {\r\n    return new SymbolNode('_p' + _lastsym++);\r\n  }\r\n  function _simplify(expr, rules) {\r\n    var scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : createEmptyMap();\r\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\r\n    var debug = options.consoleDebug;\r\n    rules = _buildRules(rules || simplify.rules, options.context);\r\n    var res = resolve(expr, scope);\r\n    res = removeParens(res);\r\n    var visited = {};\r\n    var str = res.toString({\r\n      parenthesis: 'all'\r\n    });\r\n    while (!visited[str]) {\r\n      visited[str] = true;\r\n      _lastsym = 0; // counter for placeholder symbols\r\n      var laststr = str;\r\n      if (debug) console.log('Working on: ', str);\r\n      for (var i = 0; i < rules.length; i++) {\r\n        var rulestr = '';\r\n        if (typeof rules[i] === 'function') {\r\n          res = rules[i](res, options);\r\n          if (debug) rulestr = rules[i].name;\r\n        } else {\r\n          flatten(res, options.context);\r\n          res = applyRule(res, rules[i], options.context);\r\n          if (debug) {\r\n            rulestr = \"\".concat(rules[i].l.toString(), \" -> \").concat(rules[i].r.toString());\r\n          }\r\n        }\r\n        if (debug) {\r\n          var newstr = res.toString({\r\n            parenthesis: 'all'\r\n          });\r\n          if (newstr !== laststr) {\r\n            console.log('Applying', rulestr, 'produced', newstr);\r\n            laststr = newstr;\r\n          }\r\n        }\r\n        /* Use left-heavy binary tree internally,\r\n         * since custom rule functions may expect it\r\n         */\r\n        unflattenl(res, options.context);\r\n      }\r\n      str = res.toString({\r\n        parenthesis: 'all'\r\n      });\r\n    }\r\n    return res;\r\n  }\r\n  function mapRule(nodes, rule, context) {\r\n    var resNodes = nodes;\r\n    if (nodes) {\r\n      for (var i = 0; i < nodes.length; ++i) {\r\n        var newNode = applyRule(nodes[i], rule, context);\r\n        if (newNode !== nodes[i]) {\r\n          if (resNodes === nodes) {\r\n            resNodes = nodes.slice();\r\n          }\r\n          resNodes[i] = newNode;\r\n        }\r\n      }\r\n    }\r\n    return resNodes;\r\n  }\r\n\r\n  /**\r\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\r\n   *\r\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\r\n   * @param  {Object | Function} rule\r\n   * @param  {Object} context -- information about assumed properties of operators\r\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\r\n   */\r\n  function applyRule(node, rule, context) {\r\n    //    console.log('Entering applyRule(\"', rule.l.toString({parenthesis:'all'}), '->', rule.r.toString({parenthesis:'all'}), '\",', node.toString({parenthesis:'all'}),')')\r\n\r\n    // check that the assumptions for this rule are satisfied by the current\r\n    // context:\r\n    if (rule.assuming) {\r\n      for (var symbol in rule.assuming) {\r\n        for (var property in rule.assuming[symbol]) {\r\n          if (hasProperty(symbol, property, context) !== rule.assuming[symbol][property]) {\r\n            return node;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var mergedContext = mergeContext(rule.imposeContext, context);\r\n\r\n    // Do not clone node unless we find a match\r\n    var res = node;\r\n\r\n    // First replace our child nodes with their simplified versions\r\n    // If a child could not be simplified, applying the rule to it\r\n    // will have no effect since the node is returned unchanged\r\n    if (res instanceof OperatorNode || res instanceof FunctionNode) {\r\n      var newArgs = mapRule(res.args, rule, context);\r\n      if (newArgs !== res.args) {\r\n        res = res.clone();\r\n        res.args = newArgs;\r\n      }\r\n    } else if (res instanceof ParenthesisNode) {\r\n      if (res.content) {\r\n        var newContent = applyRule(res.content, rule, context);\r\n        if (newContent !== res.content) {\r\n          res = new ParenthesisNode(newContent);\r\n        }\r\n      }\r\n    } else if (res instanceof ArrayNode) {\r\n      var newItems = mapRule(res.items, rule, context);\r\n      if (newItems !== res.items) {\r\n        res = new ArrayNode(newItems);\r\n      }\r\n    } else if (res instanceof AccessorNode) {\r\n      var newObj = res.object;\r\n      if (res.object) {\r\n        newObj = applyRule(res.object, rule, context);\r\n      }\r\n      var newIndex = res.index;\r\n      if (res.index) {\r\n        newIndex = applyRule(res.index, rule, context);\r\n      }\r\n      if (newObj !== res.object || newIndex !== res.index) {\r\n        res = new AccessorNode(newObj, newIndex);\r\n      }\r\n    } else if (res instanceof IndexNode) {\r\n      var newDims = mapRule(res.dimensions, rule, context);\r\n      if (newDims !== res.dimensions) {\r\n        res = new IndexNode(newDims);\r\n      }\r\n    } else if (res instanceof ObjectNode) {\r\n      var changed = false;\r\n      var newProps = {};\r\n      for (var prop in res.properties) {\r\n        newProps[prop] = applyRule(res.properties[prop], rule, context);\r\n        if (newProps[prop] !== res.properties[prop]) {\r\n          changed = true;\r\n        }\r\n      }\r\n      if (changed) {\r\n        res = new ObjectNode(newProps);\r\n      }\r\n    }\r\n\r\n    // Try to match a rule against this node\r\n    var repl = rule.r;\r\n    var matches = _ruleMatch(rule.l, res, mergedContext)[0];\r\n\r\n    // If the rule is associative operator, we can try matching it while allowing additional terms.\r\n    // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\r\n    if (!matches && rule.expanded) {\r\n      repl = rule.expanded.r;\r\n      matches = _ruleMatch(rule.expanded.l, res, mergedContext)[0];\r\n    }\r\n    // Additional, non-commutative context expansion-rules\r\n    if (!matches && rule.expandedNC1) {\r\n      repl = rule.expandedNC1.r;\r\n      matches = _ruleMatch(rule.expandedNC1.l, res, mergedContext)[0];\r\n      if (!matches) {\r\n        // Existence of NC1 implies NC2\r\n        repl = rule.expandedNC2.r;\r\n        matches = _ruleMatch(rule.expandedNC2.l, res, mergedContext)[0];\r\n      }\r\n    }\r\n    if (matches) {\r\n      // const before = res.toString({parenthesis: 'all'})\r\n\r\n      // Create a new node by cloning the rhs of the matched rule\r\n      // we keep any implicit multiplication state if relevant\r\n      var implicit = res.implicit;\r\n      res = repl.clone();\r\n      if (implicit && 'implicit' in repl) {\r\n        res.implicit = true;\r\n      }\r\n\r\n      // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\r\n      res = res.transform(function (node) {\r\n        if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\r\n          return matches.placeholders[node.name].clone();\r\n        } else {\r\n          return node;\r\n        }\r\n      });\r\n\r\n      // const after = res.toString({parenthesis: 'all'})\r\n      // console.log('Simplified ' + before + ' to ' + after)\r\n    }\r\n    if (rule.repeat && res !== node) {\r\n      res = applyRule(res, rule, context);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Get (binary) combinations of a flattened binary node\r\n   * e.g. +(node1, node2, node3) -> [\r\n   *        +(node1,  +(node2, node3)),\r\n   *        +(node2,  +(node1, node3)),\r\n   *        +(node3,  +(node1, node2))]\r\n   *\r\n   */\r\n  function getSplits(node, context) {\r\n    var res = [];\r\n    var right, rightArgs;\r\n    var makeNode = createMakeNodeFunction(node);\r\n    if (isCommutative(node, context)) {\r\n      for (var i = 0; i < node.args.length; i++) {\r\n        rightArgs = node.args.slice(0);\r\n        rightArgs.splice(i, 1);\r\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\r\n        res.push(makeNode([node.args[i], right]));\r\n      }\r\n    } else {\r\n      // Keep order, but try all parenthesizations\r\n      for (var _i = 1; _i < node.args.length; _i++) {\r\n        var left = node.args[0];\r\n        if (_i > 1) {\r\n          left = makeNode(node.args.slice(0, _i));\r\n        }\r\n        rightArgs = node.args.slice(_i);\r\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\r\n        res.push(makeNode([left, right]));\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Returns the set union of two match-placeholders or null if there is a conflict.\r\n   */\r\n  function mergeMatch(match1, match2) {\r\n    var res = {\r\n      placeholders: {}\r\n    };\r\n\r\n    // Some matches may not have placeholders; this is OK\r\n    if (!match1.placeholders && !match2.placeholders) {\r\n      return res;\r\n    } else if (!match1.placeholders) {\r\n      return match2;\r\n    } else if (!match2.placeholders) {\r\n      return match1;\r\n    }\r\n\r\n    // Placeholders with the same key must match exactly\r\n    for (var key in match1.placeholders) {\r\n      if (hasOwnProperty(match1.placeholders, key)) {\r\n        res.placeholders[key] = match1.placeholders[key];\r\n        if (hasOwnProperty(match2.placeholders, key)) {\r\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (var _key in match2.placeholders) {\r\n      if (hasOwnProperty(match2.placeholders, _key)) {\r\n        res.placeholders[_key] = match2.placeholders[_key];\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\r\n   * Each list represents matches found in one child of a node.\r\n   */\r\n  function combineChildMatches(list1, list2) {\r\n    var res = [];\r\n    if (list1.length === 0 || list2.length === 0) {\r\n      return res;\r\n    }\r\n    var merged;\r\n    for (var i1 = 0; i1 < list1.length; i1++) {\r\n      for (var i2 = 0; i2 < list2.length; i2++) {\r\n        merged = mergeMatch(list1[i1], list2[i2]);\r\n        if (merged) {\r\n          res.push(merged);\r\n        }\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\r\n   * Each list represents matches found in one child of a node.\r\n   * Returns a list of unique matches.\r\n   */\r\n  function mergeChildMatches(childMatches) {\r\n    if (childMatches.length === 0) {\r\n      return childMatches;\r\n    }\r\n    var sets = childMatches.reduce(combineChildMatches);\r\n    var uniqueSets = [];\r\n    var unique = {};\r\n    for (var i = 0; i < sets.length; i++) {\r\n      var s = JSON.stringify(sets[i], replacer);\r\n      if (!unique[s]) {\r\n        unique[s] = true;\r\n        uniqueSets.push(sets[i]);\r\n      }\r\n    }\r\n    return uniqueSets;\r\n  }\r\n\r\n  /**\r\n   * Determines whether node matches rule.\r\n   *\r\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\r\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\r\n   * @param {Object} context -- provides assumed properties of operators\r\n   * @param {Boolean} isSplit -- whether we are in process of splitting an\r\n   *                    n-ary operator node into possible binary combinations.\r\n   *                    Defaults to false.\r\n   * @return {Object} Information about the match, if it exists.\r\n   */\r\n  function _ruleMatch(rule, node, context, isSplit) {\r\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\r\n    //    console.log('rule = ' + rule)\r\n    //    console.log('node = ' + node)\r\n\r\n    //    console.log('Entering _ruleMatch(', rule.toString({parenthesis:'all'}), ', ', node.toString({parenthesis:'all'}), ', ', context, ')')\r\n    var res = [{\r\n      placeholders: {}\r\n    }];\r\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\r\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\r\n      if (rule instanceof OperatorNode) {\r\n        if (rule.op !== node.op || rule.fn !== node.fn) {\r\n          return [];\r\n        }\r\n      } else if (rule instanceof FunctionNode) {\r\n        if (rule.name !== node.name) {\r\n          return [];\r\n        }\r\n      }\r\n\r\n      // rule and node match. Search the children of rule and node.\r\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node, context) && node.args.length === rule.args.length || isSplit) {\r\n        // Expect non-associative operators to match exactly,\r\n        // except in any order if operator is commutative\r\n        var childMatches = [];\r\n        for (var i = 0; i < rule.args.length; i++) {\r\n          var childMatch = _ruleMatch(rule.args[i], node.args[i], context);\r\n          if (childMatch.length === 0) {\r\n            // Child did not match, so stop searching immediately\r\n            break;\r\n          }\r\n          // The child matched, so add the information returned from the child to our result\r\n          childMatches.push(childMatch);\r\n        }\r\n        if (childMatches.length !== rule.args.length) {\r\n          if (!isCommutative(node, context) ||\r\n          // exact match in order needed\r\n          rule.args.length === 1) {\r\n            // nothing to commute\r\n            return [];\r\n          }\r\n          if (rule.args.length > 2) {\r\n            /* Need to generate all permutations and try them.\r\n             * It's a bit complicated, and unlikely to come up since there\r\n             * are very few ternary or higher operators. So punt for now.\r\n             */\r\n            throw new Error('permuting >2 commutative non-associative rule arguments not yet implemented');\r\n          }\r\n          /* Exactly two arguments, try them reversed */\r\n          var leftMatch = _ruleMatch(rule.args[0], node.args[1], context);\r\n          if (leftMatch.length === 0) {\r\n            return [];\r\n          }\r\n          var rightMatch = _ruleMatch(rule.args[1], node.args[0], context);\r\n          if (rightMatch.length === 0) {\r\n            return [];\r\n          }\r\n          childMatches = [leftMatch, rightMatch];\r\n        }\r\n        res = mergeChildMatches(childMatches);\r\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\r\n        // node is flattened, rule is not\r\n        // Associative operators/functions can be split in different ways so we check if the rule\r\n        // matches for each of them and return their union.\r\n        var splits = getSplits(node, context);\r\n        var splitMatches = [];\r\n        for (var _i2 = 0; _i2 < splits.length; _i2++) {\r\n          var matchSet = _ruleMatch(rule, splits[_i2], context, true); // recursing at the same tree depth here\r\n          splitMatches = splitMatches.concat(matchSet);\r\n        }\r\n        return splitMatches;\r\n      } else if (rule.args.length > 2) {\r\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\r\n      } else {\r\n        // Incorrect number of arguments in rule and node, so no match\r\n        return [];\r\n      }\r\n    } else if (rule instanceof SymbolNode) {\r\n      // If the rule is a SymbolNode, then it carries a special meaning\r\n      // according to the first one or two characters of the symbol node name.\r\n      // These meanings are expalined in the documentation for simplify()\r\n      if (rule.name.length === 0) {\r\n        throw new Error('Symbol in rule has 0 length...!?');\r\n      }\r\n      if (SUPPORTED_CONSTANTS[rule.name]) {\r\n        // built-in constant must match exactly\r\n        if (rule.name !== node.name) {\r\n          return [];\r\n        }\r\n      } else {\r\n        // wildcards are composed of up to two alphabetic or underscore characters\r\n        switch (rule.name[1] >= 'a' && rule.name[1] <= 'z' ? rule.name.substring(0, 2) : rule.name[0]) {\r\n          case 'n':\r\n          case '_p':\r\n            // rule matches _anything_, so assign this node to the rule.name placeholder\r\n            // Assign node to the rule.name placeholder.\r\n            // Our parent will check for matches among placeholders.\r\n            res[0].placeholders[rule.name] = node;\r\n            break;\r\n          case 'c':\r\n          case 'cl':\r\n            // rule matches a ConstantNode\r\n            if (isConstantNode(node)) {\r\n              res[0].placeholders[rule.name] = node;\r\n            } else {\r\n              // mis-match: rule does not encompass current node\r\n              return [];\r\n            }\r\n            break;\r\n          case 'v':\r\n            // rule matches anything other than a ConstantNode\r\n            if (!isConstantNode(node)) {\r\n              res[0].placeholders[rule.name] = node;\r\n            } else {\r\n              // mis-match: rule does not encompass current node\r\n              return [];\r\n            }\r\n            break;\r\n          case 'vl':\r\n            // rule matches VariableNode\r\n            if (isVariableNode(node)) {\r\n              res[0].placeholders[rule.name] = node;\r\n            } else {\r\n              // mis-match: rule does not encompass current node\r\n              return [];\r\n            }\r\n            break;\r\n          case 'cd':\r\n            // rule matches a ConstantNode or unaryMinus-wrapped ConstantNode\r\n            if (isNumericNode(node)) {\r\n              res[0].placeholders[rule.name] = node;\r\n            } else {\r\n              // mis-match: rule does not encompass current node\r\n              return [];\r\n            }\r\n            break;\r\n          case 'vd':\r\n            // rule matches anything other than a ConstantNode or unaryMinus-wrapped ConstantNode\r\n            if (!isNumericNode(node)) {\r\n              res[0].placeholders[rule.name] = node;\r\n            } else {\r\n              // mis-match: rule does not encompass current node\r\n              return [];\r\n            }\r\n            break;\r\n          case 'ce':\r\n            // rule matches expressions that have a constant value\r\n            if (isConstantExpression(node)) {\r\n              res[0].placeholders[rule.name] = node;\r\n            } else {\r\n              // mis-match: rule does not encompass current node\r\n              return [];\r\n            }\r\n            break;\r\n          case 've':\r\n            // rule matches expressions that do not have a constant value\r\n            if (!isConstantExpression(node)) {\r\n              res[0].placeholders[rule.name] = node;\r\n            } else {\r\n              // mis-match: rule does not encompass current node\r\n              return [];\r\n            }\r\n            break;\r\n          default:\r\n            throw new Error('Invalid symbol in rule: ' + rule.name);\r\n        }\r\n      }\r\n    } else if (rule instanceof ConstantNode) {\r\n      // Literal constant must match exactly\r\n      if (!equal(rule.value, node.value)) {\r\n        return [];\r\n      }\r\n    } else {\r\n      // Some other node was encountered which we aren't prepared for, so no match\r\n      return [];\r\n    }\r\n\r\n    // It's a match!\r\n\r\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Determines whether p and q (and all their children nodes) are identical.\r\n   *\r\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\r\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\r\n   * @return {Object} Information about the match, if it exists.\r\n   */\r\n  function _exactMatch(p, q) {\r\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\r\n      if (!equal(p.value, q.value)) {\r\n        return false;\r\n      }\r\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\r\n      if (p.name !== q.name) {\r\n        return false;\r\n      }\r\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\r\n      if (p instanceof OperatorNode) {\r\n        if (p.op !== q.op || p.fn !== q.fn) {\r\n          return false;\r\n        }\r\n      } else if (p instanceof FunctionNode) {\r\n        if (p.name !== q.name) {\r\n          return false;\r\n        }\r\n      }\r\n      if (p.args.length !== q.args.length) {\r\n        return false;\r\n      }\r\n      for (var i = 0; i < p.args.length; i++) {\r\n        if (!_exactMatch(p.args[i], q.args[i])) {\r\n          return false;\r\n        }\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  return simplify;\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}