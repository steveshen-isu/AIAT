{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { acschNumber } from '../../plain/number/index.js';\nvar name = 'acsch';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createAcsch = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\r\n   * Calculate the inverse hyperbolic cosecant of a value,\r\n   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.\r\n   *\r\n   * To avoid confusion with the matrix inverse hyperbolic cosecant, this function\r\n   * does not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.acsch(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.acsch(0.5)       // returns 1.4436354751788103\r\n   *\r\n   * See also:\r\n   *\r\n   *    asech, acoth\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic arccosecant of x\r\n   */\n  return typed(name, {\n    number: acschNumber,\n    Complex: function Complex(x) {\n      return x.acsch();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).asinh();\n    }\n  });\n});","map":{"version":3,"names":["factory","acschNumber","name","dependencies","createAcsch","_ref","typed","BigNumber","_BigNumber","number","Complex","x","acsch","div","asinh"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/trigonometry/acsch.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { acschNumber } from '../../plain/number/index.js';\r\nvar name = 'acsch';\r\nvar dependencies = ['typed', 'BigNumber'];\r\nexport var createAcsch = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    BigNumber: _BigNumber\r\n  } = _ref;\r\n  /**\r\n   * Calculate the inverse hyperbolic cosecant of a value,\r\n   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.\r\n   *\r\n   * To avoid confusion with the matrix inverse hyperbolic cosecant, this function\r\n   * does not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.acsch(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.acsch(0.5)       // returns 1.4436354751788103\r\n   *\r\n   * See also:\r\n   *\r\n   *    asech, acoth\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic arccosecant of x\r\n   */\r\n  return typed(name, {\r\n    number: acschNumber,\r\n    Complex: function Complex(x) {\r\n      return x.acsch();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return new _BigNumber(1).div(x).asinh();\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC;AACzC,OAAO,IAAIC,WAAW,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC1E,IAAI;IACFC,KAAK;IACLC,SAAS,EAAEC;EACb,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBO,MAAM,EAAER,WAAW;IACnBS,OAAO,EAAE,SAASA,OAAOA,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACC,KAAK,CAAC,CAAC;IAClB,CAAC;IACDL,SAAS,EAAE,SAASA,SAASA,CAACI,CAAC,EAAE;MAC/B,OAAO,IAAIH,UAAU,CAAC,CAAC,CAAC,CAACK,GAAG,CAACF,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC;IACzC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}