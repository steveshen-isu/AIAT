{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'compile';\nvar dependencies = ['typed', 'parse'];\nexport var createCompile = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse\n  } = _ref;\n  /**\r\n   * Parse and compile an expression.\r\n   * Returns a an object with a function `evaluate([scope])` to evaluate the\r\n   * compiled expression.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.compile(expr)                       // returns one node\r\n   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\r\n   *\r\n   * Examples:\r\n   *\r\n   *     const code1 = math.compile('sqrt(3^2 + 4^2)')\r\n   *     code1.evaluate() // 5\r\n   *\r\n   *     let scope = {a: 3, b: 4}\r\n   *     const code2 = math.compile('a * b') // 12\r\n   *     code2.evaluate(scope) // 12\r\n   *     scope.a = 5\r\n   *     code2.evaluate(scope) // 20\r\n   *\r\n   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])\r\n   *     nodes[2].evaluate() // 12\r\n   *\r\n   * See also:\r\n   *\r\n   *    parse, evaluate\r\n   *\r\n   * @param {string | string[] | Array | Matrix} expr\r\n   *            The expression to be compiled\r\n   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code\r\n   *            An object with the compiled expression\r\n   * @throws {Error}\r\n   */\n  return typed(name, {\n    string: function string(expr) {\n      return parse(expr).compile();\n    },\n    'Array | Matrix': function Array__Matrix(expr) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile();\n      });\n    }\n  });\n});","map":{"version":3,"names":["deepMap","factory","name","dependencies","createCompile","_ref","typed","parse","string","expr","compile","Array__Matrix","entry"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/expression/function/compile.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'compile';\r\nvar dependencies = ['typed', 'parse'];\r\nexport var createCompile = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    parse\r\n  } = _ref;\r\n  /**\r\n   * Parse and compile an expression.\r\n   * Returns a an object with a function `evaluate([scope])` to evaluate the\r\n   * compiled expression.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.compile(expr)                       // returns one node\r\n   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\r\n   *\r\n   * Examples:\r\n   *\r\n   *     const code1 = math.compile('sqrt(3^2 + 4^2)')\r\n   *     code1.evaluate() // 5\r\n   *\r\n   *     let scope = {a: 3, b: 4}\r\n   *     const code2 = math.compile('a * b') // 12\r\n   *     code2.evaluate(scope) // 12\r\n   *     scope.a = 5\r\n   *     code2.evaluate(scope) // 20\r\n   *\r\n   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])\r\n   *     nodes[2].evaluate() // 12\r\n   *\r\n   * See also:\r\n   *\r\n   *    parse, evaluate\r\n   *\r\n   * @param {string | string[] | Array | Matrix} expr\r\n   *            The expression to be compiled\r\n   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code\r\n   *            An object with the compiled expression\r\n   * @throws {Error}\r\n   */\r\n  return typed(name, {\r\n    string: function string(expr) {\r\n      return parse(expr).compile();\r\n    },\r\n    'Array | Matrix': function Array__Matrix(expr) {\r\n      return deepMap(expr, function (entry) {\r\n        return parse(entry).compile();\r\n      });\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;AACrC,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC5E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBM,MAAM,EAAE,SAASA,MAAMA,CAACC,IAAI,EAAE;MAC5B,OAAOF,KAAK,CAACE,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC;IAC9B,CAAC;IACD,gBAAgB,EAAE,SAASC,aAAaA,CAACF,IAAI,EAAE;MAC7C,OAAOT,OAAO,CAACS,IAAI,EAAE,UAAUG,KAAK,EAAE;QACpC,OAAOL,KAAK,CAACK,KAAK,CAAC,CAACF,OAAO,CAAC,CAAC;MAC/B,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}