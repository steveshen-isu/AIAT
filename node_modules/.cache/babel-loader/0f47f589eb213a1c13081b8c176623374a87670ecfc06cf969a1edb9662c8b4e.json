{"ast":null,"code":"/**\r\n * Create a range error with the message:\r\n *     'Dimension mismatch (<actual size> != <expected size>)'\r\n * @param {number | number[]} actual        The actual size\r\n * @param {number | number[]} expected      The expected size\r\n * @param {string} [relation='!=']          Optional relation between actual\r\n *                                          and expected size: '!=', '<', etc.\r\n * @extends RangeError\r\n */\nexport function DimensionError(actual, expected, relation) {\n  if (!(this instanceof DimensionError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n  this.actual = actual;\n  this.expected = expected;\n  this.relation = relation;\n  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';\n  this.stack = new Error().stack;\n}\nDimensionError.prototype = new RangeError();\nDimensionError.prototype.constructor = RangeError;\nDimensionError.prototype.name = 'DimensionError';\nDimensionError.prototype.isDimensionError = true;","map":{"version":3,"names":["DimensionError","actual","expected","relation","SyntaxError","message","Array","isArray","join","stack","Error","prototype","RangeError","constructor","name","isDimensionError"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/error/DimensionError.js"],"sourcesContent":["/**\r\n * Create a range error with the message:\r\n *     'Dimension mismatch (<actual size> != <expected size>)'\r\n * @param {number | number[]} actual        The actual size\r\n * @param {number | number[]} expected      The expected size\r\n * @param {string} [relation='!=']          Optional relation between actual\r\n *                                          and expected size: '!=', '<', etc.\r\n * @extends RangeError\r\n */\r\nexport function DimensionError(actual, expected, relation) {\r\n  if (!(this instanceof DimensionError)) {\r\n    throw new SyntaxError('Constructor must be called with the new operator');\r\n  }\r\n  this.actual = actual;\r\n  this.expected = expected;\r\n  this.relation = relation;\r\n  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';\r\n  this.stack = new Error().stack;\r\n}\r\nDimensionError.prototype = new RangeError();\r\nDimensionError.prototype.constructor = RangeError;\r\nDimensionError.prototype.name = 'DimensionError';\r\nDimensionError.prototype.isDimensionError = true;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,cAAcA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EACzD,IAAI,EAAE,IAAI,YAAYH,cAAc,CAAC,EAAE;IACrC,MAAM,IAAII,WAAW,CAAC,kDAAkD,CAAC;EAC3E;EACA,IAAI,CAACH,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EACxB,IAAI,CAACE,OAAO,GAAG,sBAAsB,IAAIC,KAAK,CAACC,OAAO,CAACN,MAAM,CAAC,GAAG,GAAG,GAAGA,MAAM,CAACO,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAGP,MAAM,CAAC,GAAG,GAAG,IAAI,IAAI,CAACE,QAAQ,IAAI,IAAI,CAAC,GAAG,GAAG,IAAIG,KAAK,CAACC,OAAO,CAACL,QAAQ,CAAC,GAAG,GAAG,GAAGA,QAAQ,CAACM,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAGN,QAAQ,CAAC,GAAG,GAAG;EAC7N,IAAI,CAACO,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC,CAACD,KAAK;AAChC;AACAT,cAAc,CAACW,SAAS,GAAG,IAAIC,UAAU,CAAC,CAAC;AAC3CZ,cAAc,CAACW,SAAS,CAACE,WAAW,GAAGD,UAAU;AACjDZ,cAAc,CAACW,SAAS,CAACG,IAAI,GAAG,gBAAgB;AAChDd,cAAc,CAACW,SAAS,CAACI,gBAAgB,GAAG,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}