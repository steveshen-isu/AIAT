{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ROG\\\\ai-solver\\\\src\\\\components\\\\chatbox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Typewriter from './Typewriter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst currentUrl = window.location.href;\nconst ipAddress = currentUrl.split(':')[1].split('/')[2];\nfunction ChatBox() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [responses, setResponses] = useState([]);\n  const [pastedImage, setPastedImage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const sendMessage = async () => {\n    if (!message && !pastedImage) return;\n    setLoading(true);\n    try {\n      const requestBody = {\n        message,\n        image: pastedImage\n      };\n      const response = await fetch('http://' + ipAddress + ':200/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      const data = await response.json();\n      setResponses([...responses, {\n        query: message,\n        response: data.response\n      }]);\n      setMessage('');\n      setPastedImage(null);\n    } catch (error) {\n      console.error('Error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handlePaste = event => {\n    const items = event.clipboardData.items;\n    for (const item of items) {\n      if (item.type.startsWith('image/')) {\n        const file = item.getAsFile();\n        const reader = new FileReader();\n        reader.onload = e => {\n          const base64Image = e.target.result; // Full Base64 image including data URI\n          setPastedImage(base64Image); // Ensure it starts with data:image/png;base64 or similar\n        };\n        reader.readAsDataURL(file); // Correctly read image as Base64 with data URI\n        break;\n      }\n    }\n  };\n  const removeImage = () => {\n    setPastedImage(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: /*#__PURE__*/_jsxDEV(Typewriter, {\n        text: \"Talk to me about your question or copy your image including your question\",\n        speed: 40\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"custom-textarea\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      onPaste: handlePaste,\n      rows: \"4\",\n      cols: \"50\",\n      placeholder: \"Type your message or paste an image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), pastedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: /*#__PURE__*/_jsxDEV(Typewriter, {\n          text: \"pasted image:\",\n          speed: 40\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: pastedImage,\n        alt: \"Pasted content\",\n        style: {\n          maxWidth: '100%',\n          height: 'auto'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: removeImage,\n        style: {\n          marginTop: '10px'\n        },\n        children: \"Remove Pasted Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      disabled: loading,\n      style: {\n        marginTop: '10px'\n      },\n      children: loading ? 'Sending...' : 'Send'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: responses.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"You:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 16\n          }, this), \" \", item.query]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"GPT:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 16\n          }, this), \" \", item.response]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"ftp0sRsK8+NLlqHVUSzIplEBqZE=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","Typewriter","jsxDEV","_jsxDEV","currentUrl","window","location","href","ipAddress","split","ChatBox","_s","message","setMessage","responses","setResponses","pastedImage","setPastedImage","loading","setLoading","sendMessage","requestBody","image","response","fetch","method","headers","body","JSON","stringify","data","json","query","error","console","handlePaste","event","items","clipboardData","item","type","startsWith","file","getAsFile","reader","FileReader","onload","e","base64Image","target","result","readAsDataURL","removeImage","children","text","speed","fileName","_jsxFileName","lineNumber","columnNumber","className","value","onChange","onPaste","rows","cols","placeholder","src","alt","style","maxWidth","height","onClick","marginTop","disabled","map","index","marginBottom","_c","$RefreshReg$"],"sources":["C:/Users/ROG/ai-solver/src/components/chatbox.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Typewriter from './Typewriter';\r\nconst currentUrl = window.location.href;\r\n\r\nconst ipAddress = currentUrl.split(':')[1].split('/')[2];\r\nfunction ChatBox() {\r\n  const [message, setMessage] = useState('');\r\n  const [responses, setResponses] = useState([]);\r\n  const [pastedImage, setPastedImage] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const sendMessage = async () => {\r\n    if (!message && !pastedImage) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const requestBody = {\r\n        message,\r\n        image: pastedImage,\r\n      };\r\n\r\n      const response = await fetch('http://' + ipAddress + ':200/api/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n\r\n      const data = await response.json();\r\n      setResponses([...responses, { query: message, response: data.response }]);\r\n      setMessage('');\r\n      setPastedImage(null);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handlePaste = (event) => {\r\n    const items = event.clipboardData.items;\r\n    for (const item of items) {\r\n      if (item.type.startsWith('image/')) {\r\n        const file = item.getAsFile();\r\n        const reader = new FileReader();\r\n  \r\n        reader.onload = (e) => {\r\n          const base64Image = e.target.result; // Full Base64 image including data URI\r\n          setPastedImage(base64Image); // Ensure it starts with data:image/png;base64 or similar\r\n        };\r\n  \r\n        reader.readAsDataURL(file); // Correctly read image as Base64 with data URI\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const removeImage = () => {\r\n    setPastedImage(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        <Typewriter text=\"Talk to me about your question or copy your image including your question\" speed={40} />\r\n      </h1>\r\n\r\n      <textarea\r\n        className=\"custom-textarea\"\r\n        value={message}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n        onPaste={handlePaste}\r\n        rows=\"4\"\r\n        cols=\"50\"\r\n        placeholder=\"Type your message or paste an image...\"\r\n      />\r\n\r\n      {pastedImage && (\r\n        <div>\r\n            <h1>\r\n                <Typewriter text=\"pasted image:\" speed={40} />\r\n            </h1>\r\n          <img src={pastedImage} alt=\"Pasted content\" style={{ maxWidth: '100%', height: 'auto' }} />\r\n          <button onClick={removeImage} style={{ marginTop: '10px' }}>Remove Pasted Image</button>\r\n        </div>\r\n      )}\r\n\r\n      <button onClick={sendMessage} disabled={loading} style={{ marginTop: '10px' }}>\r\n        {loading ? 'Sending...' : 'Send'}\r\n      </button>\r\n\r\n      <div>\r\n        {responses.map((item, index) => (\r\n          <div key={index} style={{ marginBottom: '20px' }}>\r\n            <p><b>You:</b> {item.query}</p>\r\n            <p><b>GPT:</b> {item.response}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}