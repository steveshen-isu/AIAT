{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'add';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix', 'concat'];\nexport var createAdd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    equalScalar,\n    DenseMatrix,\n    SparseMatrix,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  /**\r\n  * Add two or more values, `x + y`.\r\n  * For matrices, the function is evaluated element wise.\r\n  *\r\n  * Syntax:\r\n  *\r\n  *    math.add(x, y)\r\n  *    math.add(x, y, z, ...)\r\n  *\r\n  * Examples:\r\n  *\r\n  *    math.add(2, 3)               // returns number 5\r\n  *    math.add(2, 3, 4)            // returns number 9\r\n  *\r\n  *    const a = math.complex(2, 3)\r\n  *    const b = math.complex(-4, 1)\r\n  *    math.add(a, b)               // returns Complex -2 + 4i\r\n  *\r\n  *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]\r\n  *\r\n  *    const c = math.unit('5 cm')\r\n  *    const d = math.unit('2.1 mm')\r\n  *    math.add(c, d)               // returns Unit 52.1 mm\r\n  *\r\n  *    math.add(\"2.3\", \"4\")         // returns number 6.3\r\n  *\r\n  * See also:\r\n  *\r\n  *    subtract, sum\r\n  *\r\n  * @param  {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} x First value to add\r\n  * @param  {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} y Second value to add\r\n  * @return {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\r\n  */\n  return typed(name, {\n    'any, any': addScalar,\n    'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {\n      var result = self(x, y);\n      for (var i = 0; i < rest.length; i++) {\n        result = self(result, rest[i]);\n      }\n      return result;\n    })\n  }, matrixAlgorithmSuite({\n    elop: addScalar,\n    DS: matAlgo01xDSid,\n    SS: matAlgo04xSidSid,\n    Ss: matAlgo10xSids\n  }));\n});","map":{"version":3,"names":["factory","createMatAlgo01xDSid","createMatAlgo04xSidSid","createMatAlgo10xSids","createMatrixAlgorithmSuite","name","dependencies","createAdd","_ref","typed","matrix","addScalar","equalScalar","DenseMatrix","SparseMatrix","concat","matAlgo01xDSid","matAlgo04xSidSid","matAlgo10xSids","matrixAlgorithmSuite","referToSelf","self","x","y","rest","result","i","length","elop","DS","SS","Ss"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/add.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\r\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\r\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'add';\r\nvar dependencies = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix', 'concat'];\r\nexport var createAdd = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    addScalar,\r\n    equalScalar,\r\n    DenseMatrix,\r\n    SparseMatrix,\r\n    concat\r\n  } = _ref;\r\n  var matAlgo01xDSid = createMatAlgo01xDSid({\r\n    typed\r\n  });\r\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo10xSids = createMatAlgo10xSids({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n  /**\r\n  * Add two or more values, `x + y`.\r\n  * For matrices, the function is evaluated element wise.\r\n  *\r\n  * Syntax:\r\n  *\r\n  *    math.add(x, y)\r\n  *    math.add(x, y, z, ...)\r\n  *\r\n  * Examples:\r\n  *\r\n  *    math.add(2, 3)               // returns number 5\r\n  *    math.add(2, 3, 4)            // returns number 9\r\n  *\r\n  *    const a = math.complex(2, 3)\r\n  *    const b = math.complex(-4, 1)\r\n  *    math.add(a, b)               // returns Complex -2 + 4i\r\n  *\r\n  *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]\r\n  *\r\n  *    const c = math.unit('5 cm')\r\n  *    const d = math.unit('2.1 mm')\r\n  *    math.add(c, d)               // returns Unit 52.1 mm\r\n  *\r\n  *    math.add(\"2.3\", \"4\")         // returns number 6.3\r\n  *\r\n  * See also:\r\n  *\r\n  *    subtract, sum\r\n  *\r\n  * @param  {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} x First value to add\r\n  * @param  {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} y Second value to add\r\n  * @return {number | BigNumber | bigint | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\r\n  */\r\n  return typed(name, {\r\n    'any, any': addScalar,\r\n    'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {\r\n      var result = self(x, y);\r\n      for (var i = 0; i < rest.length; i++) {\r\n        result = self(result, rest[i]);\r\n      }\r\n      return result;\r\n    })\r\n  }, matrixAlgorithmSuite({\r\n    elop: addScalar,\r\n    DS: matAlgo01xDSid,\r\n    SS: matAlgo04xSidSid,\r\n    Ss: matAlgo10xSids\r\n  }));\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,oBAAoB,QAAQ,2CAA2C;AAChF,SAASC,sBAAsB,QAAQ,6CAA6C;AACpF,SAASC,oBAAoB,QAAQ,2CAA2C;AAChF,SAASC,0BAA0B,QAAQ,iDAAiD;AAC5F,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,aAAa,EAAE,aAAa,EAAE,cAAc,EAAE,QAAQ,CAAC;AAC3G,OAAO,IAAIC,SAAS,GAAG,eAAeP,OAAO,CAACK,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC,SAAS;IACTC,WAAW;IACXC,WAAW;IACXC,YAAY;IACZC;EACF,CAAC,GAAGP,IAAI;EACR,IAAIQ,cAAc,GAAGf,oBAAoB,CAAC;IACxCQ;EACF,CAAC,CAAC;EACF,IAAIQ,gBAAgB,GAAGf,sBAAsB,CAAC;IAC5CO,KAAK;IACLG;EACF,CAAC,CAAC;EACF,IAAIM,cAAc,GAAGf,oBAAoB,CAAC;IACxCM,KAAK;IACLI;EACF,CAAC,CAAC;EACF,IAAIM,oBAAoB,GAAGf,0BAA0B,CAAC;IACpDK,KAAK;IACLC,MAAM;IACNK;EACF,CAAC,CAAC;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAON,KAAK,CAACJ,IAAI,EAAE;IACjB,UAAU,EAAEM,SAAS;IACrB,kBAAkB,EAAEF,KAAK,CAACW,WAAW,CAACC,IAAI,IAAI,CAACC,CAAC,EAAEC,CAAC,EAAEC,IAAI,KAAK;MAC5D,IAAIC,MAAM,GAAGJ,IAAI,CAACC,CAAC,EAAEC,CAAC,CAAC;MACvB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;QACpCD,MAAM,GAAGJ,IAAI,CAACI,MAAM,EAAED,IAAI,CAACE,CAAC,CAAC,CAAC;MAChC;MACA,OAAOD,MAAM;IACf,CAAC;EACH,CAAC,EAAEN,oBAAoB,CAAC;IACtBS,IAAI,EAAEjB,SAAS;IACfkB,EAAE,EAAEb,cAAc;IAClBc,EAAE,EAAEb,gBAAgB;IACpBc,EAAE,EAAEb;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}