{"ast":null,"code":"import { bitNotBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { bitNotNumber } from '../../plain/number/index.js';\nvar name = 'bitNot';\nvar dependencies = ['typed'];\nexport var createBitNot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Bitwise NOT value, `~x`.\r\n   * For matrices, the function is evaluated element wise.\r\n   * For units, the function is evaluated on the best prefix base.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.bitNot(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.bitNot(1)               // returns number -2\r\n   *\r\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, -5]\r\n   *\r\n   * See also:\r\n   *\r\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\r\n   *\r\n   * @param  {number | BigNumber | bigint | Array | Matrix} x Value to not\r\n   * @return {number | BigNumber | bigint | Array | Matrix} NOT of `x`\r\n   */\n  return typed(name, {\n    number: bitNotNumber,\n    BigNumber: bitNotBigNumber,\n    bigint: x => ~x,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["bitNotBigNumber","deepMap","factory","bitNotNumber","name","dependencies","createBitNot","_ref","typed","number","BigNumber","bigint","x","referToSelf","self"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/bitwise/bitNot.js"],"sourcesContent":["import { bitNotBigNumber } from '../../utils/bignumber/bitwise.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { bitNotNumber } from '../../plain/number/index.js';\r\nvar name = 'bitNot';\r\nvar dependencies = ['typed'];\r\nexport var createBitNot = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Bitwise NOT value, `~x`.\r\n   * For matrices, the function is evaluated element wise.\r\n   * For units, the function is evaluated on the best prefix base.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.bitNot(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.bitNot(1)               // returns number -2\r\n   *\r\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, -5]\r\n   *\r\n   * See also:\r\n   *\r\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\r\n   *\r\n   * @param  {number | BigNumber | bigint | Array | Matrix} x Value to not\r\n   * @return {number | BigNumber | bigint | Array | Matrix} NOT of `x`\r\n   */\r\n  return typed(name, {\r\n    number: bitNotNumber,\r\n    BigNumber: bitNotBigNumber,\r\n    bigint: x => ~x,\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\r\n  });\r\n});"],"mappings":"AAAA,SAASA,eAAe,QAAQ,kCAAkC;AAClE,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,YAAY,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC3E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAEN,YAAY;IACpBO,SAAS,EAAEV,eAAe;IAC1BW,MAAM,EAAEC,CAAC,IAAI,CAACA,CAAC;IACf,gBAAgB,EAAEJ,KAAK,CAACK,WAAW,CAACC,IAAI,IAAIF,CAAC,IAAIX,OAAO,CAACW,CAAC,EAAEE,IAAI,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}