{"ast":null,"code":"import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'boolean';\nvar dependencies = ['typed'];\nexport var createBoolean = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Create a boolean or convert a string or number to a boolean.\r\n   * In case of a number, `true` is returned for non-zero numbers, and `false` in\r\n   * case of zero.\r\n   * Strings can be `'true'` or `'false'`, or can contain a number.\r\n   * When value is a matrix, all elements will be converted to boolean.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.boolean(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.boolean(0)     // returns false\r\n   *    math.boolean(1)     // returns true\r\n   *    math.boolean(-3)     // returns true\r\n   *    math.boolean('true')     // returns true\r\n   *    math.boolean('false')     // returns false\r\n   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, complex, index, matrix, string, unit\r\n   *\r\n   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\r\n   * @return {boolean | Array | Matrix} The boolean value\r\n   */\n  return typed(name, {\n    '': function _() {\n      return false;\n    },\n    boolean: function boolean(x) {\n      return x;\n    },\n    number: function number(x) {\n      return !!x;\n    },\n    null: function _null(x) {\n      return false;\n    },\n    BigNumber: function BigNumber(x) {\n      return !x.isZero();\n    },\n    string: function string(x) {\n      // try case insensitive\n      var lcase = x.toLowerCase();\n      if (lcase === 'true') {\n        return true;\n      } else if (lcase === 'false') {\n        return false;\n      }\n\n      // test whether value is a valid number\n      var num = Number(x);\n      if (x !== '' && !isNaN(num)) {\n        return !!num;\n      }\n      throw new Error('Cannot convert \"' + x + '\" to a boolean');\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createBoolean","_ref","typed","_","boolean","x","number","null","_null","BigNumber","isZero","string","lcase","toLowerCase","num","Number","isNaN","Error","referToSelf","self"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/type/boolean.js"],"sourcesContent":["import { factory } from '../utils/factory.js';\r\nimport { deepMap } from '../utils/collection.js';\r\nvar name = 'boolean';\r\nvar dependencies = ['typed'];\r\nexport var createBoolean = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Create a boolean or convert a string or number to a boolean.\r\n   * In case of a number, `true` is returned for non-zero numbers, and `false` in\r\n   * case of zero.\r\n   * Strings can be `'true'` or `'false'`, or can contain a number.\r\n   * When value is a matrix, all elements will be converted to boolean.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.boolean(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.boolean(0)     // returns false\r\n   *    math.boolean(1)     // returns true\r\n   *    math.boolean(-3)     // returns true\r\n   *    math.boolean('true')     // returns true\r\n   *    math.boolean('false')     // returns false\r\n   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, complex, index, matrix, string, unit\r\n   *\r\n   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\r\n   * @return {boolean | Array | Matrix} The boolean value\r\n   */\r\n  return typed(name, {\r\n    '': function _() {\r\n      return false;\r\n    },\r\n    boolean: function boolean(x) {\r\n      return x;\r\n    },\r\n    number: function number(x) {\r\n      return !!x;\r\n    },\r\n    null: function _null(x) {\r\n      return false;\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return !x.isZero();\r\n    },\r\n    string: function string(x) {\r\n      // try case insensitive\r\n      var lcase = x.toLowerCase();\r\n      if (lcase === 'true') {\r\n        return true;\r\n      } else if (lcase === 'false') {\r\n        return false;\r\n      }\r\n\r\n      // test whether value is a valid number\r\n      var num = Number(x);\r\n      if (x !== '' && !isNaN(num)) {\r\n        return !!num;\r\n      }\r\n      throw new Error('Cannot convert \"' + x + '\" to a boolean');\r\n    },\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,aAAa,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC5E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,EAAE,EAAE,SAASK,CAACA,CAAA,EAAG;MACf,OAAO,KAAK;IACd,CAAC;IACDC,OAAO,EAAE,SAASA,OAAOA,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC;IACV,CAAC;IACDC,MAAM,EAAE,SAASA,MAAMA,CAACD,CAAC,EAAE;MACzB,OAAO,CAAC,CAACA,CAAC;IACZ,CAAC;IACDE,IAAI,EAAE,SAASC,KAAKA,CAACH,CAAC,EAAE;MACtB,OAAO,KAAK;IACd,CAAC;IACDI,SAAS,EAAE,SAASA,SAASA,CAACJ,CAAC,EAAE;MAC/B,OAAO,CAACA,CAAC,CAACK,MAAM,CAAC,CAAC;IACpB,CAAC;IACDC,MAAM,EAAE,SAASA,MAAMA,CAACN,CAAC,EAAE;MACzB;MACA,IAAIO,KAAK,GAAGP,CAAC,CAACQ,WAAW,CAAC,CAAC;MAC3B,IAAID,KAAK,KAAK,MAAM,EAAE;QACpB,OAAO,IAAI;MACb,CAAC,MAAM,IAAIA,KAAK,KAAK,OAAO,EAAE;QAC5B,OAAO,KAAK;MACd;;MAEA;MACA,IAAIE,GAAG,GAAGC,MAAM,CAACV,CAAC,CAAC;MACnB,IAAIA,CAAC,KAAK,EAAE,IAAI,CAACW,KAAK,CAACF,GAAG,CAAC,EAAE;QAC3B,OAAO,CAAC,CAACA,GAAG;MACd;MACA,MAAM,IAAIG,KAAK,CAAC,kBAAkB,GAAGZ,CAAC,GAAG,gBAAgB,CAAC;IAC5D,CAAC;IACD,gBAAgB,EAAEH,KAAK,CAACgB,WAAW,CAACC,IAAI,IAAId,CAAC,IAAIR,OAAO,CAACQ,CAAC,EAAEc,IAAI,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}