{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createQuantileSeq } from '../../function/statistics/quantileSeq.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'quantileSeq';\nvar dependencies = ['typed', 'bignumber', 'add', 'subtract', 'divide', 'multiply', 'partitionSelect', 'compare', 'isInteger', 'smaller', 'smallerEq', 'larger'];\n\n/**\r\n * Attach a transform function to math.quantileSeq\r\n * Adds a property transform containing the transform function.\r\n *\r\n * This transform changed the `dim` parameter of function std\r\n * from one-based to zero based\r\n */\nexport var createQuantileSeqTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    bignumber,\n    add,\n    subtract,\n    divide,\n    multiply,\n    partitionSelect,\n    compare,\n    isInteger,\n    smaller,\n    smallerEq,\n    larger\n  } = _ref;\n  var quantileSeq = createQuantileSeq({\n    typed,\n    bignumber,\n    add,\n    subtract,\n    divide,\n    multiply,\n    partitionSelect,\n    compare,\n    isInteger,\n    smaller,\n    smallerEq,\n    larger\n  });\n  return typed('quantileSeq', {\n    'Array | Matrix, number | BigNumber': quantileSeq,\n    'Array | Matrix, number | BigNumber, number': (arr, prob, dim) => quantileSeq(arr, prob, dimToZeroBase(dim)),\n    'Array | Matrix, number | BigNumber, boolean': quantileSeq,\n    'Array | Matrix, number | BigNumber, boolean, number': (arr, prob, sorted, dim) => quantileSeq(arr, prob, sorted, dimToZeroBase(dim)),\n    'Array | Matrix, Array | Matrix': quantileSeq,\n    'Array | Matrix, Array | Matrix, number': (data, prob, dim) => quantileSeq(data, prob, dimToZeroBase(dim)),\n    'Array | Matrix, Array | Matrix, boolean': quantileSeq,\n    'Array | Matrix, Array | Matrix, boolean, number': (data, prob, sorted, dim) => quantileSeq(data, prob, sorted, dimToZeroBase(dim))\n  });\n  function dimToZeroBase(dim) {\n    // TODO: find a better way, maybe lastDimToZeroBase could apply to more cases.\n    return lastDimToZeroBase([[], dim])[1];\n  }\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["factory","createQuantileSeq","lastDimToZeroBase","name","dependencies","createQuantileSeqTransform","_ref","typed","bignumber","add","subtract","divide","multiply","partitionSelect","compare","isInteger","smaller","smallerEq","larger","quantileSeq","Array | Matrix, number | BigNumber, number","arr","prob","dim","dimToZeroBase","Array | Matrix, number | BigNumber, boolean, number","sorted","Array | Matrix, Array | Matrix, number","data","Array | Matrix, Array | Matrix, boolean, number","isTransformFunction"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/expression/transform/quantileSeq.transform.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createQuantileSeq } from '../../function/statistics/quantileSeq.js';\r\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\r\nvar name = 'quantileSeq';\r\nvar dependencies = ['typed', 'bignumber', 'add', 'subtract', 'divide', 'multiply', 'partitionSelect', 'compare', 'isInteger', 'smaller', 'smallerEq', 'larger'];\r\n\r\n/**\r\n * Attach a transform function to math.quantileSeq\r\n * Adds a property transform containing the transform function.\r\n *\r\n * This transform changed the `dim` parameter of function std\r\n * from one-based to zero based\r\n */\r\nexport var createQuantileSeqTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    bignumber,\r\n    add,\r\n    subtract,\r\n    divide,\r\n    multiply,\r\n    partitionSelect,\r\n    compare,\r\n    isInteger,\r\n    smaller,\r\n    smallerEq,\r\n    larger\r\n  } = _ref;\r\n  var quantileSeq = createQuantileSeq({\r\n    typed,\r\n    bignumber,\r\n    add,\r\n    subtract,\r\n    divide,\r\n    multiply,\r\n    partitionSelect,\r\n    compare,\r\n    isInteger,\r\n    smaller,\r\n    smallerEq,\r\n    larger\r\n  });\r\n  return typed('quantileSeq', {\r\n    'Array | Matrix, number | BigNumber': quantileSeq,\r\n    'Array | Matrix, number | BigNumber, number': (arr, prob, dim) => quantileSeq(arr, prob, dimToZeroBase(dim)),\r\n    'Array | Matrix, number | BigNumber, boolean': quantileSeq,\r\n    'Array | Matrix, number | BigNumber, boolean, number': (arr, prob, sorted, dim) => quantileSeq(arr, prob, sorted, dimToZeroBase(dim)),\r\n    'Array | Matrix, Array | Matrix': quantileSeq,\r\n    'Array | Matrix, Array | Matrix, number': (data, prob, dim) => quantileSeq(data, prob, dimToZeroBase(dim)),\r\n    'Array | Matrix, Array | Matrix, boolean': quantileSeq,\r\n    'Array | Matrix, Array | Matrix, boolean, number': (data, prob, sorted, dim) => quantileSeq(data, prob, sorted, dimToZeroBase(dim))\r\n  });\r\n  function dimToZeroBase(dim) {\r\n    // TODO: find a better way, maybe lastDimToZeroBase could apply to more cases.\r\n    return lastDimToZeroBase([[], dim])[1];\r\n  }\r\n}, {\r\n  isTransformFunction: true\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,iBAAiB,QAAQ,0CAA0C;AAC5E,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,IAAIC,IAAI,GAAG,aAAa;AACxB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,iBAAiB,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,QAAQ,CAAC;;AAE/J;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,0BAA0B,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzF,IAAI;IACFC,KAAK;IACLC,SAAS;IACTC,GAAG;IACHC,QAAQ;IACRC,MAAM;IACNC,QAAQ;IACRC,eAAe;IACfC,OAAO;IACPC,SAAS;IACTC,OAAO;IACPC,SAAS;IACTC;EACF,CAAC,GAAGZ,IAAI;EACR,IAAIa,WAAW,GAAGlB,iBAAiB,CAAC;IAClCM,KAAK;IACLC,SAAS;IACTC,GAAG;IACHC,QAAQ;IACRC,MAAM;IACNC,QAAQ;IACRC,eAAe;IACfC,OAAO;IACPC,SAAS;IACTC,OAAO;IACPC,SAAS;IACTC;EACF,CAAC,CAAC;EACF,OAAOX,KAAK,CAAC,aAAa,EAAE;IAC1B,oCAAoC,EAAEY,WAAW;IACjD,4CAA4C,EAAEC,CAACC,GAAG,EAAEC,IAAI,EAAEC,GAAG,KAAKJ,WAAW,CAACE,GAAG,EAAEC,IAAI,EAAEE,aAAa,CAACD,GAAG,CAAC,CAAC;IAC5G,6CAA6C,EAAEJ,WAAW;IAC1D,qDAAqD,EAAEM,CAACJ,GAAG,EAAEC,IAAI,EAAEI,MAAM,EAAEH,GAAG,KAAKJ,WAAW,CAACE,GAAG,EAAEC,IAAI,EAAEI,MAAM,EAAEF,aAAa,CAACD,GAAG,CAAC,CAAC;IACrI,gCAAgC,EAAEJ,WAAW;IAC7C,wCAAwC,EAAEQ,CAACC,IAAI,EAAEN,IAAI,EAAEC,GAAG,KAAKJ,WAAW,CAACS,IAAI,EAAEN,IAAI,EAAEE,aAAa,CAACD,GAAG,CAAC,CAAC;IAC1G,yCAAyC,EAAEJ,WAAW;IACtD,iDAAiD,EAAEU,CAACD,IAAI,EAAEN,IAAI,EAAEI,MAAM,EAAEH,GAAG,KAAKJ,WAAW,CAACS,IAAI,EAAEN,IAAI,EAAEI,MAAM,EAAEF,aAAa,CAACD,GAAG,CAAC;EACpI,CAAC,CAAC;EACF,SAASC,aAAaA,CAACD,GAAG,EAAE;IAC1B;IACA,OAAOrB,iBAAiB,CAAC,CAAC,EAAE,EAAEqB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACxC;AACF,CAAC,EAAE;EACDO,mBAAmB,EAAE;AACvB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}