{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { cubeNumber } from '../../plain/number/index.js';\nvar name = 'cube';\nvar dependencies = ['typed'];\nexport var createCube = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Compute the cube of a value, `x * x * x`.\r\n   * To avoid confusion with `pow(M,3)`, this function does not apply to matrices.\r\n   * If you wish to cube every entry of a matrix, see the examples.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.cube(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.cube(2)            // returns number 8\r\n   *    math.pow(2, 3)          // returns number 8\r\n   *    math.cube(4)            // returns number 64\r\n   *    4 * 4 * 4               // returns number 64\r\n   *\r\n   *    math.map([1, 2, 3, 4], math.cube) // returns Array [1, 8, 27, 64]\r\n   *\r\n   * See also:\r\n   *\r\n   *    multiply, square, pow, cbrt\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Unit} x  Number for which to calculate the cube\r\n   * @return {number | BigNumber | bigint | Fraction | Complex | Unit} Cube of x\r\n   */\n  return typed(name, {\n    number: cubeNumber,\n    Complex: function Complex(x) {\n      return x.mul(x).mul(x); // Is faster than pow(x, 3)\n    },\n    BigNumber: function BigNumber(x) {\n      return x.times(x).times(x);\n    },\n    bigint: function bigint(x) {\n      return x * x * x;\n    },\n    Fraction: function Fraction(x) {\n      return x.pow(3); // Is faster than mul()mul()mul()\n    },\n    Unit: function Unit(x) {\n      return x.pow(3);\n    }\n  });\n});","map":{"version":3,"names":["factory","cubeNumber","name","dependencies","createCube","_ref","typed","number","Complex","x","mul","BigNumber","times","bigint","Fraction","pow","Unit"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/cube.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { cubeNumber } from '../../plain/number/index.js';\r\nvar name = 'cube';\r\nvar dependencies = ['typed'];\r\nexport var createCube = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Compute the cube of a value, `x * x * x`.\r\n   * To avoid confusion with `pow(M,3)`, this function does not apply to matrices.\r\n   * If you wish to cube every entry of a matrix, see the examples.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.cube(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.cube(2)            // returns number 8\r\n   *    math.pow(2, 3)          // returns number 8\r\n   *    math.cube(4)            // returns number 64\r\n   *    4 * 4 * 4               // returns number 64\r\n   *\r\n   *    math.map([1, 2, 3, 4], math.cube) // returns Array [1, 8, 27, 64]\r\n   *\r\n   * See also:\r\n   *\r\n   *    multiply, square, pow, cbrt\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | Complex | Unit} x  Number for which to calculate the cube\r\n   * @return {number | BigNumber | bigint | Fraction | Complex | Unit} Cube of x\r\n   */\r\n  return typed(name, {\r\n    number: cubeNumber,\r\n    Complex: function Complex(x) {\r\n      return x.mul(x).mul(x); // Is faster than pow(x, 3)\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.times(x).times(x);\r\n    },\r\n    bigint: function bigint(x) {\r\n      return x * x * x;\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return x.pow(3); // Is faster than mul()mul()mul()\r\n    },\r\n    Unit: function Unit(x) {\r\n      return x.pow(3);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAEN,UAAU;IAClBO,OAAO,EAAE,SAASA,OAAOA,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACC,GAAG,CAACD,CAAC,CAAC,CAACC,GAAG,CAACD,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;IACDE,SAAS,EAAE,SAASA,SAASA,CAACF,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACG,KAAK,CAACH,CAAC,CAAC,CAACG,KAAK,CAACH,CAAC,CAAC;IAC5B,CAAC;IACDI,MAAM,EAAE,SAASA,MAAMA,CAACJ,CAAC,EAAE;MACzB,OAAOA,CAAC,GAAGA,CAAC,GAAGA,CAAC;IAClB,CAAC;IACDK,QAAQ,EAAE,SAASA,QAAQA,CAACL,CAAC,EAAE;MAC7B,OAAOA,CAAC,CAACM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC;IACDC,IAAI,EAAE,SAASA,IAAIA,CAACP,CAAC,EAAE;MACrB,OAAOA,CAAC,CAACM,GAAG,CAAC,CAAC,CAAC;IACjB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}