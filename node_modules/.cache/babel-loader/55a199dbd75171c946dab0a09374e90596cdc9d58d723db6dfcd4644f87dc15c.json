{"ast":null,"code":"import { isArray, isBigNumber, isMatrix, isNumber, isRange } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'index';\nvar dependencies = ['Index', 'getMatrixDataType'];\nexport var createIndexTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Index,\n    getMatrixDataType\n  } = _ref;\n  /**\r\n   * Attach a transform function to math.index\r\n   * Adds a property transform containing the transform function.\r\n   *\r\n   * This transform creates a one-based index instead of a zero-based index\r\n   */\n  return function indexTransform() {\n    var args = [];\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n\n      // change from one-based to zero based, convert BigNumber to number and leave Array of Booleans as is\n      if (isRange(arg)) {\n        arg.start--;\n        arg.end -= arg.step > 0 ? 0 : 2;\n      } else if (arg && arg.isSet === true) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isArray(arg) || isMatrix(arg)) {\n        if (getMatrixDataType(arg) !== 'boolean') {\n          arg = arg.map(function (v) {\n            return v - 1;\n          });\n        }\n      } else if (isNumber(arg)) {\n        arg--;\n      } else if (isBigNumber(arg)) {\n        arg = arg.toNumber() - 1;\n      } else if (typeof arg === 'string') {\n        // leave as is\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n      args[i] = arg;\n    }\n    var res = new Index();\n    Index.apply(res, args);\n    return res;\n  };\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["isArray","isBigNumber","isMatrix","isNumber","isRange","factory","name","dependencies","createIndexTransform","_ref","Index","getMatrixDataType","indexTransform","args","i","ii","arguments","length","arg","start","end","step","isSet","map","v","toNumber","TypeError","res","apply","isTransformFunction"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/expression/transform/index.transform.js"],"sourcesContent":["import { isArray, isBigNumber, isMatrix, isNumber, isRange } from '../../utils/is.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'index';\r\nvar dependencies = ['Index', 'getMatrixDataType'];\r\nexport var createIndexTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    Index,\r\n    getMatrixDataType\r\n  } = _ref;\r\n  /**\r\n   * Attach a transform function to math.index\r\n   * Adds a property transform containing the transform function.\r\n   *\r\n   * This transform creates a one-based index instead of a zero-based index\r\n   */\r\n  return function indexTransform() {\r\n    var args = [];\r\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\r\n      var arg = arguments[i];\r\n\r\n      // change from one-based to zero based, convert BigNumber to number and leave Array of Booleans as is\r\n      if (isRange(arg)) {\r\n        arg.start--;\r\n        arg.end -= arg.step > 0 ? 0 : 2;\r\n      } else if (arg && arg.isSet === true) {\r\n        arg = arg.map(function (v) {\r\n          return v - 1;\r\n        });\r\n      } else if (isArray(arg) || isMatrix(arg)) {\r\n        if (getMatrixDataType(arg) !== 'boolean') {\r\n          arg = arg.map(function (v) {\r\n            return v - 1;\r\n          });\r\n        }\r\n      } else if (isNumber(arg)) {\r\n        arg--;\r\n      } else if (isBigNumber(arg)) {\r\n        arg = arg.toNumber() - 1;\r\n      } else if (typeof arg === 'string') {\r\n        // leave as is\r\n      } else {\r\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\r\n      }\r\n      args[i] = arg;\r\n    }\r\n    var res = new Index();\r\n    Index.apply(res, args);\r\n    return res;\r\n  };\r\n}, {\r\n  isTransformFunction: true\r\n});"],"mappings":"AAAA,SAASA,OAAO,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,mBAAmB;AACrF,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,mBAAmB,CAAC;AACjD,OAAO,IAAIC,oBAAoB,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACnF,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;EACE,OAAO,SAASG,cAAcA,CAAA,EAAG;IAC/B,IAAIC,IAAI,GAAG,EAAE;IACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,EAAE,EAAED,CAAC,EAAE,EAAE;MAClD,IAAII,GAAG,GAAGF,SAAS,CAACF,CAAC,CAAC;;MAEtB;MACA,IAAIV,OAAO,CAACc,GAAG,CAAC,EAAE;QAChBA,GAAG,CAACC,KAAK,EAAE;QACXD,GAAG,CAACE,GAAG,IAAIF,GAAG,CAACG,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;MACjC,CAAC,MAAM,IAAIH,GAAG,IAAIA,GAAG,CAACI,KAAK,KAAK,IAAI,EAAE;QACpCJ,GAAG,GAAGA,GAAG,CAACK,GAAG,CAAC,UAAUC,CAAC,EAAE;UACzB,OAAOA,CAAC,GAAG,CAAC;QACd,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIxB,OAAO,CAACkB,GAAG,CAAC,IAAIhB,QAAQ,CAACgB,GAAG,CAAC,EAAE;QACxC,IAAIP,iBAAiB,CAACO,GAAG,CAAC,KAAK,SAAS,EAAE;UACxCA,GAAG,GAAGA,GAAG,CAACK,GAAG,CAAC,UAAUC,CAAC,EAAE;YACzB,OAAOA,CAAC,GAAG,CAAC;UACd,CAAC,CAAC;QACJ;MACF,CAAC,MAAM,IAAIrB,QAAQ,CAACe,GAAG,CAAC,EAAE;QACxBA,GAAG,EAAE;MACP,CAAC,MAAM,IAAIjB,WAAW,CAACiB,GAAG,CAAC,EAAE;QAC3BA,GAAG,GAAGA,GAAG,CAACO,QAAQ,CAAC,CAAC,GAAG,CAAC;MAC1B,CAAC,MAAM,IAAI,OAAOP,GAAG,KAAK,QAAQ,EAAE;QAClC;MAAA,CACD,MAAM;QACL,MAAM,IAAIQ,SAAS,CAAC,8DAA8D,CAAC;MACrF;MACAb,IAAI,CAACC,CAAC,CAAC,GAAGI,GAAG;IACf;IACA,IAAIS,GAAG,GAAG,IAAIjB,KAAK,CAAC,CAAC;IACrBA,KAAK,CAACkB,KAAK,CAACD,GAAG,EAAEd,IAAI,CAAC;IACtB,OAAOc,GAAG;EACZ,CAAC;AACH,CAAC,EAAE;EACDE,mBAAmB,EAAE;AACvB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}