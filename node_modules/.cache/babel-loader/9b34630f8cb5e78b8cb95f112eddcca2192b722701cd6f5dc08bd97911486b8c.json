{"ast":null,"code":"import { flatten, generalize, identify } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'setDifference';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetDifference = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    size,\n    subset,\n    compareNatural,\n    Index,\n    DenseMatrix\n  } = _ref;\n  /**\r\n   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.\r\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.setDifference(set1, set2)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]\r\n   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]\r\n   *\r\n   * See also:\r\n   *\r\n   *    setUnion, setIntersect, setSymDifference\r\n   *\r\n   * @param {Array | Matrix}    a1  A (multi)set\r\n   * @param {Array | Matrix}    a2  A (multi)set\r\n   * @return {Array | Matrix}    The difference of two (multi)sets\r\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(a1, a2) {\n      var result;\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty-anything=empty\n        result = [];\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything-empty=anything\n        return flatten(a1.toArray());\n      } else {\n        var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        result = [];\n        var inb2;\n        for (var i = 0; i < b1.length; i++) {\n          inb2 = false;\n          for (var j = 0; j < b2.length; j++) {\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n              // the identifier is always a decimal int\n              inb2 = true;\n              break;\n            }\n          }\n          if (!inb2) {\n            result.push(b1[i]);\n          }\n        }\n      }\n      // return an array, if both inputs were arrays\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return generalize(result);\n      }\n      // return a matrix otherwise\n      return new DenseMatrix(generalize(result));\n    }\n  });\n});","map":{"version":3,"names":["flatten","generalize","identify","factory","name","dependencies","createSetDifference","_ref","typed","size","subset","compareNatural","Index","DenseMatrix","Array__Matrix_Array__Matrix","a1","a2","result","toArray","b1","Array","isArray","sort","b2","inb2","i","length","j","value","identifier","push"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/set/setDifference.js"],"sourcesContent":["import { flatten, generalize, identify } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'setDifference';\r\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\r\nexport var createSetDifference = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    size,\r\n    subset,\r\n    compareNatural,\r\n    Index,\r\n    DenseMatrix\r\n  } = _ref;\r\n  /**\r\n   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.\r\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.setDifference(set1, set2)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]\r\n   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]\r\n   *\r\n   * See also:\r\n   *\r\n   *    setUnion, setIntersect, setSymDifference\r\n   *\r\n   * @param {Array | Matrix}    a1  A (multi)set\r\n   * @param {Array | Matrix}    a2  A (multi)set\r\n   * @return {Array | Matrix}    The difference of two (multi)sets\r\n   */\r\n  return typed(name, {\r\n    'Array | Matrix, Array | Matrix': function Array__Matrix_Array__Matrix(a1, a2) {\r\n      var result;\r\n      if (subset(size(a1), new Index(0)) === 0) {\r\n        // empty-anything=empty\r\n        result = [];\r\n      } else if (subset(size(a2), new Index(0)) === 0) {\r\n        // anything-empty=anything\r\n        return flatten(a1.toArray());\r\n      } else {\r\n        var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\r\n        var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\r\n        result = [];\r\n        var inb2;\r\n        for (var i = 0; i < b1.length; i++) {\r\n          inb2 = false;\r\n          for (var j = 0; j < b2.length; j++) {\r\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\r\n              // the identifier is always a decimal int\r\n              inb2 = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!inb2) {\r\n            result.push(b1[i]);\r\n          }\r\n        }\r\n      }\r\n      // return an array, if both inputs were arrays\r\n      if (Array.isArray(a1) && Array.isArray(a2)) {\r\n        return generalize(result);\r\n      }\r\n      // return a matrix otherwise\r\n      return new DenseMatrix(generalize(result));\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,sBAAsB;AACpE,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,eAAe;AAC1B,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,gBAAgB,EAAE,OAAO,EAAE,aAAa,CAAC;AACxF,OAAO,IAAIC,mBAAmB,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAClF,IAAI;IACFC,KAAK;IACLC,IAAI;IACJC,MAAM;IACNC,cAAc;IACdC,KAAK;IACLC;EACF,CAAC,GAAGN,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gCAAgC,EAAE,SAASU,2BAA2BA,CAACC,EAAE,EAAEC,EAAE,EAAE;MAC7E,IAAIC,MAAM;MACV,IAAIP,MAAM,CAACD,IAAI,CAACM,EAAE,CAAC,EAAE,IAAIH,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QACxC;QACAK,MAAM,GAAG,EAAE;MACb,CAAC,MAAM,IAAIP,MAAM,CAACD,IAAI,CAACO,EAAE,CAAC,EAAE,IAAIJ,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QAC/C;QACA,OAAOZ,OAAO,CAACe,EAAE,CAACG,OAAO,CAAC,CAAC,CAAC;MAC9B,CAAC,MAAM;QACL,IAAIC,EAAE,GAAGjB,QAAQ,CAACF,OAAO,CAACoB,KAAK,CAACC,OAAO,CAACN,EAAE,CAAC,GAAGA,EAAE,GAAGA,EAAE,CAACG,OAAO,CAAC,CAAC,CAAC,CAACI,IAAI,CAACX,cAAc,CAAC,CAAC;QACtF,IAAIY,EAAE,GAAGrB,QAAQ,CAACF,OAAO,CAACoB,KAAK,CAACC,OAAO,CAACL,EAAE,CAAC,GAAGA,EAAE,GAAGA,EAAE,CAACE,OAAO,CAAC,CAAC,CAAC,CAACI,IAAI,CAACX,cAAc,CAAC,CAAC;QACtFM,MAAM,GAAG,EAAE;QACX,IAAIO,IAAI;QACR,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,EAAE,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;UAClCD,IAAI,GAAG,KAAK;UACZ,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,EAAE,CAACG,MAAM,EAAEC,CAAC,EAAE,EAAE;YAClC,IAAIhB,cAAc,CAACQ,EAAE,CAACM,CAAC,CAAC,CAACG,KAAK,EAAEL,EAAE,CAACI,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK,CAAC,IAAIT,EAAE,CAACM,CAAC,CAAC,CAACI,UAAU,KAAKN,EAAE,CAACI,CAAC,CAAC,CAACE,UAAU,EAAE;cAC3F;cACAL,IAAI,GAAG,IAAI;cACX;YACF;UACF;UACA,IAAI,CAACA,IAAI,EAAE;YACTP,MAAM,CAACa,IAAI,CAACX,EAAE,CAACM,CAAC,CAAC,CAAC;UACpB;QACF;MACF;MACA;MACA,IAAIL,KAAK,CAACC,OAAO,CAACN,EAAE,CAAC,IAAIK,KAAK,CAACC,OAAO,CAACL,EAAE,CAAC,EAAE;QAC1C,OAAOf,UAAU,CAACgB,MAAM,CAAC;MAC3B;MACA;MACA,OAAO,IAAIJ,WAAW,CAACZ,UAAU,CAACgB,MAAM,CAAC,CAAC;IAC5C;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}