{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nvar name = 'sparse';\nvar dependencies = ['typed', 'SparseMatrix'];\nexport var createSparse = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    SparseMatrix\n  } = _ref;\n  /**\r\n   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from\r\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\r\n   * matrix, like getting the size and getting or setting values in the matrix.\r\n   * Note that a Sparse Matrix is always 2-dimensional, so for example if\r\n   * you create one from a plain array of _n_ numbers, you get an _n_ by 1\r\n   * Sparse \"column vector\".\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sparse()               // creates an empty sparse matrix.\r\n   *    math.sparse(data)           // creates a sparse matrix with initial data.\r\n   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\r\n   *\r\n   * Examples:\r\n   *\r\n   *    let m = math.sparse([[1, 2], [3, 4]])\r\n   *    m.size()                        // Array [2, 2]\r\n   *    m.resize([3, 2], 5)\r\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\r\n   *    m.get([1, 0])                    // number 3\r\n   *    let v = math.sparse([0, 0, 1])\r\n   *    v.size()                        // Array [3, 1]\r\n   *    v.get([2, 0])                   // number 1\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, complex, index, number, string, unit, matrix\r\n   *\r\n   * @param {Array | Matrix} [data]    A two dimensional array\r\n   *\r\n   * @return {Matrix} The created matrix\r\n   */\n  return typed(name, {\n    '': function _() {\n      return new SparseMatrix([]);\n    },\n    string: function string(datatype) {\n      return new SparseMatrix([], datatype);\n    },\n    'Array | Matrix': function Array__Matrix(data) {\n      return new SparseMatrix(data);\n    },\n    'Array | Matrix, string': function Array__Matrix_string(data, datatype) {\n      return new SparseMatrix(data, datatype);\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createSparse","_ref","typed","SparseMatrix","_","string","datatype","Array__Matrix","data","Array__Matrix_string"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/type/matrix/function/sparse.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\r\nvar name = 'sparse';\r\nvar dependencies = ['typed', 'SparseMatrix'];\r\nexport var createSparse = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    SparseMatrix\r\n  } = _ref;\r\n  /**\r\n   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from\r\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\r\n   * matrix, like getting the size and getting or setting values in the matrix.\r\n   * Note that a Sparse Matrix is always 2-dimensional, so for example if\r\n   * you create one from a plain array of _n_ numbers, you get an _n_ by 1\r\n   * Sparse \"column vector\".\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sparse()               // creates an empty sparse matrix.\r\n   *    math.sparse(data)           // creates a sparse matrix with initial data.\r\n   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\r\n   *\r\n   * Examples:\r\n   *\r\n   *    let m = math.sparse([[1, 2], [3, 4]])\r\n   *    m.size()                        // Array [2, 2]\r\n   *    m.resize([3, 2], 5)\r\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\r\n   *    m.get([1, 0])                    // number 3\r\n   *    let v = math.sparse([0, 0, 1])\r\n   *    v.size()                        // Array [3, 1]\r\n   *    v.get([2, 0])                   // number 1\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, complex, index, number, string, unit, matrix\r\n   *\r\n   * @param {Array | Matrix} [data]    A two dimensional array\r\n   *\r\n   * @return {Matrix} The created matrix\r\n   */\r\n  return typed(name, {\r\n    '': function _() {\r\n      return new SparseMatrix([]);\r\n    },\r\n    string: function string(datatype) {\r\n      return new SparseMatrix([], datatype);\r\n    },\r\n    'Array | Matrix': function Array__Matrix(data) {\r\n      return new SparseMatrix(data);\r\n    },\r\n    'Array | Matrix, string': function Array__Matrix_string(data, datatype) {\r\n      return new SparseMatrix(data, datatype);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,cAAc,CAAC;AAC5C,OAAO,IAAIC,YAAY,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC3E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,EAAE,EAAE,SAASM,CAACA,CAAA,EAAG;MACf,OAAO,IAAID,YAAY,CAAC,EAAE,CAAC;IAC7B,CAAC;IACDE,MAAM,EAAE,SAASA,MAAMA,CAACC,QAAQ,EAAE;MAChC,OAAO,IAAIH,YAAY,CAAC,EAAE,EAAEG,QAAQ,CAAC;IACvC,CAAC;IACD,gBAAgB,EAAE,SAASC,aAAaA,CAACC,IAAI,EAAE;MAC7C,OAAO,IAAIL,YAAY,CAACK,IAAI,CAAC;IAC/B,CAAC;IACD,wBAAwB,EAAE,SAASC,oBAAoBA,CAACD,IAAI,EAAEF,QAAQ,EAAE;MACtE,OAAO,IAAIH,YAAY,CAACK,IAAI,EAAEF,QAAQ,CAAC;IACzC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}