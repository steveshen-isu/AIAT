{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isInteger } from '../../utils/number.js';\nimport { product } from '../../utils/product.js';\nvar name = 'combinationsWithRep';\nvar dependencies = ['typed'];\nexport var createCombinationsWithRep = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\r\n   * possibilities, allowing individual outcomes to be repeated more than once.\r\n   *\r\n   * CombinationsWithRep only takes integer arguments.\r\n   * The following condition must be enforced: k <= n + k -1.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.combinationsWithRep(n, k)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.combinationsWithRep(7, 5) // returns 462\r\n   *\r\n   * See also:\r\n   *\r\n   *    combinations, permutations, factorial\r\n   *\r\n   * @param {number | BigNumber} n    Total number of objects in the set\r\n   * @param {number | BigNumber} k    Number of objects in the subset\r\n   * @return {number | BigNumber}     Number of possible combinations with replacement.\r\n   */\n  return typed(name, {\n    'number, number': function number_number(n, k) {\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n      if (n < 1) {\n        throw new TypeError('k must be less than or equal to n + k - 1');\n      }\n      if (k < n - 1) {\n        var _prodrange = product(n, n + k - 1);\n        return _prodrange / product(1, k);\n      }\n      var prodrange = product(k + 1, n + k - 1);\n      return prodrange / product(1, n - 1);\n    },\n    'BigNumber, BigNumber': function BigNumber_BigNumber(n, k) {\n      var BigNumber = n.constructor;\n      var result, i;\n      var one = new BigNumber(1);\n      var nMinusOne = n.minus(one);\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\n      }\n      if (n.lt(one)) {\n        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');\n      }\n      result = one;\n      if (k.lt(nMinusOne)) {\n        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {\n          result = result.times(k.plus(i)).dividedBy(i);\n        }\n      } else {\n        for (i = one; i.lte(k); i = i.plus(one)) {\n          result = result.times(nMinusOne.plus(i)).dividedBy(i);\n        }\n      }\n      return result;\n    }\n  });\n});\n\n/**\r\n * Test whether BigNumber n is a positive integer\r\n * @param {BigNumber} n\r\n * @returns {boolean} isPositiveInteger\r\n */\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}","map":{"version":3,"names":["factory","isInteger","product","name","dependencies","createCombinationsWithRep","_ref","typed","number_number","n","k","TypeError","_prodrange","prodrange","BigNumber_BigNumber","BigNumber","constructor","result","i","one","nMinusOne","minus","isPositiveInteger","lt","lte","plus","times","dividedBy","gte"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/probability/combinationsWithRep.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { isInteger } from '../../utils/number.js';\r\nimport { product } from '../../utils/product.js';\r\nvar name = 'combinationsWithRep';\r\nvar dependencies = ['typed'];\r\nexport var createCombinationsWithRep = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\r\n   * possibilities, allowing individual outcomes to be repeated more than once.\r\n   *\r\n   * CombinationsWithRep only takes integer arguments.\r\n   * The following condition must be enforced: k <= n + k -1.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.combinationsWithRep(n, k)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.combinationsWithRep(7, 5) // returns 462\r\n   *\r\n   * See also:\r\n   *\r\n   *    combinations, permutations, factorial\r\n   *\r\n   * @param {number | BigNumber} n    Total number of objects in the set\r\n   * @param {number | BigNumber} k    Number of objects in the subset\r\n   * @return {number | BigNumber}     Number of possible combinations with replacement.\r\n   */\r\n  return typed(name, {\r\n    'number, number': function number_number(n, k) {\r\n      if (!isInteger(n) || n < 0) {\r\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\r\n      }\r\n      if (!isInteger(k) || k < 0) {\r\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\r\n      }\r\n      if (n < 1) {\r\n        throw new TypeError('k must be less than or equal to n + k - 1');\r\n      }\r\n      if (k < n - 1) {\r\n        var _prodrange = product(n, n + k - 1);\r\n        return _prodrange / product(1, k);\r\n      }\r\n      var prodrange = product(k + 1, n + k - 1);\r\n      return prodrange / product(1, n - 1);\r\n    },\r\n    'BigNumber, BigNumber': function BigNumber_BigNumber(n, k) {\r\n      var BigNumber = n.constructor;\r\n      var result, i;\r\n      var one = new BigNumber(1);\r\n      var nMinusOne = n.minus(one);\r\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\r\n        throw new TypeError('Positive integer value expected in function combinationsWithRep');\r\n      }\r\n      if (n.lt(one)) {\r\n        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');\r\n      }\r\n      result = one;\r\n      if (k.lt(nMinusOne)) {\r\n        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {\r\n          result = result.times(k.plus(i)).dividedBy(i);\r\n        }\r\n      } else {\r\n        for (i = one; i.lte(k); i = i.plus(one)) {\r\n          result = result.times(nMinusOne.plus(i)).dividedBy(i);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * Test whether BigNumber n is a positive integer\r\n * @param {BigNumber} n\r\n * @returns {boolean} isPositiveInteger\r\n */\r\nfunction isPositiveInteger(n) {\r\n  return n.isInteger() && n.gte(0);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}