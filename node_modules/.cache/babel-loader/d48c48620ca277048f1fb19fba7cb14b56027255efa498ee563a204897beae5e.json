{"ast":null,"code":"import { isBigNumber, isMatrix, isNumber } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { arraySize, concat as _concat } from '../../utils/array.js';\nimport { IndexError } from '../../error/IndexError.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nexport var createConcat = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    isInteger\n  } = _ref;\n  /**\r\n   * Concatenate two or more matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.concat(A, B, C, ...)\r\n   *     math.concat(A, B, C, ..., dim)\r\n   *\r\n   * Where:\r\n   *\r\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\r\n   *   By default the last dimension of the matrices.\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const A = [[1, 2], [5, 6]]\r\n   *    const B = [[3, 4], [7, 8]]\r\n   *\r\n   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\r\n   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\r\n   *    math.concat('hello', ' ', 'world') // returns 'hello world'\r\n   *\r\n   * See also:\r\n   *\r\n   *    size, squeeze, subset, transpose\r\n   *\r\n   * @param {... Array | Matrix} args     Two or more matrices\r\n   * @return {Array | Matrix} Concatenated matrix\r\n   */\n  return typed(name, {\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\n    '...Array | Matrix | number | BigNumber': function Array__Matrix__number__BigNumber(args) {\n      var i;\n      var len = args.length;\n      var dim = -1; // zero-based dimension\n      var prevDim;\n      var asMatrix = false;\n      var matrices = []; // contains multi dimensional arrays\n\n      for (i = 0; i < len; i++) {\n        var arg = args[i];\n\n        // test whether we need to return a Matrix (if not we return an Array)\n        if (isMatrix(arg)) {\n          asMatrix = true;\n        }\n        if (isNumber(arg) || isBigNumber(arg)) {\n          if (i !== len - 1) {\n            throw new Error('Dimension must be specified as last argument');\n          }\n\n          // last argument contains the dimension on which to concatenate\n          prevDim = dim;\n          dim = arg.valueOf(); // change BigNumber to number\n\n          if (!isInteger(dim)) {\n            throw new TypeError('Integer number expected for dimension');\n          }\n          if (dim < 0 || i > 0 && dim > prevDim) {\n            // TODO: would be more clear when throwing a DimensionError here\n            throw new IndexError(dim, prevDim + 1);\n          }\n        } else {\n          // this is a matrix or array\n          var m = clone(arg).valueOf();\n          var size = arraySize(m);\n          matrices[i] = m;\n          prevDim = dim;\n          dim = size.length - 1;\n\n          // verify whether each of the matrices has the same number of dimensions\n          if (i > 0 && dim !== prevDim) {\n            throw new DimensionError(prevDim + 1, dim + 1);\n          }\n        }\n      }\n      if (matrices.length === 0) {\n        throw new SyntaxError('At least one matrix expected');\n      }\n      var res = matrices.shift();\n      while (matrices.length) {\n        res = _concat(res, matrices.shift(), dim);\n      }\n      return asMatrix ? matrix(res) : res;\n    },\n    '...string': function string(args) {\n      return args.join('');\n    }\n  });\n});","map":{"version":3,"names":["isBigNumber","isMatrix","isNumber","clone","arraySize","concat","_concat","IndexError","DimensionError","factory","name","dependencies","createConcat","_ref","typed","matrix","isInteger","Array__Matrix__number__BigNumber","args","i","len","length","dim","prevDim","asMatrix","matrices","arg","Error","valueOf","TypeError","m","size","SyntaxError","res","shift","string","join"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/matrix/concat.js"],"sourcesContent":["import { isBigNumber, isMatrix, isNumber } from '../../utils/is.js';\r\nimport { clone } from '../../utils/object.js';\r\nimport { arraySize, concat as _concat } from '../../utils/array.js';\r\nimport { IndexError } from '../../error/IndexError.js';\r\nimport { DimensionError } from '../../error/DimensionError.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'concat';\r\nvar dependencies = ['typed', 'matrix', 'isInteger'];\r\nexport var createConcat = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    isInteger\r\n  } = _ref;\r\n  /**\r\n   * Concatenate two or more matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.concat(A, B, C, ...)\r\n   *     math.concat(A, B, C, ..., dim)\r\n   *\r\n   * Where:\r\n   *\r\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\r\n   *   By default the last dimension of the matrices.\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const A = [[1, 2], [5, 6]]\r\n   *    const B = [[3, 4], [7, 8]]\r\n   *\r\n   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\r\n   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\r\n   *    math.concat('hello', ' ', 'world') // returns 'hello world'\r\n   *\r\n   * See also:\r\n   *\r\n   *    size, squeeze, subset, transpose\r\n   *\r\n   * @param {... Array | Matrix} args     Two or more matrices\r\n   * @return {Array | Matrix} Concatenated matrix\r\n   */\r\n  return typed(name, {\r\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\r\n    '...Array | Matrix | number | BigNumber': function Array__Matrix__number__BigNumber(args) {\r\n      var i;\r\n      var len = args.length;\r\n      var dim = -1; // zero-based dimension\r\n      var prevDim;\r\n      var asMatrix = false;\r\n      var matrices = []; // contains multi dimensional arrays\r\n\r\n      for (i = 0; i < len; i++) {\r\n        var arg = args[i];\r\n\r\n        // test whether we need to return a Matrix (if not we return an Array)\r\n        if (isMatrix(arg)) {\r\n          asMatrix = true;\r\n        }\r\n        if (isNumber(arg) || isBigNumber(arg)) {\r\n          if (i !== len - 1) {\r\n            throw new Error('Dimension must be specified as last argument');\r\n          }\r\n\r\n          // last argument contains the dimension on which to concatenate\r\n          prevDim = dim;\r\n          dim = arg.valueOf(); // change BigNumber to number\r\n\r\n          if (!isInteger(dim)) {\r\n            throw new TypeError('Integer number expected for dimension');\r\n          }\r\n          if (dim < 0 || i > 0 && dim > prevDim) {\r\n            // TODO: would be more clear when throwing a DimensionError here\r\n            throw new IndexError(dim, prevDim + 1);\r\n          }\r\n        } else {\r\n          // this is a matrix or array\r\n          var m = clone(arg).valueOf();\r\n          var size = arraySize(m);\r\n          matrices[i] = m;\r\n          prevDim = dim;\r\n          dim = size.length - 1;\r\n\r\n          // verify whether each of the matrices has the same number of dimensions\r\n          if (i > 0 && dim !== prevDim) {\r\n            throw new DimensionError(prevDim + 1, dim + 1);\r\n          }\r\n        }\r\n      }\r\n      if (matrices.length === 0) {\r\n        throw new SyntaxError('At least one matrix expected');\r\n      }\r\n      var res = matrices.shift();\r\n      while (matrices.length) {\r\n        res = _concat(res, matrices.shift(), dim);\r\n      }\r\n      return asMatrix ? matrix(res) : res;\r\n    },\r\n    '...string': function string(args) {\r\n      return args.join('');\r\n    }\r\n  });\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}