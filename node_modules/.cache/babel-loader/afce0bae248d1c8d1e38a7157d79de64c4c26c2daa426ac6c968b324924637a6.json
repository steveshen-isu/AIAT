{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'tan';\nvar dependencies = ['typed'];\nexport var createTan = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\r\n   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\r\n   *\r\n   * To avoid confusion with the matrix tangent, this function does not apply\r\n   * to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.tan(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.tan(0.5)                    // returns number 0.5463024898437905\r\n   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905\r\n   *    math.tan(math.pi / 4)            // returns number 1\r\n   *    math.tan(math.unit(45, 'deg'))   // returns number 1\r\n   *\r\n   * See also:\r\n   *\r\n   *    atan, sin, cos\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit} x  Function input\r\n   * @return {number | BigNumber | Complex} Tangent of x\r\n   */\n  return typed(name, {\n    number: Math.tan,\n    'Complex | BigNumber': x => x.tan()\n  }, trigUnit);\n});","map":{"version":3,"names":["factory","createTrigUnit","name","dependencies","createTan","_ref","typed","trigUnit","number","Math","tan","x"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/trigonometry/tan.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createTrigUnit } from './trigUnit.js';\r\nvar name = 'tan';\r\nvar dependencies = ['typed'];\r\nexport var createTan = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  var trigUnit = createTrigUnit({\r\n    typed\r\n  });\r\n\r\n  /**\r\n   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\r\n   *\r\n   * To avoid confusion with the matrix tangent, this function does not apply\r\n   * to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.tan(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.tan(0.5)                    // returns number 0.5463024898437905\r\n   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905\r\n   *    math.tan(math.pi / 4)            // returns number 1\r\n   *    math.tan(math.unit(45, 'deg'))   // returns number 1\r\n   *\r\n   * See also:\r\n   *\r\n   *    atan, sin, cos\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit} x  Function input\r\n   * @return {number | BigNumber | Complex} Tangent of x\r\n   */\r\n  return typed(name, {\r\n    number: Math.tan,\r\n    'Complex | BigNumber': x => x.tan()\r\n  }, trigUnit);\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,cAAc,QAAQ,eAAe;AAC9C,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACxE,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR,IAAIE,QAAQ,GAAGN,cAAc,CAAC;IAC5BK;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjBM,MAAM,EAAEC,IAAI,CAACC,GAAG;IAChB,qBAAqB,EAAEC,CAAC,IAAIA,CAAC,CAACD,GAAG,CAAC;EACpC,CAAC,EAAEH,QAAQ,CAAC;AACd,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}