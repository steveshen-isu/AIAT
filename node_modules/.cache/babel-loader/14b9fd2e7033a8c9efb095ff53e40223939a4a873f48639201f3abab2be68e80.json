{"ast":null,"code":"import { isBigNumber } from '../../utils/is.js';\nimport { format, sign } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Range';\nvar dependencies = [];\nexport var createRangeClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\r\n   * Create a range. A range has a start, step, and end, and contains functions\r\n   * to iterate over the range.\r\n   *\r\n   * A range can be constructed as:\r\n   *\r\n   *     const range = new Range(start, end)\r\n   *     const range = new Range(start, end, step)\r\n   *\r\n   * To get the result of the range:\r\n   *     range.forEach(function (x) {\r\n   *         console.log(x)\r\n   *     })\r\n   *     range.map(function (x) {\r\n   *         return math.sin(x)\r\n   *     })\r\n   *     range.toArray()\r\n   *\r\n   * Example usage:\r\n   *\r\n   *     const c = new Range(2, 6)       // 2:1:5\r\n   *     c.toArray()                     // [2, 3, 4, 5]\r\n   *     const d = new Range(2, -3, -1)  // 2:-1:-2\r\n   *     d.toArray()                     // [2, 1, 0, -1, -2]\r\n   *\r\n   * @class Range\r\n   * @constructor Range\r\n   * @param {number} start  included lower bound\r\n   * @param {number} end    excluded upper bound\r\n   * @param {number} [step] step size, default value is 1\r\n   */\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    var hasStart = start !== null && start !== undefined;\n    var hasEnd = end !== null && end !== undefined;\n    var hasStep = step !== null && step !== undefined;\n    if (hasStart) {\n      if (isBigNumber(start)) {\n        start = start.toNumber();\n      } else if (typeof start !== 'number') {\n        throw new TypeError('Parameter start must be a number');\n      }\n    }\n    if (hasEnd) {\n      if (isBigNumber(end)) {\n        end = end.toNumber();\n      } else if (typeof end !== 'number') {\n        throw new TypeError('Parameter end must be a number');\n      }\n    }\n    if (hasStep) {\n      if (isBigNumber(step)) {\n        step = step.toNumber();\n      } else if (typeof step !== 'number') {\n        throw new TypeError('Parameter step must be a number');\n      }\n    }\n    this.start = hasStart ? parseFloat(start) : 0;\n    this.end = hasEnd ? parseFloat(end) : 0;\n    this.step = hasStep ? parseFloat(step) : 1;\n  }\n\n  /**\r\n   * Attach type information\r\n   */\n  Range.prototype.type = 'Range';\n  Range.prototype.isRange = true;\n\n  /**\r\n   * Parse a string into a range,\r\n   * The string contains the start, optional step, and end, separated by a colon.\r\n   * If the string does not contain a valid range, null is returned.\r\n   * For example str='0:2:11'.\r\n   * @memberof Range\r\n   * @param {string} str\r\n   * @return {Range | null} range\r\n   */\n  Range.parse = function (str) {\n    if (typeof str !== 'string') {\n      return null;\n    }\n    var args = str.split(':');\n    var nums = args.map(function (arg) {\n      return parseFloat(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if (invalid) {\n      return null;\n    }\n    switch (nums.length) {\n      case 2:\n        return new Range(nums[0], nums[1]);\n      case 3:\n        return new Range(nums[0], nums[2], nums[1]);\n      default:\n        return null;\n    }\n  };\n\n  /**\r\n   * Create a clone of the range\r\n   * @return {Range} clone\r\n   */\n  Range.prototype.clone = function () {\n    return new Range(this.start, this.end, this.step);\n  };\n\n  /**\r\n   * Retrieve the size of the range.\r\n   * Returns an array containing one number, the number of elements in the range.\r\n   * @memberof Range\r\n   * @returns {number[]} size\r\n   */\n  Range.prototype.size = function () {\n    var len = 0;\n    var start = this.start;\n    var step = this.step;\n    var end = this.end;\n    var diff = end - start;\n    if (sign(step) === sign(diff)) {\n      len = Math.ceil(diff / step);\n    } else if (diff === 0) {\n      len = 0;\n    }\n    if (isNaN(len)) {\n      len = 0;\n    }\n    return [len];\n  };\n\n  /**\r\n   * Calculate the minimum value in the range\r\n   * @memberof Range\r\n   * @return {number | undefined} min\r\n   */\n  Range.prototype.min = function () {\n    var size = this.size()[0];\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start;\n      } else {\n        // negative step\n        return this.start + (size - 1) * this.step;\n      }\n    } else {\n      return undefined;\n    }\n  };\n\n  /**\r\n   * Calculate the maximum value in the range\r\n   * @memberof Range\r\n   * @return {number | undefined} max\r\n   */\n  Range.prototype.max = function () {\n    var size = this.size()[0];\n    if (size > 0) {\n      if (this.step > 0) {\n        // positive step\n        return this.start + (size - 1) * this.step;\n      } else {\n        // negative step\n        return this.start;\n      }\n    } else {\n      return undefined;\n    }\n  };\n\n  /**\r\n   * Execute a callback function for each value in the range.\r\n   * @memberof Range\r\n   * @param {function} callback   The callback method is invoked with three\r\n   *                              parameters: the value of the element, the index\r\n   *                              of the element, and the Range being traversed.\r\n   */\n  Range.prototype.forEach = function (callback) {\n    var x = this.start;\n    var step = this.step;\n    var end = this.end;\n    var i = 0;\n    if (step > 0) {\n      while (x < end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    } else if (step < 0) {\n      while (x > end) {\n        callback(x, [i], this);\n        x += step;\n        i++;\n      }\n    }\n  };\n\n  /**\r\n   * Execute a callback function for each value in the Range, and return the\r\n   * results as an array\r\n   * @memberof Range\r\n   * @param {function} callback   The callback method is invoked with three\r\n   *                              parameters: the value of the element, the index\r\n   *                              of the element, and the Matrix being traversed.\r\n   * @returns {Array} array\r\n   */\n  Range.prototype.map = function (callback) {\n    var array = [];\n    this.forEach(function (value, index, obj) {\n      array[index[0]] = callback(value, index, obj);\n    });\n    return array;\n  };\n\n  /**\r\n   * Create an Array with a copy of the Ranges data\r\n   * @memberof Range\r\n   * @returns {Array} array\r\n   */\n  Range.prototype.toArray = function () {\n    var array = [];\n    this.forEach(function (value, index) {\n      array[index[0]] = value;\n    });\n    return array;\n  };\n\n  /**\r\n   * Get the primitive value of the Range, a one dimensional array\r\n   * @memberof Range\r\n   * @returns {Array} array\r\n   */\n  Range.prototype.valueOf = function () {\n    // TODO: implement a caching mechanism for range.valueOf()\n    return this.toArray();\n  };\n\n  /**\r\n   * Get a string representation of the range, with optional formatting options.\r\n   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'\r\n   * @memberof Range\r\n   * @param {Object | number | function} [options]  Formatting options. See\r\n   *                                                lib/utils/number:format for a\r\n   *                                                description of the available\r\n   *                                                options.\r\n   * @returns {string} str\r\n   */\n  Range.prototype.format = function (options) {\n    var str = format(this.start, options);\n    if (this.step !== 1) {\n      str += ':' + format(this.step, options);\n    }\n    str += ':' + format(this.end, options);\n    return str;\n  };\n\n  /**\r\n   * Get a string representation of the range.\r\n   * @memberof Range\r\n   * @returns {string}\r\n   */\n  Range.prototype.toString = function () {\n    return this.format();\n  };\n\n  /**\r\n   * Get a JSON representation of the range\r\n   * @memberof Range\r\n   * @returns {Object} Returns a JSON object structured as:\r\n   *                   `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\r\n   */\n  Range.prototype.toJSON = function () {\n    return {\n      mathjs: 'Range',\n      start: this.start,\n      end: this.end,\n      step: this.step\n    };\n  };\n\n  /**\r\n   * Instantiate a Range from a JSON object\r\n   * @memberof Range\r\n   * @param {Object} json A JSON object structured as:\r\n   *                      `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\r\n   * @return {Range}\r\n   */\n  Range.fromJSON = function (json) {\n    return new Range(json.start, json.end, json.step);\n  };\n  return Range;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["isBigNumber","format","sign","factory","name","dependencies","createRangeClass","Range","start","end","step","SyntaxError","hasStart","undefined","hasEnd","hasStep","toNumber","TypeError","parseFloat","prototype","type","isRange","parse","str","args","split","nums","map","arg","invalid","some","num","isNaN","length","clone","size","len","diff","Math","ceil","min","max","forEach","callback","x","i","array","value","index","obj","toArray","valueOf","options","toString","toJSON","mathjs","fromJSON","json","isClass"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/type/matrix/Range.js"],"sourcesContent":["import { isBigNumber } from '../../utils/is.js';\r\nimport { format, sign } from '../../utils/number.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'Range';\r\nvar dependencies = [];\r\nexport var createRangeClass = /* #__PURE__ */factory(name, dependencies, () => {\r\n  /**\r\n   * Create a range. A range has a start, step, and end, and contains functions\r\n   * to iterate over the range.\r\n   *\r\n   * A range can be constructed as:\r\n   *\r\n   *     const range = new Range(start, end)\r\n   *     const range = new Range(start, end, step)\r\n   *\r\n   * To get the result of the range:\r\n   *     range.forEach(function (x) {\r\n   *         console.log(x)\r\n   *     })\r\n   *     range.map(function (x) {\r\n   *         return math.sin(x)\r\n   *     })\r\n   *     range.toArray()\r\n   *\r\n   * Example usage:\r\n   *\r\n   *     const c = new Range(2, 6)       // 2:1:5\r\n   *     c.toArray()                     // [2, 3, 4, 5]\r\n   *     const d = new Range(2, -3, -1)  // 2:-1:-2\r\n   *     d.toArray()                     // [2, 1, 0, -1, -2]\r\n   *\r\n   * @class Range\r\n   * @constructor Range\r\n   * @param {number} start  included lower bound\r\n   * @param {number} end    excluded upper bound\r\n   * @param {number} [step] step size, default value is 1\r\n   */\r\n  function Range(start, end, step) {\r\n    if (!(this instanceof Range)) {\r\n      throw new SyntaxError('Constructor must be called with the new operator');\r\n    }\r\n    var hasStart = start !== null && start !== undefined;\r\n    var hasEnd = end !== null && end !== undefined;\r\n    var hasStep = step !== null && step !== undefined;\r\n    if (hasStart) {\r\n      if (isBigNumber(start)) {\r\n        start = start.toNumber();\r\n      } else if (typeof start !== 'number') {\r\n        throw new TypeError('Parameter start must be a number');\r\n      }\r\n    }\r\n    if (hasEnd) {\r\n      if (isBigNumber(end)) {\r\n        end = end.toNumber();\r\n      } else if (typeof end !== 'number') {\r\n        throw new TypeError('Parameter end must be a number');\r\n      }\r\n    }\r\n    if (hasStep) {\r\n      if (isBigNumber(step)) {\r\n        step = step.toNumber();\r\n      } else if (typeof step !== 'number') {\r\n        throw new TypeError('Parameter step must be a number');\r\n      }\r\n    }\r\n    this.start = hasStart ? parseFloat(start) : 0;\r\n    this.end = hasEnd ? parseFloat(end) : 0;\r\n    this.step = hasStep ? parseFloat(step) : 1;\r\n  }\r\n\r\n  /**\r\n   * Attach type information\r\n   */\r\n  Range.prototype.type = 'Range';\r\n  Range.prototype.isRange = true;\r\n\r\n  /**\r\n   * Parse a string into a range,\r\n   * The string contains the start, optional step, and end, separated by a colon.\r\n   * If the string does not contain a valid range, null is returned.\r\n   * For example str='0:2:11'.\r\n   * @memberof Range\r\n   * @param {string} str\r\n   * @return {Range | null} range\r\n   */\r\n  Range.parse = function (str) {\r\n    if (typeof str !== 'string') {\r\n      return null;\r\n    }\r\n    var args = str.split(':');\r\n    var nums = args.map(function (arg) {\r\n      return parseFloat(arg);\r\n    });\r\n    var invalid = nums.some(function (num) {\r\n      return isNaN(num);\r\n    });\r\n    if (invalid) {\r\n      return null;\r\n    }\r\n    switch (nums.length) {\r\n      case 2:\r\n        return new Range(nums[0], nums[1]);\r\n      case 3:\r\n        return new Range(nums[0], nums[2], nums[1]);\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Create a clone of the range\r\n   * @return {Range} clone\r\n   */\r\n  Range.prototype.clone = function () {\r\n    return new Range(this.start, this.end, this.step);\r\n  };\r\n\r\n  /**\r\n   * Retrieve the size of the range.\r\n   * Returns an array containing one number, the number of elements in the range.\r\n   * @memberof Range\r\n   * @returns {number[]} size\r\n   */\r\n  Range.prototype.size = function () {\r\n    var len = 0;\r\n    var start = this.start;\r\n    var step = this.step;\r\n    var end = this.end;\r\n    var diff = end - start;\r\n    if (sign(step) === sign(diff)) {\r\n      len = Math.ceil(diff / step);\r\n    } else if (diff === 0) {\r\n      len = 0;\r\n    }\r\n    if (isNaN(len)) {\r\n      len = 0;\r\n    }\r\n    return [len];\r\n  };\r\n\r\n  /**\r\n   * Calculate the minimum value in the range\r\n   * @memberof Range\r\n   * @return {number | undefined} min\r\n   */\r\n  Range.prototype.min = function () {\r\n    var size = this.size()[0];\r\n    if (size > 0) {\r\n      if (this.step > 0) {\r\n        // positive step\r\n        return this.start;\r\n      } else {\r\n        // negative step\r\n        return this.start + (size - 1) * this.step;\r\n      }\r\n    } else {\r\n      return undefined;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Calculate the maximum value in the range\r\n   * @memberof Range\r\n   * @return {number | undefined} max\r\n   */\r\n  Range.prototype.max = function () {\r\n    var size = this.size()[0];\r\n    if (size > 0) {\r\n      if (this.step > 0) {\r\n        // positive step\r\n        return this.start + (size - 1) * this.step;\r\n      } else {\r\n        // negative step\r\n        return this.start;\r\n      }\r\n    } else {\r\n      return undefined;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Execute a callback function for each value in the range.\r\n   * @memberof Range\r\n   * @param {function} callback   The callback method is invoked with three\r\n   *                              parameters: the value of the element, the index\r\n   *                              of the element, and the Range being traversed.\r\n   */\r\n  Range.prototype.forEach = function (callback) {\r\n    var x = this.start;\r\n    var step = this.step;\r\n    var end = this.end;\r\n    var i = 0;\r\n    if (step > 0) {\r\n      while (x < end) {\r\n        callback(x, [i], this);\r\n        x += step;\r\n        i++;\r\n      }\r\n    } else if (step < 0) {\r\n      while (x > end) {\r\n        callback(x, [i], this);\r\n        x += step;\r\n        i++;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Execute a callback function for each value in the Range, and return the\r\n   * results as an array\r\n   * @memberof Range\r\n   * @param {function} callback   The callback method is invoked with three\r\n   *                              parameters: the value of the element, the index\r\n   *                              of the element, and the Matrix being traversed.\r\n   * @returns {Array} array\r\n   */\r\n  Range.prototype.map = function (callback) {\r\n    var array = [];\r\n    this.forEach(function (value, index, obj) {\r\n      array[index[0]] = callback(value, index, obj);\r\n    });\r\n    return array;\r\n  };\r\n\r\n  /**\r\n   * Create an Array with a copy of the Ranges data\r\n   * @memberof Range\r\n   * @returns {Array} array\r\n   */\r\n  Range.prototype.toArray = function () {\r\n    var array = [];\r\n    this.forEach(function (value, index) {\r\n      array[index[0]] = value;\r\n    });\r\n    return array;\r\n  };\r\n\r\n  /**\r\n   * Get the primitive value of the Range, a one dimensional array\r\n   * @memberof Range\r\n   * @returns {Array} array\r\n   */\r\n  Range.prototype.valueOf = function () {\r\n    // TODO: implement a caching mechanism for range.valueOf()\r\n    return this.toArray();\r\n  };\r\n\r\n  /**\r\n   * Get a string representation of the range, with optional formatting options.\r\n   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'\r\n   * @memberof Range\r\n   * @param {Object | number | function} [options]  Formatting options. See\r\n   *                                                lib/utils/number:format for a\r\n   *                                                description of the available\r\n   *                                                options.\r\n   * @returns {string} str\r\n   */\r\n  Range.prototype.format = function (options) {\r\n    var str = format(this.start, options);\r\n    if (this.step !== 1) {\r\n      str += ':' + format(this.step, options);\r\n    }\r\n    str += ':' + format(this.end, options);\r\n    return str;\r\n  };\r\n\r\n  /**\r\n   * Get a string representation of the range.\r\n   * @memberof Range\r\n   * @returns {string}\r\n   */\r\n  Range.prototype.toString = function () {\r\n    return this.format();\r\n  };\r\n\r\n  /**\r\n   * Get a JSON representation of the range\r\n   * @memberof Range\r\n   * @returns {Object} Returns a JSON object structured as:\r\n   *                   `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\r\n   */\r\n  Range.prototype.toJSON = function () {\r\n    return {\r\n      mathjs: 'Range',\r\n      start: this.start,\r\n      end: this.end,\r\n      step: this.step\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Instantiate a Range from a JSON object\r\n   * @memberof Range\r\n   * @param {Object} json A JSON object structured as:\r\n   *                      `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`\r\n   * @return {Range}\r\n   */\r\n  Range.fromJSON = function (json) {\r\n    return new Range(json.start, json.end, json.step);\r\n  };\r\n  return Range;\r\n}, {\r\n  isClass: true\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}