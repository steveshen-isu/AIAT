{"ast":null,"code":"/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\n\n/* global trig, trigh, Infinity, define, arguments2Array, NaN */\n//externals ====================================================================\n/* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */\n//var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require(\"big-integer\");\n/* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\n//var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');\n\nvar nerdamer = function (imports) {\n  \"use strict\";\n\n  //version ======================================================================\n  var version = '1.1.13';\n\n  //inits ========================================================================\n  var _ = new Parser(); //nerdamer's parser\n\n  //import bigInt\n  var bigInt = imports.bigInt;\n  var bigDec = imports.bigDec;\n\n  //set the precision to js precision\n  bigDec.set({\n    precision: 250\n  });\n  var Groups = {};\n\n  //container of pregenerated primes\n  var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083];\n\n  //Settings =====================================================================\n  var CUSTOM_OPERATORS = {};\n  var Settings = {\n    //Enables/Disables call peekers. False means callPeekers are disabled and true means callPeekers are enabled.\n    callPeekers: false,\n    //the max number up to which to cache primes. Making this too high causes performance issues\n    init_primes: 1000,\n    exclude: [],\n    //If you don't care about division by zero for example then this can be set to true.\n    //Has some nasty side effects so choose carefully.\n    suppress_errors: false,\n    //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\n    //cos(9) for convenience but parse to number will always try to return a number if set to true.\n    PARSE2NUMBER: false,\n    //this flag forces the a clone to be returned when add, subtract, etc... is called\n    SAFE: false,\n    //the symbol to use for imaginary symbols\n    IMAGINARY: 'i',\n    //the modules used to link numeric function holders\n    FUNCTION_MODULES: [Math],\n    //Allow certain characters\n    ALLOW_CHARS: ['π'],\n    //Allow nerdamer to convert multi-character variables\n    USE_MULTICHARACTER_VARS: true,\n    //Allow changing of power operator\n    POWER_OPERATOR: '^',\n    //The variable validation regex\n    //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\n    VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\n    // The regex used to determine which characters should be included in implied multiplication\n    IMPLIED_MULTIPLICATION_REGEX: /([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi,\n    //Aliases\n    ALIASES: {\n      'π': 'pi',\n      '∞': 'Infinity'\n    },\n    POSITIVE_MULTIPLIERS: false,\n    //Cached items\n    CACHE: {},\n    //Print out warnings or not\n    SILENCE_WARNINGS: false,\n    // Precision\n    PRECISION: 21,\n    // The Expression defaults to this value for decimal places\n    EXPRESSION_DECP: 19,\n    // The text function defaults to this value for decimal places\n    DEFAULT_DECP: 16,\n    //function mappings\n    VECTOR: 'vector',\n    PARENTHESIS: 'parens',\n    SQRT: 'sqrt',\n    ABS: 'abs',\n    FACTORIAL: 'factorial',\n    DOUBLEFACTORIAL: 'dfactorial',\n    //reference pi and e\n    LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' + '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\n    LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' + '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\n    PI: Math.PI,\n    E: Math.E,\n    LOG: 'log',\n    LOG10: 'log10',\n    LOG10_LATEX: 'log_{10}',\n    MAX_EXP: 200000,\n    //The number of scientific place to round to\n    SCIENTIFIC_MAX_DECIMAL_PLACES: 14,\n    //True if ints should not be converted to\n    SCIENTIFIC_IGNORE_ZERO_EXPONENTS: true\n  };\n  (function () {\n    Settings.CACHE.roots = {};\n    var x = 40,\n      y = 40;\n    for (var i = 2; i <= x; i++) {\n      for (var j = 2; j <= y; j++) {\n        var nthpow = bigInt(i).pow(j);\n        Settings.CACHE.roots[nthpow + '-' + j] = i;\n      }\n    }\n  })();\n\n  //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group\n  //The groups that help with organizing during parsing. Note that for FN is still a function even\n  //when it's raised to a symbol, which typically results in an EX\n  var N = Groups.N = 1,\n    // A number\n    P = Groups.P = 2,\n    // A number with a rational power e.g. 2^(3/5).\n    S = Groups.S = 3,\n    // A single variable e.g. x.\n    EX = Groups.EX = 4,\n    // An exponential\n    FN = Groups.FN = 5,\n    // A function\n    PL = Groups.PL = 6,\n    // A symbol/expression having same name with different powers e.g. 1/x + x^2\n    CB = Groups.CB = 7,\n    // A symbol/expression composed of one or more variables through multiplication e.g. x*y\n    CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y\n\n  var CONST_HASH = Settings.CONST_HASH = '#';\n  var PARENTHESIS = Settings.PARENTHESIS;\n  var SQRT = Settings.SQRT;\n  var ABS = Settings.ABS;\n  var FACTORIAL = Settings.FACTORIAL;\n  var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL;\n\n  //the storage container \"memory\" for parsed expressions\n  var EXPRESSIONS = [];\n\n  //variables\n  var VARS = {};\n\n  //the container used to store all the reserved functions\n  var RESERVED = [];\n  var WARNINGS = [];\n\n  /**\r\n   * Use this when errors are suppressible\r\n   * @param {String} msg\r\n   * @param {object} ErrorObj\r\n   */\n  var err = function (msg, ErrorObj) {\n    if (!Settings.suppress_errors) {\n      if (ErrorObj) throw new ErrorObj(msg);else throw new Error(msg);\n    }\n  };\n\n  //Utils ========================================================================\n  var customError = function (name) {\n    var E = function (message) {\n      this.name = name;\n      this.message = message !== undefined ? message : '';\n      var error = new Error(this.message);\n      error.name = this.name;\n      this.stack = error.stack;\n    }; //create an empty error\n    E.prototype = Object.create(Error.prototype);\n    return E;\n  };\n\n  /**\r\n   * Checks to see if value is one of nerdamer's reserved names\r\n   * @param {String} value\r\n   * @return boolean\r\n   */\n  var isReserved = function (value) {\n    return RESERVED.indexOf(value) !== -1;\n  };\n\n  /**\r\n   * Checks to see that all symbols in array are the same\r\n   * @param {Symbol[]} arr\r\n   * @returns {bool}\r\n   */\n  var allSame = function (arr) {\n    var last = arr[0];\n    for (var i = 1, l = arr.length; i < l; i++) if (!arr[i].equals(last)) return false;\n    return true;\n  };\n\n  /**\r\n   * Used to pass warnings or low severity errors about the library\r\n   * @param msg\r\n   */\n  var warn = function (msg) {\n    WARNINGS.push(msg);\n    if (Settings.SHOW_WARNINGS && console && console.warn) {\n      console.warn(msg);\n    }\n  };\n\n  /**\r\n   * Enforces rule: \"must start with a letter or underscore and\r\n   * can have any number of underscores, letters, and numbers thereafter.\"\r\n   * @param name The name of the symbol being checked\r\n   * @param {String} typ - The type of symbols that's being validated\r\n   * @throws {Exception}  - Throws an exception on fail\r\n   */\n  var validateName = function (name, typ) {\n    typ = typ || 'variable';\n    if (Settings.ALLOW_CHARS.indexOf(name) !== -1) return;\n    var regex = Settings.VALIDATION_REGEX;\n    if (!regex.test(name)) {\n      throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\n    }\n  };\n\n  /**\r\n   * Convert number from scientific format to decimal format\r\n   * @param {Number} num\r\n   */\n  var scientificToDecimal = function (num) {\n    var nsign = Math.sign(num);\n    //remove the sign\n    num = Math.abs(num);\n    //if the number is in scientific notation remove it\n    if (/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\n      var zero = '0',\n        parts = String(num).toLowerCase().split('e'),\n        //split into coeff and exponent\n        e = parts.pop(),\n        //store the exponential part\n        l = Math.abs(e),\n        //get the number of zeros\n        sign = e / l,\n        coeff_array = parts[0].split('.');\n      if (sign === -1) {\n        l = l - coeff_array[0].length;\n        if (l < 0) {\n          num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');\n        } else {\n          num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');\n        }\n      } else {\n        var dec = coeff_array[1];\n        if (dec) l = l - dec.length;\n        if (l < 0) {\n          num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);\n        } else {\n          num = coeff_array.join('') + new Array(l + 1).join(zero);\n        }\n      }\n    }\n    return nsign < 0 ? '-' + num : num;\n  };\n  /**\r\n   * Checks if number is a prime number\r\n   * @param {Number} n - the number to be checked\r\n   */\n  var isPrime = function (n) {\n    var q = Math.floor(Math.sqrt(n));\n    for (var i = 2; i <= q; i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n\n  /**\r\n   * Generates an object with known variable value for evaluation\r\n   * @param {String} variable\r\n   * @param {any} value Any stringifyable object\r\n   * @returns {Object} \r\n   */\n  var knownVariable = function (variable, value) {\n    var o = {};\n    o[variable] = value;\n    return o;\n  };\n\n  /**\r\n   * Checks if n is a number\r\n   * @param {any} n\r\n   */\n  var isNumber = function (n) {\n    return /^\\d+\\.?\\d*$/.test(n);\n  };\n\n  /**\r\n   * Checks to see if an array contains only numeric values\r\n   * @param {Array} arr\r\n   */\n  var allNumeric = function (arr) {\n    for (var i = 0; i < arr.length; i++) if (!isNumber(arr[i])) return false;\n    return true;\n  };\n  /**\r\n   * Checks to see if a number or Symbol is a fraction\r\n   * @param {Number|Symbol} num\r\n   * @returns {boolean}\r\n   */\n  var isFraction = function (num) {\n    if (isSymbol(num)) return isFraction(num.multiplier.toDecimal());\n    return num % 1 !== 0;\n  };\n\n  /**\r\n   * Checks to see if the object provided is a Symbol\r\n   * @param {Object} obj\r\n   */\n  var isSymbol = function (obj) {\n    return obj instanceof Symbol;\n  };\n\n  /**\r\n   * Checks to see if the object provided is an Expression\r\n   * @param {Object} obj\r\n   */\n  var isExpression = function (obj) {\n    return obj instanceof Expression;\n  };\n\n  /**\r\n   * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\r\n   * names are then returned in alphabetical order.\r\n   * @param {Symbol} obj\r\n   * @param {Boolean} poly\r\n   * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\r\n   * automatically. In the future this will be a Collector object.\r\n   * @returns {String[]} - An array containing variable names\r\n   */\n  var variables = function (obj, poly, vars) {\n    vars = vars || {\n      c: [],\n      add: function (value) {\n        if (this.c.indexOf(value) === -1 && isNaN(value)) this.c.push(value);\n      }\n    };\n    if (isSymbol(obj)) {\n      var group = obj.group,\n        prevgroup = obj.previousGroup;\n      if (group === EX) variables(obj.power, poly, vars);\n      if (group === CP || group === CB || prevgroup === CP || prevgroup === CB) {\n        for (var x in obj.symbols) {\n          variables(obj.symbols[x], poly, vars);\n        }\n      } else if (group === S || prevgroup === S) {\n        //very crude needs fixing. TODO\n        if (!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY)) vars.add(obj.value);\n      } else if (group === PL || prevgroup === PL) {\n        variables(firstObject(obj.symbols), poly, vars);\n      } else if (group === EX) {\n        if (!isNaN(obj.value)) vars.add(obj.value);\n        variables(obj.power, poly, vars);\n      } else if (group === FN && !poly) {\n        for (var i = 0; i < obj.args.length; i++) {\n          variables(obj.args[i], poly, vars);\n        }\n      }\n    }\n    return vars.c.sort();\n  };\n\n  /**\r\n   * Returns the sum of an array\r\n   * @param {Array} arr\r\n   * @param {boolean} toNumber\r\n   * @returns {Symbol}\r\n   */\n  var arraySum = function (arr, toNumber) {\n    var sum = new Symbol(0);\n    for (var i = 0; i < arr.length; i++) {\n      var x = arr[i];\n      // Convert to symbol if not\n      sum = _.add(sum, !isSymbol(x) ? _.parse(x) : x);\n    }\n    return toNumber ? Number(sum) : sum;\n  };\n\n  /**\r\n   * Separates out the variables into terms of variabls.\r\n   * e.g. x+y+x*y+sqrt(2)+pi returns\r\n   * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\r\n   * @param {type} symbol\r\n   * @param {type} o\r\n   * @returns {undefined}\r\n   * @throws {Error} for expontentials\r\n   */\n  var separate = function (symbol, o) {\n    symbol = _.expand(symbol);\n    o = o || {};\n    var insert = function (key, sym) {\n      if (!o[key]) o[key] = new Symbol(0);\n      o[key] = _.add(o[key], sym.clone());\n    };\n    symbol.each(function (x) {\n      if (x.isConstant('all')) {\n        insert('constants', x);\n      } else if (x.group === S) {\n        insert(x.value, x);\n      } else if (x.group === FN && (x.fname === ABS || x.fname === '')) {\n        separate(x.args[0]);\n      } else if (x.group === EX || x.group === FN) {\n        throw new Error('Unable to separate. Term cannot be a function!');\n      } else {\n        insert(variables(x).join(' '), x);\n      }\n    });\n    return o;\n  };\n\n  /**\r\n   * Fills holes in an array with zero symbol or generates one with n zeroes\r\n   * @param {Array} arr\r\n   * @param {Number} n\r\n   */\n  var fillHoles = function (arr, n) {\n    n = n || arr.length;\n    for (var i = 0; i < n; i++) {\n      var sym = arr[i];\n      if (!sym) arr[i] = new Symbol(0);\n    }\n    return arr;\n  };\n\n  /**\r\n   *\r\n   * Checks to see if the object provided is a Vector\r\n   * @param {Object} obj\r\n   */\n  var isVector = function (obj) {\n    return obj instanceof Vector;\n  };\n\n  /**\r\n   * Checks to see if the object provided is a Matrix\r\n   * @param {Object} obj\r\n   */\n  var isMatrix = function (obj) {\n    return obj instanceof Matrix;\n  };\n  var isSet = function (obj) {\n    return obj instanceof Set;\n  };\n\n  /**\r\n   * Checks to see if a symbol is in group N\r\n   * @param {Symbol} symbol\r\n   */\n  var isNumericSymbol = function (symbol) {\n    return symbol.group === N || symbol.group === P;\n  };\n\n  /**\r\n   * Checks to see if a symbol is a variable with no multiplier nor power\r\n   * @param {Symbol} symbol\r\n   */\n  var isVariableSymbol = function (symbol) {\n    return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);\n  };\n\n  /**\r\n   * Checks to see if the object provided is an Array\r\n   * @param {Object} arr\r\n   */\n  var isArray = function (arr) {\n    return Array.isArray(arr);\n  };\n\n  /**\r\n   * Checks to see if a number is an integer\r\n   * @param {Number} num\r\n   */\n  var isInt = function (num) {\n    return /^[-+]?\\d+e?\\+?\\d*$/gim.test(num.toString());\n  };\n\n  /**\r\n   * @param {Number|Symbol} obj\r\n   * @returns {boolean}\r\n   */\n  var isNegative = function (obj) {\n    if (isSymbol(obj)) {\n      obj = obj.multiplier;\n    }\n    return obj.lessThan(0);\n  };\n  /**\r\n   * Safely stringify object\r\n   * @param o\r\n   */\n  var stringify = function (o) {\n    if (!o) return o;\n    return String(o);\n  };\n\n  /**\r\n   * @param {String} str\r\n   * @returns {String} - returns a formatted string surrounded by brackets\r\n   */\n  var inBrackets = function (str) {\n    return '(' + str + ')';\n  };\n\n  /**\r\n   * A helper function to replace parts of string\r\n   * @param {String} str - The original string\r\n   * @param {Integer} from - The starting index\r\n   * @param {Integer} to - The ending index\r\n   * @param {String} with_str - The replacement string\r\n   * @returns {String} - A formatted string\r\n   */\n  var stringReplace = function (str, from, to, with_str) {\n    return str.substr(0, from) + with_str + str.substr(to, str.length);\n  };\n\n  /**\r\n   * the Parser uses this to check if it's allowed to convert the obj to type Symbol\r\n   * @param {Object} obj\r\n   * @returns {boolean}\r\n   */\n  var customType = function (obj) {\n    return obj !== undefined && obj.custom;\n  };\n\n  /**\r\n   * Checks to see if numbers are both negative or are both positive\r\n   * @param {Number} a\r\n   * @param {Number} b\r\n   * @returns {boolean}\r\n   */\n  var sameSign = function (a, b) {\n    return a < 0 === b < 0;\n  };\n\n  /**\r\n   * A helper function to replace multiple occurences in a string. Takes multiple arguments\r\n   * @example format('{0} nice, {0} sweet', 'something')\r\n   * //returns 'something nice, something sweet'\r\n   */\n  var format = function () {\n    var args = [].slice.call(arguments),\n      str = args.shift();\n    var new_str = str.replace(/{(\\d+)}/g, function (match, index) {\n      var arg = args[index];\n      return typeof arg === 'function' ? arg() : arg;\n    });\n    return new_str;\n  };\n\n  /**\r\n   * Generates an array with values within a range. Multiplies by a step if provided\r\n   * @param {Number} start\r\n   * @param {Number} end\r\n   * @param {Number} step\r\n   */\n  var range = function (start, end, step) {\n    var arr = [];\n    step = step || 1;\n    for (var i = start; i <= end; i++) arr.push(i * step);\n    return arr;\n  };\n\n  /**\r\n   * Returns an array of all the keys in an array\r\n   * @param {Object} obj\r\n   * @returns {Array}\r\n   */\n  var keys = Object.keys;\n\n  /**\r\n   * Returns the first encountered item in an object. Items do not have a fixed order in objects\r\n   * so only use if you need any first random or if there's only one item in the object\r\n   * @param {Object} obj\r\n   * @param {String} key Return this key as first object\r\n   * @param {Boolean} both\r\n   * @returns {*}\r\n   */\n  var firstObject = function (obj, key, both) {\n    for (var x in obj) break;\n    if (key) return x;\n    if (both) return {\n      key: x,\n      obj: obj[x]\n    };\n    return obj[x];\n  };\n\n  /**\r\n   * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\r\n   * @param {Symbol} sym1\r\n   * @param {Symbol} sym2\r\n   * @param {String[]} vars - an optional array of variables to use\r\n   * @returns {bool}\r\n   */\n  var compare = function (sym1, sym2, vars) {\n    var n = 5; //a random number between 1 and 5 is good enough\n    var scope = {}; // scope object with random numbers generated using vars\n    var comparison;\n    for (var i = 0; i < vars.length; i++) scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);\n    block('PARSE2NUMBER', function () {\n      comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));\n    });\n    return comparison;\n  };\n\n  /**\r\n   * Is used to set a user defined function using the function assign operator\r\n   * @param {String} name\r\n   * @param {String[]} params_array\r\n   * @param {String} body\r\n   * @returns {Boolean}\r\n   */\n  var setFunction = function (name, params_array, body) {\n    validateName(name);\n    if (!isReserved(name)) {\n      params_array = params_array || variables(_.parse(body));\n      // The function gets set to PARSER.mapped function which is just\n      // a generic function call.\n      _.functions[name] = [_.mapped_function, params_array.length, {\n        name: name,\n        params: params_array,\n        body: body\n      }];\n      return body;\n    }\n    return null;\n  };\n\n  /**\r\n   * Returns the minimum number in an array\r\n   * @param {Array} arr\r\n   * @returns {Number}\r\n   */\n  var arrayMax = function (arr) {\n    return Math.max.apply(undefined, arr);\n  };\n\n  /**\r\n   * Returns the maximum number in an array\r\n   * @param {Array} arr\r\n   * @returns {Number}\r\n   */\n  var arrayMin = function (arr) {\n    return Math.min.apply(undefined, arr);\n  };\n\n  /**\r\n   * Checks to see if two arrays are equal\r\n   * @param {Array} arr1 \r\n   * @param {Array} arr2 \r\n   */\n  var arrayEqual = function (arr1, arr2) {\n    arr1.sort();\n    arr2.sort();\n\n    // The must be of the same length\n    if (arr1.length === arr2.length) {\n      for (var i = 0; i < arr1.length; i++) {\n        // If any two items don't match we're done\n        if (arr1[i] !== arr2[i]) {\n          return false;\n        }\n      }\n      // Otherwise they're equal\n      return true;\n    }\n    return false;\n  };\n\n  /**\r\n   * Clones array with clonable items\r\n   * @param {Array} arr\r\n   * @returns {Array}\r\n   */\n  var arrayClone = function (arr) {\n    var new_array = [],\n      l = arr.length;\n    for (var i = 0; i < l; i++) new_array[i] = arr[i].clone();\n    return new_array;\n  };\n\n  /**\r\n   * Fills numbers between array values\r\n   * @param {Numbers[]} arr\r\n   * @param {Integer} slices\r\n   */\n  var arrayAddSlices = function (arr, slices) {\n    slices = slices || 20;\n    var retval = [];\n    var c, delta, e;\n    retval.push(arr[0]); //push the beginning\n    for (var i = 0; i < arr.length - 1; i++) {\n      c = arr[i];\n      delta = arr[i + 1] - c; //get the difference\n      e = delta / slices; //chop it up in the desired number of slices\n      for (var j = 0; j < slices; j++) {\n        c += e; //add the mesh to the last slice\n        retval.push(c);\n      }\n    }\n    return retval;\n  };\n\n  /**\r\n   * Gets nth roots of a number\r\n   * @param {Symbol} symbol\r\n   * @returns {Vector}\r\n   */\n  var nroots = function (symbol) {\n    var a, b;\n    if (symbol.group === FN && symbol.fname === '') {\n      a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\n      b = _.parse(symbol.power);\n    } else if (symbol.group === P) {\n      a = _.parse(symbol.value);\n      b = _.parse(symbol.power);\n    }\n    if (a && b && a.group === N && b.group === N && a.multiplier.isNegative()) {\n      var _roots = [];\n      var parts = Symbol.toPolarFormArray(evaluate(symbol));\n      var r = parts[0];\n\n      //var r = _.parse(a).abs().toString();\n\n      //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n      var x = _.arg(a);\n      var n = b.multiplier.den.toString();\n      var p = b.multiplier.num.toString();\n      var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\n      for (var i = 0; i < n; i++) {\n        var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n        _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\n      }\n      return Vector.fromArray(_roots);\n    } else if (symbol.isConstant(true, true)) {\n      var sign = symbol.sign();\n      var x = evaluate(symbol.abs());\n      var root = _.sqrt(x);\n      var _roots = [root.clone(), root.negate()];\n      if (sign < 0) _roots = _roots.map(function (x) {\n        return _.multiply(x, Symbol.imaginary());\n      });\n    } else {\n      _roots = [_.parse(symbol)];\n    }\n    return Vector.fromArray(_roots);\n  };\n\n  /**\r\n   * Sorts and array given 2 parameters\r\n   * @param {String} a\r\n   * @param {String} b\r\n   */\n  var comboSort = function (a, b) {\n    var l = a.length,\n      combined = []; //the linker\n    for (var i = 0; i < a.length; i++) {\n      combined.push([a[i], b[i]]); //create the map\n    }\n    combined.sort(function (x, y) {\n      return x[0] - y[0];\n    });\n    var na = [],\n      nb = [];\n    for (i = 0; i < l; i++) {\n      na.push(combined[i][0]);\n      nb.push(combined[i][1]);\n    }\n    return [na, nb];\n  };\n  /**\r\n   * TODO: Pick a more descriptive name and better description\r\n   * Breaks a function down into it's parts wrt to a variable, mainly coefficients\r\n   * Example a*x^2+b wrt x\r\n   * @param {Symbol} fn\r\n   * @param {String} wrt\r\n   * @param {bool} as_obj\r\n   */\n  var decompose_fn = function (fn, wrt, as_obj) {\n    wrt = String(wrt); //convert to string\n    var ax, a, x, b;\n    if (fn.group === CP) {\n      var t = _.expand(fn.clone()).stripVar(wrt);\n      ax = _.subtract(fn.clone(), t.clone());\n      b = t;\n    } else ax = fn.clone();\n    a = ax.stripVar(wrt);\n    x = _.divide(ax.clone(), a.clone());\n    b = b || new Symbol(0);\n    if (as_obj) return {\n      a: a,\n      x: x,\n      ax: ax,\n      b: b\n    };\n    return [a, x, ax, b];\n  };\n  /**\r\n   * Rounds a number up to x decimal places\r\n   * @param {Number} x\r\n   * @param {Number} s\r\n   */\n  var nround = function (x, s) {\n    if (isInt(x)) {\n      if (x >= Number.MAX_VALUE) return x.toString();\n      return Number(x);\n    }\n    s = typeof s === 'undefined' ? 14 : s;\n    return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);\n  };\n\n  /**\r\n   * Is used for u-substitution. Gets a suitable u for substitution. If for\r\n   * instance a is used in the symbol then it keeps going down the line until\r\n   * one is found that's not in use. If all letters are taken then it\r\n   * starts appending numbers.\r\n   * IMPORTANT! It assumes that the substitution will be undone\r\n   * beore the user gets to interact with the object again.\r\n   * @param {Symbol} symbol\r\n   */\n  var getU = function (symbol) {\n    //start with u\n    var u = 'u',\n      //start with u\n      v = u,\n      //init with u\n      c = 0,\n      //postfix number\n      vars = variables(symbol);\n    //make sure this variable isn't reserved and isn't in the variable list\n    while (!(RESERVED.indexOf(v) === -1 && vars.indexOf(v) === -1)) v = u + c++;\n    //get an empty slot. It seems easier to just push but the\n    //problem is that we may have some which are created by clearU\n    for (var i = 0, l = RESERVED.length; i <= l; i++)\n    //reserved cannot equals false or 0 so we can safely check for a falsy type\n    if (!RESERVED[i]) {\n      RESERVED[i] = v; //reserve the variable\n      break;\n    }\n    return v;\n  };\n\n  /**\r\n   * Clears the u variable so it's no longer reserved\r\n   * @param {String} u\r\n   */\n  var clearU = function (u) {\n    var indx = RESERVED.indexOf(u);\n    if (indx !== -1) RESERVED[indx] = undefined;\n  };\n\n  /**\r\n   * Loops through each item in object and calls function with item as param\r\n   * @param {Object|Array} obj\r\n   * @param {Function} fn\r\n   */\n  var each = function (obj, fn) {\n    if (isArray(obj)) {\n      var l = obj.length;\n      for (var i = 0; i < l; i++) fn.call(obj, i);\n    } else {\n      for (var x in obj) if (obj.hasOwnProperty(x)) fn.call(obj, x);\n    }\n  };\n\n  /**\r\n   * Checks to see if a number is an even number\r\n   * @param {Number} num\r\n   * @returns {boolean}\r\n   */\n  var even = function (num) {\n    return num % 2 === 0;\n  };\n\n  /**\r\n   * Checks to see if a fraction is divisible by 2\r\n   * @param {Number} num\r\n   * @returns {boolean}\r\n   */\n  var evenFraction = function (num) {\n    return 1 / (num % 1) % 2 === 0;\n  };\n\n  /**\r\n   * Strips duplicates out of an array\r\n   * @param {Array} arr\r\n   */\n  var arrayUnique = function (arr) {\n    var l = arr.length,\n      a = [];\n    for (var i = 0; i < l; i++) {\n      var item = arr[i];\n      if (a.indexOf(item) === -1) a.push(item);\n    }\n    return a;\n  };\n\n  /**\r\n   * Gets all the variables in an array of Symbols\r\n   * @param {Symbol[]} arr \r\n   */\n  var arrayGetVariables = function (arr) {\n    var vars = variables(arr[0], null, null, true);\n\n    //get all variables\n    for (var i = 1, l = arr.length; i < l; i++) vars = vars.concat(variables(arr[i]));\n    //remove duplicates\n    vars = arrayUnique(vars).sort();\n\n    //done\n    return vars;\n  };\n\n  /**\r\n   * Removes duplicates from an array. Returns a new array\r\n   * @param {Array} arr\r\n   * @param {Function} condition\r\n   */\n  var removeDuplicates = function (arr, condition) {\n    var conditionType = typeof condition;\n    if (conditionType !== 'function' || conditionType === 'undefined') {\n      condition = function (a, b) {\n        return a === b;\n      };\n    }\n    var seen = [];\n    while (arr.length) {\n      var a = arr[0];\n      //only one element left so we're done\n      if (arr.length === 1) {\n        seen.push(a);\n        break;\n      }\n      var temp = [];\n      seen.push(a); //we already scanned these\n      for (var i = 1; i < arr.length; i++) {\n        var b = arr[i];\n        //if the number is outside the specified tolerance\n        if (!condition(a, b)) temp.push(b);\n      }\n      //start over with the remainder\n      arr = temp;\n    }\n    return seen;\n  };\n\n  /**\r\n   * Reserves the names in an object so they cannot be used as function names\r\n   * @param {Object} obj\r\n   */\n  var reserveNames = function (obj) {\n    var add = function (item) {\n      if (RESERVED.indexOf(item) === -1) RESERVED.push(item);\n    };\n    if (typeof obj === 'string') add(obj);else {\n      each(obj, function (x) {\n        add(x);\n      });\n    }\n  };\n\n  /**\r\n   * Removes an item from either an array or an object. If the object is an array, the index must be\r\n   * specified after the array. If it's an object then the key must be specified\r\n   * @param {Object|Array} obj\r\n   * @param {Integer} indexOrKey\r\n   */\n  var remove = function (obj, indexOrKey) {\n    var result;\n    if (isArray(obj)) {\n      result = obj.splice(indexOrKey, 1)[0];\n    } else {\n      result = obj[indexOrKey];\n      delete obj[indexOrKey];\n    }\n    return result;\n  };\n\n  /**\r\n   * Creates a temporary block in which one of the global settings is temporarily modified while\r\n   * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\r\n   * answer for a period you would set PARSE2NUMBER to true in the block.\r\n   * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\r\n   * @param {String} setting - The setting being accessed\r\n   * @param {Function} f\r\n   * @param {boolean} opt - The value of the setting in the block\r\n   * @param {String} obj - The obj of interest. Usually a Symbol but could be any object\r\n   */\n  var block = function (setting, f, opt, obj) {\n    var current_setting = Settings[setting];\n    Settings[setting] = opt === undefined ? true : !!opt;\n    var retval = f.call(obj);\n    Settings[setting] = current_setting;\n    return retval;\n  };\n\n  /**\r\n   * provide a mechanism for accessing functions directly. Not yet complete!!!\r\n   * Some functions will return undefined. This can maybe just remove the\r\n   * function object at some point when all functions are eventually\r\n   * housed in the global function object. Returns ALL parser available\r\n   * functions. Parser.functions may not contain all functions\r\n   */\n  var importFunctions = function () {\n    var o = {};\n    for (var x in _.functions) o[x] = _.functions[x][0];\n    return o;\n  };\n\n  /**\r\n   * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\r\n   * @param {Array|object} obj\r\n   */\n  var arguments2Array = function (obj) {\n    return [].slice.call(obj);\n  };\n\n  /**\r\n   * Returns the coefficients of a symbol given a variable. Given ax^2+b^x+c, it divides\r\n   * each nth term by x^n.\r\n   * @param {Symbol} symbol\r\n   * @param {Symbol} wrt\r\n   */\n  var getCoeffs = function (symbol, wrt, info) {\n    var coeffs = [];\n    //we loop through the symbols and stick them in their respective\n    //containers e.g. y*x^2 goes to index 2\n    symbol.each(function (term) {\n      if (term.contains(wrt)) {\n        //we want only the coefficient which in this case will be everything but the variable\n        //e.g. a*b*x -> a*b if the variable to solve for is x\n        var coeff = term.stripVar(wrt),\n          x = _.divide(term.clone(), coeff.clone()),\n          p = x.power.toDecimal();\n      } else {\n        coeff = term;\n        p = 0;\n      }\n      var e = coeffs[p];\n      //if it exists just add it to it\n      coeffs[p] = e ? _.add(e, coeff) : coeff;\n    }, true);\n    for (var i = 0; i < coeffs.length; i++) if (!coeffs[i]) coeffs[i] = new Symbol(0);\n    //fill the holes\n    return coeffs;\n  };\n\n  /**\r\n   * As the name states. It forces evaluation of the expression\r\n   * @param {Symbol} symbol\r\n   * @param {Symbol} o\r\n   */\n  var evaluate = function (symbol, o) {\n    return block('PARSE2NUMBER', function () {\n      return _.parse(symbol, o);\n    }, true);\n  };\n\n  /**\r\n   * Converts an array to a vector. Consider moving this to Vector.fromArray\r\n   * @param {String[]|String|Symbol|Number|Number[]} x\r\n   */\n  var convertToVector = function (x) {\n    if (isArray(x)) {\n      var vector = new Vector([]);\n      for (var i = 0; i < x.length; i++) vector.elements.push(convertToVector(x[i]));\n      return vector;\n    }\n    //Ensure that a nerdamer ready object is returned\n    if (!isSymbol(x)) return _.parse(x);\n    return x;\n  };\n\n  /**\r\n   * Generates prime numbers up to a specified number\r\n   * @param {Number} upto\r\n   */\n  var generatePrimes = function (upto) {\n    //get the last prime in the array\n    var last_prime = PRIMES[PRIMES.length - 1] || 2;\n    //no need to check if we've already encountered the number. Just check the cache.\n    for (var i = last_prime; i < upto; i++) {\n      if (isPrime(i)) PRIMES.push(i);\n    }\n  };\n  /**\r\n   * Checks to see if all arguments are numbers\r\n   * @param {object} args\r\n   */\n  var allNumbers = function (args) {\n    for (var i = 0; i < args.length; i++) if (args[i].group !== N) return false;\n    return true;\n  };\n  /*\r\n   * Checks if all arguments aren't just all number but if they\r\n   * are constants as well e.g. pi, e.\r\n   * @param {object} args\r\n   */\n  var allConstants = function (args) {\n    for (var i = 0; i < args.length; i++) {\n      if (args[i].isPi() || args[i].isE()) continue;\n      if (!args[i].isConstant(true)) return false;\n    }\n    return true;\n  };\n\n  /**\r\n   * Used to multiply two expression in expanded form\r\n   * @param {Symbol} a\r\n   * @param {Symbol} b\r\n   */\n  var mix = function (a, b, opt) {\n    // Flip them if b is a CP or PL and a is not\n    if (b.isComposite() && !a.isComposite() || b.isLinear() && !a.isLinear()) {\n      [a, b] = [b, a];\n    }\n    // A temporary variable to hold the expanded terms\n    var t = new Symbol(0);\n    if (a.isLinear()) {\n      a.each(function (x) {\n        // If b is not a PL or a CP then simply multiply it\n        if (!b.isComposite()) {\n          var term = _.multiply(_.parse(x), _.parse(b));\n          t = _.add(t, _.expand(term, opt));\n        }\n        // Otherwise multiply out each term.\n        else if (b.isLinear()) {\n          b.each(function (y) {\n            var term = _.multiply(_.parse(x), _.parse(y));\n            var expanded = _.expand(_.parse(term), opt);\n            t = _.add(t, expanded);\n          }, true);\n        } else {\n          t = _.add(t, _.multiply(x, _.parse(b)));\n        }\n      }, true);\n    } else {\n      // Just multiply them together\n      t = _.multiply(a, b);\n    }\n\n    // The expanded function is now t\n    return t;\n  };\n\n  //Exceptions ===================================================================\n  //Is thrown for division by zero\n  var DivisionByZero = customError('DivisionByZero');\n  // Is throw if an error occured during parsing\n  var ParseError = customError('ParseError');\n  // Is thrown if the expression results in undefined\n  var UndefinedError = customError('UndefinedError');\n  // Is throw input is out of the function domain\n  var OutOfFunctionDomainError = customError('OutOfFunctionDomainError');\n  // Is throw if a function exceeds x amount of iterations\n  var MaximumIterationsReached = customError('MaximumIterationsReached');\n  // Is thrown if the parser receives an incorrect type\n  var NerdamerTypeError = customError('NerdamerTypeError');\n  // Is thrown if bracket parity is not correct\n  var ParityError = customError('ParityError');\n  // Is thrown if an unexpectd or incorrect operator is encountered\n  var OperatorError = customError('OperatorError');\n  // Is thrown if an index is out of range.\n  var OutOfRangeError = customError('OutOfRangeError');\n  // Is thrown if dimensions are incorrect. Mostly for matrices\n  var DimensionError = customError('DimensionError');\n  // Is thrown if variable name violates naming rule\n  var InvalidVariableNameError = customError('InvalidVariableNameError');\n  // Is thrown if the limits of the library are exceeded for a function\n  // This can be that the function become unstable passed a value\n  var ValueLimitExceededError = customError('ValueLimitExceededError');\n  // Is throw if the value is an incorrect LH or RH value\n  var NerdamerValueError = customError('NerdamerValueError');\n  // Is thrown if the value is an incorrect LH or RH value\n  var SolveError = customError('SolveError');\n  // Is thrown for an infinite loop\n  var InfiniteLoopError = customError('InfiniteLoopError');\n  // Is thrown if an operator is found when there shouldn't be one\n  var UnexpectedTokenError = customError('UnexpectedTokenError');\n  var exceptions = {\n    DivisionByZero: DivisionByZero,\n    ParseError: ParseError,\n    OutOfFunctionDomainError: OutOfFunctionDomainError,\n    UndefinedError: UndefinedError,\n    MaximumIterationsReached: MaximumIterationsReached,\n    NerdamerTypeError: NerdamerTypeError,\n    ParityError: ParityError,\n    OperatorError: OperatorError,\n    OutOfRangeError: OutOfRangeError,\n    DimensionError: DimensionError,\n    InvalidVariableNameError: InvalidVariableNameError,\n    ValueLimitExceededError: ValueLimitExceededError,\n    NerdamerValueError: NerdamerValueError,\n    SolveError: SolveError,\n    InfiniteLoopError: InfiniteLoopError,\n    UnexpectedTokenError: UnexpectedTokenError\n  };\n  //Math2 ========================================================================\n  //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.\n  //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the\n  //functions within are pretty self-explanatory.\n  //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.\n  var Math2 = {\n    csc: function (x) {\n      return 1 / Math.sin(x);\n    },\n    sec: function (x) {\n      return 1 / Math.cos(x);\n    },\n    cot: function (x) {\n      return 1 / Math.tan(x);\n    },\n    acsc: function (x) {\n      return Math.asin(1 / x);\n    },\n    asec: function (x) {\n      return Math.acos(1 / x);\n    },\n    acot: function (x) {\n      return Math.PI / 2 - Math.atan(x);\n    },\n    // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8\n    erf: function (x) {\n      var t = 1 / (1 + 0.5 * Math.abs(x));\n      var result = 1 - t * Math.exp(-x * x - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277)))))))));\n      return x >= 0 ? result : -result;\n    },\n    diff: function (f) {\n      var h = 0.001;\n      var derivative = function (x) {\n        return (f(x + h) - f(x - h)) / (2 * h);\n      };\n      return derivative;\n    },\n    median: function (...values) {\n      values.sort(function (a, b) {\n        return a - b;\n      });\n      var half = Math.floor(values.length / 2);\n      if (values.length % 2) return values[half];\n      return (values[half - 1] + values[half]) / 2.0;\n    },\n    /*\r\n     * Reverses continued fraction calculation\r\n     * @param {obj} contd\r\n     * @returns {Number}\r\n     */\n    fromContinued: function (contd) {\n      var arr = contd.fractions.slice();\n      var e = 1 / arr.pop();\n      for (var i = 0, l = arr.length; i < l; i++) {\n        e = 1 / (arr.pop() + e);\n      }\n      return contd.sign * (contd.whole + e);\n    },\n    /*\r\n     * Calculates continued fractions\r\n     * @param {Number} n\r\n     * @param {Number} x The number of places\r\n     * @returns {Number}\r\n     */\n    continuedFraction: function (n, x) {\n      x = x || 20;\n      var sign = Math.sign(n); /*store the sign*/\n      var absn = Math.abs(n); /*get the absolute value of the number*/\n      var whole = Math.floor(absn); /*get the whole*/\n      var ni = absn - whole; /*subtract the whole*/\n      var c = 0; /*the counter to keep track of iterations*/\n      var done = false;\n      var epsilon = 1e-14;\n      var max = 1e7;\n      var e, w;\n      var retval = {\n        whole: whole,\n        sign: sign,\n        fractions: []\n      };\n      /*start calculating*/\n      while (!done && ni !== 0) {\n        /*invert and get the whole*/\n        e = 1 / ni;\n        w = Math.floor(e);\n        if (w > max) {\n          /*this signals that we may have already gone too far*/\n          var d = Math2.fromContinued(retval) - n;\n          if (d <= Number.EPSILON) break;\n        }\n        /*add to result*/\n        retval.fractions.push(w);\n        /*move the ni to the decimal*/\n        ni = e - w;\n        /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/\n        if (ni <= epsilon || c >= x - 1) done = true;\n        c++;\n      }\n      /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/\n      var idx = retval.fractions.length - 1;\n      if (retval.fractions[idx] === 1) {\n        retval.fractions.pop();\n        /*increase the last one by one*/\n        retval.fractions[--idx]++;\n      }\n      return retval;\n    },\n    bigpow: function (n, p) {\n      if (!(n instanceof Frac)) n = Frac.create(n);\n      if (!(p instanceof Frac)) p = Frac.create(p);\n      var retval = new Frac(0);\n      if (p.isInteger()) {\n        retval.num = n.num.pow(p.toString());\n        retval.den = n.den.pow(p.toString());\n      } else {\n        var num = Frac.create(Math.pow(n.num, p.num));\n        var den = Frac.create(Math.pow(n.den, p.num));\n        retval.num = Math2.nthroot(num, p.den.toString());\n        retval.den = Math2.nthroot(den, p.den);\n      }\n      return retval;\n    },\n    //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals\n    gamma: function (z) {\n      var g = 7;\n      var C = [0.99999999999980993, 676.5203681218851, -1259.1392167224028, 771.32342877765313, -176.61502916214059, 12.507343278686905, -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7];\n      if (z < 0.5) return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));else {\n        z -= 1;\n        var x = C[0];\n        for (var i = 1; i < g + 2; i++) x += C[i] / (z + i);\n        var t = z + g + 0.5;\n        return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n      }\n    },\n    //factorial\n    bigfactorial: function (x) {\n      var retval = new bigInt(1);\n      for (var i = 2; i <= x; i++) retval = retval.times(i);\n      return new Frac(retval);\n    },\n    //https://en.wikipedia.org/wiki/Logarithm#Calculation\n    bigLog: function (x) {\n      varn      if (CACHE[x]) {\n        return Frac.quick.apply(null, CACHE[x].split('/'));\n      }\n      x = new Frac(x);\n      var n = 80;\n      var retval = new Frac(0);\n      var a = x.subtract(new Frac(1));\n      var b = x.add(new Frac(1));\n      for (var i = 0; i < n; i++) {\n        var t = new Frac(2 * i + 1);\n        var k = Math2.bigpow(a.divide(b), t);\n        var r = t.clone().invert().multiply(k);\n        retval = retval.add(r);\n      }\n      return retval.multiply(new Frac(2));\n    },\n    //the factorial function but using the big library instead\n    factorial: function (x) {\n      var is_int = x % 1 === 0;\n\n      /*factorial for negative integers is complex infinity according to Wolfram Alpha*/\n      if (is_int && x < 0) return NaN;\n      if (!is_int) return Math2.gamma(x + 1);\n      var retval = 1;\n      for (var i = 2; i <= x; i++) retval = retval * i;\n      return retval;\n    },\n    //double factorial\n    //http://mathworld.wolfram.com/DoubleFactorial.html\n    dfactorial: function (x) {\n      if (isInt(x)) {\n        var even = x % 2 === 0;\n        /* If x = even then n = x/2 else n = (x-1)/2*/\n        var n = even ? x / 2 : (x + 1) / 2;\n        /*the return value*/\n        var r = new Frac(1);\n        /*start the loop*/\n        if (even) for (var i = 1; i <= n; i++) r = r.multiply(new Frac(2).multiply(new Frac(i)));else for (var i = 1; i <= n; i++) r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));\n      } else {\n        /*Not yet extended to bigNum*/\n        r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);\n      }\n\n      /*done*/\n      return r;\n    },\n    GCD: function () {\n      var args = arrayUnique([].slice.call(arguments).map(function (x) {\n          return Math.abs(x);\n        })).sort(),\n        a = Math.abs(args.shift()),\n        n = args.length;\n      while (n-- > 0) {\n        var b = Math.abs(args.shift());\n        while (true) {\n          a %= b;\n          if (a === 0) {\n            a = b;\n            break;\n          }\n          b %= a;\n          if (b === 0) break;\n          ;\n        }\n      }\n      return a;\n    },\n    QGCD: function () {\n      var args = [].slice.call(arguments);\n      var a = args[0];\n      for (var i = 1; i < args.length; i++) {\n        var b = args[i];\n        var sign = a.isNegative() && b.isNegative() ? -1 : 1;\n        a = b.gcd(a);\n        if (sign < 0) a.negate();\n      }\n      return a;\n    },\n    LCM: function (a, b) {\n      return a * b / Math2.GCD(a, b);\n    },\n    //pow but with the handling of negative numbers\n    //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number\n    pow: function (b, e) {\n      if (b < 0) {\n        if (Math.abs(e) < 1) {\n          /*nth root of a negative number is imaginary when n is even*/\n          if (1 / e % 2 === 0) return NaN;\n          return -Math.pow(Math.abs(b), e);\n        }\n      }\n      return Math.pow(b, e);\n    },\n    factor: function (n) {\n      n = Number(n);\n      var sign = Math.sign(n); /*store the sign*/\n      /*move the number to absolute value*/\n      n = Math.abs(n);\n      var ifactors = Math2.ifactor(n);\n      var factors = new Symbol();\n      factors.symbols = {};\n      factors.group = CB;\n      for (var x in ifactors) {\n        var factor = new Symbol(1);\n        factor.group = P; /*cheat a little*/\n        factor.value = x;\n        factor.power = new Symbol(ifactors[x]);\n        factors.symbols[x] = factor;\n      }\n      factors.updateHash();\n      if (n === 1) {\n        factors = new Symbol(n);\n      }\n\n      /*put back the sign*/\n      if (sign < 0) factors.negate();\n      return factors;\n    },\n    /**\r\n     * Uses trial division\r\n     * @param {Integer} n - the number being factored\r\n     * @param {object} factors -  the factors object\r\n     * @returns {object}\r\n     */\n    sfactor: function (n, factors) {\n      factors = factors || {};\n      var r = Math.floor(Math.sqrt(n));\n      var lcprime = PRIMES[PRIMES.length - 1];\n      /*a one-time cost... Hopefully ... And don't bother for more than a million*/\n      /*takes too long*/\n      if (r > lcprime && n < 1e6) generatePrimes(r);\n      var l = PRIMES.length;\n      for (var i = 0; i < l; i++) {\n        var prime = PRIMES[i];\n        /*trial division*/\n        while (n % prime === 0) {\n          n = n / prime;\n          factors[prime] = (factors[prime] || 0) + 1;\n        }\n      }\n      if (n > 1) factors[n] = 1;\n      return factors;\n    },\n    /**\r\n     * Pollard's rho\r\n     * @param {Integer} n\r\n     * @returns {object}\r\n     */\n    ifactor: function (n) {\n      var input = new bigInt(n);\n      n = String(n);\n      if (n === '0') return {\n        '0': 1\n      };\n      n = new bigInt(n); /*convert to bigInt for safety*/\n      var sign = n.sign ? -1 : 1;\n      n = n.abs();\n      var factors = {}; /*factor object being returned.*/\n      if (n.lt('65536')) {\n        /*less than 2^16 just use trial division*/\n        factors = Math2.sfactor(n, factors);\n      } else {\n        var add = function (e) {\n          if (!e.isPrime()) {\n            factors = Math2.sfactor(e, factors);\n          } else factors[e] = (factors[e] || 0) + 1;\n        };\n        try {\n          //set a safety\n          var max = 1e3;\n          var safety = 0;\n          while (!n.abs().equals(1)) {\n            if (n.isPrime()) {\n              add(n);\n              break;\n            } else {\n              function rho(c) {\n                var xf = new bigInt(c),\n                  cz = 2,\n                  x = new bigInt(c),\n                  factor = new bigInt(1);\n                while (factor.equals(1)) {\n                  for (var i = 0; i <= cz && factor.equals(1); i++) {\n                    //trigger the safety\n                    if (safety++ > max) throw new Error('stopping');\n                    x = x.pow(2).add(1).mod(n);\n                    factor = bigInt.gcd(x.minus(xf).abs(), n);\n                  }\n                  cz = cz * 2;\n                  xf = x;\n                }\n                if (factor.equals(n)) {\n                  return rho(c + 1);\n                }\n                return factor;\n              }\n              var factor = rho(2);\n              add(factor);\n              /*divide out the factor*/\n              n = n.divide(factor);\n            }\n          }\n        } catch (e) {\n          //reset factors\n          factors = {};\n          add(input);\n        }\n      }\n\n      /*put the sign back*/\n      if (sign === -1) {\n        var sm = arrayMin(keys(factors)); /*/get the smallest number*/\n        factors['-' + sm] = factors[sm];\n        delete factors[sm];\n      }\n      return factors;\n    },\n    //factors a number into rectangular box. If sides are primes that this will be\n    //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)\n    boxfactor: function (n, max) {\n      max = max || 200; //stop after this number of iterations\n      var c,\n        r,\n        d = Math.floor(5 / 12 * n),\n        //the divisor\n        i = 0,\n        //number of iterations\n        safety = false;\n      while (true) {\n        c = Math.floor(n / d);\n        r = n % d;\n        if (r === 0) break; //we're done\n        if (safety) return [n, 1];\n        d = Math.max(r, d - r);\n        i++;\n        safety = i > max;\n      }\n      return [c, d, i];\n    },\n    fib: function (n) {\n      var sign = Math.sign(n);\n      n = Math.abs(n);\n      sign = even(n) ? sign : Math.abs(sign);\n      var a = 0,\n        b = 1,\n        f = 1;\n      for (var i = 2; i <= n; i++) {\n        f = a + b;\n        a = b;\n        b = f;\n      }\n      return f * sign;\n    },\n    mod: function (x, y) {\n      return x % y;\n    },\n    //http://mathworld.wolfram.com/IntegerPart.html\n    integer_part: function (x) {\n      var sign = Math.sign(x);\n      return sign * Math.floor(Math.abs(x));\n    },\n    simpson: function (f, a, b, step) {\n      var get_value = function (f, x, side) {\n        var v = f(x);\n        var d = 0.000000000001;\n        if (isNaN(v)) {\n          v = f(side === 1 ? x + d : x - d);\n        }\n        return v;\n      };\n      step = step || 0.0001;\n      //calculate the number of intervals\n      var n = Math.abs(Math.floor((b - a) / step));\n      //simpson's rule requires an even number of intervals. If it's not then add 1\n      if (n % 2 !== 0) n++;\n      //get the interval size\n      var dx = (b - a) / n;\n      //get x0\n      var retval = get_value(f, a, 1);\n\n      //get the middle part 4x1+2x2+4x3 ...\n      //but first set a flag to see if it's even or odd.\n      //The first one is odd so we start there\n      var even = false;\n      //get x1\n      var xi = a + dx;\n      //the coefficient\n      var c, k;\n      //https://en.wikipedia.org/wiki/Simpson%27s_rule\n      for (var i = 1; i < n; i++) {\n        c = even ? 2 : 4;\n        k = c * get_value(f, xi, 1);\n        retval += k;\n        //flip the even flag\n        even = !even;\n        //increment xi\n        xi += dx;\n      }\n\n      //add xn\n      return (retval + get_value(f, xi, 2)) * (dx / 3);\n    },\n    /**\r\n     * https://github.com/scijs/integrate-adaptive-simpson\r\n     * @param {Function} f - the function being integrated\r\n     * @param {Number} a - lower bound\r\n     * @param {Number} b - upper bound\r\n     * @param {Number} tol - step width\r\n     * @param {Number} maxdepth\r\n     * @returns {Number}\r\n     */\n    num_integrate: function (f, a, b, tol, maxdepth) {\n      if (maxdepth < 0) throw new Error('max depth cannot be negative');\n\n      /* This algorithm adapted from pseudocode in:*/\n      /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/\n      function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\n        if (state.nanEncountered) {\n          return NaN;\n        }\n        var h, f1, f2, sl, sr, s2, m, V1, V2, err;\n        h = b - a;\n        f1 = f(a + h * 0.25);\n        f2 = f(b - h * 0.25);\n        /* Simple check for NaN:*/\n        if (isNaN(f1)) {\n          state.nanEncountered = true;\n          return;\n        }\n        /* Simple check for NaN:*/\n        if (isNaN(f2)) {\n          state.nanEncountered = true;\n          return;\n        }\n        sl = h * (fa + 4 * f1 + fm) / 12;\n        sr = h * (fm + 4 * f2 + fb) / 12;\n        s2 = sl + sr;\n        err = (s2 - V0) / 15;\n        if (state.maxDepthCount > 1000 * maxdepth) {\n          return;\n        }\n        if (depth > maxdepth) {\n          state.maxDepthCount++;\n          return s2 + err;\n        } else if (Math.abs(err) < tol) {\n          return s2 + err;\n        } else {\n          m = a + h * 0.5;\n          V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\n          if (isNaN(V1)) {\n            state.nanEncountered = true;\n            return NaN;\n          }\n          V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\n          if (isNaN(V2)) {\n            state.nanEncountered = true;\n            return NaN;\n          }\n          return V1 + V2;\n        }\n      }\n      function integrate(f, a, b, tol, maxdepth) {\n        var state = {\n          maxDepthCount: 0,\n          nanEncountered: false\n        };\n        if (tol === undefined) {\n          tol = 1e-9;\n        }\n        if (maxdepth === undefined) {\n          /*Issue #458 - This was lowered because of performance issues. */\n          /*This was suspected from before but is now confirmed with this issue*/\n          maxdepth = 45;\n        }\n        var fa = f(a);\n        var fm = f(0.5 * (a + b));\n        var fb = f(b);\n        var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\n        var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\n        if (state.maxDepthCount > 0) {\n          warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\n        }\n        if (state.nanEncountered) {\n          throw new Error('Function does not converge over interval!');\n        }\n        return result;\n      }\n      var retval;\n      try {\n        retval = integrate(f, a, b, tol, maxdepth);\n      } catch (e) {\n        /*fallback to non-adaptive*/\n        return Math2.simpson(f, a, b);\n      }\n      return nround(retval, 12);\n    },\n    //https://en.wikipedia.org/wiki/Trigonometric_integral\n    //CosineIntegral\n    Ci: function (x) {\n      var n = 20,\n        /*roughly Euler–Mascheroni*/\n        g = 0.5772156649015329,\n        sum = 0;\n      for (var i = 1; i < n; i++) {\n        /*cache 2n*/\n        var n2 = 2 * i;\n        sum += Math.pow(-1, i) * Math.pow(x, n2) / (n2 * Math2.factorial(n2));\n      }\n      return Math.log(x) + g + sum;\n    },\n    /*SineIntegral*/\n    Si: function (x) {\n      var n = 20,\n        sum = 0;\n      for (var i = 0; i < n; i++) {\n        var n2 = 2 * i;\n        sum += Math.pow(-1, i) * Math.pow(x, n2 + 1) / ((n2 + 1) * Math2.factorial(n2 + 1));\n      }\n      return sum;\n    },\n    /*ExponentialIntegral*/\n    Ei: function (x) {\n      if (Number(x) === 0) return -Infinity;\n      var n = 30,\n        g = 0.5772156649015328606,\n        /*roughly Euler–Mascheroni*/\n        sum = 0;\n      for (var i = 1; i < n; i++) {\n        sum += Math.pow(x, i) / (i * Math2.factorial(i));\n      }\n      return g + Math.abs(Math.log(x)) + sum;\n    },\n    /*Hyperbolic Sine Integral*/\n    /*http://mathworld.wolfram.com/Shi.html*/\n    Shi: function (x) {\n      var n = 30,\n        sum = 0,\n        k,\n        t;\n      for (var i = 0; i < n; i++) {\n        k = 2 * i;\n        t = k + 1;\n        sum += Math.pow(x, t) / (t * t * Math2.factorial(k));\n      }\n      return sum;\n    },\n    /*the cosine integral function*/\n    Chi: function (x) {\n      var dx, g, f;\n      dx = 0.001;\n      g = 0.5772156649015328606;\n      f = function (t) {\n        return (Math.cosh(t) - 1) / t;\n      };\n      return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);\n    },\n    /*the log integral*/\n    Li: function (x) {\n      return Math2.Ei(Math2.bigLog(x));\n    },\n    /*the gamma incomplete function*/\n    gamma_incomplete: function (n, x) {\n      var t = n - 1,\n        sum = 0,\n        x = x || 0;\n      for (var i = 0; i < t; i++) {\n        sum += Math.pow(x, i) / Math2.factorial(i);\n      }\n      return Math2.factorial(t) * Math.exp(-x) * sum;\n    },\n    /*\r\n     * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n     * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html\r\n     * if x > 0 then 1\r\n     * if x == 0 then 1/2\r\n     * if x < 0 then 0\r\n     */\n    step: function (x) {\n      if (x > 0) return 1;\n      if (x < 0) return 0;\n      return 0.5;\n    },\n    /*\r\n     * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n     * Specification : http://mathworld.wolfram.com/RectangleFunction.html\r\n     * if |x| > 1/2 then 0\r\n     * if |x| == 1/2 then 1/2\r\n     * if |x| < 1/2 then 1\r\n     */\n    rect: function (x) {\n      var x = Math.abs(x);\n      if (x === 0.5) return x;\n      if (x > 0.5) return 0;\n      return 1;\n    },\n    /*\r\n     * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n     * Specification : http://mathworld.wolfram.com/SincFunction.html\r\n     * if x == 0 then 1\r\n     * otherwise sin(x)/x\r\n     */\n    sinc: function (x) {\n      if (x.equals(0)) return 1;\n      return Math.sin(x) / x;\n    },\n    /*\r\n     * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n     * Specification : http://mathworld.wolfram.com/TriangleFunction.html\r\n     * if |x| >= 1 then 0\r\n     * if |x| < then 1-|x|\r\n     */\n    tri: function (x) {\n      x = Math.abs(x);\n      if (x >= 1) return 0;\n      return 1 - x;\n    },\n    //https://en.wikipedia.org/wiki/Nth_root_algorithm\n    nthroot: function (A, n) {\n      /*make sure the input is of type Frac*/\n      if (!(A instanceof Frac)) A = new Frac(A.toString());\n      if (!(n instanceof Frac)) n = new Frac(n.toString());\n      if (n.equals(1)) return A;\n      /*begin algorithm*/\n      var xk = A.divide(new Frac(2)); /*x0*/\n      var e = new Frac(1e-15);\n      var dk, dk0, d0;\n      var a = n.clone().invert(),\n        b = n.subtract(new Frac(1));\n      do {\n        var powb = Math2.bigpow(xk, b);\n        var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);\n        dk = Frac.create(dk_dec);\n        if (d0) break;\n        xk = xk.add(dk);\n        /*check to see if there's no change from the last xk*/\n        var dk_dec = dk.toDecimal();\n        d0 = dk0 ? dk0 === dk_dec : false;\n        dk0 = dk_dec;\n      } while (dk.abs().gte(e));\n      return xk;\n    },\n    /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/\n    /*Just the square root function but big :)*/\n    sqrt: function (n) {\n      if (!(n instanceof Frac)) n = new Frac(n);\n      var xn, d, ld, same_delta;\n      var c = 0; /*counter*/\n      var done = false;\n      var delta = new Frac(1e-20);\n      xn = n.divide(new Frac(2));\n      var safety = 1000;\n      do {\n        /*break if we're not converging*/\n        if (c > safety) throw new Error('Unable to calculate square root for ' + n);\n        xn = xn.add(n.divide(xn)).divide(new Frac(2));\n        xn = new Frac(xn.decimal(30));\n        /*get the difference from the true square*/\n        d = n.subtract(xn.multiply(xn));\n        /*if the square of the calculated number is close enough to the number*/\n        /*we're getting the square root or the last delta was the same as the new delta*/\n        /*then we're done*/\n        same_delta = ld ? ld.equals(d) : false;\n        if (d.clone().abs().lessThan(delta) || same_delta) done = true;\n        /*store the calculated delta*/\n        ld = d;\n        c++; /*increase the counter*/\n      } while (!done);\n      return xn;\n    }\n  };\n  //link the Math2 object to Settings.FUNCTION_MODULES\n  Settings.FUNCTION_MODULES.push(Math2);\n  reserveNames(Math2); //reserve the names in Math2\n\n  //Polyfills ====================================================================\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/\n  Math.sign = Math.sign || function (x) {\n    x = +x; // convert to a number\n    if (x === 0 || isNaN(x)) {\n      return x;\n    }\n    return x > 0 ? 1 : -1;\n  };\n  Math.cosh = Math.cosh || function (x) {\n    var y = Math.exp(x);\n    return (y + 1 / y) / 2;\n  };\n  Math.sech = Math.sech || function (x) {\n    return 1 / Math.cosh(x);\n  };\n  Math.csch = Math.csch || function (x) {\n    return 1 / Math.sinh(x);\n  };\n  Math.coth = Math.coth || function (x) {\n    return 1 / Math.tanh(x);\n  };\n  Math.sinh = Math.sinh || function (x) {\n    var y = Math.exp(x);\n    return (y - 1 / y) / 2;\n  };\n  Math.tanh = Math.tanh || function (x) {\n    if (x === Infinity) {\n      return 1;\n    } else if (x === -Infinity) {\n      return -1;\n    } else {\n      var y = Math.exp(2 * x);\n      return (y - 1) / (y + 1);\n    }\n  };\n  Math.asinh = Math.asinh || function (x) {\n    if (x === -Infinity) {\n      return x;\n    } else {\n      return Math.log(x + Math.sqrt(x * x + 1));\n    }\n  };\n  Math.acosh = Math.acosh || function (x) {\n    return Math.log(x + Math.sqrt(x * x - 1));\n  };\n  Math.atanh = Math.atanh || function (x) {\n    return Math.log((1 + x) / (1 - x)) / 2;\n  };\n  Math.log10 = Math.log10 || function (x) {\n    return Math.log(x) * Math.LOG10E;\n  };\n  Math.trunc = Math.trunc || function (x) {\n    if (isNaN(x)) {\n      return NaN;\n    }\n    if (x > 0) {\n      return Math.floor(x);\n    }\n    return Math.ceil(x);\n  };\n\n  //Global functions =============================================================\n  /**\r\n   * This method will return a hash or a text representation of a Symbol, Matrix, or Vector.\r\n   * If all else fails it *assumes* the object has a toString method and will call that.\r\n   *\r\n   * @param {Object} obj\r\n   * @param {String} option get is as a hash\r\n   * @param {int} useGroup\r\n   * @returns {String}\r\n   */\n  function text(obj, option, useGroup, decp) {\n    var asHash = option === 'hash',\n      //whether to wrap numbers in brackets\n      wrapCondition = undefined,\n      opt = asHash ? undefined : option,\n      asDecimal = opt === 'decimal' || opt === 'decimals';\n    if (asDecimal && typeof decp === 'undefined') decp = Settings.DEFAULT_DECP;\n    function toString(obj) {\n      switch (option) {\n        case 'decimals':\n        case 'decimal':\n          wrapCondition = wrapCondition || function (str) {\n            return false;\n          };\n          return obj.valueOf();\n        case 'recurring':\n          wrapCondition = wrapCondition || function (str) {\n            return str.indexOf(\"'\") !== -1;\n          };\n          var str = obj.toString();\n          //verify that the string is actually a fraction\n          var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n          if (frac.length === 0) return str;\n\n          //split the fraction into the numerator and denominator\n          var parts = frac[0].split('/');\n          var negative = false;\n          var m = Number(parts[0]);\n          if (m < 0) {\n            m = -m;\n            negative = true;\n          }\n          var n = Number(parts[1]);\n          if (!n) n = 1;\n\n          //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\n          var quotient = Math.floor(m / n),\n            c = 10 * (m - quotient * n);\n          quotient = quotient.toString() + \".\";\n          while (c && c < n) {\n            c *= 10;\n            quotient += \"0\";\n          }\n          var digits = \"\",\n            passed = [],\n            i = 0;\n          while (true) {\n            if (typeof passed[c] !== 'undefined') {\n              var prefix = digits.slice(0, passed[c]),\n                cycle = digits.slice(passed[c]),\n                result = quotient + prefix + \"'\" + cycle + \"'\";\n              return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\n            }\n            var q = Math.floor(c / n),\n              r = c - q * n;\n            passed[c] = i;\n            digits += q.toString();\n            i += 1;\n            c = 10 * r;\n          }\n        case 'mixed':\n          wrapCondition = wrapCondition || function (str) {\n            return str.indexOf('/') !== -1;\n          };\n          var str = obj.toString();\n          //verify that the string is actually a fraction\n          var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n          if (frac.length === 0) return str;\n\n          //split the fraction into the numerator and denominator\n          var parts = frac[0].split('/');\n          var numer = new bigInt(parts[0]);\n          var denom = new bigInt(parts[1]);\n          if (denom.equals(0)) denom = new bigInt(1);\n\n          //return the quotient plus the remainder\n          var divmod = numer.divmod(denom);\n          var quotient = divmod.quotient;\n          var remainder = divmod.remainder;\n          var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\n          return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : remainder.toString() + '/' + parts[1]);\n        case 'scientific':\n          wrapCondition = wrapCondition || function (str) {\n            return false;\n          };\n          return new Scientific(obj.valueOf()).toString(Settings.SCIENTIFIC_MAX_DECIMAL_PLACES);\n        default:\n          wrapCondition = wrapCondition || function (str) {\n            return str.indexOf('/') !== -1;\n          };\n          return obj.toString();\n      }\n    }\n\n    //if the object is a symbol\n    if (isSymbol(obj)) {\n      var multiplier = '',\n        power = '',\n        sign = '',\n        group = obj.group || useGroup,\n        value = obj.value;\n\n      //if the value is to be used as a hash then the power and multiplier need to be suppressed\n      if (!asHash) {\n        //use asDecimal to get the object back as a decimal\n        var om = toString(obj.multiplier);\n        if (om == '-1' && String(obj.multiplier) === '-1') {\n          sign = '-';\n          om = '1';\n        }\n        //only add the multiplier if it's not 1\n        if (om != '1') multiplier = om;\n        //use asDecimal to get the object back as a decimal\n        var p = obj.power ? toString(obj.power) : '';\n        //only add the multiplier\n        if (p != '1') {\n          //is it a symbol\n          if (isSymbol(p)) {\n            power = text(p, opt);\n          } else {\n            power = p;\n          }\n        }\n      }\n      switch (group) {\n        case N:\n          multiplier = '';\n          //round if requested\n          var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier);\n          //if it's numerical then all we need is the multiplier\n          value = String(obj.multiplier) == '-1' ? '1' : m;\n          power = '';\n          break;\n        case PL:\n          value = obj.collectSymbols().map(function (x) {\n            var txt = text(x, opt, useGroup, decp);\n            if (txt == '0') txt = '';\n            return txt;\n          }).sort().join('+').replace(/\\+\\-/g, '-');\n          break;\n        case CP:\n          value = obj.collectSymbols().map(function (x) {\n            var txt = text(x, opt, useGroup, decp);\n            if (txt == '0') txt = '';\n            return txt;\n          }).sort().join('+').replace(/\\+\\-/g, '-');\n          break;\n        case CB:\n          value = obj.collectSymbols(function (symbol) {\n            var g = symbol.group;\n            //both groups will already be in brackets if their power is greater than 1\n            //so skip it.\n            if ((g === PL || g === CP) && symbol.power.equals(1) && symbol.multiplier.equals(1)) {\n              return inBrackets(text(symbol, opt));\n            }\n            return text(symbol, opt);\n          }).join('*');\n          break;\n        case EX:\n          var pg = obj.previousGroup,\n            pwg = obj.power.group;\n\n          //PL are the exception. It's simpler to just collect and set the value\n          if (pg === PL) value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\n          if (!(pg === N || pg === S || pg === FN) && !asHash) {\n            value = inBrackets(value);\n          }\n          if ((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {\n            power = inBrackets(power);\n          }\n          break;\n      }\n      if (group === FN) {\n        value = obj.fname + inBrackets(obj.args.map(function (symbol) {\n          return text(symbol, opt);\n        }).join(','));\n      }\n      //TODO: Needs to be more efficient. Maybe.\n      if (group === FN && obj.fname in CUSTOM_OPERATORS) {\n        var a = text(obj.args[0]);\n        var b = text(obj.args[1]);\n        if (obj.args[0].isComposite())\n          //preserve the brackets\n          a = inBrackets(a);\n        if (obj.args[1].isComposite())\n          //preserve the brackets\n          b = inBrackets(b);\n        value = a + CUSTOM_OPERATORS[obj.fname] + b;\n      }\n      //wrap the power since / is less than ^\n      //TODO: introduce method call isSimple\n      if (power && group !== EX && wrapCondition(power)) {\n        power = inBrackets(power);\n      }\n\n      //the following groups are held together by plus or minus. They can be raised to a power or multiplied\n      //by a multiplier and have to be in brackets to preserve the order of precedence\n      if ((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-') || (group === CB || group === CP || group === PL) && power && power != '1' || !asHash && group === P && value == -1 || obj.fname === PARENTHESIS) {\n        value = inBrackets(value);\n      }\n      if (decp && (option === 'decimal' || option === 'decimals' && multiplier)) {\n        multiplier = nround(multiplier, decp);\n      }\n\n      //add the sign back\n      var c = sign + multiplier;\n      if (multiplier && wrapCondition(multiplier)) c = inBrackets(c);\n      if (power < 0) power = inBrackets(power);\n\n      //add the multiplication back\n      if (multiplier) c = c + '*';\n      if (power) {\n        if (value === 'e' && Settings.E_TO_EXP) {\n          return c + 'exp' + inBrackets(power);\n        }\n        power = Settings.POWER_OPERATOR + power;\n      }\n\n      //this needs serious rethinking. Must fix\n      if (group === EX && value.charAt(0) === '-') {\n        value = inBrackets(value);\n      }\n      var cv = c + value;\n      if (obj.parens) {\n        cv = inBrackets(cv);\n      }\n      return cv + power;\n    } else if (isVector(obj)) {\n      var l = obj.elements.length,\n        c = [];\n      for (var i = 0; i < l; i++) c.push(obj.elements[i].text(option));\n      return '[' + c.join(',') + ']';\n    } else {\n      try {\n        return obj.toString();\n      } catch (e) {\n        return '';\n      }\n    }\n  }\n  /**\r\n   * Calculates prime factors for a number. It first checks if the number\r\n   * is a prime number. If it's not then it will calculate all the primes \r\n   * for that number.\r\n   * @param {int} num\r\n   * @returns {Array}\r\n   */\n\n  function primeFactors(num) {\n    if (isPrime(num)) {\n      return [num];\n    }\n    var l = num,\n      i = 1,\n      factors = [],\n      epsilon = 2.2204460492503130808472633361816E-16;\n    while (i < l) {\n      var quotient = num / i;\n      var whole = Math.floor(quotient);\n      var remainder = quotient - whole;\n      if (remainder <= epsilon && i > 1) {\n        // If the prime wasn't found but calculated then save it and\n        // add it as a factor.\n        if (isPrime(i)) {\n          if (PRIMES.indexOf(i) === -1) {\n            PRIMES.push(i);\n          }\n          factors.push(i);\n        }\n\n        // Check if the remainder is a prime\n        if (isPrime(whole)) {\n          factors.push(whole);\n          break;\n        }\n        l = whole;\n      }\n      i++;\n    }\n    return factors.sort(function (a, b) {\n      return a - b;\n    });\n  }\n  ;\n  primeFactors(314146179365);\n  //Expression ===================================================================\n  /**\r\n   * This is what nerdamer returns. It's sort of a wrapper around the symbol class and\r\n   * provides the user with some useful functions. If you want to provide the user with extra\r\n   * library functions then add them to this class's prototype.\r\n   * @param {Symbol} symbol\r\n   * @returns {Expression} wraps around the Symbol class\r\n   */\n  function Expression(symbol) {\n    //we don't want arrays wrapped\n    this.symbol = symbol;\n  }\n  /**\r\n   * Returns stored expression at index. For first index use 1 not 0.\r\n   * @param {bool} asType\r\n   * @param {Integer} expression_number\r\n   */\n  Expression.getExpression = function (expression_number, asType) {\n    if (expression_number === 'last' || !expression_number) expression_number = EXPRESSIONS.length;\n    if (expression_number === 'first') expression_number = 1;\n    var index = expression_number - 1,\n      expression = EXPRESSIONS[index],\n      retval = expression ? new Expression(expression) : expression;\n    return retval;\n  };\n  Expression.prototype = {\n    /**\r\n     * Returns the text representation of the expression\r\n     * @param {String} opt - option of formatting numbers\r\n     * @param {Number} n The number of significant figures\r\n     * @returns {String}\r\n     */\n    text: function (opt, n) {\n      n = n || Settings.EXPRESSION_DECP;\n      opt = opt || 'decimals';\n      if (this.symbol.text_) return this.symbol.text_(opt);\n      return text(this.symbol, opt, undefined, n);\n    },\n    /**\r\n     * Returns the latex representation of the expression\r\n     * @param {String} option - option for formatting numbers\r\n     * @returns {String}\r\n     */\n    latex: function (option) {\n      if (this.symbol.latex) return this.symbol.latex(option);\n      return LaTeX.latex(this.symbol, option);\n    },\n    valueOf: function () {\n      return this.symbol.valueOf();\n    },\n    /**\r\n     * Evaluates the expression and tries to reduce it to a number if possible.\r\n     * If an argument is given in the form of %{integer} it will evaluate that expression.\r\n     * Other than that it will just use it's own text and reparse\r\n     * @returns {Expression}\r\n     */\n    evaluate: function () {\n      // Don't evaluate an empty vector\n      if (isVector(this.symbol) && this.symbol.dimensions() === 0) {\n        return this;\n      }\n      var first_arg = arguments[0],\n        expression,\n        idx = 1;\n\n      //Enable getting of expressions using the % so for example %1 should get the first expression\n      if (typeof first_arg === 'string') {\n        expression = first_arg.charAt(0) === '%' ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;\n      } else if (first_arg instanceof Expression || isSymbol(first_arg)) {\n        expression = first_arg.text();\n      } else {\n        expression = this.symbol.text();\n        idx--;\n      }\n      var subs = arguments[idx] || {};\n      var retval = new Expression(block('PARSE2NUMBER', function () {\n        return _.parse(expression, subs);\n      }, true));\n      return retval;\n    },\n    /**\r\n     * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of\r\n     * the default alphabetical order\r\n     * @param vars {Array}\r\n     */\n    buildFunction: function (vars) {\n      return Build.build(this.symbol, vars);\n    },\n    /**\r\n     * Checks to see if the expression is just a plain old number\r\n     * @returns {boolean}\r\n     */\n    isNumber: function () {\n      return isNumericSymbol(this.symbol);\n    },\n    /**\r\n     * Checks to see if the expression is infinity\r\n     * @returns {boolean}\r\n     */\n    isInfinity: function () {\n      return Math.abs(this.symbol.multiplier) === Infinity;\n    },\n    /**\r\n     * Checks to see if the expression contains imaginary numbers\r\n     * @returns {boolean}\r\n     */\n    isImaginary: function () {\n      return evaluate(_.parse(this.symbol)).isImaginary();\n    },\n    /**\r\n     * Returns all the variables in the expression\r\n     * @returns {Array}\r\n     */\n    variables: function () {\n      return variables(this.symbol);\n    },\n    toString: function () {\n      try {\n        if (isArray(this.symbol)) return '[' + this.symbol.toString() + ']';\n        return this.symbol.toString();\n      } catch (e) {\n        return '';\n      }\n    },\n    //forces the symbol to be returned as a decimal\n    toDecimal: function (prec) {\n      Settings.precision = prec;\n      var dec = text(this.symbol, 'decimals');\n      Settings.precision = undefined;\n      return dec;\n    },\n    //checks to see if the expression is a fraction\n    isFraction: function () {\n      return isFraction(this.symbol);\n    },\n    //checks to see if the symbol is a multivariate polynomial\n    isPolynomial: function () {\n      return this.symbol.isPoly();\n    },\n    //performs a substitution\n    sub: function (symbol, for_symbol) {\n      return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));\n    },\n    operation: function (otype, symbol) {\n      if (isExpression(symbol)) symbol = symbol.symbol;else if (!isSymbol(symbol)) symbol = _.parse(symbol);\n      return new Expression(_[otype](this.symbol.clone(), symbol.clone()));\n    },\n    add: function (symbol) {\n      return this.operation('add', symbol);\n    },\n    subtract: function (symbol) {\n      return this.operation('subtract', symbol);\n    },\n    multiply: function (symbol) {\n      return this.operation('multiply', symbol);\n    },\n    divide: function (symbol) {\n      return this.operation('divide', symbol);\n    },\n    pow: function (symbol) {\n      return this.operation('pow', symbol);\n    },\n    expand: function () {\n      return new Expression(_.expand(this.symbol));\n    },\n    each: function (callback, i) {\n      if (this.symbol.each) this.symbol.each(callback, i);else if (isArray(this.symbol)) {\n        for (var i = 0; i < this.symbol.length; i++) callback.call(this.symbol, this.symbol[i], i);\n      } else callback.call(this.symbol);\n    },\n    eq: function (value) {\n      if (!isSymbol(value)) value = _.parse(value);\n      try {\n        var d = _.subtract(this.symbol.clone(), value);\n        return d.equals(0);\n      } catch (e) {\n        return false;\n      }\n      ;\n    },\n    lt: function (value) {\n      if (!isSymbol(value)) value = _.parse(value);\n      try {\n        var d = evaluate(_.subtract(this.symbol.clone(), value));\n        return d.lessThan(0);\n      } catch (e) {\n        return false;\n      }\n      ;\n    },\n    gt: function (value) {\n      if (!isSymbol(value)) value = _.parse(value);\n      try {\n        var d = evaluate(_.subtract(this.symbol.clone(), value));\n        return d.greaterThan(0);\n      } catch (e) {\n        return false;\n      }\n    },\n    gte: function (value) {\n      return this.gt(value) || this.eq(value);\n    },\n    lte: function (value) {\n      return this.lt(value) || this.eq(value);\n    },\n    numerator: function () {\n      return new Expression(this.symbol.getNum());\n    },\n    denominator: function () {\n      return new Expression(this.symbol.getDenom());\n    },\n    hasFunction: function (f) {\n      return this.symbol.containsFunction(f);\n    },\n    contains: function (variable) {\n      return this.symbol.contains(variable);\n    }\n  };\n  //Aliases\n  Expression.prototype.toTeX = Expression.prototype.latex;\n\n  //Scientific ===================================================================\n  /*\r\n   * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\r\n   * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\r\n   */\n\n  function Scientific(num) {\n    if (!(this instanceof Scientific)) return new Scientific(num);\n    num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\n\n    //remove the sign\n    if (num.startsWith('-')) {\n      this.sign = -1;\n      //remove the sign\n      num = num.substr(1, num.length);\n    } else {\n      this.sign = 1;\n    }\n    if (Scientific.isScientific(num)) {\n      this.fromScientific(num);\n    } else {\n      this.convert(num);\n    }\n    return this;\n  }\n  Scientific.prototype = {\n    fromScientific: function (num) {\n      var parts = String(num).toLowerCase().split('e');\n      this.coeff = parts[0];\n      this.exponent = parts[1];\n      return this;\n    },\n    convert: function (num) {\n      //get wholes and decimals\n      var parts = num.split('.');\n      //make zero go away\n      var w = parts[0] || '';\n      var d = parts[1] || '';\n      //convert zero to blank strings\n      w = Scientific.removeLeadingZeroes(w);\n      d = Scientific.removeTrailingZeroes(d);\n      //find the location of the decimal place which is right after the wholes\n      var dot_location = w.length;\n      //add them together so we can move the dot\n      var n = w + d;\n      //find the next number\n      var zeroes = Scientific.leadingZeroes(n).length;\n      //set the exponent\n      this.exponent = dot_location - (zeroes + 1);\n      //set the coeff but first remove leading zeroes\n      var coeff = Scientific.removeLeadingZeroes(n);\n      this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\n\n      //the coeff decimal places\n      var dec = this.coeff.split('.')[1] || ''; //if it's undefined or zero it's going to blank\n\n      this.decp = dec === '0' ? 0 : dec.length;\n      //decimals\n      this.dec = d;\n      //wholes\n      this.wholes = w;\n      return this;\n    },\n    round: function (num) {\n      var n = this.copy();\n      num = Number(num); //cast to number for safety\n      //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n      //we can round based on this\n      if (num === 0) n.coeff = n.coeff.charAt(0);else {\n        //get up to n-1 digits\n        var rounded = this.coeff.substring(0, num + 1);\n        //get the next two\n        var next_two = this.coeff.substring(num + 1, num + 3);\n        //the extra digit\n        var ed = next_two.charAt(0);\n        if (next_two.charAt(1) > 4) ed++;\n        n.coeff = rounded + ed;\n      }\n      return n;\n    },\n    copy: function () {\n      var n = new Scientific(0);\n      n.coeff = this.coeff;\n      n.exponent = this.exponent;\n      n.sign = this.sign;\n      return n;\n    },\n    toString: function (n) {\n      var retval;\n      if (Settings.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && this.exponent === 0 && this.decp < n) {\n        if (this.decp === 0) retval = this.wholes;else retval = this.coeff;\n      } else {\n        var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, Math.min(n, this.decp || 1));\n        retval = this.exponent === 0 ? coeff : coeff + 'e' + this.exponent;\n      }\n      return (this.sign === -1 ? '-' : '') + retval;\n    }\n  };\n  Scientific.isScientific = function (num) {\n    return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\n  };\n  Scientific.leadingZeroes = function (num) {\n    var match = num.match(/^(0*).*$/);\n    return match ? match[1] : '';\n  };\n  Scientific.removeLeadingZeroes = function (num) {\n    var match = num.match(/^0*(.*)$/);\n    return match ? match[1] : '';\n  };\n  Scientific.removeTrailingZeroes = function (num) {\n    var match = num.match(/0*$/);\n    return match ? num.substring(0, num.length - match[0].length) : '';\n  };\n  Scientific.round = function (c, n) {\n    var coeff = nround(c, n);\n    var m = String(coeff).split('.').pop();\n    var d = n - m.length;\n    //if we're asking for more significant figures\n    if (d > 0) {\n      coeff = coeff + new Array(d + 1).join(0);\n    }\n    return coeff;\n  };\n\n  //Frac =========================================================================\n  function Frac(n) {\n    if (n instanceof Frac) return n;\n    if (n === undefined) return this;\n    try {\n      if (isInt(n)) {\n        try {\n          this.num = bigInt(n);\n          this.den = bigInt(1);\n        } catch (e) {\n          return Frac.simple(n);\n        }\n      } else {\n        var frac = n instanceof bigDec ? Fraction.quickConversion(n) : Fraction.convert(n);\n        this.num = new bigInt(frac[0]);\n        this.den = new bigInt(frac[1]);\n      }\n    } catch (e) {\n      return Frac.simple(n);\n    }\n  }\n  //safe to use with negative numbers or other types\n  Frac.create = function (n) {\n    if (n instanceof Frac) return n;\n    n = n.toString();\n    var is_neg = n.charAt(0) === '-'; //check if it's negative\n    if (is_neg) n = n.substr(1, n.length - 1); //remove the sign\n    var frac = new Frac(n);\n    //put the sign back\n    if (is_neg) frac.negate();\n    return frac;\n  };\n  Frac.isFrac = function (o) {\n    return o instanceof Frac;\n  };\n  Frac.quick = function (n, d) {\n    var frac = new Frac();\n    frac.num = new bigInt(n);\n    frac.den = new bigInt(d);\n    return frac;\n  };\n  Frac.simple = function (n) {\n    var nstr = String(scientificToDecimal(n)),\n      m_dc = nstr.split('.'),\n      num = m_dc.join(''),\n      den = 1,\n      l = (m_dc[1] || '').length;\n    for (var i = 0; i < l; i++) den += '0';\n    var frac = Frac.quick(num, den);\n    return frac.simplify();\n  };\n  Frac.prototype = {\n    multiply: function (m) {\n      if (this.isOne()) {\n        return m.clone();\n      }\n      if (m.isOne()) {\n        return this.clone();\n      }\n      var c = this.clone();\n      c.num = c.num.multiply(m.num);\n      c.den = c.den.multiply(m.den);\n      return c.simplify();\n    },\n    divide: function (m) {\n      if (m.equals(0)) throw new DivisionByZero('Division by zero not allowed!');\n      return this.clone().multiply(m.clone().invert()).simplify();\n    },\n    subtract: function (m) {\n      return this.clone().add(m.clone().neg());\n    },\n    neg: function () {\n      this.num = this.num.multiply(-1);\n      return this;\n    },\n    add: function (m) {\n      var n1 = this.den,\n        n2 = m.den,\n        c = this.clone();\n      var a = c.num,\n        b = m.num;\n      if (n1.equals(n2)) {\n        c.num = a.add(b);\n      } else {\n        c.num = a.multiply(n2).add(b.multiply(n1));\n        c.den = n1.multiply(n2);\n      }\n      return c.simplify();\n    },\n    mod: function (m) {\n      var a = this.clone(),\n        b = m.clone();\n      //make their denominators even and return the mod of their numerators\n      a.num = a.num.multiply(b.den);\n      a.den = a.den.multiply(b.den);\n      b.num = b.num.multiply(this.den);\n      b.den = b.den.multiply(this.den);\n      a.num = a.num.mod(b.num);\n      return a.simplify();\n    },\n    simplify: function () {\n      var gcd = bigInt.gcd(this.num, this.den);\n      this.num = this.num.divide(gcd);\n      this.den = this.den.divide(gcd);\n      return this;\n    },\n    clone: function () {\n      var m = new Frac();\n      m.num = new bigInt(this.num);\n      m.den = new bigInt(this.den);\n      return m;\n    },\n    decimal: function (prec) {\n      var sign = this.num.isNegative() ? '-' : '';\n      if (this.num.equals(this.den)) {\n        return '1';\n      }\n      //go plus one for rounding\n      prec = prec || Settings.PRECISION;\n      prec++;\n      var narr = [],\n        n = this.num.abs(),\n        d = this.den;\n      for (var i = 0; i < prec; i++) {\n        var w = n.divide(d),\n          //divide out whole\n          r = n.subtract(w.multiply(d)); //get remainder\n\n        narr.push(w);\n        if (r.equals(0)) break;\n        n = r.times(10); //shift one dec place\n      }\n      var whole = narr.shift();\n      if (narr.length === 0) {\n        return sign + whole.toString();\n      }\n      if (i === prec) {\n        var lt = [];\n        //get the last two so we can round it\n        for (var i = 0; i < 2; i++) lt.unshift(narr.pop());\n        //put the last digit back by rounding the last two\n        narr.push(Math.round(lt.join('.')));\n      }\n      var dec = whole.toString() + '.' + narr.join('');\n      return sign + dec;\n    },\n    toDecimal: function (prec) {\n      prec = prec || Settings.PRECISION;\n      if (prec) {\n        return this.decimal(prec);\n      } else {\n        return this.num / this.den;\n      }\n    },\n    qcompare: function (n) {\n      return [this.num.multiply(n.den), n.num.multiply(this.den)];\n    },\n    equals: function (n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].equals(q[1]);\n    },\n    absEquals: function (n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].abs().equals(q[1]);\n    },\n    //lazy check to be fixed. Sufficient for now but will cause future problems\n    greaterThan: function (n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].gt(q[1]);\n    },\n    gte: function (n) {\n      return this.greaterThan(n) || this.equals(n);\n    },\n    lte: function (n) {\n      return this.lessThan(n) || this.equals(n);\n    },\n    lessThan: function (n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].lt(q[1]);\n    },\n    isInteger: function () {\n      return this.den.equals(1);\n    },\n    negate: function () {\n      this.num = this.num.multiply(-1);\n      return this;\n    },\n    invert: function () {\n      var t = this.den;\n      //why invert 0/1? It'll become 1/0 and that's a lie.\n      if (!this.num.equals(0)) {\n        var isnegative = this.num.isNegative();\n        this.den = this.num.abs();\n        this.num = t;\n        if (isnegative) this.num = this.num.multiply(-1);\n      }\n      return this;\n    },\n    isOne: function () {\n      return this.num.equals(1) && this.den.equals(1);\n    },\n    sign: function () {\n      return this.num.isNegative() ? -1 : 1;\n    },\n    abs: function () {\n      this.num = this.num.abs();\n      return this;\n    },\n    gcd: function (f) {\n      return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));\n    },\n    toString: function () {\n      return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\n    },\n    valueOf: function () {\n      //            if(this.num == 24) throw new Error(999)\n      if (Settings.USE_BIG) return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));\n      var retval = this.num / this.den;\n      return retval;\n    },\n    isNegative: function () {\n      return this.toDecimal() < 0;\n    }\n  };\n\n  //Symbol =======================================================================\n  /**\r\n   * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group.\r\n   * All symbols except for \"numbers (group N)\" have a power.\r\n   * @class Primary data type for the Parser.\r\n   * @param {String} obj\r\n   * @returns {Symbol}\r\n   */\n  function Symbol(obj) {\n    var isInfinity = obj === 'Infinity';\n    // This enables the class to be instantiated without the new operator\n    if (!(this instanceof Symbol)) {\n      return new Symbol(obj);\n    }\n    // Convert big numbers to a string\n    if (obj instanceof bigDec) {\n      obj = obj.toString();\n    }\n    //define numeric symbols\n    if (/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(obj) || obj instanceof bigDec) {\n      this.group = N;\n      this.value = CONST_HASH;\n      this.multiplier = new Frac(obj);\n    }\n    //define symbolic symbols\n    else {\n      this.group = S;\n      validateName(obj);\n      this.value = obj;\n      this.multiplier = new Frac(1);\n      this.imaginary = obj === Settings.IMAGINARY;\n      this.isInfinity = isInfinity;\n    }\n\n    //As of 6.0.0 we switched to infinite precision so all objects have a power\n    //Although this is still redundant in constants, it simplifies the logic in\n    //other parts so we'll keep it\n    this.power = new Frac(1);\n\n    // Added to silence the strict warning.\n    return this;\n  }\n  /**\r\n   * Returns vanilla imaginary symbol\r\n   * @returns {Symbol}\r\n   */\n  Symbol.imaginary = function () {\n    var s = new Symbol(Settings.IMAGINARY);\n    s.imaginary = true;\n    return s;\n  };\n  /**\r\n   * Return nerdamer's representation of Infinity\r\n   * @param {int} negative -1 to return negative infinity\r\n   * @returns {Symbol}\r\n   */\n  Symbol.infinity = function (negative) {\n    var v = new Symbol('Infinity');\n    if (negative === -1) v.negate();\n    return v;\n  };\n  Symbol.shell = function (group, value) {\n    var symbol = new Symbol(value);\n    symbol.group = group;\n    symbol.symbols = {};\n    symbol.length = 0;\n    return symbol;\n  };\n  //sqrt(x) -> x^(1/2)\n  Symbol.unwrapSQRT = function (symbol, all) {\n    var p = symbol.power;\n    if (symbol.fname === SQRT && (symbol.isLinear() || all)) {\n      var t = symbol.args[0].clone();\n      t.power = t.power.multiply(new Frac(1 / 2));\n      t.multiplier = t.multiplier.multiply(symbol.multiplier);\n      symbol = t;\n      if (all) symbol.power = p.multiply(new Frac(1 / 2));\n    }\n    return symbol;\n  };\n  Symbol.hyp = function (a, b) {\n    a = a || new Symbol(0);\n    b = b || new Symbol(0);\n    return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));\n  };\n  //converts to polar form array\n  Symbol.toPolarFormArray = function (symbol) {\n    var re, im, r, theta;\n    re = symbol.realpart();\n    im = symbol.imagpart();\n    r = Symbol.hyp(re, im);\n    theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));\n    return [r, theta];\n  };\n  //removes parentheses\n  Symbol.unwrapPARENS = function (symbol) {\n    if (symbol.fname === '') {\n      var r = symbol.args[0];\n      r.power = r.power.multiply(symbol.power);\n      r.multiplier = r.multiplier.multiply(symbol.multiplier);\n      if (symbol.fname === '') return Symbol.unwrapPARENS(r);\n      return r;\n    }\n    return symbol;\n  };\n  //quickly creates a Symbol\n  Symbol.create = function (value, power) {\n    power = power === undefined ? 1 : power;\n    return _.parse('(' + value + ')^(' + power + ')');\n  };\n  Symbol.prototype = {\n    /**\r\n     * Gets nth root accounting for rounding errors\r\n     * @param {Number} n\r\n     * @return {Number}\r\n     */\n    getNth: function (n) {\n      // First calculate the root\n      var root = evaluate(_.pow(_.parse(this.multiplier), _.parse(n).invert()));\n      // Round of any errors\n      var rounded = _.parse(nround(root));\n      // Reverse the root\n      var e = evaluate(_.pow(rounded, _.parse(n)));\n      // If the rounded root equals the original number then we're good \n      if (e.equals(_.parse(this.multiplier))) {\n        return rounded;\n      }\n      // Otherwise return the unrounded version\n      return root;\n    },\n    /**\r\n     * Checks if symbol is to the nth power\r\n     * @returns {Boolean}\r\n     */\n    isToNth: function (n) {\n      // Start by check in the multiplier for squareness\n      // First get the root but round it because currently we still depend \n      var root = this.getNth(n);\n      var nthMultiplier = isInt(root);\n      var nthPower;\n      if (this.group === CB) {\n        // Start by assuming that all will be square.\n        nthPower = true;\n        // All it takes is for one of the symbols to not have an even power\n        // e.g. x^n1*y^n2 requires that both n1 and n2 are even\n        this.each(function (x) {\n          var isNth = x.isToNth(n);\n          if (!isNth) {\n            nthPower = false;\n          }\n        });\n      } else {\n        // Check if the power is divisible by n if it's not a number.\n        nthPower = this.group === N ? true : isInt(_.divide(_.parse(this.power), _.parse(n)));\n      }\n      return nthMultiplier && nthPower;\n    },\n    /**\r\n     * Checks if a symbol is square\r\n     * @return {Boolean}\r\n     */\n    isSquare: function () {\n      return this.isToNth(2);\n    },\n    /**\r\n     * Checks if a symbol is cube\r\n     * @return {Boolean}\r\n     */\n    isCube: function () {\n      return this.isToNth(3);\n    },\n    /**\r\n     * Checks if a symbol is a bare variable\r\n     * @return {Boolean}\r\n     */\n    isSimple: function () {\n      return this.power.equals(1) && this.multiplier.equals(1);\n    },\n    /**\r\n     * Simplifies the power of the symbol\r\n     * @returns {Symbol} a clone of the symbol\r\n     */\n    powSimp: function () {\n      if (this.group === CB) {\n        var powers = [],\n          sign = this.multiplier.sign();\n        this.each(function (x) {\n          var p = x.power;\n          //why waste time if I can't do anything anyway\n          if (isSymbol(p) || p.equals(1)) return this.clone();\n          powers.push(p);\n        });\n        var min = new Frac(arrayMin(powers));\n\n        //handle the coefficient\n        //handle the multiplier\n        var sign = this.multiplier.sign(),\n          m = this.multiplier.clone().abs(),\n          mfactors = Math2.ifactor(m);\n        //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\n        //we can then reduce it to 2*3*5*(15)^2\n        var out_ = new Frac(1);\n        var in_ = new Frac(1);\n        for (var x in mfactors) {\n          var n = new Frac(mfactors[x]);\n          if (!n.lessThan(min)) {\n            n = n.divide(min).subtract(new Frac(1));\n            in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket\n          }\n          out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);\n        }\n        var t = new Symbol(in_);\n        this.each(function (x) {\n          x = x.clone();\n          x.power = x.power.divide(min);\n          t = _.multiply(t, x);\n        });\n        var xt = _.symfunction(PARENTHESIS, [t]);\n        xt.power = min;\n        xt.multiplier = sign < 0 ? out_.negate() : out_;\n        return xt;\n      }\n      return this.clone();\n    },\n    /**\r\n     * Checks to see if two functions are of equal value\r\n     * @param {Symbol} symbol\r\n     */\n    equals: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.value === symbol.value && this.power.equals(symbol.power) && this.multiplier.equals(symbol.multiplier) && this.group === symbol.group;\n    },\n    abs: function () {\n      var e = this.clone();\n      e.multiplier.abs();\n      return e;\n    },\n    // Greater than\n    gt: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n    },\n    // Greater than\n    gte: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.equals(symbol) || this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n    },\n    // Less than\n    lt: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n    },\n    // Less than\n    lte: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.equals(symbol) || this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n    },\n    /**\r\n     * Because nerdamer doesn't group symbols by polynomials but\r\n     * rather a custom grouping method, this has to be\r\n     * reinserted in order to make use of most algorithms. This function\r\n     * checks if the symbol meets the criteria of a polynomial.\r\n     * @param {bool} multivariate\r\n     * @returns {boolean}\r\n     */\n    isPoly: function (multivariate) {\n      var g = this.group,\n        p = this.power;\n      //the power must be a integer so fail if it's not\n      if (!isInt(p) || p < 0) return false;\n      //constants and first orders\n      if (g === N || g === S || this.isConstant(true)) return true;\n      var vars = variables(this);\n      if (g === CB && vars.length === 1) {\n        //the variable is assumed the only one that was found\n        var v = vars[0];\n        //if no variable then guess what!?!? We're done!!! We have a polynomial.\n        if (!v) return true;\n        for (var x in this.symbols) {\n          var sym = this.symbols[x];\n          //sqrt(x)\n          if (sym.group === FN && !sym.args[0].isConstant()) return false;\n          if (!sym.contains(v) && !sym.isConstant(true)) return false;\n        }\n        return true;\n      }\n      //PL groups. These only fail if a power is not an int\n      //this should handle cases such as x^2*t\n      if (this.isComposite() || g === CB && multivariate) {\n        //fail if we're not checking for multivariate polynomials\n        if (!multivariate && vars.length > 1) return false;\n        //loop though the symbols and check if they qualify\n        for (var x in this.symbols) {\n          //we've already the symbols if we're not checking for multivariates at this point\n          //so we check the sub-symbols\n          if (!this.symbols[x].isPoly(multivariate)) return false;\n        }\n        return true;\n      } else return false;\n\n      /*\r\n       //all tests must have passed so we must be dealing with a polynomial\r\n       return true;\r\n       */\n    },\n    //removes the requested variable from the symbol and returns the remainder\n    stripVar: function (x, exclude_x) {\n      var retval;\n      if ((this.group === PL || this.group === S) && this.value === x) retval = new Symbol(exclude_x ? 0 : this.multiplier);else if (this.group === CB && this.isLinear()) {\n        retval = new Symbol(1);\n        this.each(function (s) {\n          if (!s.contains(x, true)) retval = _.multiply(retval, s.clone());\n        });\n        retval.multiplier = retval.multiplier.multiply(this.multiplier);\n      } else if (this.group === CP && !this.isLinear()) {\n        retval = new Symbol(this.multiplier);\n      } else if (this.group === CP && this.isLinear()) {\n        retval = new Symbol(0);\n        this.each(function (s) {\n          if (!s.contains(x)) {\n            var t = s.clone();\n            t.multiplier = t.multiplier.multiply(this.multiplier);\n            retval = _.add(retval, t);\n          }\n        });\n        //BIG TODO!!! It doesn't make much sense\n        if (retval.equals(0)) retval = new Symbol(this.multiplier);\n      } else if (this.group === EX && this.power.contains(x, true)) {\n        retval = new Symbol(this.multiplier);\n      } else if (this.group === FN && this.contains(x)) {\n        retval = new Symbol(this.multiplier);\n      } else\n        //wth? This should technically be the multiplier.\n        //Unfortunately this method wasn't very well thought out :`(.\n        //should be: retval = new Symbol(this.multiplier);\n        //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\n        //this will break a bunch of unit tests so be ready to for the long haul\n        retval = this.clone();\n      return retval;\n    },\n    //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a].\n    toArray: function (v, arr) {\n      arr = arr || {\n        arr: [],\n        add: function (x, idx) {\n          var e = this.arr[idx];\n          this.arr[idx] = e ? _.add(e, x) : x;\n        }\n      };\n      var g = this.group;\n      if (g === S && this.contains(v)) {\n        arr.add(new Symbol(this.multiplier), this.power);\n      } else if (g === CB) {\n        var a = this.stripVar(v),\n          x = _.divide(this.clone(), a.clone());\n        var p = x.isConstant() ? 0 : x.power;\n        arr.add(a, p);\n      } else if (g === PL && this.value === v) {\n        this.each(function (x, p) {\n          arr.add(x.stripVar(v), p);\n        });\n      } else if (g === CP) {\n        //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\n        //each case is handled above\n        this.each(function (x) {\n          x.toArray(v, arr);\n        });\n      } else if (this.contains(v)) {\n        throw new NerdamerTypeError('Cannot convert to array! Exiting');\n      } else {\n        arr.add(this.clone(), 0); //it's just a constant wrt to v\n      }\n      //fill the holes\n      arr = arr.arr; //keep only the array since we don't need the object anymore\n      for (var i = 0; i < arr.length; i++) if (!arr[i]) arr[i] = new Symbol(0);\n      return arr;\n    },\n    //checks to see if a symbol contans a function\n    hasFunc: function (v) {\n      var fn_group = this.group === FN || this.group === EX;\n      if (fn_group && !v || fn_group && this.contains(v)) return true;\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].hasFunc(v)) return true;\n        }\n      }\n      return false;\n    },\n    sub: function (a, b) {\n      a = !isSymbol(a) ? _.parse(a) : a.clone();\n      b = !isSymbol(b) ? _.parse(b) : b.clone();\n      if (a.group === N || a.group === P) err('Cannot substitute a number. Must be a variable');\n      var same_pow = false,\n        a_is_unit_multiplier = a.multiplier.equals(1),\n        m = this.multiplier.clone(),\n        retval;\n      /*\r\n       * In order to make the substitution the bases have to first match take\r\n       * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\r\n       * In both cases the first condition is that the bases match so we begin there\r\n       * Either both are PL or both are not PL but we cannot have PL and a non-PL group match\r\n       */\n      if (this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {\n        //we cleared the first hurdle but a subsitution may not be possible just yet\n        if (a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\n          if (a.isLinear()) {\n            retval = b;\n          } else if (a.power.equals(this.power)) {\n            retval = b;\n            same_pow = true;\n          }\n          if (a.multiplier.equals(this.multiplier)) m = new Frac(1);\n        }\n      }\n      //the next thing is to handle CB\n      else if (this.group === CB || this.previousGroup === CB) {\n        retval = new Symbol(1);\n        this.each(function (x) {\n          var subbed = _.parse(x.sub(a, b)); //parse it again for safety\n          retval = _.multiply(retval, subbed);\n        });\n      } else if (this.isComposite()) {\n        var symbol = this.clone();\n        if (a.isComposite() && symbol.isComposite() && symbol.isLinear() && a.isLinear()) {\n          var find = function (stack, needle) {\n            for (var x in stack.symbols) {\n              var sym = stack.symbols[x];\n              //if the symbol equals the needle or it's within the sub-symbols we're done\n              if (sym.isComposite() && find(sym, needle) || sym.equals(needle)) return true;\n            }\n            return false;\n          };\n          //go fish\n          for (var x in a.symbols) {\n            if (!find(symbol, a.symbols[x])) return symbol.clone();\n          }\n          retval = _.add(_.subtract(symbol.clone(), a), b);\n        } else {\n          retval = new Symbol(0);\n          symbol.each(function (x) {\n            retval = _.add(retval, x.sub(a, b));\n          });\n        }\n      } else if (this.group === EX) {\n        // the parsed value could be a function so parse and sub\n        retval = _.parse(this.value).sub(a, b);\n      } else if (this.group === FN) {\n        var nargs = [];\n        for (var i = 0; i < this.args.length; i++) {\n          var arg = this.args[i];\n          if (!isSymbol(arg)) arg = _.parse(arg);\n          nargs.push(arg.sub(a, b));\n        }\n        retval = _.symfunction(this.fname, nargs);\n      }\n      //if we did manage a substitution\n      if (retval) {\n        if (!same_pow) {\n          //substitute the power\n          var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);\n          //now raise the symbol to that power\n          retval = _.pow(retval, p);\n        }\n\n        //transfer the multiplier\n        retval.multiplier = retval.multiplier.multiply(m);\n\n        //done\n        return retval;\n      }\n      //if all else fails\n      return this.clone();\n    },\n    isMonomial: function () {\n      if (this.group === S) return true;\n      if (this.group === CB) {\n        for (var x in this.symbols) if (this.symbols[x].group !== S) return false;\n      } else return false;\n      return true;\n    },\n    isPi: function () {\n      return this.group === S && this.value === 'pi';\n    },\n    sign: function () {\n      return this.multiplier.sign();\n    },\n    isE: function () {\n      return this.value === 'e';\n    },\n    isSQRT: function () {\n      return this.fname === SQRT;\n    },\n    isConstant: function (check_all, check_symbols) {\n      if (check_symbols && this.group === CB) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].isConstant(true)) return true;\n        }\n      }\n      if (check_all === 'functions' && this.isComposite()) {\n        var isConstant = true;\n        this.each(function (x) {\n          if (!x.isConstant(check_all, check_symbols)) {\n            isConstant = false;\n          }\n        }, true);\n        return isConstant;\n      }\n      if (check_all === 'all' && (this.isPi() || this.isE())) {\n        return true;\n      }\n      if (check_all && this.group === FN) {\n        for (var i = 0; i < this.args.length; i++) {\n          if (!this.args[i].isConstant(check_all)) return false;\n        }\n        return true;\n      }\n      if (check_all) return isNumericSymbol(this);\n      return this.value === CONST_HASH;\n    },\n    //the symbols is imaginary if\n    //1. n*i\n    //2. a+b*i\n    //3. a*i\n    isImaginary: function () {\n      if (this.imaginary) return true;else if (this.symbols) {\n        for (var x in this.symbols) if (this.symbols[x].isImaginary()) return true;\n      }\n      return false;\n    },\n    /**\r\n     * Returns the real part of a symbol\r\n     * @returns {Symbol}\r\n     */\n    realpart: function () {\n      if (this.isConstant()) {\n        return this.clone();\n      } else if (this.imaginary) return new Symbol(0);else if (this.isComposite()) {\n        var retval = new Symbol(0);\n        this.each(function (x) {\n          retval = _.add(retval, x.realpart());\n        });\n        return retval;\n      } else if (this.isImaginary()) return new Symbol(0);\n      return this.clone();\n    },\n    /*\r\n     * Return imaginary part of a symbol\r\n     * @returns {Symbol}\r\n     */\n    imagpart: function () {\n      if (this.group === S && this.isImaginary()) return new Symbol(this.multiplier);\n      if (this.isComposite()) {\n        var retval = new Symbol(0);\n        this.each(function (x) {\n          retval = _.add(retval, x.imagpart());\n        });\n        return retval;\n      }\n      if (this.group === CB) return this.stripVar(Settings.IMAGINARY);\n      return new Symbol(0);\n    },\n    isInteger: function () {\n      return this.isConstant() && this.multiplier.isInteger();\n    },\n    isLinear: function (wrt) {\n      if (wrt) {\n        if (this.isConstant()) return true;\n        if (this.group === S) {\n          if (this.value === wrt) return this.power.equals(1);else return true;\n        }\n        if (this.isComposite() && this.power.equals(1)) {\n          for (var x in this.symbols) {\n            if (!this.symbols[x].isLinear(wrt)) return false;\n          }\n          return true;\n        }\n        if (this.group === CB && this.symbols[wrt]) return this.symbols[wrt].isLinear(wrt);\n        return false;\n      } else return this.power.equals(1);\n    },\n    /**\r\n     * Checks to see if a symbol has a function by a specified name or within a specified list\r\n     * @param {String|String[]} names\r\n     * @returns {Boolean}\r\n     */\n    containsFunction: function (names) {\n      if (typeof names === 'string') names = [names];\n      if (this.group === FN && names.indexOf(this.fname) !== -1) return true;\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].containsFunction(names)) return true;\n        }\n      }\n      return false;\n    },\n    multiplyPower: function (p2) {\n      //leave out 1\n      if (this.group === N && this.multiplier.equals(1)) return this;\n      var p1 = this.power;\n      if (this.group !== EX && p2.group === N) {\n        var p = p2.multiplier;\n        if (this.group === N && !p.isInteger()) {\n          this.convert(P);\n        }\n        this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\n        if (this.group === P && isInt(this.power)) {\n          //bring it back to an N\n          this.value = Math.pow(this.value, this.power);\n          this.toLinear();\n          this.convert(N);\n        }\n      } else {\n        if (this.group !== EX) {\n          p1 = new Symbol(p1);\n          this.convert(EX);\n        }\n        this.power = _.multiply(p1, p2);\n      }\n      return this;\n    },\n    setPower: function (p, retainSign) {\n      //leave out 1\n      if (this.group === N && this.multiplier.equals(1)) {\n        return this;\n      }\n      if (this.group === EX && !isSymbol(p)) {\n        this.group = this.previousGroup;\n        delete this.previousGroup;\n        if (this.group === N) {\n          this.multiplier = new Frac(this.value);\n          this.value = CONST_HASH;\n        } else this.power = p;\n      } else {\n        var isSymbolic = false;\n        if (isSymbol(p)) {\n          if (p.group === N) {\n            //p should be the multiplier instead\n            p = p.multiplier;\n          } else {\n            isSymbolic = true;\n          }\n        }\n        var group = isSymbolic ? EX : P;\n        this.power = p;\n        if (this.group === N && group) this.convert(group, retainSign);\n      }\n      return this;\n    },\n    /**\r\n     * Checks to see if symbol is located in the denominator\r\n     * @returns {boolean}\r\n     */\n    isInverse: function () {\n      if (this.group === EX) return this.power.multiplier.lessThan(0);\n      return this.power < 0;\n    },\n    /**\r\n     * Make a duplicate of a symbol by copying a predefined list of items.\r\n     * The name 'copy' would probably be a more appropriate name.\r\n     * to a new symbol\r\n     * @param {Symbol} c\r\n     * @returns {Symbol}\r\n     */\n    clone: function (c) {\n      var clone = c || new Symbol(0),\n        //list of properties excluding power as this may be a symbol and would also need to be a clone.\n        properties = ['value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\n        l = properties.length,\n        i;\n      if (this.symbols) {\n        clone.symbols = {};\n        for (var x in this.symbols) {\n          clone.symbols[x] = this.symbols[x].clone();\n        }\n      }\n      for (i = 0; i < l; i++) {\n        if (this[properties[i]] !== undefined) {\n          clone[properties[i]] = this[properties[i]];\n        }\n      }\n      clone.power = this.power.clone();\n      clone.multiplier = this.multiplier.clone();\n      //add back the flag to track if this symbol is a conversion symbol\n      if (this.isConversion) clone.isConversion = this.isConversion;\n      if (this.isUnit) clone.isUnit = this.isUnit;\n      return clone;\n    },\n    /**\r\n     * Converts a symbol multiplier to one.\r\n     * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\r\n     * @returns {Symbol}\r\n     */\n    toUnitMultiplier: function (keepSign) {\n      this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\n      this.multiplier.den = new bigInt(1);\n      return this;\n    },\n    /**\r\n     * Converts a Symbol's power to one.\r\n     * @returns {Symbol}\r\n     */\n    toLinear: function () {\n      // Do nothing if it's already linear\n      if (this.power.equals(1)) {\n        return this;\n      }\n      this.setPower(new Frac(1));\n      return this;\n    },\n    /**\r\n     * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\r\n     * @param {Function} fn\r\n     * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well\r\n     */\n    each: function (fn, deep) {\n      if (!this.symbols) {\n        fn.call(this, this, this.value);\n      } else {\n        for (var x in this.symbols) {\n          var sym = this.symbols[x];\n          if (sym.group === PL && deep) {\n            for (var y in sym.symbols) {\n              fn.call(x, sym.symbols[y], y);\n            }\n          } else fn.call(this, sym, x);\n        }\n      }\n    },\n    /**\r\n     * A numeric value to be returned for Javascript. It will try to\r\n     * return a number as far a possible but in case of a pure symbolic\r\n     * symbol it will just return its text representation\r\n     * @returns {String|Number}\r\n     */\n    valueOf: function () {\n      if (this.group === N) return this.multiplier.valueOf();else if (this.power === 0) {\n        return 1;\n      } else if (this.multiplier === 0) {\n        return 0;\n      } else {\n        return text(this, 'decimals');\n      }\n    },\n    /**\r\n     * Checks to see if a symbols has a particular variable within it.\r\n     * Pass in true as second argument to include the power of exponentials\r\n     * which aren't check by default.\r\n     * @example var s = _.parse('x+y+z'); s.contains('y');\r\n     * //returns true\r\n     * @param {any} variable\r\n     * @param {boolean} all\r\n     * @returns {boolean}\r\n     */\n    contains: function (variable, all) {\n      //contains expects a string\n      variable = String(variable);\n      var g = this.group;\n      if (this.value === variable) return true;\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].contains(variable, all)) return true;\n        }\n      }\n      if (g === FN || this.previousGroup === FN) {\n        for (var i = 0; i < this.args.length; i++) {\n          if (this.args[i].contains(variable, all)) return true;\n        }\n      }\n      if (g === EX) {\n        //exit only if it does\n        if (all && this.power.contains(variable, all)) {\n          return true;\n        }\n        if (this.value === variable) return true;\n      }\n      return this.value === variable;\n    },\n    /**\r\n     * Negates a symbols\r\n     * @returns {boolean}\r\n     */\n    negate: function () {\n      this.multiplier.negate();\n      if (this.group === CP || this.group === PL) this.distributeMultiplier();\n      return this;\n    },\n    /**\r\n     * Inverts a symbol\r\n     * @param {boolean} power_only\r\n     * @param {boolean} all\r\n     * @returns {boolean}\r\n     */\n    invert: function (power_only, all) {\n      //invert the multiplier\n      if (!power_only) this.multiplier = this.multiplier.invert();\n      //invert the rest\n      if (isSymbol(this.power)) {\n        this.power.negate();\n      } else if (this.group === CB && all) {\n        this.each(function (x) {\n          return x.invert();\n        });\n      } else {\n        if (this.power && this.group !== N) this.power.negate();\n      }\n      return this;\n    },\n    /**\r\n     * Symbols of group CP or PL may have the multiplier being carried by\r\n     * the top level symbol at any given time e.g. 2*(x+y+z). This is\r\n     * convenient in many cases, however in some cases the multiplier needs\r\n     * to be carried individually e.g. 2*x+2*y+2*z.\r\n     * This method distributes the multiplier over the entire symbol\r\n     * @param {boolean} all\r\n     * @returns {Symbol}\r\n     */\n    distributeMultiplier: function (all) {\n      var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\n      if (this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {\n        for (var x in this.symbols) {\n          var s = this.symbols[x];\n          s.multiplier = s.multiplier.multiply(this.multiplier);\n          s.distributeMultiplier();\n        }\n        this.toUnitMultiplier();\n      }\n      return this;\n    },\n    /**\r\n     * This method expands the exponent over the entire symbol just like\r\n     * distributeMultiplier\r\n     * @returns {Symbol}\r\n     */\n    distributeExponent: function () {\n      if (!this.power.equals(1)) {\n        var p = this.power;\n        for (var x in this.symbols) {\n          var s = this.symbols[x];\n          if (s.group === EX) {\n            s.power = _.multiply(s.power, new Symbol(p));\n          } else {\n            this.symbols[x].power = this.symbols[x].power.multiply(p);\n          }\n        }\n        this.toLinear();\n      }\n      return this;\n    },\n    /**\r\n     * This method will attempt to up-convert or down-convert one symbol\r\n     * from one group to another. Not all symbols are convertible from one\r\n     * group to another however. In that case the symbol will remain\r\n     * unchanged.\r\n     * @param {int} group\r\n     * @param {string} imaginary\r\n     */\n    convert: function (group, imaginary) {\n      if (group > FN) {\n        //make a clone of this symbol;\n        var cp = this.clone();\n\n        //attach a symbols object and upgrade the group\n        this.symbols = {};\n        if (group === CB) {\n          //symbol of group CB hold symbols bound together through multiplication\n          //because of commutativity this multiplier can technically be anywhere within the group\n          //to keep track of it however it's easier to always have the top level carry it\n          cp.toUnitMultiplier();\n        } else {\n          //reset the symbol\n          this.toUnitMultiplier();\n        }\n        if (this.group === FN) {\n          cp.args = this.args;\n          delete this.args;\n          delete this.fname;\n        }\n\n        //the symbol may originate from the symbol i but this property no longer holds true\n        //after copying\n        if (this.isImgSymbol) delete this.isImgSymbol;\n        this.toLinear();\n        //attach a clone of this symbol to the symbols object using its proper key\n        this.symbols[cp.keyForGroup(group)] = cp;\n        this.group = group;\n        //objects by default don't have a length property. However, in order to keep track of the number\n        //of sub-symbols we have to impliment our own.\n        this.length = 1;\n      } else if (group === EX) {\n        //1^x is just one so check and make sure\n        if (!(this.group === N && this.multiplier.equals(1))) {\n          if (this.group !== EX) this.previousGroup = this.group;\n          if (this.group === N) {\n            this.value = this.multiplier.num.toString();\n            this.toUnitMultiplier();\n          }\n          //update the hash to reflect the accurate hash\n          else this.value = text(this, 'hash');\n          this.group = EX;\n        }\n      } else if (group === N) {\n        var m = this.multiplier.toDecimal();\n        if (this.symbols) this.symbols = undefined;\n        new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);\n      } else if (group === P && this.group === N) {\n        this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\n        this.toUnitMultiplier(!imaginary);\n        this.group = P;\n      }\n      return this;\n    },\n    /**\r\n     * This method is one of the principal methods to make it all possible.\r\n     * It performs cleanup and prep operations whenever a symbols is\r\n     * inserted. If the symbols results in a 1 in a CB (multiplication)\r\n     * group for instance it will remove the redundant symbol. Similarly\r\n     * in a symbol of group PL or CP (symbols glued by multiplication) it\r\n     * will remove any dangling zeroes from the symbol. It will also\r\n     * up-convert or down-convert a symbol if it detects that it's\r\n     * incorrectly grouped. It should be noted that this method is not\r\n     * called directly but rather by the 'attach' method for addition groups\r\n     * and the 'combine' method for multiplication groups.\r\n     * @param {Symbol} symbol\r\n     * @param {String} action\r\n     */\n    insert: function (symbol, action) {\n      //this check can be removed but saves a lot of aggravation when trying to hunt down\n      //a bug. If left, you will instantly know that the error can only be between 2 symbols.\n      if (!isSymbol(symbol)) err('Object ' + symbol + ' is not of type Symbol!');\n      if (this.symbols) {\n        var group = this.group;\n        if (group > FN) {\n          var key = symbol.keyForGroup(group);\n          var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\n          if (action === 'add') {\n            var hash = key;\n            if (existing) {\n              //add them together using the parser\n              this.symbols[hash] = _.add(existing, symbol);\n              //if the addition resulted in a zero multiplier remove it\n              if (this.symbols[hash].multiplier.equals(0)) {\n                delete this.symbols[hash];\n                this.length--;\n                if (this.length === 0) {\n                  this.convert(N);\n                  this.multiplier = new Frac(0);\n                }\n              }\n            } else {\n              this.symbols[key] = symbol;\n              this.length++;\n            }\n          } else {\n            //check if this is of group P and unwrap before inserting\n            if (symbol.group === P && isInt(symbol.power)) {\n              symbol.convert(N);\n            }\n\n            //transfer the multiplier to the upper symbol but only if the symbol numeric\n            if (symbol.group !== EX) {\n              this.multiplier = this.multiplier.multiply(symbol.multiplier);\n              symbol.toUnitMultiplier();\n            } else {\n              symbol.parens = symbol.multiplier.lessThan(0);\n              this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\n              symbol.toUnitMultiplier(true);\n            }\n            if (existing) {\n              //remove because the symbol may have changed\n              symbol = _.multiply(remove(this.symbols, key), symbol);\n              if (symbol.isConstant()) {\n                this.multiplier = this.multiplier.multiply(symbol.multiplier);\n                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\n              }\n              this.length--;\n              //clean up\n            }\n\n            //don't insert the symbol if it's 1\n            if (!symbol.isOne(true)) {\n              this.symbols[key] = symbol;\n              this.length++;\n            } else if (symbol.multiplier.lessThan(0)) {\n              this.negate(); //put back the sign\n            }\n          }\n\n          //clean up\n          if (this.length === 0) this.convert(N);\n          //update the hash\n          if (this.group === CP || this.group === CB) {\n            this.updateHash();\n          }\n        }\n      }\n      return this;\n    },\n    //the insert method for addition\n    attach: function (symbol) {\n      if (isArray(symbol)) {\n        for (var i = 0; i < symbol.length; i++) this.insert(symbol[i], 'add');\n        return this;\n      }\n      return this.insert(symbol, 'add');\n    },\n    //the insert method for multiplication\n    combine: function (symbol) {\n      if (isArray(symbol)) {\n        for (var i = 0; i < symbol.length; i++) this.insert(symbol[i], 'multiply');\n        return this;\n      }\n      return this.insert(symbol, 'multiply');\n    },\n    /**\r\n     * This method should be called after any major \"surgery\" on a symbol.\r\n     * It updates the hash of the symbol for example if the fname of a\r\n     * function has changed it will update the hash of the symbol.\r\n     */\n    updateHash: function () {\n      if (this.group === N) return;\n      if (this.group === FN) {\n        var contents = '',\n          args = this.args,\n          is_parens = this.fname === PARENTHESIS;\n        for (var i = 0; i < args.length; i++) contents += (i === 0 ? '' : ',') + text(args[i]);\n        var fn_name = is_parens ? '' : this.fname;\n        this.value = fn_name + (is_parens ? contents : inBrackets(contents));\n      } else if (!(this.group === S || this.group === PL)) {\n        this.value = text(this, 'hash');\n      }\n    },\n    /**\r\n     * this function defines how every group in stored within a group of\r\n     * higher order think of it as the switchboard for the library. It\r\n     * defines the hashes for symbols.\r\n     * @param {int} group\r\n     */\n    keyForGroup: function (group) {\n      var g = this.group;\n      var key;\n      if (g === N) {\n        key = this.value;\n      } else if (g === S || g === P) {\n        if (group === PL) key = this.power.toDecimal();else key = this.value;\n      } else if (g === FN) {\n        if (group === PL) key = this.power.toDecimal();else key = text(this, 'hash');\n      } else if (g === PL) {\n        //if the order is reversed then we'll assume multiplication\n        //TODO: possible future dilemma\n        if (group === CB) key = text(this, 'hash');else if (group === CP) {\n          if (this.power.equals(1)) key = this.value;else key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();\n        } else if (group === PL) key = this.power.toString();else key = this.value;\n        return key;\n      } else if (g === CP) {\n        if (group === CP) {\n          key = text(this, 'hash');\n        }\n        if (group === PL) key = this.power.toDecimal();else key = this.value;\n      } else if (g === CB) {\n        if (group === PL) key = this.power.toDecimal();else key = text(this, 'hash');\n      } else if (g === EX) {\n        if (group === PL) key = text(this.power);else key = text(this, 'hash');\n      }\n      return key;\n    },\n    /**\r\n     * Symbols are typically stored in an object which works fine for most\r\n     * cases but presents a problem when the order of the symbols makes\r\n     * a difference. This function simply collects all the symbols and\r\n     * returns them as an array. If a function is supplied then that\r\n     * function is called on every symbol contained within the object.\r\n     * @param {Function} fn\r\n     * @param {Object} opt\r\n     * @param {Function} sort_fn\r\n     * @@param {Boolean} expand_symbol\r\n     * @returns {Array}\r\n     */\n    collectSymbols: function (fn, opt, sort_fn, expand_symbol) {\n      var collected = [];\n      if (!this.symbols) collected.push(this);else {\n        for (var x in this.symbols) {\n          var symbol = this.symbols[x];\n          if (expand_symbol && (symbol.group === PL || symbol.group === CP)) {\n            collected = collected.concat(symbol.collectSymbols());\n          } else collected.push(fn ? fn(symbol, opt) : symbol);\n        }\n      }\n      if (sort_fn === null) sort_fn = undefined; //WTF Firefox? Seriously?\n\n      return collected.sort(sort_fn); //sort hopefully gives us some sort of consistency\n    },\n    /**\r\n     * Returns the latex representation of the symbol\r\n     * @param {String} option\r\n     * @returns {String}\r\n     */\n    latex: function (option) {\n      return LaTeX.latex(this, option);\n    },\n    /**\r\n     * Returns the text representation of a symbol\r\n     * @param {String} option\r\n     * @returns {String}\r\n     */\n    text: function (option) {\n      return text(this, option);\n    },\n    /**\r\n     * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\r\n     * @@param {bool} abs Compares the absolute value\r\n     */\n    isOne: function (abs) {\n      var f = abs ? 'absEquals' : 'equals';\n      if (this.group === N) return this.multiplier[f](1);else return this.power.equals(0);\n    },\n    isComposite: function () {\n      var g = this.group,\n        pg = this.previousGroup;\n      return g === CP || g === PL || pg === PL || pg === CP;\n    },\n    isCombination: function () {\n      var g = this.group,\n        pg = this.previousGroup;\n      return g === CB || pg === CB;\n    },\n    lessThan: function (n) {\n      return this.multiplier.lessThan(n);\n    },\n    greaterThan: function (n) {\n      if (!isSymbol(n)) {\n        n = new Symbol(n);\n      }\n\n      // We can't tell for sure if a is greater than be if they're not both numbers\n      if (!this.isConstant(true) || !n.isConstant(true)) {\n        return false;\n      }\n      return this.multiplier.greaterThan(n.multiplier);\n    },\n    /**\r\n     * Get's the denominator of the symbol if the symbol is of class CB (multiplication)\r\n     * with other classes the symbol is either the denominator or not.\r\n     * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\r\n     * denominator and has to be found by looking at the actual symbols themselves.\r\n     */\n    getDenom: function () {\n      var retval, symbol;\n      symbol = this.clone();\n      //e.g. 1/(x*(x+1))\n      if (this.group === CB && this.power.lessThan(0)) symbol = _.expand(symbol);\n\n      //if the symbol already is the denominator... DONE!!!\n      if (symbol.power.lessThan(0) || symbol.group === EX && symbol.power.multiplier.lessThan(0)) {\n        var d = _.parse(symbol.multiplier.den);\n        retval = symbol.toUnitMultiplier();\n        retval.power.negate();\n        retval = _.multiply(d, retval); //put back the coeff\n      } else if (symbol.group === CB) {\n        retval = _.parse(symbol.multiplier.den);\n        for (var x in symbol.symbols) {\n          var s = symbol.symbols[x];\n          if (s.power < 0 || s.group === EX && s.power.multiplier.lessThan(0)) retval = _.multiply(retval, symbol.symbols[x].clone().invert());\n        }\n      } else {\n        retval = _.parse(symbol.multiplier.den);\n      }\n      return retval;\n    },\n    getNum: function () {\n      var retval, symbol;\n      symbol = this.clone();\n      //e.g. 1/(x*(x+1))\n      if (symbol.group === CB && symbol.power.lessThan(0)) symbol = _.expand(symbol);\n      //if the symbol already is the denominator... DONE!!!\n      if (symbol.power.greaterThan(0) && symbol.group !== CB || symbol.group === EX && symbol.power.multiplier.greaterThan(0)) {\n        retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\n      } else if (symbol.group === CB) {\n        retval = _.parse(symbol.multiplier.num);\n        symbol.each(function (x) {\n          if (x.power > 0 || x.group === EX && x.power.multiplier > 0) {\n            retval = _.multiply(retval, x.clone());\n          }\n        });\n      }\n      //            else if(symbol.group === EX && this.previousGroup === S) {\n      //                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\n      //            }\n      else {\n        retval = _.parse(symbol.multiplier.num);\n      }\n      return retval;\n    },\n    toString: function () {\n      return this.text();\n    }\n  };\n\n  //Parser =======================================================================\n  //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\n  function Parser() {\n    //Point to the local parser instead of the global one\n    var _ = this;\n    var bin = {};\n    var preprocessors = {\n      names: [],\n      actions: []\n    };\n\n    //Parser.classes ===============================================================\n    function Slice(upper, lower) {\n      this.start = upper;\n      this.end = lower;\n    }\n    ;\n    Slice.prototype.isConstant = function () {\n      return this.start.isConstant() && this.end.isConstant();\n    };\n    Slice.prototype.text = function () {\n      return text(this.start) + ':' + text(this.end);\n    };\n\n    /**\r\n     * Class used to collect arguments for functions\r\n     * @returns {Parser.Collection}\r\n     */\n    function Collection() {\n      this.elements = [];\n    }\n    Collection.prototype.append = function (e) {\n      this.elements.push(e);\n    };\n    Collection.prototype.getItems = function () {\n      return this.elements;\n    };\n    Collection.prototype.toString = function () {\n      return _.pretty_print(this.elements);\n    };\n    Collection.create = function (e) {\n      var collection = new Collection();\n      if (e) collection.append(e);\n      return collection;\n    };\n    function Token(node, node_type, column) {\n      this.type = node_type;\n      this.value = node;\n      if (column !== undefined) this.column = column + 1;\n      if (node_type === Token.OPERATOR) {\n        //copy everything over from the operator\n        var operator = operators[node];\n        for (var x in operator) this[x] = operator[x];\n      } else if (node_type === Token.FUNCTION) {\n        this.precedence = Token.MAX_PRECEDENCE; //leave enough roon\n        this.leftAssoc = false;\n      }\n    }\n    Token.prototype.toString = function () {\n      return this.value;\n    };\n    Token.prototype.toString = function () {\n      if (this.is_prefix) return '`' + this.value;\n      return this.value;\n    };\n    //some constants\n    Token.OPERATOR = 'OPERATOR';\n    Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';\n    Token.FUNCTION = 'FUNCTION';\n    Token.UNIT = 'UNIT';\n    Token.KEYWORD = 'KEYWORD';\n    Token.MAX_PRECEDENCE = 999;\n    //create link to classes\n    this.classes = {\n      Collection: Collection,\n      Slice: Slice,\n      Token: Token\n    };\n    //Parser.modules ===============================================================\n    //object for functions which handle complex number\n    var complex = {\n      prec: undefined,\n      cos: function (r, i) {\n        var re, im;\n        re = _.parse(Math.cos(r) * Math.cosh(i));\n        im = _.parse(Math.sin(r) * Math.sinh(i));\n        return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n      },\n      sin: function (r, i) {\n        var re, im;\n        re = _.parse(Math.sin(r) * Math.cosh(i));\n        im = _.parse(Math.cos(r) * Math.sinh(i));\n        return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n      },\n      tan: function (r, i) {\n        var re, im;\n        re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));\n        im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));\n        return _.add(re, _.multiply(im, Symbol.imaginary()));\n      },\n      sec: function (r, i) {\n        var t = this.removeDen(this.cos(r, i));\n        return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      csc: function (r, i) {\n        var t = this.removeDen(this.sin(r, i));\n        return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      cot: function (r, i) {\n        var t = this.removeDen(this.tan(r, i));\n        return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      acos: function (r, i) {\n        var symbol, sq, a, b, c, squared;\n        symbol = this.fromArray([r, i]);\n        squared = _.pow(symbol.clone(), new Symbol(2));\n        sq = _.expand(squared); //z*z\n        a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());\n        b = _.expand(_.add(symbol.clone(), a));\n        c = log(b);\n        return _.expand(_.multiply(Symbol.imaginary().negate(), c));\n      },\n      asin: function (r, i) {\n        return _.subtract(_.parse('pi/2'), this.acos(r, i));\n      },\n      atan: function (r, i) {\n        // Handle i and -i\n        if (r.equals(0) && (i.equals(1) || i.equals(-1))) {\n          // Just copy Wolfram Alpha for now. The parenthesis \n          return _.parse(`${Symbol.infinity()}*${Settings.IMAGINARY}*${i}`);\n        }\n        var a, b, c, symbol;\n        symbol = complex.fromArray([r, i]);\n        a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));\n        b = log(_.expand(_.subtract(new Symbol(1), a.clone())));\n        c = log(_.expand(_.add(new Symbol(1), a.clone())));\n        return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));\n      },\n      asec: function (r, i) {\n        var d = this.removeDen([r, i]);\n        d[1].negate();\n        return this.acos.apply(this, d);\n      },\n      acsc: function (r, i) {\n        var d = this.removeDen([r, i]);\n        d[1].negate();\n        return this.asin.apply(this, d);\n      },\n      acot: function (r, i) {\n        var d = this.removeDen([r, i]);\n        d[1].negate();\n        return this.atan.apply(this, d);\n      },\n      //Hyperbolic trig\n      cosh: function (r, i) {\n        var re, im;\n        re = _.parse(Math.cosh(r) * Math.cos(i));\n        im = _.parse(Math.sinh(r) * Math.sin(i));\n        return _.add(re, _.multiply(im, Symbol.imaginary()));\n      },\n      sinh: function (r, i) {\n        var re, im;\n        re = _.parse(Math.sinh(r) * Math.cos(i));\n        im = _.parse(Math.cosh(r) * Math.sin(i));\n        return _.add(re, _.multiply(im, Symbol.imaginary()));\n      },\n      tanh: function (r, i) {\n        var re, im;\n        re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));\n        im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));\n        return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n      },\n      sech: function (r, i) {\n        var t = this.removeDen(this.cosh(r, i));\n        return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      csch: function (r, i) {\n        var t = this.removeDen(this.sinh(r, i));\n        return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      coth: function (r, i) {\n        var t = this.removeDen(this.tanh(r, i));\n        return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      acosh: function (r, i) {\n        var a, b, z;\n        z = this.fromArray([r, i]);\n        a = sqrt(_.add(z.clone(), new Symbol(1)));\n        b = sqrt(_.subtract(z.clone(), new Symbol(1)));\n        return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));\n      },\n      asinh: function (r, i) {\n        var a, z;\n        z = this.fromArray([r, i]);\n        a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));\n        return _.expand(log(_.add(z, a)));\n      },\n      atanh: function (r, i) {\n        var a, b, z;\n        z = this.fromArray([r, i]);\n        a = log(_.add(z.clone(), new Symbol(1)));\n        b = log(_.subtract(new Symbol(1), z));\n        return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));\n      },\n      asech: function (r, i) {\n        var t = this.removeDen([r, i]);\n        t[1].negate();\n        return this.acosh.apply(this, t);\n      },\n      acsch: function (r, i) {\n        var t = this.removeDen([r, i]);\n        t[1].negate();\n        return this.asinh.apply(this, t);\n      },\n      acoth: function (r, i) {\n        var t = this.removeDen([r, i]);\n        t[1].negate();\n        return this.atanh.apply(this, t);\n      },\n      sqrt: function (symbol) {\n        var re, im, h, a, d;\n        re = symbol.realpart();\n        im = symbol.imagpart();\n        h = Symbol.hyp(re, im);\n        a = _.add(re.clone(), h);\n        d = sqrt(_.multiply(new Symbol(2), a.clone()));\n        return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));\n      },\n      log: function (r, i) {\n        var re, im, phi;\n        re = log(Symbol.hyp(r, i));\n        phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal())) : Math.atan2(i, r);\n        im = _.parse(phi);\n        return _.add(re, _.multiply(Symbol.imaginary(), im));\n      },\n      erf(symbol, n) {\n        //Do nothing for now. Revisit this in the future.\n        return _.symfunction('erf', [symbol]);\n        n = n || 30;\n        var f = function (R, I) {\n          return block('PARSE2NUMBER', function () {\n            var retval = new Symbol(0);\n            for (var i = 0; i < n; i++) {\n              var a, b;\n              a = _.parse(bigDec.exp(bigDec(i).toPower(2).neg().dividedBy(bigDec(n).pow(2).plus(bigDec(R).toPower(2).times(4)))));\n              b = _.parse(format('2*({1})-e^(-(2*{0}*{1}*{2}))*(2*{1}*cosh({2}*{3})-{0}*{3}*sinh({3}*{2}))', Settings.IMAGINARY, R, I, i));\n              retval = _.add(retval, _.multiply(a, b));\n            }\n            return _.multiply(retval, new Symbol(2));\n          }, true);\n        };\n        var re, im, a, b, c, k;\n        re = symbol.realpart();\n        im = symbol.imagpart();\n        k = _.parse(format('(e^(-{0}^2))/pi', re));\n        a = _.parse(format('(1-e^(-(2*{0}*{1}*{2})))/(2*{1})', Settings.IMAGINARY, re, im));\n        b = f(re.toString(), im.toString());\n        return _.add(_.parse(Math2.erf(re.toString())), _.multiply(k, _.add(a, b)));\n      },\n      removeDen: function (symbol) {\n        var den, r, i, re, im;\n        if (isArray(symbol)) {\n          r = symbol[0];\n          i = symbol[1];\n        } else {\n          r = symbol.realpart();\n          i = symbol.imagpart();\n        }\n        den = Math.pow(r, 2) + Math.pow(i, 2);\n        re = _.parse(r / den);\n        im = _.parse(i / den);\n        return [re, im];\n      },\n      fromArray: function (arr) {\n        return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));\n      },\n      evaluate: function (symbol, f) {\n        var re, im, sign;\n        sign = symbol.power.sign();\n        //remove it from under the denominator\n        symbol.power = symbol.power.abs();\n        //expand\n        if (symbol.power.greaterThan(1)) symbol = _.expand(symbol);\n        //remove the denominator\n        if (sign < 0) {\n          var d = this.removeDen(symbol);\n          re = d[0];\n          im = d[1];\n        } else {\n          re = symbol.realpart();\n          im = symbol.imagpart();\n        }\n        if (re.isConstant('all') && im.isConstant('all')) return this[f].call(this, re, im);\n        return _.symfunction(f, [symbol]);\n      }\n    };\n    //object for functions which handle trig\n    var trig = this.trig = {\n      //container for trigonometric function\n      cos: function (symbol) {\n        if (symbol.equals('pi') && symbol.multiplier.den.equals(2)) return new Symbol(0);\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.equals(new Symbol(Settings.PI / 2))) return new Symbol(0);\n          if (symbol.isConstant()) {\n            if (Settings.USE_BIG) {\n              return new Symbol(bigDec.cos(symbol.multiplier.toDecimal()));\n            }\n            return new Symbol(Math.cos(symbol.valueOf()));\n          }\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'cos');\n          }\n        }\n        if (symbol.equals(0)) return new Symbol(1);\n        var retval,\n          c = false,\n          q = getQuadrant(symbol.multiplier.toDecimal()),\n          m = symbol.multiplier.abs();\n        symbol.multiplier = m;\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return for 1 or -1 for multiples of pi\n          if (isInt(m)) {\n            retval = new Symbol(even(m) ? 1 : -1);\n          } else {\n            var n = Number(m.num),\n              d = Number(m.den);\n            if (d === 2) retval = new Symbol(0);else if (d === 3) {\n              retval = _.parse('1/2');\n              c = true;\n            } else if (d === 4) {\n              retval = _.parse('1/sqrt(2)');\n              c = true;\n            } else if (d === 6) {\n              retval = _.parse('sqrt(3)/2');\n              c = true;\n            } else retval = _.symfunction('cos', [symbol]);\n          }\n        }\n        if (c && (q === 2 || q === 3)) retval.negate();\n        if (!retval) retval = _.symfunction('cos', [symbol]);\n        return retval;\n      },\n      sin: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            if (symbol % Math.PI === 0) {\n              return new Symbol(0);\n            }\n            if (Settings.USE_BIG) {\n              return new Symbol(bigDec.sin(symbol.multiplier.toDecimal()));\n            }\n            return new Symbol(Math.sin(symbol.valueOf()));\n          }\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'sin');\n        }\n        if (symbol.equals(0)) return new Symbol(0);\n        var retval,\n          c = false,\n          q = getQuadrant(symbol.multiplier.toDecimal()),\n          sign = symbol.multiplier.sign(),\n          m = symbol.multiplier.abs();\n        symbol.multiplier = m;\n        if (symbol.equals('pi')) retval = new Symbol(0);else if (symbol.isPi() && symbol.isLinear()) {\n          //return for 0 for multiples of pi\n          if (isInt(m)) {\n            retval = new Symbol(0);\n          } else {\n            var n = m.num,\n              d = m.den;\n            if (d == 2) {\n              retval = new Symbol(1);\n              c = true;\n            } else if (d == 3) {\n              retval = _.parse('sqrt(3)/2');\n              c = true;\n            } else if (d == 4) {\n              retval = _.parse('1/sqrt(2)');\n              c = true;\n            } else if (d == 6) {\n              retval = _.parse('1/2');\n              c = true;\n            } else retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\n          }\n        }\n        if (!retval) retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\n        if (c && (q === 3 || q === 4)) retval.negate();\n        return retval;\n      },\n      tan: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol % Math.PI === 0 && symbol.isLinear()) {\n            return new Symbol(0);\n          }\n          if (symbol.isConstant()) {\n            if (Settings.USE_BIG) {\n              return new Symbol(bigDec.tan(symbol.multiplier.toDecimal()));\n            }\n            return new Symbol(Math.tan(symbol.valueOf()));\n          }\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'tan');\n        }\n        var retval,\n          c = false,\n          q = getQuadrant(symbol.multiplier.toDecimal()),\n          m = symbol.multiplier;\n        symbol.multiplier = m;\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return 0 for all multiples of pi\n          if (isInt(m)) {\n            retval = new Symbol(0);\n          } else {\n            var n = m.num,\n              d = m.den;\n            if (d == 2) throw new UndefinedError('tan is undefined for ' + symbol.toString());else if (d == 3) {\n              retval = _.parse('sqrt(3)');\n              c = true;\n            } else if (d == 4) {\n              retval = new Symbol(1);\n              c = true;\n            } else if (d == 6) {\n              retval = _.parse('1/sqrt(3)');\n              c = true;\n            } else retval = _.symfunction('tan', [symbol]);\n          }\n        }\n        if (!retval) retval = _.symfunction('tan', [symbol]);\n        if (c && (q === 2 || q === 4)) retval.negate();\n        return retval;\n      },\n      sec: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            if (Settings.USE_BIG) {\n              return new Symbol(new bigDec(1).dividedBy(bigDec.cos(symbol.multiplier.toDecimal())));\n            }\n            return new Symbol(Math2.sec(symbol.valueOf()));\n          }\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'sec');\n          return _.parse(format('1/cos({0})', symbol));\n        }\n        var retval,\n          c = false,\n          q = getQuadrant(symbol.multiplier.toDecimal()),\n          m = symbol.multiplier.abs();\n        symbol.multiplier = m;\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return for 1 or -1 for multiples of pi\n          if (isInt(m)) {\n            retval = new Symbol(even(m) ? 1 : -1);\n          } else {\n            var n = m.num,\n              d = m.den;\n            if (d == 2) throw new UndefinedError('sec is undefined for ' + symbol.toString());else if (d == 3) {\n              retval = new Symbol(2);\n              c = true;\n            } else if (d == 4) {\n              retval = _.parse('sqrt(2)');\n              c = true;\n            } else if (d == 6) {\n              retval = _.parse('2/sqrt(3)');\n              c = true;\n            } else retval = _.symfunction('sec', [symbol]);\n          }\n        }\n        if (c && (q === 2 || q === 3)) retval.negate();\n        if (!retval) retval = _.symfunction('sec', [symbol]);\n        return retval;\n      },\n      csc: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            if (Settings.USE_BIG) {\n              return new Symbol(new bigDec(1).dividedBy(bigDec.sin(symbol.multiplier.toDecimal())));\n            }\n            return new Symbol(Math2.csc(symbol.valueOf()));\n          }\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'csc');\n          return _.parse(format('1/sin({0})', symbol));\n        }\n        var retval,\n          c = false,\n          q = getQuadrant(symbol.multiplier.toDecimal()),\n          sign = symbol.multiplier.sign(),\n          m = symbol.multiplier.abs();\n        symbol.multiplier = m;\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return for 0 for multiples of pi\n          if (isInt(m)) {\n            throw new UndefinedError('csc is undefined for ' + symbol.toString());\n          } else {\n            var n = m.num,\n              d = m.den;\n            if (d == 2) {\n              retval = new Symbol(1);\n              c = true;\n            } else if (d == 3) {\n              retval = _.parse('2/sqrt(3)');\n              c = true;\n            } else if (d == 4) {\n              retval = _.parse('sqrt(2)');\n              c = true;\n            } else if (d == 6) {\n              retval = new Symbol(2);\n              c = true;\n            } else retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\n          }\n        }\n        if (!retval) retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\n        if (c && (q === 3 || q === 4)) retval.negate();\n        return retval;\n      },\n      cot: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol % (Math.PI / 2) === 0) {\n            return new Symbol(0);\n          }\n          if (symbol.isConstant()) {\n            if (Settings.USE_BIG) {\n              return new Symbol(new bigDec(1).dividedBy(bigDec.tan(symbol.multiplier.toDecimal())));\n            }\n            return new Symbol(Math2.cot(symbol.valueOf()));\n          }\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'cot');\n          return _.parse(format('1/tan({0})', symbol));\n        }\n        var retval,\n          c = false,\n          q = getQuadrant(symbol.multiplier.toDecimal()),\n          m = symbol.multiplier;\n        symbol.multiplier = m;\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return 0 for all multiples of pi\n          if (isInt(m)) {\n            throw new UndefinedError('cot is undefined for ' + symbol.toString());\n          } else {\n            var n = m.num,\n              d = m.den;\n            if (d == 2) retval = new Symbol(0);else if (d == 3) {\n              retval = _.parse('1/sqrt(3)');\n              c = true;\n            } else if (d == 4) {\n              retval = new Symbol(1);\n              c = true;\n            } else if (d == 6) {\n              retval = _.parse('sqrt(3)');\n              c = true;\n            } else retval = _.symfunction('cot', [symbol]);\n          }\n        }\n        if (!retval) retval = _.symfunction('cot', [symbol]);\n        if (c && (q === 2 || q === 4)) retval.negate();\n        return retval;\n      },\n      acos: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            // Handle values in the complex domain\n            if (symbol.gt(1) || symbol.lt(-1)) {\n              var x = symbol.toString();\n              return expand(evaluate(`pi/2-asin(${x})`));\n            }\n            // Handle big numbers\n            if (Settings.USE_BIG) {\n              return new Symbol(bigDec.acos(symbol.multiplier.toDecimal()));\n            }\n            return new Symbol(Math.acos(symbol.valueOf()));\n          }\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'acos');\n        }\n        return _.symfunction('acos', arguments);\n      },\n      asin: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            // Handle values in the complex domain\n            if (symbol.gt(1) || symbol.lt(-1)) {\n              var i = Settings.IMAGINARY;\n              var x = symbol.multiplier.toDecimal();\n              return expand(evaluate(`${i}*log(sqrt(1-${x}^2)-${i}*${x})`));\n            }\n            // Handle big numbers\n            if (Settings.USE_BIG) {\n              return new Symbol(bigDec.asin(symbol.multiplier.toDecimal()));\n            }\n            return new Symbol(Math.asin(symbol.valueOf()));\n          }\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'asin');\n        }\n        return _.symfunction('asin', arguments);\n      },\n      atan: function (symbol) {\n        var retval;\n        if (symbol.equals(0)) retval = new Symbol(0);else if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            // Handle big numbers\n            if (Settings.USE_BIG) {\n              return new Symbol(bigDec.atan(symbol.multiplier.toDecimal()));\n            }\n            return new Symbol(Math.atan(symbol.valueOf()));\n          }\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'atan');\n          return _.symfunction('atan', arguments);\n        } else if (symbol.equals(-1)) retval = _.parse('-pi/4');else retval = _.symfunction('atan', arguments);\n        return retval;\n      },\n      asec: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.equals(0)) {\n            throw new OutOfFunctionDomainError('Input is out of the domain of sec!');\n          }\n          if (symbol.isConstant()) {\n            return trig.acos(symbol.invert());\n          }\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'asec');\n          }\n        }\n        return _.symfunction('asec', arguments);\n      },\n      acsc: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            return trig.asin(symbol.invert());\n          }\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'acsc');\n        }\n        return _.symfunction('acsc', arguments);\n      },\n      acot: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());\n          }\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'acot');\n        }\n        return _.symfunction('acot', arguments);\n      },\n      atan2: function (a, b) {\n        if (a.equals(0) && b.equals(0)) throw new UndefinedError('atan2 is undefined for 0, 0');\n        if (Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {\n          return new Symbol(Math.atan2(a, b));\n        }\n        return _.symfunction('atan2', arguments);\n      }\n    };\n    //object for functions which handle hyperbolic trig\n    var trigh = this.trigh = {\n      //container for hyperbolic trig function\n      cosh: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.cosh(symbol.valueOf()));\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'cosh');\n          }\n        }\n        return retval = _.symfunction('cosh', arguments);\n      },\n      sinh: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.sinh(symbol.valueOf()));\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'sinh');\n          }\n        }\n        return retval = _.symfunction('sinh', arguments);\n      },\n      tanh: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.tanh(symbol.valueOf()));\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'tanh');\n          }\n        }\n        return retval = _.symfunction('tanh', arguments);\n      },\n      sech: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            return new Symbol(Math.sech(symbol.valueOf()));\n          }\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'sech');\n          }\n          return _.parse(format('1/cosh({0})', symbol));\n        }\n        return retval = _.symfunction('sech', arguments);\n      },\n      csch: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.csch(symbol.valueOf()));\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'csch');\n          }\n          return _.parse(format('1/sinh({0})', symbol));\n        }\n        return retval = _.symfunction('csch', arguments);\n      },\n      coth: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.coth(symbol.valueOf()));\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'coth');\n          }\n          return _.parse(format('1/tanh({0})', symbol));\n        }\n        return retval = _.symfunction('coth', arguments);\n      },\n      acosh: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'acosh');else if (Settings.PARSE2NUMBER) retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2-1))', symbol.toString())));else retval = _.symfunction('acosh', arguments);\n        return retval;\n      },\n      asinh: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'asinh');else if (Settings.PARSE2NUMBER) retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2+1))', symbol.toString())));else retval = _.symfunction('asinh', arguments);\n        return retval;\n      },\n      atanh: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'atanh');else if (Settings.PARSE2NUMBER) {\n          retval = evaluate(_.parse(format('(1/2)*' + Settings.LOG + '((1+({0}))/(1-({0})))', symbol.toString())));\n        } else retval = _.symfunction('atanh', arguments);\n        return retval;\n      },\n      asech: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'asech');else if (Settings.PARSE2NUMBER) retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));else retval = _.symfunction('asech', arguments);\n        return retval;\n      },\n      acsch: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'acsch');else if (Settings.PARSE2NUMBER) retval = evaluate(_.parse(format(Settings.LOG + '((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));else retval = _.symfunction('acsch', arguments);\n        return retval;\n      },\n      acoth: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'acoth');else if (Settings.PARSE2NUMBER) {\n          if (symbol.equals(1)) retval = Symbol.infinity();else retval = evaluate(_.divide(log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))), new Symbol(2)));\n        } else retval = _.symfunction('acoth', arguments);\n        return retval;\n      }\n    };\n    //list of supported units\n    this.units = {};\n    //list all the supported operators\n    var operators = {\n      '\\\\': {\n        precedence: 8,\n        operator: '\\\\',\n        action: 'slash',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function (e) {\n          return e; //bypass the slash\n        }\n      },\n      '!!': {\n        precedence: 7,\n        operator: '!!',\n        action: 'dfactorial',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        operation: function (e) {\n          return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\n        }\n      },\n      '!': {\n        precedence: 7,\n        operator: '!',\n        action: 'factorial',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        operation: function (e) {\n          return factorial(e); //wrap it in a factorial function\n        }\n      },\n      '^': {\n        precedence: 6,\n        operator: '^',\n        action: 'pow',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      },\n      '**': {\n        precedence: 6,\n        operator: '**',\n        action: 'pow',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      },\n      '%': {\n        precedence: 4,\n        operator: '%',\n        action: 'percent',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        overloaded: true,\n        overloadAction: 'mod',\n        overloadLeftAssoc: false,\n        operation: function (x) {\n          return _.divide(x, new Symbol(100));\n        }\n      },\n      '*': {\n        precedence: 4,\n        operator: '*',\n        action: 'multiply',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '/': {\n        precedence: 4,\n        operator: '/',\n        action: 'divide',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '+': {\n        precedence: 3,\n        operator: '+',\n        action: 'add',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function (x) {\n          return x;\n        }\n      },\n      'plus': {\n        precedence: 3,\n        operator: 'plus',\n        action: 'add',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function (x) {\n          return x;\n        }\n      },\n      '-': {\n        precedence: 3,\n        operator: '-',\n        action: 'subtract',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function (x) {\n          return x.negate();\n        }\n      },\n      '=': {\n        precedence: 2,\n        operator: '=',\n        action: 'equals',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '==': {\n        precedence: 1,\n        operator: '==',\n        action: 'eq',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '<': {\n        precedence: 1,\n        operator: '<',\n        action: 'lt',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '<=': {\n        precedence: 1,\n        operator: '<=',\n        action: 'lte',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '>': {\n        precedence: 1,\n        operator: '>',\n        action: 'gt',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '=>': {\n        precedence: 1,\n        operator: '=>',\n        action: 'gte',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      ',': {\n        precedence: 0,\n        operator: ',',\n        action: 'comma',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      ':': {\n        precedence: 0,\n        operator: ',',\n        action: 'assign',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false,\n        vectorFn: 'slice'\n      },\n      ':=': {\n        precedence: 0,\n        operator: ',',\n        action: 'function_assign',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      }\n    };\n    //brackets\n    var brackets = {\n      '(': {\n        type: 'round',\n        id: 1,\n        is_open: true,\n        is_close: false\n      },\n      ')': {\n        type: 'round',\n        id: 2,\n        is_open: false,\n        is_close: true\n      },\n      '[': {\n        type: 'square',\n        id: 3,\n        is_open: true,\n        is_close: false,\n        maps_to: 'vector'\n      },\n      ']': {\n        type: 'square',\n        id: 4,\n        is_open: false,\n        is_close: true\n      },\n      '{': {\n        type: 'curly',\n        id: 5,\n        is_open: true,\n        is_close: false,\n        maps_to: 'Set'\n      },\n      '}': {\n        type: 'curly',\n        id: 6,\n        is_open: false,\n        is_close: true\n      }\n    };\n    // Supported functions.\n    // Format: function_name: [mapped_function, number_of_parameters]\n    var functions = this.functions = {\n      'cos': [trig.cos, 1],\n      'sin': [trig.sin, 1],\n      'tan': [trig.tan, 1],\n      'sec': [trig.sec, 1],\n      'csc': [trig.csc, 1],\n      'cot': [trig.cot, 1],\n      'acos': [trig.acos, 1],\n      'asin': [trig.asin, 1],\n      'atan': [trig.atan, 1],\n      'arccos': [trig.acos, 1],\n      'arcsin': [trig.asin, 1],\n      'arctan': [trig.atan, 1],\n      'asec': [trig.asec, 1],\n      'acsc': [trig.acsc, 1],\n      'acot': [trig.acot, 1],\n      'atan2': [trig.atan2, 2],\n      'acoth': [trigh.acoth, 1],\n      'asech': [trigh.asech, 1],\n      'acsch': [trigh.acsch, 1],\n      'sinh': [trigh.sinh, 1],\n      'cosh': [trigh.cosh, 1],\n      'tanh': [trigh.tanh, 1],\n      'asinh': [trigh.asinh, 1],\n      'sech': [trigh.sech, 1],\n      'csch': [trigh.csch, 1],\n      'coth': [trigh.coth, 1],\n      'acosh': [trigh.acosh, 1],\n      'atanh': [trigh.atanh, 1],\n      'log10': [, 1],\n      'exp': [exp, 1],\n      'radians': [radians, 1],\n      'degrees': [degrees, 1],\n      'min': [min, -1],\n      'max': [max, -1],\n      'erf': [, 1],\n      'floor': [, 1],\n      'ceil': [, 1],\n      'trunc': [, 1],\n      'Si': [, 1],\n      'step': [, 1],\n      'rect': [, 1],\n      'sinc': [sinc, 1],\n      'tri': [, 1],\n      'sign': [sign, 1],\n      'Ci': [, 1],\n      'Ei': [, 1],\n      'Shi': [, 1],\n      'Chi': [, 1],\n      'Li': [, 1],\n      'fib': [, 1],\n      'fact': [factorial, 1],\n      'factorial': [factorial, 1],\n      'continued_fraction': [continued_fraction, [1, 2]],\n      'dfactorial': [, 1],\n      'gamma_incomplete': [, [1, 2]],\n      'round': [round, [1, 2]],\n      'scientific': [scientific, [1, 2]],\n      'mod': [mod, 2],\n      'pfactor': [pfactor, 1],\n      'vector': [vector, -1],\n      'matrix': [matrix, -1],\n      'Set': [set, -1],\n      'imatrix': [imatrix, -1],\n      'parens': [parens, -1],\n      'sqrt': [sqrt, 1],\n      'cbrt': [cbrt, 1],\n      'nthroot': [nthroot, 2],\n      'log': [log, [1, 2]],\n      'expand': [expandall, 1],\n      'abs': [abs, 1],\n      'invert': [invert, 1],\n      'determinant': [determinant, 1],\n      'size': [size, 1],\n      'transpose': [transpose, 1],\n      'dot': [dot, 2],\n      'cross': [cross, 2],\n      'vecget': [vecget, 2],\n      'vecset': [vecset, 3],\n      'vectrim': [vectrim, [1, 2]],\n      'matget': [matget, 3],\n      'matset': [matset, 4],\n      'matgetrow': [matgetrow, 2],\n      'matsetrow': [matsetrow, 3],\n      'matgetcol': [matgetcol, 2],\n      'matsetcol': [matsetcol, 3],\n      'rationalize': [rationalize, 1],\n      'IF': [IF, 3],\n      'is_in': [is_in, 2],\n      //imaginary support\n      'realpart': [realpart, 1],\n      'imagpart': [imagpart, 1],\n      'conjugate': [conjugate, 1],\n      'arg': [arg, 1],\n      'polarform': [polarform, 1],\n      'rectform': [rectform, 1],\n      'sort': [sort, [1, 2]],\n      'integer_part': [, 1],\n      'union': [union, 2],\n      'contains': [contains, 2],\n      'intersection': [intersection, 2],\n      'difference': [difference, 2],\n      'intersects': [intersects, 2],\n      'is_subset': [is_subset, 2],\n      //system support\n      'print': [print, -1]\n    };\n\n    //error handler\n    this.error = err;\n    //this function is used to comb through the function modules and find a function given its name\n    var findFunction = function (fname) {\n      var fmodules = Settings.FUNCTION_MODULES,\n        l = fmodules.length;\n      for (var i = 0; i < l; i++) {\n        var fmodule = fmodules[i];\n        if (fname in fmodule) return fmodule[fname];\n      }\n      err('The function ' + fname + ' is undefined!');\n    };\n\n    /**\r\n     * This method gives the ability to override operators with new methods.\r\n     * @param {String} which\r\n     * @param {Function} with_what\r\n     */\n    this.override = function (which, with_what) {\n      if (!bin[which]) bin[which] = [];\n      bin[which].push(this[which]);\n      this[which] = with_what;\n    };\n\n    /**\r\n     * Restores a previously overridden operator\r\n     * @param {String} what\r\n     */\n    this.restore = function (what) {\n      if (this[what]) this[what] = bin[what].pop();\n    };\n\n    /**\r\n     * This method is supposed to behave similarly to the override method but it does not override\r\n     * the existing function rather it only extends it\r\n     * @param {String} what\r\n     * @param {Function} with_what\r\n     * @param {boolean} force_call\r\n     */\n    this.extend = function (what, with_what, force_call) {\n      var _ = this,\n        extended = this[what];\n      if (typeof extended === 'function' && typeof with_what === 'function') {\n        var f = this[what];\n        this[what] = function (a, b) {\n          if (isSymbol(a) && isSymbol(b) && !force_call) return f.call(_, a, b);else return with_what.call(_, a, b, f);\n        };\n      }\n    };\n\n    /**\r\n     * Generates library's representation of a function. It's a fancy way of saying a symbol with\r\n     * a few extras. The most important thing is that that it gives a fname and\r\n     * an args property to the symbols in addition to changing its group to FN\r\n     * @param {String} fn_name\r\n     * @param {Array} params\r\n     * @returns {Symbol}\r\n     */\n    this.symfunction = function (fn_name, params) {\n      //call the proper function and return the result;\n      var f = new Symbol(fn_name);\n      f.group = FN;\n      if (typeof params === 'object') params = [].slice.call(params); //ensure an array\n      f.args = params;\n      f.fname = fn_name === PARENTHESIS ? '' : fn_name;\n      f.updateHash();\n      return f;\n    };\n\n    /**\r\n     * An internal function call for the Parser. This will either trigger a real\r\n     * function call if it can do so or just return a symbolic representation of the\r\n     * function using symfunction.\r\n     * @param {String} fn_name\r\n     * @param {Array} args\r\n     * @param {int} allowed_args\r\n     * @returns {Symbol}\r\n     */\n    this.callfunction = function (fn_name, args, allowed_args) {\n      var fn_settings = functions[fn_name];\n      if (!fn_settings) err('Nerdamer currently does not support the function ' + fn_name);\n      var num_allowed_args = fn_settings[1] || allowed_args,\n        //get the number of allowed arguments\n        fn = fn_settings[0],\n        //get the mapped function\n        retval;\n      //We want to be able to call apply on the arguments or create a symfunction. Both require\n      //an array so make sure to wrap the argument in an array.\n      if (!(args instanceof Array)) args = args !== undefined ? [args] : [];\n      if (num_allowed_args !== -1) {\n        var is_array = isArray(num_allowed_args),\n          min_args = is_array ? num_allowed_args[0] : num_allowed_args,\n          max_args = is_array ? num_allowed_args[1] : num_allowed_args,\n          num_args = args.length;\n        var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\n        if (num_args < min_args) err(format(error_msg, 'minimum', min_args, num_args));\n        if (num_args > max_args) err(format(error_msg, 'maximum', max_args, num_args));\n      }\n\n      /*\r\n       * The following are very important to the how nerdamer constructs functions!\r\n       * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\r\n       *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\r\n       * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\r\n       * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\r\n       *     they are expecting a symbolic output.\r\n       */\n      //check if arguments are all numers\n      var numericArgs = allNumbers(args);\n      //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\n      //            if (Settings.USE_BIG && numericArgs) {\n      //                retval = Big[fn_name].apply(undefined, args);\n      //            }\n      //            else {\n      if (!fn) {\n        //Remember assumption 1. No function defined so it MUST be numeric in nature\n        fn = findFunction(fn_name);\n        if (Settings.PARSE2NUMBER && numericArgs) retval = bigConvert(fn.apply(fn, args));else retval = _.symfunction(fn_name, args);\n      } else {\n        //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\n        retval = fn.apply(fn_settings[2], args);\n      }\n      //            }\n\n      return retval;\n    };\n    /**\r\n     * Build a regex based on the operators currently loaded. These operators are to be ignored when\r\n     * substituting spaces for multiplication\r\n     */\n    this.operator_filter_regex = function () {\n      //we only want the operators which are singular since those are the ones\n      //that nerdamer uses anyway\n      var ostr = '^\\\\' + Object.keys(operators).filter(function (x) {\n        if (x.length === 1) return x;\n      }).join('\\\\');\n      //create a regex which captures all spaces between characters except those\n      //have an operator on one end\n      return new RegExp('([' + ostr + '])\\\\s+([' + ostr + '])');\n    }();\n\n    /**\r\n     * Replaces nerdamer.setOperator\r\n     * @param {object} operator\r\n     * @param {boolean} shift\r\n     */\n    this.setOperator = function (operator, action, shift) {\n      var name = operator.operator; //take the name to be the symbol\n      operators[name] = operator;\n      if (action) this[operator.action] = action;\n      //make the parser aware of the operator\n      _[name] = operator.operation;\n      //make the action available to the parser if infix\n      if (!operator.action && !(operator.prefix || operator.postif)) {\n        operator.action = name;\n      }\n      //if this operator is exclusive then all successive operators should be shifted\n      if (shift === 'over' || shift === 'under') {\n        var precedence = operator.precedence;\n        for (var x in operators) {\n          var o = operators[x];\n          var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\n          if (condition) o.precedence++;\n        }\n        ;\n      }\n    };\n\n    /**\r\n     * Gets an opererator by its symbol\r\n     * @param {String} operator\r\n     * @returns {Object}\r\n     */\n    this.getOperator = function (operator) {\n      return operators[operator];\n    };\n    this.aliasOperator = function (o, n) {\n      var t = {};\n      var operator = operators[o];\n      //copy everything over to the new operator\n      for (var x in operator) {\n        t[x] = operator[x];\n      }\n      //update the symbol\n      t.operator = n;\n      this.setOperator(t);\n    };\n\n    /**\r\n     * Returns the list of operators. Caution! Can break parser!\r\n     * @returns {object}\r\n     */\n    this.getOperators = function () {\n      //will replace this with some cloning action in the future\n      return operators;\n    };\n    this.getBrackets = function () {\n      return brackets;\n    };\n    /*\r\n     * Preforms preprocessing on the string. Useful for making early modification before\r\n     * sending to the parser\r\n     * @param {String} e\r\n     */\n    var prepare_expression = function (e) {\n      /*\r\n       * Since variables cannot start with a number, the assumption is made that when this occurs the\r\n       * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for\r\n       * a side-by-side close and open parenthesis\r\n       */\n      e = String(e);\n      //apply preprocessors\n      for (var i = 0; i < preprocessors.actions.length; i++) e = preprocessors.actions[i].call(this, e);\n\n      //e = e.split(' ').join('');//strip empty spaces\n      //replace multiple spaces with one space\n      e = e.replace(/\\s+/g, ' ');\n\n      //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\n      if (/e/gi.test(e)) {\n        e = e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi, function (x) {\n          return scientificToDecimal(x);\n        });\n      }\n      //replace scientific numbers\n\n      //allow omission of multiplication after coefficients\n      e = e.replace(Settings.IMPLIED_MULTIPLICATION_REGEX, function () {\n        var str = arguments[4],\n          group1 = arguments[1],\n          group2 = arguments[2],\n          start = arguments[3],\n          first = str.charAt(start),\n          before = '',\n          d = '*';\n        if (!first.match(/[\\+\\-\\/\\*]/)) before = str.charAt(start - 1);\n        if (before.match(/[a-z]/i)) d = '';\n        return group1 + d + group2;\n      }).replace(/([a-z0-9_]+)/gi, function (match, a) {\n        if (Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {\n          if (!isNaN(a)) return a;\n          return a.split('').join('*');\n        }\n        return a;\n      })\n      //allow omission of multiplication sign between brackets\n      .replace(/\\)\\(/g, ')*(') || '0';\n      //replace x(x+a) with x*(x+a)\n      while (true) {\n        var e_org = e; //store the original\n        e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\n          var g1 = a || c,\n            g2 = b || d;\n          if (g1 in functions)\n            //create a passthrough for functions\n            return g1 + g2;\n          return g1 + '*' + g2;\n        });\n        //if the original equals the replace we're done\n        if (e_org === e) break;\n      }\n      return e;\n    };\n    //delay setting of constants until Settings is ready\n    this.initConstants = function () {\n      this.CONSTANTS = {\n        E: new Symbol(Settings.E),\n        PI: new Symbol(Settings.PI)\n      };\n    };\n    /*\r\n     * Debugging method used to better visualize vector and arrays\r\n     * @param {object} o\r\n     * @returns {String}\r\n     */\n    this.pretty_print = function (o) {\n      if (Array.isArray(o)) {\n        var s = o.map(x => _.pretty_print(x)).join(', ');\n        if (o.type === 'vector') return 'vector<' + s + '>';\n        return '(' + s + ')';\n      }\n      return o.toString();\n    };\n    this.peekers = {\n      pre_operator: [],\n      post_operator: [],\n      pre_function: [],\n      post_function: []\n    };\n    this.callPeekers = function (name) {\n      if (Settings.callPeekers) {\n        var peekers = this.peekers[name];\n        //remove the first items and stringify\n        var args = arguments2Array(arguments).slice(1).map(stringify);\n        //call each one of the peekers\n        for (var i = 0; i < peekers.length; i++) {\n          peekers[i].apply(null, args);\n        }\n      }\n    };\n    /*\r\n     * Tokenizes the string\r\n     * @param {String} e\r\n     * @returns {Token[]}\r\n     */\n    this.tokenize = function (e) {\n      //cast to String\n      e = String(e);\n      //remove multiple white spaces and spaces at beginning and end of string\n      e = e.trim().replace(/\\s+/g, ' ');\n      //remove spaces before and after brackets\n      for (var x in brackets) {\n        var regex = new RegExp(brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\n        e = e.replace(regex, x);\n      }\n      var col = 0; //the column position\n      var L = e.length; //expression length\n      var lpos = 0; //marks beginning of next token\n      var tokens = []; //the tokens container\n      var scopes = [tokens]; //initiate with the tokens as the highest scope\n      var target = scopes[0]; //the target to which the tokens are added. This can swing up or down\n      var depth = 0;\n      var open_brackets = [];\n      var has_space = false; //marks if an open space character was found\n      var SPACE = ' ';\n      var EMPTY_STRING = '';\n      var COMMA = ',';\n      var MINUS = '-';\n      var MULT = '*';\n      //Possible source of bug. Review\n      /*\r\n       //gets the next space\r\n       var next_space = function(from) {\r\n       for(var i=from; i<L; i++) {\r\n       if(e.charAt(i) === ' ')\r\n       return i;\r\n       }\r\n       \r\n       return L; //assume the end of the string instead\r\n       };\r\n       */\n      /**\r\n       * Adds a scope to tokens\r\n       * @param {String} scope_type\r\n       * @param {int} column\r\n       * @returns {undefined}\r\n       */\n      var addScope = function (scope_type, column) {\n        var new_scope = []; //create a new scope\n        if (scope_type !== undefined) {\n          new_scope.type = scope_type;\n        }\n        new_scope.column = column; //mark the column of the scope\n        scopes.push(new_scope); //add it to the list of scopes\n        target.push(new_scope); //add it to the tokens list since now it's a scope\n        target = new_scope; //point to it\n        depth++; //go down one in scope\n      };\n      /**\r\n       * Goes up in scope by one\r\n       * @returns {undefined}\r\n       */\n      var goUp = function () {\n        scopes.pop(); //remove the scope from the scopes stack\n        target = scopes[--depth]; //point the above scope\n      };\n      /**\r\n       * Extracts all the operators from the expression string starting at postion start_at\r\n       * @param {int} start_at\r\n       * @returns {String}\r\n       */\n      var get_operator_str = function (start_at) {\n        start_at = start_at !== undefined ? start_at : col;\n        //mark the end of the operator as the start since we're just going\n        //to be walking along the string\n        var end = start_at + 1;\n        //just keep moving along\n        while (e.charAt(end++) in operators) {}\n        //remember that we started at one position ahead. The beginning operator is what triggered\n        //this function to be called in the first place. String.CharAt is zero based so we now\n        //have to correct two places. The initial increment + the extra++ at the end of end during\n        //the last iteration.\n        return e.substring(start_at, end - 1);\n      };\n      /**\r\n       * Breaks operator up in to several different operators as defined in operators\r\n       * @param {String} operator_str\r\n       * @returns {String[]}\r\n       */\n      var chunkify = function (operator_str) {\n        var start = col - operator_str.length; //start of operator\n        var _operators = [];\n        var operator = operator_str.charAt(0);\n        //grab the largest possible chunks but start at 2 since we already know\n        //that the first character is an operator\n\n        for (var i = 1, L = operator_str.length; i < L; i++) {\n          var ch = operator_str.charAt(i);\n          var o = operator + ch;\n          //since the operator now is undefined then the last operator\n          //was the largest possible combination.\n          if (!(o in operators)) {\n            _operators.push(new Token(operator, Token.OPERATOR, start + i));\n            operator = ch;\n          } else operator = o; //now the operator is the larger chunk\n        }\n        //add the last operator\n        _operators.push(new Token(operator, Token.OPERATOR, start + i));\n        return _operators;\n      };\n\n      /**\r\n       * Is used to add a token to the tokens array. Makes sure that no empty token is added\r\n       * @param {int} at\r\n       * @param {String} token\r\n       * @returns {undefined}\r\n       */\n      var add_token = function (at, token) {\n        //grab the token if we're not supplied one\n        if (token === undefined) token = e.substring(lpos, at);\n        //only add it if it's not an empty string\n        if (token in _.units) target.push(new Token(token, Token.UNIT, lpos));else if (token !== '') target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));\n      };\n      /**\r\n       * Adds a function to the output\r\n       * @param {String} f\r\n       * @returns {undefined}\r\n       */\n      var add_function = function (f) {\n        target.push(new Token(f, Token.FUNCTION, lpos));\n      };\n      /**\r\n       * Tokens are found between operators so this marks the location of where the last token was found\r\n       * @param {int} position\r\n       * @returns {undefined}\r\n       */\n      var set_last_position = function (position) {\n        lpos = position + 1;\n      };\n      /**\r\n       * When a operator is found and added, especially a combo operator, then the column location\r\n       * has to be adjusted to the end of the operator\r\n       * @returns {undefined}\r\n       */\n      var adjust_column_position = function () {\n        lpos = lpos + operator_str.length - 2;\n        col = lpos - 1;\n      };\n      for (; col < L; col++) {\n        var ch = e.charAt(col);\n        if (ch in operators) {\n          add_token(col);\n          //is the last token numeric?\n          var last_token_is_numeric = target[0] && isNumber(target[0]);\n          //is this character multiplication?\n          var is_multiplication = last_token_is_numeric && ch === MULT;\n          //if we're in a new scope then go up by one but if the space\n          //is right befor an operator then it makes no sense to go up in scope\n          //consider sin -x. The last position = current position at the minus sign\n          //this means that we're going for sin(x) -x which is wrong\n          //Ignore comma since comma is still part of the existing scope.\n          if (has_space && lpos < col && !(ch === COMMA || is_multiplication)) {\n            has_space = false;\n            goUp();\n          }\n          //mark the last position that a\n          set_last_position(col + 1);\n          var operator_str = get_operator_str(col);\n          adjust_column_position();\n          target.push.apply(target, chunkify(operator_str));\n        } else if (ch in brackets) {\n          var bracket = brackets[ch];\n          if (bracket.is_open) {\n            //mark the bracket\n            open_brackets.push([bracket, lpos]);\n            var f = e.substring(lpos, col);\n            if (f in functions) {\n              add_function(f);\n            } else if (f !== '') {\n              //assume multiplication\n              //TODO: Add the multiplication to stack\n              target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));\n            }\n            //go down one in scope\n            addScope(bracket.maps_to, col);\n          } else if (bracket.is_close) {\n            //get the matching bracket\n            var pair = open_brackets.pop();\n            //throw errors accordingly\n            //missing open bracket\n            if (!pair) throw new ParityError('Missing open bracket for bracket at: ' + (col + 1));\n            //incorrect pair\n            else if (pair[0].id !== bracket.id - 1) throw new ParityError('Parity error');\n            add_token(col);\n            goUp();\n          }\n          set_last_position(col);\n        } else if (ch === SPACE) {\n          var prev = e.substring(lpos, col); //look back\n          var nxt = e.charAt(col + 1); //look forward\n          if (has_space) {\n            if (prev in operators) {\n              target.push(new Token(prev, Token.OPERATOR, col));\n            } else {\n              add_token(undefined, prev);\n              //we're at the closing space\n              goUp(); //go up in scope if we're at a space\n\n              //assume multiplication if it's not an operator except for minus\n              var is_operator = (nxt in operators);\n              if (is_operator && operators[nxt].value === MINUS || !is_operator) {\n                target.push(new Token(MULT, Token.OPERATOR, col));\n              }\n            }\n            has_space = false; //remove the space\n          } else {\n            //we're at the closing space\n            //check if it's a function\n            var f = e.substring(lpos, col);\n            if (f in functions) {\n              //there's no need to go up in scope if the next character is an operator\n              has_space = true; //mark that a space was found\n              add_function(f);\n              addScope();\n            } else if (f in operators) {\n              target.push(new Token(f, Token.OPERATOR, col));\n            } else {\n              add_token(undefined, f);\n              //peek ahead to the next character\n              var nxt = e.charAt(col + 1);\n\n              //If it's a number then add the multiplication operator to the stack but make sure that the next character\n              //is not an operator\n\n              if (prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators)) target.push(new Token(MULT, Token.OPERATOR, col));\n            }\n            //Possible source of bug. Review\n            /*\r\n             //space can mean multiplication so add the symbol if the is encountered\r\n             if(/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\r\n             var next = e.charAt(col+1);\r\n             var next_is_operator = next in operators;\r\n             var ns = next_space(col+1);\r\n             var next_word = e.substring(col+1, ns);\r\n             //the next can either be a prefix operator or no operator\r\n             if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\r\n             target.push(new Token('*', Token.OPERATOR, col));\r\n             }\r\n             */\n          }\n          set_last_position(col); //mark this location\n        }\n      }\n      //check that all brackets were closed\n      if (open_brackets.length) {\n        var b = open_brackets.pop();\n        throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));\n      }\n      //add the last token\n      add_token(col);\n      return tokens;\n    };\n    /*\r\n     * Puts token array in Reverse Polish Notation\r\n     * @param {Token[]} tokens\r\n     * @returns {Token[]}\r\n     */\n    this.toRPN = function (tokens) {\n      var fn = tokens.type;\n      var l = tokens.length,\n        i;\n      var output = [];\n      var stack = [];\n      var prefixes = [];\n      var collapse = function (target, destination) {\n        while (target.length) destination.push(target.pop());\n      };\n      //mark all the prefixes and add them to the stack\n      for (i = 0; i < l; i++) {\n        var token = tokens[i];\n        if (token.type !== Token.OPERATOR) break;\n        if (!token.prefix) throw new OperatorError('Not a prefix operator');\n        token.is_prefix = true;\n        stack.push(token);\n      }\n      //begin with remaining tokens\n      for (; i < l; i++) {\n        var e = tokens[i];\n        if (e.type === Token.OPERATOR) {\n          var operator = e;\n\n          //create the option for the operator being overloaded\n          if (operator.overloaded) {\n            var next = tokens[i + 1];\n            //if it's followed by a number or variable then we assume it's not a postfix operator\n            if (next && next.type === Token.VARIABLE_OR_LITERAL) {\n              operator.postfix = false;\n              //override the original function with the overload function\n              operator.action = operator.overloadAction;\n              operator.leftAssoc = operator.overloadLeftAssoc;\n            }\n          }\n\n          //if the stack is not empty\n          while (stack.length) {\n            var last = stack[stack.length - 1];\n            //if (there is an operator at the top of the operator stack with greater precedence)\n            //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia\n            //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.\n            if (!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence)) break;\n            output.push(stack.pop());\n          }\n\n          //change the behavior of the operator if it's a vector and we've been asked to do so\n          if ((fn === 'vector' || fn === 'set') && 'vectorFn' in operator) operator.action = operator.vectorFn;\n\n          //if the operator is a postfix operator then we're ready to go since it belongs\n          //to the preceding token. However the output cannot be empty. It must have either\n          //an operator or a variable/literal\n          if (operator.postfix) {\n            var previous = tokens[i - 1];\n            if (!previous) throw new OperatorError(\"Unexpected prefix operator '\" + e.value + \"'! at \" + e.column);else if (previous.type === Token.OPERATOR) {\n              //a postfix can only be followed by a postfix\n              if (!previous.postfix) throw new OperatorError(\"Unexpected prefix operator '\" + previous.value + \"'! at \" + previous.column);\n            }\n          } else {\n            //we must be at an infix so point the operator this\n            do {\n              //the first one is an infix operator all others have to be prefix operators so jump to the end\n              var next = tokens[i + 1]; //take a look ahead\n              var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator\n              if (next_is_operator) {\n                //if it's not a prefix operator then it not in the right place\n                if (!next.prefix) {\n                  throw new OperatorError('A prefix operator was expected at ' + next.column);\n                }\n                //mark it as a confirmed prefix\n                next.is_prefix = true;\n                //add it to the prefixes\n                prefixes.push(next);\n                i++;\n              }\n            } while (next_is_operator);\n          }\n\n          //if it's a prefix it should be on a special stack called prefixes\n          //we do this to hold on to prefixes because of left associative operators.\n          //they belong to the variable/literal but if placed on either the stack\n          //or output there's no way of knowing this. I might be wrong so I welcome\n          //any discussion about this.\n\n          if (operator.is_prefix)\n            //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!\n            prefixes.push(operator);else stack.push(operator);\n          //move the prefixes to the stack\n          while (prefixes.length) {\n            if (operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence)\n              //revisit for commas\n              stack.push(prefixes.pop());else break;\n          }\n        } else if (e.type === Token.VARIABLE_OR_LITERAL) {\n          //move prefixes to stack at beginning of scope\n          if (output.length === 0) collapse(prefixes, stack);\n          //done with token\n          output.push(e);\n          var last_on_stack = stack[stack.length - 1];\n          //then move all the prefixes to the output\n          if (!last_on_stack || !last_on_stack.leftAssoc) collapse(prefixes, output);\n        } else if (e.type === Token.FUNCTION) {\n          stack.push(e);\n        } else if (e.type === Token.UNIT) {\n          //if it's a unit it belongs on the stack since it's tied to the previous token\n          output.push(e);\n        }\n        //if it's an additonal scope then put that into RPN form\n        if (Array.isArray(e)) {\n          output.push(this.toRPN(e));\n          if (e.type) output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column\n        }\n      }\n      //collapse the remainder of the stack and prefixes to output\n      collapse(stack, output);\n      collapse(prefixes, output);\n      return output;\n    };\n    /*\r\n     * Parses the tokens\r\n     * @param {Tokens[]} rpn\r\n     * @param {object} substitutions\r\n     * @returns {Symbol}\r\n     */\n    this.parseRPN = function (rpn, substitutions) {\n      try {\n        //default substitutions\n        substitutions = substitutions || {};\n        //prepare the substitutions.\n        //we first parse them out as-is\n        for (var x in substitutions) substitutions[x] = _.parse(substitutions[x], {});\n\n        //Although technically constants,\n        //pi and e are only available when evaluating the expression so add to the subs.\n        //Doing this avoids rounding errors\n        //link e and pi\n        if (Settings.PARSE2NUMBER) {\n          //use the value provided if the individual for some strange reason prefers this.\n          //one reason could be to sub e but not pi or vice versa\n          if (!('e' in substitutions)) substitutions.e = new Symbol(Settings.E);\n          if (!('pi' in substitutions)) substitutions.pi = new Symbol(Settings.PI);\n        }\n        var Q = [];\n        for (var i = 0, l = rpn.length; i < l; i++) {\n          var e = rpn[i];\n\n          //Arrays indicate a new scope so parse that out\n          if (Array.isArray(e)) {\n            e = this.parseRPN(e, substitutions);\n          }\n          if (e) {\n            if (e.type === Token.OPERATOR) {\n              if (e.is_prefix || e.postfix)\n                //resolve the operation assocated with the prefix\n                Q.push(e.operation(Q.pop()));else {\n                var b = Q.pop();\n                var a = Q.pop();\n                //Throw an error if the RH value is empty. This cannot be a postfix since we already checked\n                if (typeof a === 'undefined') throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);\n                var is_comma = e.action === 'comma';\n                //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually\n                if (a instanceof Set && !is_comma) a = Vector.fromSet(a);\n                if (b instanceof Set && !is_comma) b = Vector.fromSet(b);\n\n                //call all the pre-operators\n                this.callPeekers('pre_operator', a, b, e);\n                var ans = _[e.action](a, b);\n\n                //call all the pre-operators\n                this.callPeekers('post_operator', ans, a, b, e);\n                Q.push(ans);\n              }\n            } else if (e.type === Token.FUNCTION) {\n              var args = Q.pop();\n              var parent = args.parent; //make a note of the parent\n              if (!(args instanceof Collection)) args = Collection.create(args);\n              //the return value may be a vector. If it is then we check\n              //Q to see if there's another vector on the stack. If it is then\n              //we check if has elements. If it does then we know that we're dealing\n              //with an \"getter\" object and return the requested values\n\n              //call the function. This is the _.callfunction method in nerdamer\n              //call the function. This is the _.callfunction method in nerdamer\n              var fn_name = e.value;\n              var fn_args = args.getItems();\n\n              //call the pre-function peekers\n              this.callPeekers('pre_function', fn_name, fn_args);\n              var ret = _.callfunction(fn_name, fn_args);\n\n              //call the post-function peekers\n              this.callPeekers('post_function', ret, fn_name, fn_args);\n              var last = Q[Q.length - 1];\n              var next = rpn[i + 1];\n              var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';\n              if (!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {\n                //remove the item from the queue\n                var item = Q.pop();\n                var getter = ret.elements[0];\n                //check if it's symbolic. If so put it back and add the item to the stack\n                if (!getter.isConstant()) {\n                  item.getter = getter;\n                  Q.push(item);\n                  Q.push(ret);\n                } else if (getter instanceof Slice) {\n                  //if it's a Slice return the slice\n                  Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));\n                } else {\n                  var index = Number(getter);\n                  var il = item.elements.length;\n                  //support for negative indices\n                  if (index < 0) index = il + index;\n                  //it it's still out of bounds\n                  if (index < 0 || index >= il)\n                    //index should no longer be negative since it's been reset above\n                    //range error\n                    throw new OutOfRangeError('Index out of range ' + (e.column + 1));\n                  var element = item.elements[index];\n                  //cyclic but we need to mark this for future reference\n                  item.getter = index;\n                  element.parent = item;\n                  Q.push(element);\n                }\n              } else {\n                //extend the parent reference\n                if (parent) ret.parent = parent;\n                Q.push(ret);\n              }\n            } else {\n              var subbed;\n              var v = e.value;\n              if (v in Settings.ALIASES) e = _.parse(Settings.ALIASES[e]);\n              //wrap it in a symbol if need be\n              else if (e.type === Token.VARIABLE_OR_LITERAL) e = new Symbol(v);else if (e.type === Token.UNIT) {\n                e = new Symbol(v);\n                e.isUnit = true;\n              }\n\n              //make substitutions\n              //Always constants first. This avoids the being overridden\n              if (v in _.CONSTANTS) {\n                subbed = e;\n                e = new Symbol(_.CONSTANTS[v]);\n              }\n              //next substitutions. This allows declared variable to be overridden\n              //check if the values match to avoid erasing the multiplier.\n              //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.\n              else if (v in substitutions && v !== substitutions[v].toString()) {\n                subbed = e;\n                e = substitutions[v].clone();\n              }\n              //next declare variables\n              else if (v in VARS) {\n                subbed = e;\n                e = VARS[v].clone();\n              }\n              //make notation of what it was before\n              if (subbed) e.subbed = subbed;\n              Q.push(e);\n            }\n          }\n        }\n        var retval = Q[0];\n        if (['undefined', 'string', 'number'].indexOf(typeof retval) !== -1) {\n          throw new UnexpectedTokenError('Unexpected token!');\n        }\n        return retval;\n      } catch (error) {\n        var rethrowErrors = [OutOfFunctionDomainError];\n        // Rethrow certain errors in the same class to preserve them\n        rethrowErrors.forEach(function (E) {\n          if (error instanceof E) {\n            throw new E(error.message + ': ' + e.column);\n          }\n        });\n        throw new ParseError(error.message + ': ' + e.column);\n      }\n    };\n    /**\r\n     * This is the method that triggers the parsing of the string. It generates a parse tree but processes\r\n     * it right away. The operator functions are called when their respective operators are reached. For instance\r\n     * + with cause this.add to be called with the left and right hand values. It works by walking along each\r\n     * character of the string and placing the operators on the stack and values on the output. When an operator\r\n     * having a lower order than the last is reached then the stack is processed from the last operator on the\r\n     * stack.\r\n     * @param {String} token\r\n     */\n\n    function Node(token) {\n      this.type = token.type;\n      this.value = token.value;\n      //the incoming token may already be a Node type\n      this.left = token.left;\n      this.right = token.right;\n    }\n    Node.prototype.toString = function () {\n      var left = this.left ? this.left.toString() + '---' : '';\n      var right = this.right ? '---' + this.right.toString() : '';\n      return left + '(' + this.value + ')' + right;\n    };\n    Node.prototype.toHTML = function (depth, indent) {\n      depth = depth || 0;\n      indent = typeof indent === 'undefined' ? 4 : indent;\n      var tab = function (n) {\n        return ' '.repeat(indent * n);\n      };\n      var html = '';\n      var left = this.left ? tab(depth + 1) + '<li>\\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \\n' : '';\n      var right = this.right ? tab(depth + 1) + '<li>\\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\\n' : '';\n      var html = tab(depth) + '<div class=\"' + this.type.toLowerCase() + '\"><span>' + this.value + '</span></div>' + tab(depth) + '\\n';\n      if (left || right) {\n        html += tab(depth) + '<ul>\\n' + left + right + tab(depth) + '</ul>\\n';\n      }\n      html += '';\n      return html;\n    };\n    this.tree = function (tokens) {\n      var Q = [];\n      for (var i = 0; i < tokens.length; i++) {\n        var e = tokens[i];\n        //Arrays indicate a new scope so parse that out\n        if (Array.isArray(e)) {\n          e = this.tree(e);\n          //if it's a comma then it's just arguments\n          Q.push(e);\n          continue;\n        }\n        if (e.type === Token.OPERATOR) {\n          if (e.is_prefix || e.postfix) {\n            //prefixes go to the left, postfix to the right\n            var location = e.is_prefix ? 'left' : 'right';\n            var last = Q.pop();\n            e = new Node(e);\n            e[location] = last;\n            Q.push(e);\n          } else {\n            e = new Node(e);\n            e.right = Q.pop();\n            e.left = Q.pop();\n            Q.push(e);\n          }\n        } else if (e.type === Token.FUNCTION) {\n          e = new Node(e);\n          var args = Q.pop();\n          e.right = args;\n          if (e.value === 'object') {\n            //check if Q has a value\n            var last = Q[Q.length - 1];\n            if (last) {\n              while (last.right) {\n                last = last.right;\n              }\n              last.right = e;\n              continue;\n            }\n          }\n          Q.push(e);\n        } else {\n          Q.push(new Node(e));\n        }\n      }\n      return Q[0];\n    };\n    this.parse = function (e, substitutions) {\n      e = prepare_expression(e);\n      substitutions = substitutions || {};\n      //three passes but easier to debug\n      var tokens = this.tokenize(e);\n      var rpn = this.toRPN(tokens);\n      return this.parseRPN(rpn, substitutions);\n    };\n    /**\r\n     * TODO: Switch to Parser.tokenize for this method\r\n     * Reads a string into an array of Symbols and operators\r\n     * @param {String} expression_string\r\n     * @returns {Array}\r\n     */\n    this.toObject = function (expression_string) {\n      var objectify = function (tokens) {\n        var output = [];\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n          var v = token.value;\n          if (token.type === Token.VARIABLE_OR_LITERAL) {\n            output.push(new Symbol(v));\n          } else if (token.type === Token.FUNCTION) {\n            //jump ahead since the next object are the arguments\n            i++;\n            //create a symbolic function and stick it on output\n            var f = _.symfunction(v, objectify(tokens[i]));\n            f.isConversion = true;\n            output.push(f);\n          } else if (token.type === Token.OPERATOR) {\n            output.push(v);\n          } else {\n            output.push(objectify(token));\n          }\n        }\n        return output;\n      };\n      return objectify(_.tokenize(expression_string));\n    };\n\n    // A helper method for toTeX\n    var chunkAtCommas = function (arr) {\n      var j,\n        k = 0,\n        chunks = [[]];\n      for (var j = 0, l = arr.length; j < l; j++) {\n        if (arr[j] === ',') {\n          k++;\n          chunks[k] = [];\n        } else {\n          chunks[k].push(arr[j]);\n        }\n      }\n      return chunks;\n    };\n\n    // Helper method for toTeX\n    var rem_brackets = function (str) {\n      return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\n        if (a) return a;\n        return str;\n      });\n    };\n    var remove_redundant_powers = function (arr) {\n      // The filtered array\n      var narr = [];\n      while (arr.length) {\n        // Remove the element from the front\n        var e = arr.shift();\n        var next = arr[0];\n        var next_is_array = isArray(next);\n        var next_is_minus = next === '-';\n\n        // Remove redundant plusses \n        if (e === '^') {\n          if (next === '+') {\n            arr.shift();\n          } else if (next_is_array && next[0] === '+') {\n            next.shift();\n          }\n\n          // Remove redundant parentheses\n          if (next_is_array && next.length === 1) {\n            arr.unshift(arr.shift()[0]);\n          }\n        }\n\n        // Check if it's a negative power\n        if (e === '^' && (next_is_array && next[0] === '-' || next_is_minus)) {\n          // If so:\n          // - Remove it from the new array, place a one and a division sign in that array and put it back\n          var last = narr.pop();\n          // Check if it's something multiplied by\n          var before = narr[narr.length - 1];\n          var before_last = '1';\n          if (before === '*') {\n            narr.pop();\n            // For simplicity we just pop it. \n            before_last = narr.pop();\n          }\n          // Implied multiplication\n          else if (isArray(before)) {\n            before_last = narr.pop();\n          }\n          narr.push(before_last, '/', last, e);\n\n          // Remove the negative sign from the power \n          if (next_is_array) {\n            next.shift();\n          } else {\n            arr.shift();\n          }\n\n          // Remove it from the array so we don't end up with redundant parentheses if we can\n          if (next_is_array && next.length === 1) {\n            narr.push(arr.shift()[0]);\n          }\n        } else {\n          narr.push(e);\n        }\n      }\n      return narr;\n    };\n    /*\r\n     * Convert expression or object to LaTeX\r\n     * @param {String} expression_or_obj\r\n     * @param {object} opt\r\n     * @returns {String}\r\n     */\n    this.toTeX = function (expression_or_obj, opt) {\n      opt = opt || {};\n      // Add decimal option as per issue #579. Consider passing an object to Latex.latex as option instead of string\n      var decimals = opt.decimals === true ? 'decimals' : undefined;\n      var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\n        TeX = [],\n        cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\n\n      // Remove negative powers as per issue #570\n      obj = remove_redundant_powers(obj);\n      if (isArray(obj)) {\n        var nobj = [],\n          a,\n          b;\n        //first handle ^\n        for (var i = 0; i < obj.length; i++) {\n          a = obj[i];\n          if (obj[i + 1] === '^') {\n            b = obj[i + 2];\n            nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));\n            i += 2;\n          } else {\n            nobj.push(a);\n          }\n        }\n        obj = nobj;\n      }\n      for (var i = 0, l = obj.length; i < l; i++) {\n        var e = obj[i];\n\n        // Convert * to cdot\n        if (e === '*') {\n          e = cdot;\n        }\n        if (isSymbol(e)) {\n          if (e.group === FN) {\n            var fname = e.fname,\n              f;\n            if (fname === SQRT) {\n              f = '\\\\sqrt' + LaTeX.braces(this.toTeX(e.args));\n            } else if (fname === ABS) {\n              f = LaTeX.brackets(this.toTeX(e.args), 'abs');\n            } else if (fname === PARENTHESIS) {\n              f = LaTeX.brackets(this.toTeX(e.args), 'parens');\n            } else if (fname === Settings.LOG10) {\n              f = '\\\\' + Settings.LOG10_LATEX + '\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\n            } else if (fname === 'integrate') {\n              /* Retrive [Expression, x] */\n              var chunks = chunkAtCommas(e.args);\n              /* Build TeX */\n              var expr = LaTeX.braces(this.toTeX(chunks[0])),\n                dx = this.toTeX(chunks[1]);\n              f = '\\\\int ' + expr + '\\\\, d' + dx;\n            } else if (fname === 'defint') {\n              var chunks = chunkAtCommas(e.args),\n                expr = LaTeX.braces(this.toTeX(chunks[0])),\n                dx = this.toTeX(chunks[3]),\n                lb = this.toTeX(chunks[1]),\n                ub = this.toTeX(chunks[2]);\n              f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\\\, d' + dx;\n            } else if (fname === 'diff') {\n              var chunks = chunkAtCommas(e.args);\n              var dx = '',\n                expr = LaTeX.braces(this.toTeX(chunks[0]));\n              /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\n              if (chunks.length === 1) {\n                var vars = [];\n                for (j = 0; j < chunks[0].length; j++) {\n                  if (chunks[0][j].group === 3) {\n                    vars.push(chunks[0][j].value);\n                  }\n                }\n                vars.sort();\n                dx = vars.length > 0 ? '\\\\frac{d}{d ' + vars[0] + '}' : '\\\\frac{d}{d x}';\n              }\n              /* If two arguments, we have expression and variable, we assume n = 1 */else if (chunks.length === 2) {\n                dx = '\\\\frac{d}{d ' + chunks[1] + '}';\n              }\n              /* If we have more than 2 arguments, we assume we've got everything */else {\n                dx = '\\\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';\n              }\n              f = dx + '\\\\left(' + expr + '\\\\right)';\n            } else if (fname === 'sum' || fname === 'product') {\n              // Split e.args into 4 parts based on locations of , symbols.\n              var argSplit = [[], [], [], []],\n                j = 0,\n                i;\n              for (i = 0; i < e.args.length; i++) {\n                if (e.args[i] === ',') {\n                  j++;\n                  continue;\n                }\n                argSplit[j].push(e.args[i]);\n              }\n              // Then build TeX string.\n              f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\n              f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));\n            } else if (fname === 'limit') {\n              var args = chunkAtCommas(e.args).map(function (x) {\n                if (Array.isArray(x)) return _.toTeX(x.join(''));\n                return _.toTeX(String(x));\n              });\n              f = '\\\\lim_' + LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);\n            } else if (fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\n              f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');\n            } else {\n              f = LaTeX.latex(e, decimals);\n              //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\n            }\n            TeX.push(f);\n          } else {\n            TeX.push(LaTeX.latex(e, decimals));\n          }\n        } else if (isArray(e)) {\n          TeX.push(LaTeX.brackets(this.toTeX(e)));\n        } else {\n          if (e === '/') TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));else TeX.push(e);\n        }\n      }\n      return TeX.join(' ');\n    };\n\n    //Parser.functions ==============================================================\n    /* Although parens is not a \"real\" function it is important in some cases when the\r\n     * symbol must carry parenthesis. Once set you don't have to worry about it anymore\r\n     * as the parser will get rid of it at the first opportunity\r\n     */\n    function parens(symbol) {\n      if (Settings.PARSE2NUMBER) {\n        return symbol;\n      }\n      return _.symfunction('parens', [symbol]);\n    }\n    function abs(symbol) {\n      //|-∞| = ∞\n      if (symbol.isInfinity) {\n        return Symbol.infinity();\n      }\n      if (symbol.multiplier.lessThan(0)) symbol.multiplier.negate();\n      if (symbol.isImaginary()) {\n        var re = symbol.realpart();\n        var im = symbol.imagpart();\n        if (re.isConstant() && im.isConstant()) return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));\n      } else if (isNumericSymbol(symbol) || even(symbol.power)) {\n        return symbol;\n      }\n      if (symbol.isComposite()) {\n        var ms = [];\n        symbol.each(function (x) {\n          ms.push(x.multiplier);\n        });\n        var gcd = Math2.QGCD.apply(null, ms);\n        if (gcd.lessThan(0)) {\n          symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));\n          symbol.distributeMultiplier();\n        }\n      }\n\n      //convert |n*x| to n*|x|\n      var m = _.parse(symbol.multiplier);\n      symbol.toUnitMultiplier();\n      return _.multiply(m, _.symfunction(ABS, [symbol]));\n    }\n    /**\r\n     * The factorial function\r\n     * @param {Symbol} symbol\r\n     * @return {Symbol}\r\n     */\n    function factorial(symbol) {\n      var retval;\n      if (isVector(symbol)) {\n        var V = new Vector();\n        symbol.each(function (x, i) {\n          //i start at one.\n          V.set(i - 1, factorial(x));\n        });\n        return V;\n      }\n      if (isMatrix(symbol)) {\n        var M = new Matrix();\n        symbol.each(function (x, i, j) {\n          //i start at one.\n          M.set(i, j, factorial(x));\n        });\n        return M;\n      }\n      if (Settings.PARSE2NUMBER && symbol.isConstant()) {\n        if (isInt(symbol)) {\n          retval = Math2.bigfactorial(symbol);\n        } else {\n          retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());\n        }\n        retval = bigConvert(retval);\n        return retval;\n      } else if (symbol.isConstant()) {\n        var den = symbol.getDenom();\n        if (den.equals(2)) {\n          var num = symbol.getNum();\n          var a, b, c, n;\n          if (!symbol.multiplier.isNegative()) {\n            n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));\n            a = Math2.bigfactorial(new Frac(2).multiply(n));\n            b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\n          } else {\n            n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));\n            a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\n            b = Math2.bigfactorial(new Frac(2).multiply(n));\n          }\n          c = a.divide(b);\n          return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));\n        }\n      }\n      return _.symfunction(FACTORIAL, [symbol]);\n    }\n    ;\n    /**\r\n     * Returns the continued fraction of a number\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} n\r\n     * @returns {Symbol}\r\n     */\n    function continued_fraction(symbol, n) {\n      var _symbol = evaluate(symbol);\n      if (_symbol.isConstant()) {\n        var cf = Math2.continuedFraction(_symbol, n);\n        //convert the fractions array to a new Vector\n        var fractions = Vector.fromArray(cf.fractions.map(function (x) {\n          return new Symbol(x);\n        }));\n        return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);\n      }\n      return _.symfunction('continued_fraction', arguments);\n    }\n    /**\r\n     * Returns the error function\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function erf(symbol) {\n      var _symbol = evaluate(symbol);\n      if (_symbol.isConstant()) {\n        return Math2.erf(_symbol);\n      } else if (_symbol.isImaginary()) {\n        return complex.erf(symbol);\n      }\n      return _.symfunction('erf', arguments);\n    }\n    ;\n    /**\r\n     * The mod function\r\n     * @param {Symbol} symbol1\r\n     * @param {Symbol} symbol2\r\n     * @returns {Symbol}\r\n     */\n    function mod(symbol1, symbol2) {\n      if (symbol1.isConstant() && symbol2.isConstant()) {\n        var retval = new Symbol(1);\n        retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));\n        return retval;\n      }\n      //try to see if division has remainder of zero\n      var r = _.divide(symbol1.clone(), symbol2.clone());\n      if (isInt(r)) return new Symbol(0);\n      return _.symfunction('mod', [symbol1, symbol2]);\n    }\n    /**\r\n     * A branghing function\r\n     * @param {Boolean} condition\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     * @returns {Symbol}\r\n     */\n    function IF(condition, a, b) {\n      if (typeof condition !== 'boolean') if (isNumericSymbol(condition)) condition = !!Number(condition);\n      if (condition) return a;\n      return b;\n    }\n    /**\r\n     *\r\n     * @param {Matrix|Vector|Set|Collection} obj\r\n     * @param {Symbol} item\r\n     * @returns {Boolean}\r\n     */\n    function is_in(obj, item) {\n      if (isMatrix(obj)) {\n        for (var i = 0, l = obj.rows(); i < l; i++) {\n          for (var j = 0, l2 = obj.cols(); j < l2; j++) {\n            var element = obj.elements[i][j];\n            if (element.equals(item)) return new Symbol(1);\n          }\n        }\n      } else if (obj.elements) {\n        for (var i = 0, l = obj.elements.length; i < l; i++) {\n          if (obj.elements[i].equals(item)) return new Symbol(1);\n        }\n      }\n      return new Symbol(0);\n    }\n\n    /**\r\n     * A symbolic extension for sinc\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function sinc(symbol) {\n      if (Settings.PARSE2NUMBER) {\n        if (symbol.isConstant()) {\n          return new Symbol(Math2.sinc(symbol));\n        }\n        return _.parse(format('sin({0})/({0})', symbol));\n      }\n      return _.symfunction('sinc', [symbol]);\n    }\n\n    /**\r\n     * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.\r\n     * Thanks @ Happypig375\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function exp(symbol) {\n      if (symbol.fname === Settings.LOG && symbol.isLinear()) {\n        return _.pow(symbol.args[0], Symbol.create(symbol.multiplier));\n      }\n      return _.parse(format('e^({0})', symbol));\n    }\n\n    /**\r\n     * Converts value degrees to radians\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function radians(symbol) {\n      return _.parse(format('({0})*pi/180', symbol));\n    }\n\n    /**\r\n     * Converts value from radians to degrees\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function degrees(symbol) {\n      return _.parse(format('({0})*180/pi', symbol));\n    }\n    function nroots(symbol) {\n      var a, b;\n      if (symbol.group === FN && symbol.fname === '') {\n        a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\n        b = _.parse(symbol.power);\n      } else if (symbol.group === P) {\n        a = _.parse(symbol.value);\n        b = _.parse(symbol.power);\n      }\n      if (a && b && a.group === N && b.group === N) {\n        var _roots = [];\n        var parts = Symbol.toPolarFormArray(symbol);\n        var r = _.parse(a).abs().toString();\n        //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n        var x = arg(a).toString();\n        var n = b.multiplier.den.toString();\n        var p = b.multiplier.num.toString();\n        var formula = \"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\";\n        for (var i = 0; i < n; i++) {\n          var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n          _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\n        }\n        return Vector.fromArray(_roots);\n      } else if (symbol.isConstant(true)) {\n        var sign = symbol.sign();\n        var x = evaluate(symbol.abs());\n        var root = _.sqrt(x);\n        var _roots = [root.clone(), root.negate()];\n        if (sign < 0) _roots = _roots.map(function (x) {\n          return _.multiply(x, Symbol.imaginary());\n        });\n      } else {\n        _roots = [_.parse(symbol)];\n      }\n      return Vector.fromArray(_roots);\n    }\n\n    /**\r\n     * Rationalizes a symbol\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function rationalize(symbol) {\n      if (symbol.isComposite()) {\n        var retval = new Symbol(0);\n        var num, den, retnum, retden, a, b, n, d;\n        symbol.each(function (x) {\n          num = x.getNum();\n          den = x.getDenom();\n          retnum = retval.getNum();\n          retden = retval.getDenom();\n          a = _.multiply(den, retnum);\n          b = _.multiply(num, retden);\n          n = _.expand(_.add(a, b));\n          d = _.multiply(retden, den);\n          retval = _.divide(n, d);\n        }, true);\n        return retval;\n      }\n      return symbol;\n    }\n\n    /**\r\n     * The square root function\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function sqrt(symbol) {\n      if (!isSymbol(symbol)) {\n        symbol = _.parse(symbol);\n      }\n\n      // Exit early for EX\n      if (symbol.group === EX) {\n        return _.symfunction(SQRT, [symbol]);\n      }\n      if (symbol.fname === '' && symbol.power.equals(1)) symbol = symbol.args[0];\n      var is_negative = symbol.multiplier.sign() < 0;\n      if (Settings.PARSE2NUMBER) {\n        if (symbol.isConstant() && !is_negative) {\n          return new Symbol(bigDec.sqrt(symbol.multiplier.toDecimal()));\n        } else if (symbol.isImaginary()) {\n          return complex.sqrt(symbol);\n        } else if (symbol.group === S) {\n          return _.symfunction('sqrt', [symbol]);\n        }\n      }\n      var img,\n        retval,\n        isConstant = symbol.isConstant();\n      if (symbol.group === CB && symbol.isLinear()) {\n        var m = sqrt(Symbol(symbol.multiplier));\n        for (var s in symbol.symbols) {\n          var x = symbol.symbols[s];\n          m = _.multiply(m, sqrt(x));\n        }\n        retval = m;\n      }\n      //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\n      else if (symbol.fname === SQRT) {\n        var s = symbol.args[0];\n        var ms = symbol.multiplier;\n        s.setPower(symbol.power.multiply(new Frac(0.25)));\n        retval = s;\n        //grab the multiplier\n        if (!ms.equals(1)) retval = _.multiply(sqrt(_.parse(ms)), retval);\n      }\n      //if the symbol is a fraction then we don't keep can unwrap it. For instance\n      //no need to keep sqrt(x^(1/3))\n      else if (!symbol.power.isInteger()) {\n        symbol.setPower(symbol.power.multiply(new Frac(0.5)));\n        retval = symbol;\n      } else if (symbol.multiplier < 0 && symbol.group === S) {\n        var a = _.parse(symbol.multiplier).negate();\n        var b = _.parse(symbol).toUnitMultiplier().negate();\n        retval = _.multiply(_.symfunction(Settings.SQRT, [b]), sqrt(a));\n      } else {\n        //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\n        //to sqrt(a)*sqrt(b)^1 for better simplification\n        //the sign of the power\n        var sign = symbol.power.sign();\n        //remove the sign\n        symbol.power = symbol.power.abs();\n\n        //if the symbols is imagary then we place in the imaginary part. We'll return it\n        //as a product\n        if (isConstant && symbol.multiplier.lessThan(0)) {\n          img = Symbol.imaginary();\n          symbol.multiplier = symbol.multiplier.abs();\n        }\n        var q = symbol.multiplier.toDecimal(),\n          qa = Math.abs(q),\n          t = Math.sqrt(qa);\n        var m;\n        //it's a perfect square so take the square\n        if (isInt(t)) {\n          m = new Symbol(t);\n        } else if (isInt(q)) {\n          var factors = Math2.ifactor(q);\n          var tw = 1;\n          for (var x in factors) {\n            var n = factors[x],\n              nn = n - n % 2; //get out the whole numbers\n            if (nn) {\n              //if there is a whole number ...\n              var w = Math.pow(x, nn);\n              tw *= Math.pow(x, nn / 2); //add to total wholes\n              q /= w; //reduce the number by the wholes\n            }\n          }\n          m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));\n        } else {\n          //reduce the numerator and denominator using prime factorization\n          var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];\n          var r = [new Symbol(1), new Symbol(1)];\n          var sq = [new Symbol(1), new Symbol(1)];\n          for (var i = 0; i < 2; i++) {\n            var n = c[i];\n            //get the prime factors and loop through each.\n            pfactor(n).each(function (x) {\n              x = Symbol.unwrapPARENS(x);\n              var b = x.clone().toLinear();\n              var p = Number(x.power);\n              //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\n              var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\n              var w = (p - rem) / 2; //get the whole numbers of n/2\n              r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));\n              sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));\n            });\n          }\n          m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));\n        }\n\n        //strip the multiplier since we already took the sqrt\n        symbol = symbol.toUnitMultiplier(true);\n        //if the symbol is one just return one and not the sqrt function\n        if (symbol.isOne()) {\n          retval = symbol;\n        } else if (even(symbol.power.toString())) {\n          //just raise it to the 1/2\n          retval = _.pow(symbol.clone(), new Symbol(0.5));\n        } else {\n          retval = _.symfunction(SQRT, [symbol]);\n        }\n\n        //put back the sign that was removed earlier\n        if (sign < 0) retval.power.negate();\n        if (m) retval = _.multiply(m, retval);\n        if (img) retval = _.multiply(img, retval);\n      }\n      if (is_negative && Settings.PARSE2NUMBER) return _.parse(retval);\n      return retval;\n    }\n\n    /**\r\n     * The cube root function\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function cbrt(symbol) {\n      if (!symbol.isConstant(true)) {\n        var retval;\n        var n = symbol.power / 3;\n        //take the cube root of the multplier\n        var m = _.pow(_.parse(symbol.multiplier), new Symbol(1 / 3));\n        //strip the multiplier\n        var sym = symbol.toUnitMultiplier();\n\n        //simplify the power\n        if (isInt(n)) {\n          retval = _.pow(sym.toLinear(), _.parse(n));\n        } else {\n          if (sym.group === CB) {\n            retval = new Symbol(1);\n            sym.each(function (x) {\n              retval = _.multiply(retval, cbrt(x));\n            });\n          } else {\n            retval = _.symfunction('cbrt', [sym]);\n          }\n        }\n        return _.multiply(m, retval);\n      }\n      return nthroot(symbol, new Symbol(3));\n    }\n    function scientific(symbol, sigfigs) {\n      //Just set the flag and keep it moving. Symbol.toString will deal with how to\n      //display this\n      symbol.scientific = sigfigs || 10;\n      return symbol;\n    }\n\n    /**\r\n     *\r\n     * @param {Symbol} num - the number being raised\r\n     * @param {Symbol} p - the exponent\r\n     * @param {type} prec - the precision wanted\r\n     * @param {bool} asbig - true if a bigDecimal is wanted\r\n     * @returns {Symbol}\r\n     */\n    function nthroot(num, p, prec, asbig) {\n      //clone p and convert to a number if possible\n      p = evaluate(_.parse(p));\n\n      //cannot calculate if p = 0. nthroot(0, 0) => 0^(1/0) => undefined\n      if (p.equals(0)) {\n        throw new UndefinedError('Unable to calculate nthroots of zero');\n      }\n\n      //Stop computation if it negative and even since we have an imaginary result\n      if (num < 0 && even(p)) throw new Error('Cannot calculate nthroot of negative number for even powers');\n\n      //return non numeric values unevaluated\n      if (!num.isConstant(true)) {\n        return _.symfunction('nthroot', arguments);\n      }\n\n      //evaluate numeric values\n      if (num.group !== N) {\n        num = evaluate(num);\n      }\n\n      //default is to return a big value\n      if (typeof asbig === 'undefined') asbig = true;\n      prec = prec || 25;\n      var sign = num.sign();\n      var retval;\n      var ans;\n      if (sign < 0) {\n        num = abs(num); //remove the sign\n      }\n      if (isInt(num) && p.isConstant()) {\n        if (num < 18446744073709551616) {\n          //2^64\n          ans = Frac.create(Math.pow(num, 1 / p));\n        } else {\n          ans = Math2.nthroot(num, p);\n        }\n        var retval;\n        if (asbig) {\n          retval = new Symbol(ans);\n        }\n        retval = new Symbol(ans.toDecimal(prec));\n        return _.multiply(new Symbol(sign), retval);\n      }\n    }\n    function pfactor(symbol) {\n      //Fix issue #458 | nerdamer(\"sqrt(1-(3.3333333550520926e-7)^2)\").evaluate().text()\n      //More Big Number issues >:(\n      if (symbol.greaterThan(9.999999999998891e+41) || symbol.equals(-1)) return symbol;\n      //Fix issue #298\n      if (symbol.equals(Math.PI)) return new Symbol(Math.PI);\n      //evaluate the symbol to merge constants\n      symbol = evaluate(symbol.clone());\n      if (symbol.isConstant()) {\n        var retval = new Symbol(1);\n        var m = symbol.toString();\n        if (isInt(m)) {\n          var factors = Math2.ifactor(m);\n          for (var factor in factors) {\n            var p = factors[factor];\n            retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));\n          }\n        } else {\n          var n = pfactor(new Symbol(symbol.multiplier.num));\n          var d = pfactor(new Symbol(symbol.multiplier.den));\n          retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());\n        }\n      } else retval = _.symfunction('pfactor', arguments);\n      return retval;\n    }\n\n    /**\r\n     * Get's the real part of a complex number. Return number if real\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function realpart(symbol) {\n      return symbol.realpart();\n    }\n\n    /**\r\n     * Get's the imaginary part of a complex number\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function imagpart(symbol) {\n      return symbol.imagpart();\n    }\n\n    /**\r\n     * Computes the conjugate of a complex number\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function conjugate(symbol) {\n      var re = symbol.realpart();\n      var im = symbol.imagpart();\n      return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));\n    }\n\n    /**\r\n     * Returns the arugment of a complex number\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function arg(symbol) {\n      var re = symbol.realpart();\n      var im = symbol.imagpart();\n      if (re.isConstant() && im.isConstant()) return new Symbol(Math.atan2(im, re));\n      return _.symfunction('atan2', [im, re]);\n    }\n\n    /**\r\n     * Returns the arugment of a complex number\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function arg(symbol) {\n      var re = symbol.realpart();\n      var im = symbol.imagpart();\n      if (re.isConstant() && im.isConstant()) {\n        if (im.equals(0) && re.equals(-1)) {\n          return _.parse('pi');\n        } else if (im.equals(1) && re.equals(0)) {\n          return _.parse('pi/2');\n        } else if (im.equals(1) && re.equals(1)) {\n          return _.parse('pi/4');\n        }\n        return new Symbol(Math.atan2(im, re));\n      }\n      return _.symfunction('atan2', [im, re]);\n    }\n\n    /**\r\n     * Returns the polarform of a complex number\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function polarform(symbol) {\n      var p, r, e, theta;\n      p = Symbol.toPolarFormArray(symbol);\n      theta = p[1];\n      r = p[0];\n      e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));\n      return _.multiply(r, e);\n    }\n\n    /**\r\n     * Returns the rectangular form of a complex number. Does not work for symbolic coefficients\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function rectform(symbol) {\n      //TODO: e^((i*pi)/4)\n      var original = symbol.clone();\n      try {\n        var f, p, q, s, h, d, n;\n        f = decompose_fn(symbol, 'e', true);\n        p = _.divide(f.x.power, Symbol.imaginary());\n        q = evaluate(trig.tan(p));\n        s = _.pow(f.a, new Symbol(2));\n        d = q.getDenom(true);\n        n = q.getNum();\n        h = Symbol.hyp(n, d);\n        //check\n        if (h.equals(f.a)) {\n          return _.add(d, _.multiply(Symbol.imaginary(), n));\n        } else {\n          return original;\n        }\n      } catch (e) {\n        return original;\n      }\n    }\n    function symMinMax(f, args) {\n      args.map(function (x) {\n        x.numVal = evaluate(x).multiplier;\n      });\n      var l, a, b, a_val, b_val;\n      while (true) {\n        l = args.length;\n        if (l < 2) return args[0];\n        a = args.pop();\n        b = args[l - 2];\n        if (f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {\n          args.pop();\n          args.push(a);\n        }\n      }\n    }\n\n    /**\r\n     * Returns maximum of a set of numbers\r\n     * @returns {Symbol}\r\n     */\n    function max() {\n      var args = [].slice.call(arguments);\n      if (allSame(args)) return args[0];\n      if (allNumbers(args)) return new Symbol(Math.max.apply(null, args));\n      if (Settings.SYMBOLIC_MIN_MAX && allConstants(args)) return symMinMax('max', args);\n      return _.symfunction('max', args);\n    }\n\n    /**\r\n     * Returns minimum of a set of numbers\r\n     * @returns {Symbol}\r\n     */\n    function min() {\n      var args = [].slice.call(arguments);\n      if (allSame(args)) return args[0];\n      if (allNumbers(args)) return new Symbol(Math.min.apply(null, args));\n      if (Settings.SYMBOLIC_MIN_MAX && allConstants(args)) return symMinMax('min', args);\n      return _.symfunction('min', args);\n    }\n\n    /**\r\n     * Returns the sign of a number\r\n     * @param {Symbol} x\r\n     * @returns {Symbol}\r\n     */\n    function sign(x) {\n      if (x.isConstant(true)) return new Symbol(Math.sign(evaluate(x)));\n      return _.symfunction('sign', arguments);\n    }\n    function sort(symbol, opt) {\n      opt = opt ? opt.toString() : 'asc';\n      var getval = function (e) {\n        if (e.group === N) return e.multiplier;\n        if (e.group === FN) {\n          if (e.fname === '') return getval(e.args[0]);\n          return e.fname;\n        }\n        if (e.group === S) return e.power;\n        return e.value;\n      };\n      var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();\n      return new Vector(symbols.sort(function (a, b) {\n        var aval = getval(a),\n          bval = getval(b);\n        if (opt === 'desc') return bval - aval;\n        return aval - bval;\n      }));\n    }\n\n    /**\r\n     * The log function\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} base\r\n     * @returns {Symbol}\r\n     */\n    function log(symbol, base) {\n      if (symbol.equals(1)) {\n        return new Symbol(0);\n      }\n      var retval;\n      if (symbol.fname === SQRT && symbol.multiplier.equals(1)) {\n        retval = _.divide(log(symbol.args[0]), new Symbol(2));\n        if (symbol.power.sign() < 0) {\n          retval.negate();\n        }\n\n        // Exit early\n        return retval;\n      }\n\n      //log(0) is undefined so complain\n      if (symbol.equals(0)) {\n        throw new UndefinedError(Settings.LOG + '(0) is undefined!');\n      }\n\n      //deal with imaginary values\n      if (symbol.isImaginary()) {\n        return complex.evaluate(symbol, Settings.LOG);\n      }\n      if (symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {\n        var log_sym = Math.log(symbol);\n        var log_base = Math.log(base);\n        retval = new Symbol(log_sym / log_base);\n      } else if (symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {\n        symbol.power.negate();\n        //move the negative outside but keep the positive inside :)\n        retval = log(symbol).negate();\n      } else if (symbol.value === 'e' && symbol.multiplier.equals(1)) {\n        var p = symbol.power;\n        retval = isSymbol(p) ? p : new Symbol(p);\n      } else if (symbol.group === FN && symbol.fname === 'exp') {\n        var s = symbol.args[0];\n        if (symbol.multiplier.equals(1)) retval = _.multiply(s, new Symbol(symbol.power));else retval = _.symfunction(Settings.LOG, [symbol]);\n      } else if (Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {\n        // Parse for safety.\n        symbol = _.parse(symbol);\n        var img_part;\n        if (symbol.multiplier.lessThan(0)) {\n          symbol.negate();\n          img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));\n        }\n        retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));\n        if (img_part) {\n          retval = _.add(retval, img_part);\n        }\n      } else {\n        var s;\n        if (!symbol.power.equals(1) && !symbol.contains('e')) {\n          s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);\n          symbol.toLinear();\n        }\n        //log(a,a) = 1 since the base is allowed to be changed.\n        //This was pointed out by Happypig375 in issue #280\n        if (arguments.length > 1 && allSame(arguments)) {\n          retval = new Symbol(1);\n        } else {\n          retval = _.symfunction(Settings.LOG, arguments);\n        }\n        if (s) retval = _.multiply(s, retval);\n      }\n      return retval;\n    }\n\n    /**\r\n     * Round a number up to s decimal places\r\n     * @param {Number} x\r\n     * @param {int} s - the number of decimal places\r\n     * @returns {undefined}\r\n     */\n    function round(x, s) {\n      var sIsConstant = s && s.isConstant() || typeof s === 'undefined';\n      if (x.isConstant() && sIsConstant) {\n        var v, e, exp, retval;\n        v = x;\n        //round the coefficient of then number but not the actual decimal value\n        //we know this because a negative number was passed\n        if (s && s.lessThan(0)) {\n          s = abs(s);\n          //convert the number to exponential form\n          e = Number(x).toExponential().toString().split('e');\n          //point v to the coefficient of then number\n          v = e[0];\n          //set the expontent\n          exp = e[1];\n        }\n        //round the number to the requested precision\n        retval = new Symbol(nround(v, Number(s || 0)));\n        //if there's a exponent then put it back\n        return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)));\n      }\n      return _.symfunction('round', arguments);\n    }\n\n    /**\r\n     * Gets the quadrant of the trig function\r\n     * @param {Frac} m\r\n     * @returns {Int}\r\n     */\n    function getQuadrant(m) {\n      var v = m % 2,\n        quadrant;\n      if (v < 0) v = 2 + v; //put it in terms of pi\n\n      if (v >= 0 && v <= 0.5) quadrant = 1;else if (v > 0.5 && v <= 1) quadrant = 2;else if (v > 1 && v <= 1.5) quadrant = 3;else quadrant = 4;\n      return quadrant;\n    }\n\n    /*\r\n     * Serves as a bridge between numbers and bigNumbers\r\n     * @param {Frac|Number} n\r\n     * @returns {Symbol}\r\n     */\n    function bigConvert(n) {\n      if (!isFinite(n)) {\n        var sign = Math.sign(n);\n        var r = new Symbol(String(Math.abs(n)));\n        r.multiplier = r.multiplier.multiply(new Frac(sign));\n        return r;\n      }\n      if (isSymbol(n)) return n;\n      if (typeof n === 'number') {\n        try {\n          n = Frac.simple(n);\n        } catch (e) {\n          n = new Frac(n);\n        }\n      }\n      var symbol = new Symbol(0);\n      symbol.multiplier = n;\n      return symbol;\n    }\n    ;\n    function clean(symbol) {\n      // handle functions with numeric values\n      // handle denominator within denominator\n      // handle trig simplifications\n      var g = symbol.group,\n        retval;\n      //Now let's get to work\n      if (g === CP) {\n        var num = symbol.getNum(),\n          den = symbol.getDenom() || new Symbol(1),\n          p = Number(symbol.power),\n          factor = new Symbol(1);\n        if (Math.abs(p) === 1) {\n          den.each(function (x) {\n            if (x.group === CB) {\n              factor = _.multiply(factor, clean(x.getDenom()));\n            } else if (x.power.lessThan(0)) {\n              factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));\n            }\n          });\n          var new_den = new Symbol(0);\n          //now divide out the factor and add to new den\n          den.each(function (x) {\n            new_den = _.add(_.divide(x, factor.clone()), new_den);\n          });\n          factor.invert(); //invert so it can be added to the top\n          var new_num;\n          if (num.isComposite()) {\n            new_num = new Symbol(0);\n            num.each(function (x) {\n              new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);\n            });\n          } else new_num = _.multiply(factor, num);\n          retval = _.divide(new_num, new_den);\n        }\n      } else if (g === CB) {\n        retval = new Symbol(1);\n        symbol.each(function (x) {\n          retval = _.multiply(retval, _.clean(x));\n        });\n      } else if (g === FN) {\n        if (symbol.args.length === 1 && symbol.args[0].isConstant()) retval = block('PARSE2NUMBER', function () {\n          return _.parse(symbol);\n        }, true);\n      }\n      if (!retval) retval = symbol;\n      return retval;\n    }\n\n    /**\r\n     * A wrapper for the expand function\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n    function expandall(symbol, opt) {\n      opt = opt || {\n        expand_denominator: true,\n        expand_functions: true\n      };\n      return expand(symbol, opt);\n    }\n    /**\r\n     * Expands a symbol\r\n     * @param symbol\r\n     */\n    // Old expand\n    function expand(symbol, opt) {\n      if (Array.isArray(symbol)) {\n        return symbol.map(function (x) {\n          return expand(x, opt);\n        });\n      }\n      opt = opt || {};\n      //deal with parenthesis\n      if (symbol.group === FN && symbol.fname === '') {\n        var f = expand(symbol.args[0], opt);\n        var x = expand(_.pow(f, _.parse(symbol.power)), opt);\n        return _.multiply(_.parse(symbol.multiplier), x).distributeMultiplier();\n      }\n      // We can expand these groups so no need to waste time. Just return and be done.\n      if ([N, P, S].indexOf(symbol.group) !== -1) {\n        return symbol; //nothing to do\n      }\n      var original = symbol.clone();\n\n      // Set up a try-catch block. If anything goes wrong then we simply return the original symbol\n      try {\n        // Store the power and multiplier\n        var m = symbol.multiplier.toString();\n        var p = Number(symbol.power);\n        var retval = symbol;\n\n        // Handle (a+b)^2 | (x+x^2)^2\n        if (symbol.isComposite() && isInt(symbol.power) && symbol.power > 0) {\n          var n = p - 1;\n          // Strip the expression of it's multiplier and power. We'll call it f. The power will be p and the multiplier m.\n          var f = new Symbol(0);\n          symbol.each(function (x) {\n            f = _.add(f, expand(_.parse(x), opt));\n          });\n          var expanded = _.parse(f);\n          for (var i = 0; i < n; i++) {\n            expanded = mix(expanded, f, opt);\n          }\n          retval = _.multiply(_.parse(m), expanded).distributeMultiplier();\n        } else if (symbol.group === FN && opt.expand_functions === true) {\n          var args = [];\n          // Expand function the arguments\n          symbol.args.forEach(function (x) {\n            args.push(expand(x, opt));\n          });\n          // Put back the power and multiplier\n          retval = _.pow(_.symfunction(symbol.fname, args), _.parse(symbol.power));\n          retval = _.multiply(retval, _.parse(symbol.multiplier));\n        } else if (symbol.isComposite() && isInt(symbol.power) && symbol.power < 0 && opt.expand_denominator === true) {\n          // Invert it. Expand it and then re-invert it.\n          symbol = symbol.invert();\n          retval = expand(symbol, opt);\n          retval.invert();\n        } else if (symbol.group === CB) {\n          var rank = function (s) {\n            switch (s.group) {\n              case CP:\n                return 0;\n              case PL:\n                return 1;\n              case CB:\n                return 2;\n              case FN:\n                return 3;\n              default:\n                return 4;\n            }\n          };\n          // Consider (a+b)(c+d). The result will be (a*c+a*d)+(b*c+b*d).\n          // We start by moving collecting the symbols. We want others>FN>CB>PL>CP\n          var symbols = symbol.collectSymbols().sort(function (a, b) {\n            return rank(b) - rank(a);\n          })\n          // Distribute the power to each symbol and expand\n          .map(function (s) {\n            var x = _.pow(s, _.parse(p));\n            var e = expand(x, opt);\n            return e;\n          });\n          var f = symbols.pop();\n\n          // If the first symbols isn't a composite then we're done\n          if (f.isComposite() && f.isLinear()) {\n            symbols.forEach(function (s) {\n              f = mix(f, s, opt);\n            });\n\n            // If f is of group PL or CP then we can expand some more\n            if (f.isComposite()) {\n              if (f.power > 1) {\n                f = expand(_.pow(f, _.parse(f.power)), opt);\n              }\n              // Put back the multiplier\n              retval = _.multiply(_.parse(m), f).distributeMultiplier();\n              ;\n            } else {\n              // Everything is expanded at this point so if it's still a CB\n              // then just return the symbol\n              retval = f;\n            }\n          } else {\n            // Just multiply back in the expanded form of each\n            retval = f;\n            symbols.forEach(function (s) {\n              retval = _.multiply(retval, s);\n            });\n            // Put back the multiplier\n            retval = _.multiply(retval, _.parse(m)).distributeMultiplier();\n          }\n\n          // TODO: This exists solely as a quick fix for sqrt(11)*sqrt(33) not simplifying.\n          if (retval.group === CB) {\n            retval = _.parse(retval);\n          }\n        } else {\n          // Otherwise just return the expression\n          retval = symbol;\n        }\n        // Final cleanup and return\n        return retval;\n      } catch (e) {\n        return original;\n      }\n      return original;\n    }\n\n    /**\r\n     * Returns an identity matrix of nxn\r\n     * @param {Number} n\r\n     * @returns {Matrix}\r\n     */\n    function imatrix(n) {\n      return Matrix.identity(n);\n    }\n\n    /**\r\n     * Retrieves and item from a vector\r\n     * @param {Vector} vector\r\n     * @param {Number} index\r\n     * @returns {Vector|Symbol}\r\n     */\n    function vecget(vector, index) {\n      if (index.isConstant() && isInt(index)) return vector.elements[index];\n      return _.symfunction('vecget', arguments);\n    }\n\n    /**\r\n     * Removes duplicates from a vector\r\n     * @param {Vector} vector\r\n     * @param {Number} tolerance\r\n     * @returns {Vector}\r\n     */\n    function vectrim(vector, tolerance) {\n      tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\n      vector = vector.clone();\n      tolerance = Number(tolerance);\n      //place algebraic solutions first\n      vector.elements.sort(function (a, b) {\n        return b.group - a.group;\n      });\n      //depending on the start point we may have duplicates so we need to clean those up a bit.\n      //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\n      vector.elements = removeDuplicates(vector.elements, function (a, b) {\n        var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());\n        return diff <= tolerance;\n      });\n      return vector;\n    }\n\n    /**\r\n     * Set a value for a vector at a given index\r\n     * @param {Vector} vector\r\n     * @param {Number} index\r\n     * @param {Symbol} value\r\n     * @returns {Vector}\r\n     */\n    function vecset(vector, index, value) {\n      if (!index.isConstant) return _.symfunction('vecset', arguments);\n      vector.elements[index] = value;\n      return vector;\n    }\n    function matget(matrix, i, j) {\n      if (i.isConstant() && j.isConstant()) return matrix.elements[i][j];\n      return _.symfunction('matget', arguments);\n    }\n    function matgetrow(matrix, i) {\n      if (i.isConstant()) return new Matrix(matrix.elements[i]);\n      return _.symfunction('matgetrow', arguments);\n    }\n    function matsetrow(matrix, i, x) {\n      //handle symbolics\n      if (!i.isConstant()) return _.symfunction('matsetrow', arguments);\n      if (matrix.elements[i].length !== x.elements.length) throw new DimensionError('Matrix row must match row dimensions!');\n      var M = matrix.clone();\n      M.elements[i] = x.clone().elements;\n      return M;\n    }\n    function matgetcol(matrix, col_index) {\n      //handle symbolics\n      if (!col_index.isConstant()) return _.symfunction('matgetcol', arguments);\n      col_index = Number(col_index);\n      var M = Matrix.fromArray([]);\n      matrix.each(function (x, i, j) {\n        if (j === col_index) {\n          M.elements.push([x.clone()]);\n        }\n      });\n      return M;\n    }\n    function matsetcol(matrix, j, col) {\n      //handle symbolics\n      if (!j.isConstant()) return _.symfunction('matsetcol', arguments);\n      j = Number(j);\n      if (matrix.rows() !== col.elements.length) throw new DimensionError('Matrix columns must match number of columns!');\n      col.each(function (x, i) {\n        matrix.set(i - 1, j, x.elements[0].clone());\n      });\n      return matrix;\n    }\n    function matset(matrix, i, j, value) {\n      matrix.elements[i][j] = value;\n      return matrix;\n    }\n\n    //the constructor for vectors\n    function vector() {\n      return new Vector([].slice.call(arguments));\n    }\n\n    //the constructor for matrices\n    function matrix() {\n      return Matrix.fromArray(arguments);\n    }\n\n    //the constructor for sets\n    function set() {\n      return Set.fromArray(arguments);\n    }\n    function determinant(symbol) {\n      if (isMatrix(symbol)) {\n        return symbol.determinant();\n      }\n      return symbol;\n    }\n    function size(symbol) {\n      var retval;\n      if (isMatrix(symbol)) retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];else if (isVector(symbol) || isSet(symbol)) retval = new Symbol(symbol.elements.length);else err('size expects a matrix or a vector');\n      return retval;\n    }\n    function dot(vec1, vec2) {\n      if (isVector(vec1) && isVector(vec2)) return vec1.dot(vec2);\n      err('function dot expects 2 vectors');\n    }\n    function cross(vec1, vec2) {\n      if (isVector(vec1) && isVector(vec2)) return vec1.cross(vec2);\n      err('function cross expects 2 vectors');\n    }\n    function transpose(mat) {\n      if (isMatrix(mat)) return mat.transpose();\n      err('function transpose expects a matrix');\n    }\n    function invert(mat) {\n      if (isMatrix(mat)) return mat.invert();\n      err('invert expects a matrix');\n    }\n\n    //basic set functions\n    function union(set1, set2) {\n      return set1.union(set2);\n    }\n    function intersection(set1, set2) {\n      return set1.intersection(set2);\n    }\n    function contains(set1, e) {\n      return set1.contains(e);\n    }\n    function difference(set1, set2) {\n      return set1.difference(set2);\n    }\n    function intersects(set1, set2) {\n      return new Symbol(Number(set1.intersects(set2)));\n    }\n    function is_subset(set1, set2) {\n      return new Symbol(Number(set1.is_subset(set2)));\n    }\n    function print() {\n      arguments2Array(arguments).map(function (x) {\n        console.log(x.toString());\n      });\n    }\n    function testSQRT(symbol) {\n      //wrap the symbol in sqrt. This eliminates one more check down the line.\n      if (!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {\n        var sign = symbol.power.sign();\n        //don't devide the power directly. Notice the use of toString. This makes it possible\n        //to use a bigNumber library in the future\n        var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear());\n        //place back the sign of the power\n        if (sign < 0) retval.invert();\n        return retval;\n      }\n      return symbol;\n    }\n\n    //try to reduce a symbol by pulling its power\n    function testPow(symbol) {\n      if (symbol.group === P) {\n        var v = symbol.value;\n        var fct = primeFactors(v)[0];\n\n        //safety\n        if (!fct) {\n          warn('Unable to compute prime factors. This should not happen. Please review and report.');\n          return symbol;\n        }\n        var n = new Frac(Math.log(v) / Math.log(fct)),\n          p = n.multiply(symbol.power);\n\n        //we don't want a more complex number than before\n        if (p.den > symbol.power.den) return symbol;\n        if (isInt(p)) symbol = Symbol(Math.pow(fct, p));else symbol = new Symbol(fct).setPower(p);\n      }\n      return symbol;\n    }\n\n    //Link the functions to the parse so they're available outside of the library.\n    //This is strictly for convenience and may be deprecated.\n    this.expand = expand;\n    this.round = round;\n    this.clean = clean;\n    this.sqrt = sqrt;\n    this.cbrt = cbrt;\n    this.abs = abs;\n    this.log = log;\n    this.rationalize = rationalize;\n    this.nthroot = nthroot;\n    this.arg = arg;\n    this.conjugate = conjugate;\n    this.imagpart = imagpart;\n    this.realpart = realpart;\n\n    //TODO:\n    //Utilize the function below instead of the linked function\n    this.getFunction = function (name) {\n      return functions[name][0];\n    };\n\n    //Parser.methods ===============================================================\n    this.addPreprocessor = function (name, action, order, shift_cells) {\n      var names = preprocessors.names;\n      var actions = preprocessors.actions;\n      if (typeof action !== 'function')\n        //the person probably forgot to specify a name\n        throw new PreprocessorError('Incorrect parameters. Function expected!');\n      if (!order) {\n        names.push(name);\n        actions.push(action);\n      } else {\n        if (shift_cells) {\n          names.splice(order, 0, name);\n          actions.splice(order, 0, action);\n        } else {\n          names[order] = name;\n          actions[order] = action;\n        }\n      }\n    };\n    this.getPreprocessors = function () {\n      var preprocessors = {};\n      for (var i = 0, l = preprocessors.names.length; i < l; i++) {\n        var name = preprocessors.names[i];\n        preprocessors[name] = {\n          order: i,\n          action: preprocessors.actions[i]\n        };\n      }\n      return preprocessors;\n    };\n    this.removePreprocessor = function (name, shift_cells) {\n      var i = preprocessors.names.indexOf(name);\n      if (shift_cells) {\n        remove(preprocessors.names, i);\n        remove(preprocessors.actions, i);\n      } else {\n        preprocessors.names[i] = undefined;\n        preprocessors.actions[i] = undefined;\n      }\n    };\n\n    //The loader for functions which are not part of Math2\n    this.mapped_function = function () {\n      var subs = {},\n        params = this.params;\n      for (var i = 0; i < params.length; i++) {\n        subs[params[i]] = String(arguments[i]);\n      }\n      return _.parse(this.body, subs);\n    };\n    /**\r\n     * Adds two symbols\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     * @returns {Symbol}\r\n     */\n    this.add = function (a, b) {\n      var aIsSymbol = isSymbol(a),\n        bIsSymbol = isSymbol(b);\n      //we're dealing with two symbols\n      if (aIsSymbol && bIsSymbol) {\n        //forward the adding of symbols with units to the Unit module\n        if (a.unit || b.unit) {\n          return _.Unit.add(a, b);\n        }\n        //handle Infinity\n        //https://www.encyclopediaofmath.org/index.php/Infinity\n        if (a.isInfinity || b.isInfinity) {\n          var aneg = a.multiplier.lessThan(0),\n            bneg = b.multiplier.lessThan(0);\n          if (a.isInfinity && b.isInfinity && aneg !== bneg) {\n            throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');\n          }\n          var inf = Symbol.infinity();\n          if (bneg) inf.negate();\n          return inf;\n        }\n        if (a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {\n          a.distributeMultiplier();\n          b.distributeMultiplier();\n          // Fix for issue #606\n          if (b.length > a.length && a.group === b.group) {\n            [a, b] = [b, a];\n          }\n        }\n\n        //no need to waste time on zeroes\n        if (a.multiplier.equals(0)) return b;\n        if (b.multiplier.equals(0)) return a;\n        if (a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\n          var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));\n          return result;\n        }\n        var g1 = a.group,\n          g2 = b.group,\n          ap = a.power.toString(),\n          bp = b.power.toString();\n\n        //always keep the greater group on the left.\n        if (g1 < g2 || g1 === g2 && ap > bp && bp > 0) {\n          return this.add(b, a);\n        }\n\n        /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy\r\n         * because it doesn't know which one to prioritize. */\n        //correction to PL dilemma\n        if (g1 === CB && g2 === PL && a.value === b.value) {\n          //swap\n          var t = a;\n          a = b;\n          b = t;\n          g1 = a.group;\n          g2 = b.group;\n          ap = a.power.toString();\n          bp = b.power.toString();\n        }\n        var powEQ = ap === bp,\n          v1 = a.value,\n          v2 = b.value,\n          aIsComposite = a.isComposite(),\n          bIsComposite = b.isComposite(),\n          h1,\n          h2,\n          result;\n        if (aIsComposite) h1 = text(a, 'hash');\n        if (bIsComposite) h2 = text(b, 'hash');\n        if (g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {\n          return this.add(b, a);\n        }\n\n        //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x\n        if (g1 === PL && g2 === PL) {\n          v1 = h1;\n          v2 = h2;\n        }\n        var PN = g1 === P && g2 === N,\n          PNEQ = a.value === b.multiplier.toString(),\n          valEQ = v1 === v2 || h1 === h2 && h1 !== undefined || PN && PNEQ;\n\n        //equal values, equal powers\n        if (valEQ && powEQ && g1 === g2) {\n          //make sure to convert N to something P can work with\n          if (PN) b = b.convert(P); //CL\n\n          //handle PL\n          if (g1 === PL && (g2 === S || g2 === P)) {\n            a.distributeMultiplier();\n            result = a.attach(b);\n          } else {\n            result = a; //CL\n            if (a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {\n              for (var s in b.symbols) {\n                var x = b.symbols[s];\n                result.attach(x);\n              }\n            } else result.multiplier = result.multiplier.add(b.multiplier);\n          }\n        }\n        //equal values uneven powers\n        else if (valEQ && g1 !== PL) {\n          //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)\n          if (g1 === CP && g2 === PL) {\n            b.insert(a, 'add');\n            result = b;\n          } else {\n            result = Symbol.shell(PL).attach([a, b]);\n            //update the hash\n            result.value = g1 === PL ? h1 : v1;\n          }\n        } else if (aIsComposite && a.isLinear()) {\n          var canIterate = g1 === g2,\n            bothPL = g1 === PL && g2 === PL;\n\n          //we can only iterate group PL if they values match\n          if (bothPL) canIterate = a.value === b.value;\n          //distribute the multiplier over the entire symbol\n          a.distributeMultiplier();\n          if (b.isComposite() && b.isLinear() && canIterate) {\n            b.distributeMultiplier();\n            //CL\n            for (var s in b.symbols) {\n              var x = b.symbols[s];\n              a.attach(x);\n            }\n            result = a;\n          }\n          //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2\n          else if (bothPL && a.value !== h2 || g1 === PL && !valEQ) {\n            result = Symbol.shell(CP).attach([a, b]);\n            result.updateHash();\n          } else {\n            result = a.attach(b);\n          }\n        } else {\n          if (g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {\n            var m = b.multiplier.clone();\n            b = sqrt(b.toUnitMultiplier().toLinear());\n            b.multiplier = m;\n          }\n          //fix for issue #3 and #159\n          if (a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {\n            result = _.add(expand(a), expand(b));\n          } else {\n            result = Symbol.shell(CP).attach([a, b]);\n            result.updateHash();\n          }\n        }\n        if (result.multiplier.equals(0)) result = new Symbol(0);\n\n        //make sure to remove unnecessary wraps\n        if (result.length === 1) {\n          var m = result.multiplier;\n          result = firstObject(result.symbols);\n          result.multiplier = result.multiplier.multiply(m);\n        }\n        return result;\n      } else {\n        //keep symbols to the right\n        if (bIsSymbol && !aIsSymbol) {\n          var t = a;\n          a = b;\n          b = t; //swap\n          t = bIsSymbol;\n          bIsSymbol = aIsSymbol;\n          aIsSymbol = t;\n        }\n        var bIsMatrix = isMatrix(b);\n        if (aIsSymbol && bIsMatrix) {\n          var M = new Matrix();\n          b.eachElement(function (e, i, j) {\n            M.set(i, j, _.add(a.clone(), e));\n          });\n          b = M;\n        } else {\n          if (isMatrix(a) && bIsMatrix) {\n            b = a.add(b);\n          } else if (aIsSymbol && isVector(b)) {\n            b.each(function (x, i) {\n              i--;\n              b.elements[i] = _.add(a.clone(), b.elements[i]);\n            });\n          } else {\n            if (isVector(a) && isVector(b)) {\n              b.each(function (x, i) {\n                i--;\n                b.elements[i] = _.add(a.elements[i], b.elements[i]);\n              });\n            } else if (isVector(a) && isMatrix(b)) {\n              //try to convert a to a matrix\n              return _.add(b, a);\n            } else if (isMatrix(a) && isVector(b)) {\n              if (b.elements.length === a.rows()) {\n                var M = new Matrix(),\n                  l = a.cols();\n                b.each(function (e, i) {\n                  var row = [];\n                  for (var j = 0; j < l; j++) {\n                    row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));\n                  }\n                  M.elements.push(row);\n                });\n                return M;\n              } else err('Dimensions must match!');\n            }\n          }\n        }\n        return b;\n      }\n    };\n    /**\r\n     * Gets called when the parser finds the - operator. Not the prefix operator. See this.add\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     * @returns {Symbol}\r\n     */\n    this.subtract = function (a, b) {\n      var aIsSymbol = aIsSymbol = isSymbol(a),\n        bIsSymbol = isSymbol(b),\n        t;\n      if (aIsSymbol && bIsSymbol) {\n        if (a.unit || b.unit) {\n          return _.Unit.subtract(a, b);\n        }\n        return this.add(a, b.negate());\n      } else {\n        if (bIsSymbol && isVector(a)) {\n          b = a.map(function (x) {\n            return _.subtract(x, b.clone());\n          });\n        } else if (aIsSymbol && isVector(b)) {\n          b = b.map(function (x) {\n            return _.subtract(a.clone(), x);\n          });\n        } else if (isVector(a) && isVector(b)) {\n          if (a.dimensions() === b.dimensions()) b = a.subtract(b);else _.error('Unable to subtract vectors. Dimensions do not match.');\n        } else if (isMatrix(a) && isVector(b)) {\n          if (b.elements.length === a.rows()) {\n            var M = new Matrix(),\n              l = a.cols();\n            b.each(function (e, i) {\n              var row = [];\n              for (var j = 0; j < l; j++) {\n                row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));\n              }\n              M.elements.push(row);\n            });\n            return M;\n          } else err('Dimensions must match!');\n        } else if (isVector(a) && isMatrix(b)) {\n          var M = b.clone().negate();\n          return _.add(M, a);\n        } else if (isMatrix(a) && isMatrix(b)) {\n          b = a.subtract(b);\n        } else if (isMatrix(a) && bIsSymbol) {\n          var M = new Matrix();\n          a.each(function (x, i, j) {\n            M.set(i, j, _.subtract(x, b.clone()));\n          });\n          b = M;\n        } else if (aIsSymbol && isMatrix(b)) {\n          var M = new Matrix();\n          b.each(function (x, i, j) {\n            M.set(i, j, _.subtract(a.clone(), x));\n          });\n          b = M;\n        }\n        return b;\n      }\n    };\n    /**\r\n     * Gets called when the parser finds the * operator. See this.add\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     * @returns {Symbol}\r\n     */\n    this.multiply = function (a, b) {\n      var aIsSymbol = isSymbol(a),\n        bIsSymbol = isSymbol(b);\n      //we're dealing with function assignment here\n      if (aIsSymbol && b instanceof Collection) {\n        b.elements.push(a);\n        return b;\n      }\n      if (aIsSymbol && bIsSymbol) {\n        //if it has a unit then add it and return it right away.\n        if (b.isUnit) {\n          var result = a.clone();\n          a.unit = b;\n          return result;\n        }\n\n        //if it has units then just forward that problem to the unit module\n        if (a.unit || b.unit) {\n          return _.Unit.multiply(a, b);\n        }\n\n        //handle Infinty\n        if (a.isInfinity || b.isInfinity) {\n          if (a.equals(0) || b.equals(0)) throw new UndefinedError(a + '*' + b + ' is undefined!');\n          //x/infinity\n          if (b.power.lessThan(0)) {\n            if (!a.isInfinity) {\n              return new Symbol(0);\n            } else {\n              throw new UndefinedError('Infinity/Infinity is not defined!');\n            }\n          }\n          var sign = a.multiplier.multiply(b.multiplier).sign(),\n            inf = Symbol.infinity();\n          if (a.isConstant() || b.isConstant() || a.isInfinity && b.isInfinity) {\n            if (sign < 0) inf.negate();\n            return inf;\n          }\n        }\n        //the quickies\n        if (a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\n          var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();\n          var retval = new Symbol(t);\n          return retval;\n        }\n\n        //don't waste time\n        if (a.isOne()) {\n          return b.clone();\n        }\n        if (b.isOne()) {\n          return a.clone();\n        }\n        if (a.multiplier.equals(0) || b.multiplier.equals(0)) return new Symbol(0);\n        if (b.group > a.group && !(b.group === CP)) return this.multiply(b, a);\n        //correction for PL/CB dilemma\n        if (a.group === CB && b.group === PL && a.value === b.value) {\n          var t = a;\n          a = b;\n          b = t; //swap\n        }\n        var g1 = a.group,\n          g2 = b.group,\n          bnum = b.multiplier.num,\n          bden = b.multiplier.den;\n        if (g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\n          //unwrap sqrt\n          var a_pow = a.power;\n          var a_multiplier = _.parse(a.multiplier);\n          a = _.multiply(a_multiplier, a.args[0].clone());\n          a.setPower(new Frac(0.5).multiply(a_pow));\n          g1 = a.group;\n        }\n        //simplify n/sqrt(n). Being very specific\n        else if (g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\n          a = _.symfunction(SQRT, [b.clone()]);\n          b = new Symbol(1);\n        }\n        ;\n        var v1 = a.value,\n          v2 = b.value,\n          sign = new Frac(a.sign()),\n          //since P is just a morphed version of N we need to see if they relate\n          ONN = g1 === P && g2 === N && b.multiplier.equals(a.value),\n          //don't multiply the multiplier of b since that's equal to the value of a\n          m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\n          result = a.clone().toUnitMultiplier();\n        b = b.clone().toUnitMultiplier(true);\n\n        //further simplification of sqrt\n        if (g1 === FN && g2 === FN) {\n          var u = a.args[0].clone();\n          var v = b.args[0].clone();\n          if (a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {\n            var q = _.divide(u, v).invert();\n            if (q.gt(1) && isInt(q)) {\n              //b contains a factor a which can be moved to a\n              result = _.multiply(a.args[0].clone(), sqrt(q.clone()));\n              b = new Symbol(1);\n            }\n          }\n          //simplify factorial but only if\n          //1 - It's division so b will have a negative power\n          //2 - We're not dealing with factorials of numbers\n          else if (a.fname === FACTORIAL && b.fname === FACTORIAL && !u.isConstant() && !v.isConstant() && b.power < 0) {\n            //assume that n = positive\n            var d = _.subtract(u.clone(), v.clone());\n\n            //if it's not numeric then we don't know if we can simplify so just return\n            if (d.isConstant()) {\n              //there will never be a case where d == 0 since this will already have\n              //been handled at the beginning of this function\n              t = new Symbol(1);\n              if (d < 0) {\n                //If d is negative then the numerator is larger so expand that\n                for (var i = 0, n = Math.abs(d); i <= n; i++) {\n                  var s = _.add(u.clone(), new Symbol(i));\n                  t = _.multiply(t, s);\n                }\n                result = _.multiply(_.pow(u, new Symbol(a.power)), _.pow(t, new Symbol(b.power)));\n                b = new Symbol(1);\n              } else {\n                //Otherwise the denominator is larger so expand that\n                for (var i = 0, n = Math.abs(d); i <= n; i++) {\n                  var s = _.add(v.clone(), new Symbol(i));\n                  t = _.multiply(t, s);\n                }\n                result = _.multiply(_.pow(t, new Symbol(a.power)), _.pow(v, new Symbol(b.power)));\n                b = new Symbol(1);\n              }\n            }\n          }\n        }\n\n        //if both are PL then their hashes have to match\n        if (v1 === v2 && g1 === PL && g1 === g2) {\n          v1 = a.text('hash');\n          v2 = b.text('hash');\n        }\n\n        //same issue with (x^2+1)^x*(x^2+1)\n        //EX needs an exception when multiplying because it needs to recognize\n        //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\n        if (g2 === EX && b.previousGroup === PL && g1 === PL) {\n          v1 = text(a, 'hash', EX);\n        }\n        if ((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {\n          var p1 = a.power,\n            p2 = b.power,\n            isSymbolP1 = isSymbol(p1),\n            isSymbolP2 = isSymbol(p2),\n            toEX = isSymbolP1 || isSymbolP2;\n          //TODO: this needs cleaning up\n          if (g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {\n            result = new Symbol(0);\n            a.each(function (x) {\n              result = _.add(result, _.multiply(x, b.clone()));\n            }, true);\n          } else {\n            //add the powers\n            result.power = toEX ? _.add(!isSymbol(p1) ? new Symbol(p1) : p1, !isSymbol(p2) ? new Symbol(p2) : p2) : g1 === N /*don't add powers for N*/ ? p1 : p1.add(p2);\n\n            //eliminate zero power values and convert them to numbers\n            if (result.power.equals(0)) result = result.convert(N);\n\n            //properly convert to EX\n            if (toEX) result.convert(EX);\n\n            //take care of imaginaries\n            if (a.imaginary && b.imaginary) {\n              var isEven = even(result.power % 2);\n              if (isEven) {\n                result = new Symbol(1);\n                m.negate();\n              }\n            }\n\n            //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\n            if (result.group !== EX && result.previousGroup) result.previousGroup = undefined;\n            //the sign for b is floating around. Remember we are assuming that the odd variable will carry\n            //the sign but this isn't true if they're equals symbols\n            result.multiplier = result.multiplier.multiply(b.multiplier);\n          }\n        } else if (g1 === CB && a.isLinear()) {\n          if (g2 === CB) b.distributeExponent();\n          if (g2 === CB && b.isLinear()) {\n            for (var s in b.symbols) {\n              var x = b.symbols[s];\n              result = result.combine(x);\n            }\n            result.multiplier = result.multiplier.multiply(b.multiplier);\n          } else {\n            result.combine(b);\n          }\n        } else {\n          //the multiplier was already handled so nothing left to do\n          if (g1 !== N) {\n            if (g1 === CB) {\n              result.distributeExponent();\n              result.combine(b);\n            } else if (!b.isOne()) {\n              var bm = b.multiplier.clone();\n              b.toUnitMultiplier();\n              result = Symbol.shell(CB).combine([result, b]);\n              //transfer the multiplier to the outside\n              result.multiplier = result.multiplier.multiply(bm);\n            }\n          } else {\n            result = b.clone().toUnitMultiplier();\n          }\n        }\n        if (result.group === P) {\n          var logV = Math.log(result.value),\n            n1 = Math.log(bnum) / logV,\n            n2 = Math.log(bden) / logV,\n            ndiv = m.num / bnum,\n            ddiv = m.den / bden;\n          //we don't want to divide by zero no do we? Strange things happen.\n          if (n1 !== 0 && isInt(n1) && isInt(ndiv)) {\n            result.power = result.power.add(new Frac(n1));\n            m.num /= bnum; //BigInt? Keep that in mind for the future.\n          }\n          if (n2 !== 0 && isInt(n2) && isInt(ddiv)) {\n            result.power = result.power.subtract(new Frac(n2));\n            m.den /= bden; //BigInt? Keep that in mind for the future.\n          }\n        }\n\n        //unpack CB if length is only one\n        if (result.length === 1) {\n          var t = result.multiplier;\n          //transfer the multiplier\n          result = firstObject(result.symbols);\n          result.multiplier = result.multiplier.multiply(t);\n        }\n\n        //reduce square root\n        var ps = result.power.toString();\n        if (even(ps) && result.fname === SQRT) {\n          //grab the sign of the symbol\n          sign = sign * result.sign();\n          var p = result.power;\n          result = result.args[0];\n          result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));\n          //flip it back to the correct sign\n          if (sign < 0) result.negate();\n        } else {\n          result.multiplier = result.multiplier.multiply(m).multiply(sign);\n          if (result.group === CP && result.isImaginary()) result.distributeMultiplier();\n        }\n\n        //back convert group P to a simpler group N if possible\n        if (result.group === P && isInt(result.power.toDecimal())) result = result.convert(N);\n        return result;\n      } else {\n        //****** Matrices & Vector *****//\n        if (bIsSymbol && !aIsSymbol) {\n          //keep symbols to the right\n          t = a;\n          a = b;\n          b = t; //swap\n          t = bIsSymbol;\n          bIsSymbol = aIsSymbol;\n          aIsSymbol = t;\n        }\n        var isMatrixB = isMatrix(b),\n          isMatrixA = isMatrix(a);\n        if (aIsSymbol && isMatrixB) {\n          var M = new Matrix();\n          b.eachElement(function (e, i, j) {\n            M.set(i, j, _.multiply(a.clone(), e));\n          });\n          b = M;\n        } else {\n          if (isMatrixA && isMatrixB) {\n            b = a.multiply(b);\n          } else if (aIsSymbol && isVector(b)) {\n            b.each(function (x, i) {\n              i--;\n              b.elements[i] = _.multiply(a.clone(), b.elements[i]);\n            });\n          } else {\n            if (isVector(a) && isVector(b)) {\n              b.each(function (x, i) {\n                i--;\n                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);\n              });\n            } else if (isVector(a) && isMatrix(b)) {\n              //try to convert a to a matrix\n              return this.multiply(b, a);\n            } else if (isMatrix(a) && isVector(b)) {\n              if (b.elements.length === a.rows()) {\n                var M = new Matrix(),\n                  l = a.cols();\n                b.each(function (e, i) {\n                  var row = [];\n                  for (var j = 0; j < l; j++) {\n                    row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));\n                  }\n                  M.elements.push(row);\n                });\n                return M;\n              } else err('Dimensions must match!');\n            }\n          }\n        }\n        return b;\n      }\n    };\n    /**\r\n     * Gets called when the parser finds the / operator. See this.add\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     * @returns {Symbol}\r\n     */\n    this.divide = function (a, b) {\n      var aIsSymbol = isSymbol(a),\n        bIsSymbol = isSymbol(b);\n      if (aIsSymbol && bIsSymbol) {\n        //forward to Unit division\n        if (a.unit || b.unit) {\n          return _.Unit.divide(a, b);\n        }\n        var result;\n        if (b.equals(0)) throw new DivisionByZero('Division by zero not allowed!');\n        if (a.isConstant() && b.isConstant()) {\n          result = a.clone();\n          result.multiplier = result.multiplier.divide(b.multiplier);\n        } else {\n          b.invert();\n          result = _.multiply(a, b);\n        }\n        return result;\n      } else {\n        //******* Vectors & Matrices *********//\n        var isVectorA = isVector(a),\n          isVectorB = isVector(b);\n        if (aIsSymbol && isVectorB) {\n          b = b.map(function (x) {\n            return _.divide(a.clone(), x);\n          });\n        } else if (isVectorA && bIsSymbol) {\n          b = a.map(function (x) {\n            return _.divide(x, b.clone());\n          });\n        } else if (isVectorA && isVectorB) {\n          if (a.dimensions() === b.dimensions()) {\n            b = b.map(function (x, i) {\n              return _.divide(a.elements[--i], x);\n            });\n          } else _.error('Cannot divide vectors. Dimensions do not match!');\n        } else {\n          var isMatrixA = isMatrix(a),\n            isMatrixB = isMatrix(b);\n          if (isMatrixA && bIsSymbol) {\n            var M = new Matrix();\n            a.eachElement(function (x, i, j) {\n              M.set(i, j, _.divide(x, b.clone()));\n            });\n            b = M;\n          } else if (aIsSymbol && isMatrixB) {\n            var M = new Matrix();\n            b.eachElement(function (x, i, j) {\n              M.set(i, j, _.divide(a.clone(), x));\n            });\n            b = M;\n          } else if (isMatrixA && isMatrixB) {\n            var M = new Matrix();\n            if (a.rows() === b.rows() && a.cols() === b.cols()) {\n              a.eachElement(function (x, i, j) {\n                M.set(i, j, _.divide(x, b.elements[i][j]));\n              });\n              b = M;\n            } else {\n              _.error('Dimensions do not match!');\n            }\n          } else if (isMatrixA && isVectorB) {\n            if (a.cols() === b.dimensions()) {\n              var M = new Matrix();\n              a.eachElement(function (x, i, j) {\n                M.set(i, j, _.divide(x, b.elements[i].clone()));\n              });\n              b = M;\n            } else {\n              _.error('Unable to divide matrix by vector.');\n            }\n          }\n        }\n        return b;\n      }\n    };\n    /**\r\n     * Gets called when the parser finds the ^ operator. See this.add\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     * @returns {Symbol}\r\n     */\n    this.pow = function (a, b) {\n      var aIsSymbol = isSymbol(a),\n        bIsSymbol = isSymbol(b);\n      if (aIsSymbol && bIsSymbol) {\n        //it has units then it's the Unit module's problem\n        if (a.unit || b.unit) {\n          return _.Unit.pow(a, b);\n        }\n\n        // Handle abs\n        if (a.group === FN && a.fname === ABS && even(b)) {\n          var m = a.multiplier.clone();\n          var raised = _.pow(a.args[0], b);\n          raised.multiplier = m;\n          return raised;\n        }\n\n        // Handle infinity\n        if (a.isInfinity || b.isInfinity) {\n          if (a.isInfinity && b.isInfinity) throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');\n          if (a.isConstant() && b.isInfinity) {\n            if (a.equals(0)) {\n              if (b.lessThan(0)) throw new UndefinedError('0^Infinity is undefined!');\n              return new Symbol(0);\n            }\n            if (a.equals(1)) throw new UndefinedError('1^' + b.toString() + ' is undefined!');\n            //a^-oo\n            if (b.lessThan(0)) return new Symbol(0);\n            //a^oo\n            if (!a.lessThan(0)) return Symbol.infinity();\n          }\n          if (a.isInfinity && b.isConstant()) {\n            if (b.equals(0)) throw new UndefinedError(a + '^0 is undefined!');\n            if (b.lessThan(0)) return new Symbol(0);\n            return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));\n          }\n        }\n        var aIsZero = a.equals(0);\n        var bIsZero = b.equals(0);\n        if (aIsZero && bIsZero) throw new UndefinedError('0^0 is undefined!');\n\n        // Return 0 right away if possible\n        if (aIsZero && b.isConstant() && b.multiplier.greaterThan(0)) return new Symbol(0);\n        if (bIsZero) return new Symbol(1);\n        var bIsConstant = b.isConstant(),\n          aIsConstant = a.isConstant(),\n          bIsInt = b.isInteger(),\n          m = a.multiplier,\n          result = a.clone();\n\n        // 0^0, 1/0, etc. Complain.\n        if (aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0)) throw new UndefinedError('Division by zero is not allowed!');\n\n        // Compute imaginary numbers right away\n        if (Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {\n          var k, re, im;\n          k = Math.PI * b;\n          re = new Symbol(Math.cos(k));\n          im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));\n          return _.add(re, im);\n        }\n\n        // Imaginary number under negative nthroot or to the n\n        if (Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {\n          var re, im, r, theta, nre, nim, phi;\n          re = a.realpart();\n          im = a.imagpart();\n          if (re.isConstant('all') && im.isConstant('all')) {\n            phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal()).times(b.toString())) : Math.atan2(im, re) * b;\n            theta = new Symbol(phi);\n            r = _.pow(Symbol.hyp(re, im), b);\n            nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));\n            nim = _.multiply(r, _.trig.sin(theta));\n            return _.add(nre, _.multiply(Symbol.imaginary(), nim));\n          }\n        }\n\n        // Take care of the symbolic part\n        result.toUnitMultiplier();\n        //simpifly sqrt\n        if (result.group === FN && result.fname === SQRT && !bIsConstant) {\n          var s = result.args[0];\n          s.multiplyPower(new Symbol(0.5));\n          s.multiplier.multiply(result.multiplier);\n          s.multiplyPower(b);\n          result = s;\n        } else {\n          var sign = m.sign();\n          //handle cases such as (-a^3)^(1/4)\n          if (evenFraction(b) && sign < 0) {\n            // Swaperoo\n            // First put the sign back on the symbol\n            result.negate();\n            // Wrap it in brackets\n            result = _.symfunction(PARENTHESIS, [result]);\n            // Move the sign back the exterior and let nerdamer handle the rest\n            result.negate();\n          }\n          result.multiplyPower(b);\n        }\n        if (aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {\n          var c;\n          //remove the sign\n          if (sign < 0) {\n            a.negate();\n            if (b.multiplier.den.equals(2))\n              //we know that the numerator has to be odd and therefore it's i\n              c = new Symbol(Settings.IMAGINARY);else if (isInt(b.multiplier)) {\n              if (even(b.multiplier)) c = new Symbol(1);else c = new Symbol(-1);\n            } else if (!even(b.multiplier.den)) {\n              c = new Symbol(Math.pow(sign, b.multiplier.num));\n            } else {\n              c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\n            }\n          }\n          result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));\n\n          //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\n          //put the back sign\n          if (c) result = _.multiply(result, c);\n        } else if (bIsInt && !m.equals(1)) {\n          var abs_b = b.abs();\n          // Provide fall back to JS until big number implementation is improved\n          if (abs_b.gt(Settings.MAX_EXP)) {\n            if (b.sign() < 0) return new Symbol(0);\n            return Symbol.infinity();\n          } else {\n            var p = b.multiplier.toDecimal();\n            var sgn = Math.sign(p);\n            p = Math.abs(p);\n            var multiplier = new Frac(1);\n            multiplier.num = m.num.pow(p);\n            multiplier.den = m.den.pow(p);\n            if (sgn < 0) multiplier.invert();\n            //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N\n            result.multiplier = result.multiplier.multiply(multiplier);\n          }\n        } else {\n          var sign = a.sign();\n          if (b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\n            //we know the sign is negative so if the denominator for b == 2 then it's i\n            if (b.multiplier.den.equals(2)) {\n              var i = new Symbol(Settings.IMAGINARY);\n              a.negate(); //remove the sign\n              //if the power is negative then i is negative\n              if (b.lessThan(0)) {\n                i.negate();\n                b.negate(); //remove the sign from the power\n              }\n              //pull the power normally and put back the imaginary\n              result = _.multiply(_.pow(a, b), i);\n            } else {\n              var aa = a.clone();\n              aa.multiplier.negate();\n              result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\n              var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());\n              var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());\n              var r = _.divide(_a, _b);\n              result = _.multiply(result, r);\n            }\n          } else if (Settings.PARSE2NUMBER && b.isImaginary()) {\n            //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))\n\n            var re = b.realpart();\n            var im = b.imagpart();\n            /*\r\n             if(b.group === CP && false) {\r\n             var ex = _.pow(a.clone(), re);\r\n             var xi = _.multiply(_.multiply(ex.clone(), trig.sin(im.clone())), Symbol.imaginary());\r\n             var xa = _.multiply(trig.cos(im), ex);\r\n             result = _.add(xi, xa);\r\n             }\r\n             else {\r\n             */\n            var aa = a.clone().toLinear();\n            var a1 = _.pow(aa.clone(), re);\n            var log_a = log(aa.clone());\n            var b1 = trig.cos(_.multiply(im.clone(), log_a));\n            var c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());\n            result = _.multiply(a1, _.add(b1, c1));\n            result = _.expand(_.parse(result));\n            /*\r\n             }   \r\n             */\n          } else {\n            //b is a symbol\n            var neg_num = a.group === N && sign < 0,\n              num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\n              den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());\n\n            //eliminate imaginary if possible\n            if (a.imaginary) {\n              if (bIsInt) {\n                var s, p, n;\n                s = Math.sign(b);\n                p = abs(b);\n                n = p % 4;\n                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);\n                if (n === 0 || s < 0 && n === 1 || s > 0 && n === 3) {\n                  result.negate();\n                }\n              } else {\n                //assume i = sqrt(-1) -> (-1)^(1/2)\n                var nr = b.multiplier.multiply(Frac.quick(1, 2)),\n                  //the denominator denotes the power so raise to it. It will turn positive it round\n                  tn = Math.pow(-1, nr.num);\n                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);\n              }\n            }\n            //ensure that the sign is carried by the symbol and not the multiplier\n            //this enables us to check down the line if the multiplier can indeed be transferred\n            if (sign < 0 && !neg_num) result.negate();\n\n            //retain the absolute value\n            if (bIsConstant && a.group !== EX) {\n              var evenr = even(b.multiplier.den),\n                evenp = even(a.power),\n                n = result.power.toDecimal(),\n                evennp = even(n);\n              if (evenr && evenp && !evennp) {\n                if (n === 1) result = _.symfunction(ABS, [result]);else if (!isInt(n)) {\n                  var p = result.power;\n                  result = _.symfunction(ABS, [result.toLinear()]).setPower(p);\n                } else {\n                  result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]), result.clone().setPower(new Frac(n - 1)));\n                }\n                //quick workaround. Revisit\n                if (Settings.POSITIVE_MULTIPLIERS && result.fname === ABS) result = result.args[0];\n              }\n            }\n            //multiply out sqrt\n            if (b.equals(2) && result.group === CB) {\n              var _result = new Symbol(1);\n              result.each(function (sym) {\n                _result = _.multiply(_result, _.pow(sym, b));\n              });\n              result = _result;\n            }\n          }\n        }\n        result = testSQRT(result);\n\n        // Don't multiply until we've tested the remaining symbol\n        if (num && den) {\n          result = _.multiply(result, testPow(_.multiply(num, den)));\n        }\n\n        // Reduce square root\n        if (result.fname === SQRT) {\n          var isEX = result.group === EX;\n          var t = isEX ? result.power.multiplier.toString() : result.power.toString();\n          if (even(t)) {\n            var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),\n              m = result.multiplier;\n            result = _.pow(result.args[0], pt);\n            result.multiplier = result.multiplier.multiply(m);\n          }\n        }\n        // Detect Euler's identity\n        else if (!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi') && result.power.contains(Settings.IMAGINARY) && b.group === CB) {\n          var theta = b.stripVar(Settings.IMAGINARY);\n          result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta)));\n        }\n        return result;\n      } else {\n        if (isVector(a) && bIsSymbol) {\n          a = a.map(function (x) {\n            return _.pow(x, b.clone());\n          });\n        } else if (isMatrix(a) && bIsSymbol) {\n          var M = new Matrix();\n          a.eachElement(function (x, i, j) {\n            M.set(i, j, _.pow(x, b.clone()));\n          });\n          a = M;\n        } else if (aIsSymbol && isMatrix(b)) {\n          var M = new Matrix();\n          b.eachElement(function (x, i, j) {\n            M.set(i, j, _.pow(a.clone(), x));\n          });\n          a = M;\n        }\n        return a;\n      }\n    };\n    // Gets called when the parser finds the , operator.\n    // Commas return a Collector object which is roughly an array\n    this.comma = function (a, b) {\n      if (!(a instanceof Collection)) a = Collection.create(a);\n      a.append(b);\n      return a;\n    };\n    // Link to modulus\n    this.mod = function (a, b) {\n      return mod(a, b);\n    };\n    // Used to slice elements from arrays\n    this.slice = function (a, b) {\n      return new Slice(a, b);\n    };\n    // The equality setter\n    this.equals = function (a, b) {\n      // Equality can only be set for group S so complain it's not\n      if (a.group !== S && !a.isLinear()) err('Cannot set equality for ' + a.toString());\n      VARS[a.value] = b.clone();\n      return b;\n    };\n    // Percent\n    this.percent = function (a) {\n      return _.divide(a, new Symbol(100));\n    };\n    // Set variable\n    this.assign = function (a, b) {\n      if (a instanceof Collection && b instanceof Collection) {\n        a.elements.map(function (x, i) {\n          return _.assign(x, b.elements[i]);\n        });\n        return Vector.fromArray(b.elements);\n      }\n      if (a.parent) {\n        // It's referring to the parent instead. The current item can be discarded\n        var e = a.parent;\n        e.elements[e.getter] = b;\n        delete e.getter;\n        return e;\n      }\n      if (a.group !== S) throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\n      VARS[a.value] = b;\n      return b;\n    };\n    this.function_assign = function (a, b) {\n      var f = a.elements.pop();\n      return setFunction(f, a.elements, b);\n    };\n    // Function to quickly convert bools to Symbols\n    var bool2Symbol = function (x) {\n      return new Symbol(x === true ? 1 : 0);\n    };\n    //check for equality\n    this.eq = function (a, b) {\n      return bool2Symbol(a.equals(b));\n    };\n    //checks for greater than\n    this.gt = function (a, b) {\n      return bool2Symbol(a.gt(b));\n    };\n    //checks for greater than equal\n    this.gte = function (a, b) {\n      return bool2Symbol(a.gte(b));\n    };\n    //checks for less than\n    this.lt = function (a, b) {\n      return bool2Symbol(a.lt(b));\n    };\n    //checks for less than equal\n    this.lte = function (a, b) {\n      return bool2Symbol(a.lte(b));\n    };\n    // wraps the factorial\n    this.factorial = function (a) {\n      return this.symfunction(FACTORIAL, [a]);\n    };\n    // wraps the double factorial\n    this.dfactorial = function (a) {\n      return this.symfunction(DOUBLEFACTORIAL, [a]);\n    };\n  }\n  ;\n\n  /* \"STATIC\" */\n  // converts a number to a fraction.\n  var Fraction = {\n    /**\r\n     * Converts a decimal to a fraction\r\n     * @param {number} value\r\n     * @param {object} opts\r\n     * @returns {Array} - an array containing the denominator and the numerator\r\n     */\n    convert: function (value, opts) {\n      var frac;\n      if (value === 0) {\n        frac = [0, 1];\n      } else {\n        if (value < 1e-6 || value > 1e20) {\n          var qc = this.quickConversion(Number(value));\n          if (qc[1] <= 1e20) {\n            var abs = Math.abs(value);\n            var sign = value / abs;\n            frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\n            frac[0] = frac[0] * sign;\n          } else {\n            frac = qc;\n          }\n        } else {\n          frac = this.fullConversion(value);\n        }\n      }\n      return frac;\n    },\n    /**\r\n     * If the fraction is too small or too large this gets called instead of fullConversion method\r\n     * @param {number} dec\r\n     * @returns {Array} - an array containing the denominator and the numerator\r\n     */\n    quickConversion: function (value) {\n      var stripSign = function (s) {\n        // Explicitely convert to a string\n        if (typeof s !== 'string') {\n          s = s.toString();\n        }\n        var sign = '';\n\n        // Remove and store the sign\n        var start = s.charAt(0);\n        if (start === '-') {\n          s = s.substr(1, s.length);\n          sign = '-';\n        } else if (start === '+') {\n          // Just remove the plus sign\n          s = s.substr(1, s.length);\n        }\n        return {\n          sign: sign,\n          value: s\n        };\n      };\n      function convert(value) {\n        // Explicitely convert to a decimal\n        if (Scientific.isScientific(value)) {\n          value = scientificToDecimal(value);\n        }\n\n        // Split the value into the sign and the value\n        var nparts = stripSign(value);\n\n        // Split it at the decimal. We'll refer to it as the coeffient parts\n        var cparts = nparts.value.split('.');\n\n        // Combine the entire number by removing leading zero and adding the decimal part\n        // This would be teh same as moving the decimal point to the end\n        var num;\n        // We're dealing with integers\n        if (cparts.length === 1) {\n          num = cparts[0];\n        } else {\n          num = cparts[0] + cparts[1];\n        }\n        var n = cparts[1] ? cparts[1].length : 0;\n        // Generate the padding for the zeros\n        var den = `1${'0'.repeat(n)}`;\n        if (num !== '0') {\n          num = num.replace(/^0+/, '');\n        }\n        return [nparts.sign + num, den];\n      }\n      return convert(value);\n    },\n    /**\r\n     * Returns a good approximation of a fraction. This method gets called by convert\r\n     * http://mathforum.org/library/drmath/view/61772.html\r\n     * Decimal To Fraction Conversion - A Simpler Version\r\n     * Dr Peterson\r\n     * @param {number} dec\r\n     * @returns {Array} - an array containing the denominator and the numerator\r\n     */\n    fullConversion: function (dec) {\n      var done = false;\n      // you can adjust the epsilon to a larger number if you don't need very high precision\n      var n1 = 0,\n        d1 = 1,\n        n2 = 1,\n        d2 = 0,\n        n = 0,\n        q = dec,\n        epsilon = 1e-16;\n      while (!done) {\n        n++;\n        if (n > 10000) {\n          done = true;\n        }\n        var a = Math.floor(q);\n        var num = n1 + a * n2;\n        var den = d1 + a * d2;\n        var e = q - a;\n        if (e < epsilon) {\n          done = true;\n        }\n        q = 1 / e;\n        n1 = n2;\n        d1 = d2;\n        n2 = num;\n        d2 = den;\n        if (Math.abs(num / den - dec) < epsilon || n > 30) {\n          done = true;\n        }\n      }\n      return [num, den];\n    }\n  };\n  //Depends on Fraction\n\n  //The latex generator\n  var LaTeX = {\n    parser: function () {\n      // create a parser and strip it from everything except the items that you need\n      var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\n      var parser = new Parser();\n      for (var x in parser) {\n        if (keep.indexOf(x) === -1) delete parser[x];\n      }\n      // declare the operators\n      parser.setOperator({\n        precedence: 8,\n        operator: '\\\\',\n        action: 'slash',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function (e) {\n          return e; // bypass the slash\n        }\n      });\n      parser.setOperator({\n        precedence: 8,\n        operator: '\\\\,',\n        action: 'slash_comma',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function (e) {\n          return e; // bypass the slash\n        }\n      });\n      // have braces not map to anything. We want them to be return as-is\n      var brackets = parser.getBrackets();\n      brackets['{'].maps_to = undefined;\n      return parser;\n    }(),\n    space: '~',\n    dot: ' \\\\cdot ',\n    // grab a list of supported functions but remove the excluded ones found in exclFN\n\n    latex: function (symbol, option) {\n      // it might be an array\n      if (symbol.clone) {\n        symbol = symbol.clone(); // leave original as-is\n      }\n      if (symbol instanceof _.classes.Collection) symbol = symbol.elements;\n      if (isArray(symbol)) {\n        var LaTeXArray = [];\n        for (var i = 0; i < symbol.length; i++) {\n          var sym = symbol[i];\n          //This way I can generate LaTeX on an array of strings.\n          if (!isSymbol(sym)) sym = _.parse(sym);\n          LaTeXArray.push(this.latex(sym, option));\n        }\n        return this.brackets(LaTeXArray.join(', '), 'square');\n      } else if (isMatrix(symbol)) {\n        var TeX = '\\\\begin{pmatrix}\\n';\n        for (var i = 0; i < symbol.elements.length; i++) {\n          var rowTeX = [],\n            e = symbol.elements[i];\n          for (var j = 0; j < e.length; j++) {\n            rowTeX.push(this.latex(e[j], option));\n          }\n          TeX += rowTeX.join(' & ');\n          if (i < symbol.elements.length - 1) {\n            TeX += '\\\\\\\\\\n';\n          }\n        }\n        TeX += '\\\\end{pmatrix}';\n        return TeX;\n      } else if (isVector(symbol)) {\n        var TeX = '\\\\left[';\n        for (var i = 0; i < symbol.elements.length; i++) {\n          TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n        }\n        TeX += '\\\\right]';\n        return TeX;\n      } else if (isSet(symbol)) {\n        var TeX = '\\\\{';\n        for (var i = 0; i < symbol.elements.length; i++) {\n          TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n        }\n        TeX += '\\\\}';\n        return TeX;\n      }\n      symbol = symbol.clone();\n      var decimal = option === 'decimal' || option === 'decimals',\n        power = symbol.power,\n        invert = isNegative(power),\n        negative = symbol.multiplier.lessThan(0);\n      if (symbol.group === P && decimal) {\n        return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\n      } else {\n        symbol.multiplier = symbol.multiplier.abs();\n\n        // if the user wants the result in decimal format then return it as such by placing it at the top part\n        var m_array;\n        if (decimal) {\n          var m = String(symbol.multiplier.toDecimal());\n          // if(String(m) === '1' && !decimal) m = '';\n          m_array = [m, ''];\n        } else {\n          m_array = [symbol.multiplier.num, symbol.multiplier.den];\n        }\n        // get the value as a two part array\n        var v_array = this.value(symbol, invert, option, negative),\n          p;\n        // make it all positive since we know whether to push the power to the numerator or denominator already.\n        if (invert) power.negate();\n        // the power is simple since it requires no additional formatting. We can get it to a\n        // string right away. pass in true to neglect unit powers\n        if (decimal) {\n          p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\n          if (String(p) === '1') p = '';\n        }\n        // get the latex representation\n        else if (isSymbol(power)) p = this.latex(power, option);\n        // get it as a fraction\n        else p = this.formatFrac(power, true);\n        // use this array to specify if the power is getting attached to the top or the bottom\n        var p_array = ['', ''],\n          // stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\n          index = invert ? 1 : 0;\n        p_array[index] = p;\n\n        // special case group P and decimal\n        var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);\n        return retval.replace(/\\+\\-/gi, '-');\n      }\n    },\n    // greek mapping\n    greek: {\n      alpha: '\\\\alpha',\n      beta: '\\\\beta',\n      gamma: '\\\\gamma',\n      delta: '\\\\delta',\n      epsilon: '\\\\epsilon',\n      zeta: '\\\\zeta',\n      eta: '\\\\eta',\n      theta: '\\\\theta',\n      iota: '\\\\iota',\n      kappa: '\\\\kappa',\n      lambda: '\\\\lambda',\n      mu: '\\\\mu',\n      nu: '\\\\nu',\n      xi: '\\\\xi',\n      omnikron: '\\\\omnikron',\n      pi: '\\\\pi',\n      rho: '\\\\rho',\n      sigma: '\\\\sigma',\n      tau: '\\\\tau',\n      upsilon: '\\\\upsilon',\n      phi: '\\\\phi',\n      chi: '\\\\chi',\n      psi: '\\\\psi',\n      omega: '\\\\omega',\n      Gamma: '\\\\Gamma',\n      Delta: '\\\\Delta',\n      Epsilon: '\\\\Epsilon',\n      Theta: '\\\\Theta',\n      Lambda: '\\\\Lambda',\n      Xi: '\\\\Xi',\n      Pi: '\\\\Pi',\n      Sigma: '\\\\Sigma',\n      Phi: '\\\\Phi',\n      Psi: '\\\\Psi',\n      Omega: '\\\\Omega'\n    },\n    symbols: {\n      arccos: '\\\\arccos',\n      cos: '\\\\cos',\n      csc: '\\\\csc',\n      exp: '\\\\exp',\n      ker: '\\\\ker',\n      limsup: '\\\\limsup',\n      min: '\\\\min',\n      sinh: '\\\\sinh',\n      arcsin: '\\\\arcsin',\n      cosh: '\\\\cosh',\n      deg: '\\\\deg',\n      gcd: '\\\\gcd',\n      lg: '\\\\lg',\n      ln: '\\\\ln',\n      Pr: '\\\\Pr',\n      sqrt: '\\\\sqrt',\n      sup: '\\\\sup',\n      arctan: '\\\\arctan',\n      cot: '\\\\cot',\n      det: '\\\\det',\n      hom: '\\\\hom',\n      lim: '\\\\lim',\n      log: '\\\\log',\n      LN: '\\\\LN',\n      sec: '\\\\sec',\n      tan: '\\\\tan',\n      arg: '\\\\arg',\n      coth: '\\\\coth',\n      dim: '\\\\dim',\n      inf: '\\\\inf',\n      liminf: '\\\\liminf',\n      max: '\\\\max',\n      sin: '\\\\sin',\n      tanh: '\\\\tanh'\n    },\n    // get the raw value of the symbol as an array\n    value: function (symbol, inverted, option, negative) {\n      var group = symbol.group,\n        previousGroup = symbol.previousGroup,\n        v = ['', ''],\n        index = inverted ? 1 : 0;\n      /*if(group === N) // do nothing since we want to return top & bottom blank; */\n      if (symbol.isInfinity) {\n        v[index] = '\\\\infty';\n      } else if (group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {\n        var value = this.formatSubscripts(symbol.value);\n        if (value.replace) value = value.replace(/(.+)_$/, '$1\\\\_');\n        // split it so we can check for instances of alpha as well as alpha_b\n        var t_varray = String(value).split('_');\n        var greek = this.greek[t_varray[0]];\n        if (greek) {\n          t_varray[0] = greek;\n          value = t_varray.join('_');\n        }\n        var symbol = this.symbols[t_varray[0]];\n        if (symbol) {\n          t_varray[0] = symbol;\n          value = t_varray.join('_');\n        }\n        v[index] = value;\n      } else if (group === FN || previousGroup === FN) {\n        var name,\n          input = [],\n          fname = symbol.fname;\n        // collect the arguments\n        for (var i = 0; i < symbol.args.length; i++) {\n          var arg = symbol.args[i],\n            item;\n          if (typeof arg === 'string') item = arg;else {\n            item = this.latex(arg, option);\n          }\n          input.push(item);\n        }\n        if (fname === SQRT) {\n          v[index] = '\\\\sqrt' + this.braces(input.join(','));\n        } else if (fname === ABS) {\n          v[index] = this.brackets(input.join(','), 'abs');\n        } else if (fname === PARENTHESIS) {\n          v[index] = this.brackets(input.join(','), 'parens');\n        } else if (fname === 'limit') {\n          v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\n        } else if (fname === 'integrate') {\n          v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\n        } else if (fname === 'defint') {\n          v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\n        } else if (fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\n          var arg = symbol.args[0];\n          if (arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\n            input[0] = this.brackets(input[0]);\n          }\n          v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');\n        } else if (fname === 'floor') {\n          v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\n        } else if (fname === 'ceil') {\n          v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\n        }\n        // capture log(a, b)\n        else if (fname === Settings.LOG && input.length > 1) {\n          v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\n        }\n        // capture log(a, b)\n        else if (fname === Settings.LOG10) {\n          v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\n        } else if (fname === 'sum') {\n          var a = input[0],\n            b = input[1],\n            c = input[2],\n            d = input[3];\n          v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n        } else if (fname === 'product') {\n          var a = input[0],\n            b = input[1],\n            c = input[2],\n            d = input[3];\n          v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n        } else if (fname === 'nthroot') {\n          v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\n        } else if (fname === 'mod') {\n          v[index] = input[0] + ' \\\\bmod ' + input[1];\n        } else if (fname === 'realpart') {\n          v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\n        } else if (fname === 'imagpart') {\n          v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\n        } else {\n          var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\n          if (symbol.isConversion) v[index] = name + this.brackets(input.join(''), 'parens');else v[index] = name + this.brackets(input.join(','), 'parens');\n        }\n      } else if (symbol.isComposite()) {\n        var collected = symbol.collectSymbols().sort(group === CP || previousGroup === CP ? function (a, b) {\n            return b.group - a.group;\n          } : function (a, b) {\n            var x = isSymbol(a.power) ? -1 : a.power;\n            var y = isSymbol(b.power) ? -1 : b.power;\n            return y - x;\n          }),\n          symbols = [],\n          l = collected.length;\n        for (var i = 0; i < l; i++) {\n          symbols.push(LaTeX.latex(collected[i], option));\n        }\n        var value = symbols.join('+');\n        v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\n      } else if (group === CB || previousGroup === EX || previousGroup === CB) {\n        if (group === CB) symbol.distributeExponent();\n        // This almost feels a little like cheating but I need to know if I should be wrapping the symbol\n        // in brackets or not. We'll do this by checking the value of the numerator and then comparing it\n        // to whether the symbol value is \"simple\" or not.\n        var denominator = [],\n          numerator = [];\n        // Generate a profile\n        var den_map = [],\n          num_map = [],\n          num_c = 0,\n          den_c = 0;\n        var setBrackets = function (container, map, counter) {\n          if (counter > 1 && map.length > 0) {\n            var l = map.length;\n            for (var i = 0; i < l; i++) {\n              var idx = map[i],\n                item = container[idx];\n              if (!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\n                container[idx] = LaTeX.brackets(item, 'parens');\n              }\n            }\n          }\n          return container;\n        };\n\n        // Generate latex for each of them\n        symbol.each(function (x) {\n          var isDenom = isNegative(x.power),\n            laTex;\n          if (isDenom) {\n            laTex = LaTeX.latex(x.invert(), option);\n            den_c++;\n            if (x.isComposite()) {\n              if (symbol.multiplier.den != 1 && Math.abs(x.power) == 1) laTex = LaTeX.brackets(laTex, 'parens');\n              den_map.push(denominator.length); // make a note of where the composite was found\n            }\n            denominator.push(laTex);\n          } else {\n            laTex = LaTeX.latex(x, option);\n            num_c++;\n            if (x.isComposite()) {\n              if (symbol.multiplier.num != 1 && Math.abs(x.power) == 1) laTex = LaTeX.brackets(laTex, 'parens');\n              num_map.push(numerator.length); // make a note of where the composite was found\n            }\n            numerator.push(laTex);\n          }\n        });\n\n        // Apply brackets\n        setBrackets(numerator, num_map, num_c);\n        v[0] = numerator.join(this.dot); // collapse the numerator into one string\n\n        setBrackets(denominator, den_map, den_c);\n        v[1] = denominator.join(this.dot);\n      }\n      return v;\n    },\n    set: function (m, v, p, combine_power) {\n      var isBracketed = function (v) {\n        return /^\\\\left\\(.+\\\\right\\)$/.test(v);\n      };\n      // format the power if it exists\n      if (p) p = this.formatP(p);\n      // group CB will have to be wrapped since the power applies to both it's numerator and denominator\n      if (combine_power) {\n        // POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something\n        // the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\n        // of a case where this isn't true\n        var tp = p[0];\n        p[0] = ''; // temporarily make p blank\n      }\n\n      // merge v and p. Not that v MUST be first since the order matters\n      v = this.merge(v, p);\n      var mn = m[0],\n        md = m[1],\n        vn = v[0],\n        vd = v[1];\n      // filters\n      // if the top has a variable but the numerator is one drop it\n      if (vn && Number(mn) === 1) mn = '';\n      // if denominator is 1 drop it always\n      if (Number(md) === 1) md = '';\n      // prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\n      var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');\n\n      // prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\n      var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');\n      // format the power if it exists\n      // make it a fraction if both top and bottom exists\n      if (top && bottom) {\n        var frac = this.frac(top, bottom);\n        if (combine_power && tp) frac = this.brackets(frac) + tp;\n        return frac;\n      }\n      // otherwise only the top exists so return that\n      else return top;\n    },\n    merge: function (a, b) {\n      var r = [];\n      for (var i = 0; i < 2; i++) r[i] = a[i] + b[i];\n      return r;\n    },\n    // joins together two strings if both exist\n    join: function (n, d, glue) {\n      if (!n && !d) return '';\n      if (n && !d) return n;\n      if (d && !n) return d;\n      return n + glue + d;\n    },\n    /**\r\n     * Places subscripts in braces for proper formatting\r\n     * @param {String} v\r\n     * @returns {String}\r\n     */\n    formatSubscripts: function (v) {\n      // Split it at the underscore\n      var arr = v.toString().split('_');\n      var name = '';\n\n      // Loop over all entries except the first one\n      while (arr.length > 1) {\n        // Wrap all in braces except for the last one\n        if (arr.length > 0) {\n          name = '_' + this.braces(arr.pop() + name);\n        }\n      }\n      return arr[0] + name;\n    },\n    formatP: function (p_array) {\n      for (var i = 0; i < 2; i++) {\n        var p = p_array[i];\n        if (p) p_array[i] = '^' + this.braces(p);\n      }\n      return p_array;\n    },\n    /**\r\n     * formats the fractions accordingly.\r\n     * @param {Frac} f\r\n     * @param {bool} is_pow\r\n     */\n    formatFrac: function (f, is_pow) {\n      var n = f.num.toString(),\n        d = f.den.toString();\n      // no need to have x^1\n      if (is_pow && n === '1' && d === '1') return '';\n      // no need to have x/1\n      if (d === '1') return n;\n      return this.frac(n, d);\n    },\n    frac: function (n, d) {\n      return '\\\\frac' + this.braces(n) + this.braces(d);\n    },\n    braces: function (e) {\n      return '{' + e + '}';\n    },\n    brackets: function (e, typ) {\n      typ = typ || 'parens';\n      var bracketTypes = {\n        parens: ['(', ')'],\n        square: ['[', ']'],\n        brace: ['{', '}'],\n        abs: ['|', '|'],\n        angle: ['\\\\langle', '\\\\rangle']\n      };\n      var bracket = bracketTypes[typ];\n      return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\n    },\n    /**\r\n     * Removes extreneous tokens\r\n     * @param {Tokens[]} tokens\r\n     * @returns {Tokens[]}\r\n     */\n    filterTokens: function (tokens) {\n      var filtered = [];\n\n      // Copy over the type of the scope\n      if (isArray(tokens)) {\n        filtered.type = tokens.type;\n      }\n\n      // the items that need to be disposed\n      var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n        var next_token = tokens[i + 1];\n        if (token.value === '\\\\' && next_token.value === '\\\\') {\n          filtered.push(token);\n        } else if (isArray(token)) {\n          filtered.push(LaTeX.filterTokens(token));\n        } else if (d.indexOf(token.value) === -1) {\n          filtered.push(token);\n        }\n      }\n      return filtered;\n    },\n    /*\r\n     * Parses tokens from LaTeX string. Does not do any error checking\r\n     * @param {Tokens[]} rpn\r\n     * @returns {String}\r\n     */\n    parse: function (raw_tokens) {\n      var i, l;\n      var retval = '';\n      var tokens = this.filterTokens(raw_tokens);\n      var replace = {\n        'cdot': '',\n        'times': '',\n        'infty': 'Infinity'\n      };\n      // get the next token\n      var next = function (n) {\n        return tokens[typeof n === 'undefined' ? ++i : i += n];\n      };\n      var parse_next = function () {\n        return LaTeX.parse(next());\n      };\n      var get = function (token) {\n        if (token in replace) {\n          return replace[token];\n        }\n        // A quirk with implicit multiplication forces us to check for *\n        if (token === '*' && tokens[i + 1].value === '&') {\n          next(2); // skip this and the &\n          return ',';\n        }\n        if (token === '&') {\n          next();\n          return ','; // Skip the *\n        }\n        // If it's the end of a row, return the row separator\n        if (token === '\\\\') {\n          return '],[';\n        }\n        return token;\n      };\n\n      // start parsing the tokens\n      for (i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n        // fractions\n        if (token.value === 'frac') {\n          // parse and wrap it in brackets\n          var n = parse_next();\n          var d = parse_next();\n          retval += n + '/' + d;\n        } else if (token.value in LaTeX.symbols) {\n          if (token.value === SQRT && tokens[i + 1].type === 'vector' && tokens[i + 2].type === 'Set') {\n            var base = parse_next();\n            var expr = parse_next();\n            retval += expr + '^' + inBrackets('1/' + base);\n          } else {\n            retval += token.value + parse_next();\n          }\n        } else if (token.value === 'int') {\n          var f = parse_next();\n          // skip the comma\n          i++;\n          // get the variable of integration\n          var dx = next().value;\n          dx = get(dx.substring(1, dx.length));\n          retval += 'integrate' + inBrackets(f + ',' + dx);\n        } else if (token.value === 'int_') {\n          var l = parse_next(); // lower\n          i++; // skip the ^\n          var u = next().value; // upper\n          // if it is in brackets\n          if (u === undefined) {\n            i--;\n            var u = parse_next();\n          }\n          var f = parse_next(); // function\n\n          // get the variable of integration\n          var dx = next().value;\n          // skip the comma\n          if (dx === ',') {\n            var dx = next().value;\n          }\n          // if 'd', skip\n          if (dx === 'differentialD') {\n            // skip the *\n            i++;\n            var dx = next().value;\n          }\n          if (dx === 'mathrm') {\n            // skip the mathrm{d}\n            i++;\n            var dx = next().value;\n          }\n          retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\n        } else if (token.value && token.value.startsWith('int_')) {\n          // var l = parse_next(); // lower\n          var l = token.value.replace('int_', '');\n          console.log('uppernow');\n          i++; // skip the ^\n          var u = next().value; // upper\n          // if it is in brackets\n          if (u === undefined) {\n            i--;\n            var u = parse_next();\n          }\n          var f = parse_next(); // function\n\n          // get the variable of integration\n          var dx = next().value;\n          // skip the comma\n          if (dx === ',') {\n            var dx = next().value;\n          }\n          // if 'd', skip\n          if (dx === 'differentialD') {\n            // skip the *\n            i++;\n            var dx = next().value;\n          }\n          if (dx === 'mathrm') {\n            // skip the mathrm{d}\n            i++;\n            var dx = next().value;\n          }\n          retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\n        } else if (token.value === 'mathrm') {\n          var f = tokens[++i][0].value;\n          retval += f + parse_next();\n        }\n        // sum and product\n        else if (token.value === 'sum_' || token.value === 'prod_') {\n          var fn = token.value === 'sum_' ? 'sum' : 'product';\n          var nxt = next();\n          i++; // skip the caret\n          var end = parse_next();\n          var f = parse_next();\n          retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\n        } else if (token.value === 'lim_') {\n          var nxt = next();\n          retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\n        } else if (token.value === 'begin') {\n          var nxt = next();\n          if (Array.isArray(nxt)) {\n            var v = nxt[0].value;\n            if (v === 'matrix') {\n              // Start a matrix\n              retval += 'matrix([';\n            }\n          }\n        } else if (token.value === 'end') {\n          var nxt = next();\n          if (Array.isArray(nxt)) {\n            var v = nxt[0].value;\n            if (v === 'matrix') {\n              // End a matrix\n              retval += '])';\n            }\n          }\n        } else {\n          if (Array.isArray(token)) {\n            retval += get(LaTeX.parse(token));\n          } else {\n            retval += get(token.value.toString());\n          }\n        }\n      }\n      return inBrackets(retval);\n    }\n  };\n  //Vector =======================================================================\n  function Vector(v) {\n    if (isVector(v)) this.elements = v.items.slice(0);else if (isArray(v)) this.elements = v.slice(0);else this.elements = [].slice.call(arguments);\n  }\n  /*\r\n   * Generates a pre-filled array\r\n   * @param {type} n\r\n   * @param {type} val\r\n   * @returns {unresolved}\r\n   */\n  Vector.arrayPrefill = function (n, val) {\n    var a = [];\n    val = val || 0;\n    for (var i = 0; i < n; i++) a[i] = val;\n    return a;\n  };\n  /**\r\n   * Generate a vector from and array\r\n   * @param {type} a\r\n   * @returns {unresolved}\r\n   */\n  Vector.fromArray = function (a) {\n    var v = new Vector();\n    v.elements = a;\n    return v;\n  };\n\n  /**\r\n   * Convert a Set to a Vector\r\n   * @param {Set} set\r\n   * @returns {Vector}\r\n   */\n  Vector.fromSet = function (set) {\n    return Vector.fromArray(set.elements);\n  };\n\n  //Ported from Sylvester.js\n  Vector.prototype = {\n    custom: true,\n    // Returns element i of the vector\n    e: function (i) {\n      return i < 1 || i > this.elements.length ? null : this.elements[i - 1];\n    },\n    set: function (i, val) {\n      if (!isSymbol(val)) val = new Symbol(val);\n      this.elements[i] = val;\n    },\n    // Returns the number of elements the vector has\n    dimensions: function () {\n      return this.elements.length;\n    },\n    // Returns the modulus ('length') of the vector\n    modulus: function () {\n      return block('SAFE', function () {\n        return _.pow(this.dot(this.clone()), new Symbol(0.5));\n      }, undefined, this);\n    },\n    // Returns true iff the vector is equal to the argument\n    eql: function (vector) {\n      var n = this.elements.length;\n      var V = vector.elements || vector;\n      if (n !== V.length) {\n        return false;\n      }\n      do {\n        if (Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > PRECISION) {\n          return false;\n        }\n      } while (--n);\n      return true;\n    },\n    // Returns a clone of the vector\n    clone: function () {\n      var V = new Vector(),\n        l = this.elements.length;\n      for (var i = 0; i < l; i++) {\n        //Rule: all items within the vector must have a clone method.\n        V.elements.push(this.elements[i].clone());\n      }\n      if (this.getter) {\n        V.getter = this.getter.clone();\n      }\n      return V;\n    },\n    // Maps the vector to another vector according to the given function\n    map: function (fn) {\n      var elements = [];\n      this.each(function (x, i) {\n        elements.push(fn(x, i));\n      });\n      return new Vector(elements);\n    },\n    // Calls the iterator for each element of the vector in turn\n    each: function (fn) {\n      var n = this.elements.length,\n        k = n,\n        i;\n      do {\n        i = k - n;\n        fn(this.elements[i], i + 1);\n      } while (--n);\n    },\n    // Returns a new vector created by normalizing the receiver\n    toUnitVector: function () {\n      return block('SAFE', function () {\n        var r = this.modulus();\n        if (r.valueOf() === 0) {\n          return this.clone();\n        }\n        return this.map(function (x) {\n          return _.divide(x, r);\n        });\n      }, undefined, this);\n    },\n    // Returns the angle between the vector and the argument (also a vector)\n    angleFrom: function (vector) {\n      return block('SAFE', function () {\n        var V = vector.elements || vector;\n        var n = this.elements.length;\n        if (n !== V.length) {\n          return null;\n        }\n        var dot = new Symbol(0),\n          mod1 = new Symbol(0),\n          mod2 = new Symbol(0);\n        // Work things out in parallel to save time\n        this.each(function (x, i) {\n          dot = _.add(dot, _.multiply(x, V[i - 1]));\n          mod1 = _.add(mod1, _.multiply(x, x)); // will not conflict in safe block\n          mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1])); // will not conflict in safe block\n        });\n        mod1 = _.pow(mod1, new Symbol(0.5));\n        mod2 = _.pow(mod2, new Symbol(0.5));\n        var product = _.multiply(mod1, mod2);\n        if (product.valueOf() === 0) {\n          return null;\n        }\n        var theta = _.divide(dot, product);\n        var theta_val = theta.valueOf();\n        if (theta_val < -1) {\n          theta = -1;\n        }\n        if (theta_val > 1) {\n          theta = 1;\n        }\n        return new Symbol(Math.acos(theta));\n      }, undefined, this);\n    },\n    // Returns true iff the vector is parallel to the argument\n    isParallelTo: function (vector) {\n      var angle = this.angleFrom(vector).valueOf();\n      return angle === null ? null : angle <= PRECISION;\n    },\n    // Returns true iff the vector is antiparallel to the argument\n    isAntiparallelTo: function (vector) {\n      var angle = this.angleFrom(vector).valueOf();\n      return angle === null ? null : Math.abs(angle - Math.PI) <= PRECISION;\n    },\n    // Returns true iff the vector is perpendicular to the argument\n    isPerpendicularTo: function (vector) {\n      var dot = this.dot(vector);\n      return dot === null ? null : Math.abs(dot) <= PRECISION;\n    },\n    // Returns the result of adding the argument to the vector\n    add: function (vector) {\n      return block('SAFE', function () {\n        var V = vector.elements || vector;\n        if (this.elements.length !== V.length) {\n          return null;\n        }\n        return this.map(function (x, i) {\n          return _.add(x, V[i - 1]);\n        });\n      }, undefined, this);\n    },\n    // Returns the result of subtracting the argument from the vector\n    subtract: function (vector) {\n      return block('SAFE', function () {\n        var V = vector.elements || vector;\n        if (this.elements.length !== V.length) {\n          return null;\n        }\n        return this.map(function (x, i) {\n          return _.subtract(x, V[i - 1]);\n        });\n      }, undefined, this);\n    },\n    // Returns the result of multiplying the elements of the vector by the argument\n    multiply: function (k) {\n      return this.map(function (x) {\n        return x.clone() * k.clone();\n      });\n    },\n    x: function (k) {\n      return this.multiply(k);\n    },\n    // Returns the scalar product of the vector with the argument\n    // Both vectors must have equal dimensionality\n    dot: function (vector) {\n      return block('SAFE', function () {\n        var V = vector.elements || vector;\n        var product = new Symbol(0),\n          n = this.elements.length;\n        if (n !== V.length) {\n          return null;\n        }\n        do {\n          product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));\n        } while (--n);\n        return product;\n      }, undefined, this);\n    },\n    // Returns the vector product of the vector with the argument\n    // Both vectors must have dimensionality 3\n    cross: function (vector) {\n      var B = vector.elements || vector;\n      if (this.elements.length !== 3 || B.length !== 3) {\n        return null;\n      }\n      var A = this.elements;\n      return block('SAFE', function () {\n        return new Vector([_.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])), _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])), _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))]);\n      }, undefined, this);\n    },\n    // Returns the (absolute) largest element of the vector\n    max: function () {\n      var m = 0,\n        n = this.elements.length,\n        k = n,\n        i;\n      do {\n        i = k - n;\n        if (Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {\n          m = this.elements[i];\n        }\n      } while (--n);\n      return m;\n    },\n    magnitude: function () {\n      var magnitude = new Symbol(0);\n      this.each(function (e) {\n        magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));\n      });\n      return _.sqrt(magnitude);\n    },\n    // Returns the index of the first match found\n    indexOf: function (x) {\n      var index = null,\n        n = this.elements.length,\n        k = n,\n        i;\n      do {\n        i = k - n;\n        if (index === null && this.elements[i].valueOf() === x.valueOf()) {\n          index = i + 1;\n        }\n      } while (--n);\n      return index;\n    },\n    text: function (x) {\n      return text(this);\n    },\n    toString: function () {\n      return this.text();\n    },\n    latex: function (option) {\n      var tex = [];\n      for (var i = 0; i < this.elements.length; i++) {\n        tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));\n      }\n      return '[' + tex.join(', ') + ']';\n    }\n  };\n\n  //Matrix =======================================================================\n  function Matrix() {\n    var m = arguments,\n      l = m.length,\n      i,\n      el = [];\n    if (isMatrix(m)) {\n      // if it's a matrix then make a clone\n      for (i = 0; i < l; i++) {\n        el.push(m[i].slice(0));\n      }\n    } else {\n      var row, lw, rl;\n      for (i = 0; i < l; i++) {\n        row = m[i];\n        if (isVector(row)) row = row.elements;\n        if (!isArray(row)) row = [row];\n        rl = row.length;\n        if (lw && lw !== rl) err('Unable to create Matrix. Row dimensions do not match!');\n        el.push(row);\n        lw = rl;\n      }\n    }\n    this.elements = el;\n  }\n  Matrix.identity = function (n) {\n    var m = new Matrix();\n    for (var i = 0; i < n; i++) {\n      m.elements.push([]);\n      for (var j = 0; j < n; j++) {\n        m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));\n      }\n    }\n    return m;\n  };\n  Matrix.fromArray = function (arr) {\n    function F(args) {\n      return Matrix.apply(this, args);\n    }\n    F.prototype = Matrix.prototype;\n    return new F(arr);\n  };\n  Matrix.zeroMatrix = function (rows, cols) {\n    var m = new Matrix();\n    for (var i = 0; i < rows; i++) {\n      m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));\n    }\n    return m;\n  };\n  Matrix.prototype = {\n    // needs be true to let the parser know not to try to cast it to a symbol\n    custom: true,\n    get: function (row, column) {\n      if (!this.elements[row]) return undefined;\n      return this.elements[row][column];\n    },\n    map: function (f, raw_values) {\n      var M = new Matrix();\n      this.each(function (e, i, j) {\n        M.set(i, j, f.call(M, e), raw_values);\n      });\n      return M;\n    },\n    set: function (row, column, value, raw) {\n      if (!this.elements[row]) this.elements[row] = [];\n      this.elements[row][column] = raw ? value : isSymbol(value) ? value : new Symbol(value);\n    },\n    cols: function () {\n      return this.elements[0].length;\n    },\n    rows: function () {\n      return this.elements.length;\n    },\n    row: function (n) {\n      if (!n || n > this.cols()) return [];\n      return this.elements[n - 1];\n    },\n    col: function (n) {\n      var nr = this.rows(),\n        col = [];\n      if (n > this.cols() || !n) return col;\n      for (var i = 0; i < nr; i++) {\n        col.push(this.elements[i][n - 1]);\n      }\n      return col;\n    },\n    eachElement: function (fn) {\n      var nr = this.rows(),\n        nc = this.cols(),\n        i,\n        j;\n      for (i = 0; i < nr; i++) {\n        for (j = 0; j < nc; j++) {\n          fn.call(this, this.elements[i][j], i, j);\n        }\n      }\n    },\n    // ported from Sylvester.js\n    determinant: function () {\n      if (!this.isSquare()) {\n        return null;\n      }\n      var M = this.toRightTriangular();\n      var det = M.elements[0][0],\n        n = M.elements.length - 1,\n        k = n,\n        i;\n      do {\n        i = k - n + 1;\n        det = _.multiply(det, M.elements[i][i]);\n      } while (--n);\n      return det;\n    },\n    isSquare: function () {\n      return this.elements.length === this.elements[0].length;\n    },\n    isSingular: function () {\n      return this.isSquare() && this.determinant() === 0;\n    },\n    augment: function (m) {\n      var r = this.rows(),\n        rr = m.rows();\n      if (r !== rr) err(\"Cannot augment matrix. Rows don't match.\");\n      for (var i = 0; i < r; i++) {\n        this.elements[i] = this.elements[i].concat(m.elements[i]);\n      }\n      return this;\n    },\n    clone: function () {\n      var r = this.rows(),\n        c = this.cols(),\n        m = new Matrix();\n      for (var i = 0; i < r; i++) {\n        m.elements[i] = [];\n        for (var j = 0; j < c; j++) {\n          var symbol = this.elements[i][j];\n          m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;\n        }\n      }\n      return m;\n    },\n    // ported from Sylvester.js\n    invert: function () {\n      if (!this.isSquare()) err('Matrix is not square!');\n      return block('SAFE', function () {\n        var ni = this.elements.length,\n          ki = ni,\n          i,\n          j;\n        var imatrix = Matrix.identity(ni);\n        var M = this.augment(imatrix).toRightTriangular();\n        var np,\n          kp = M.elements[0].length,\n          p,\n          els,\n          divisor;\n        var inverse_elements = [],\n          new_element;\n        // Matrix is non-singular so there will be no zeros on the diagonal\n        // Cycle through rows from last to first\n        do {\n          i = ni - 1;\n          // First, normalise diagonal elements to 1\n          els = [];\n          np = kp;\n          inverse_elements[i] = [];\n          divisor = M.elements[i][i];\n          do {\n            p = kp - np;\n            new_element = _.divide(M.elements[i][p], divisor.clone());\n            els.push(new_element);\n            // Shuffle of the current row of the right hand side into the results\n            // array as it will not be modified by later runs through this loop\n            if (p >= ki) {\n              inverse_elements[i].push(new_element);\n            }\n          } while (--np);\n          M.elements[i] = els;\n          // Then, subtract this row from those above it to\n          // give the identity matrix on the left hand side\n          for (j = 0; j < i; j++) {\n            els = [];\n            np = kp;\n            do {\n              p = kp - np;\n              els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));\n            } while (--np);\n            M.elements[j] = els;\n          }\n        } while (--ni);\n        return Matrix.fromArray(inverse_elements);\n      }, undefined, this);\n    },\n    // ported from Sylvester.js\n    toRightTriangular: function () {\n      return block('SAFE', function () {\n        var M = this.clone(),\n          els,\n          fel,\n          nel,\n          n = this.elements.length,\n          k = n,\n          i,\n          np,\n          kp = this.elements[0].length,\n          p;\n        do {\n          i = k - n;\n          fel = M.elements[i][i];\n          if (fel.valueOf() === 0) {\n            for (var j = i + 1; j < k; j++) {\n              nel = M.elements[j][i];\n              if (nel && nel.valueOf() !== 0) {\n                els = [];\n                np = kp;\n                do {\n                  p = kp - np;\n                  els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));\n                } while (--np);\n                M.elements[i] = els;\n                break;\n              }\n            }\n          }\n          var fel = M.elements[i][i];\n          if (fel.valueOf() !== 0) {\n            for (j = i + 1; j < k; j++) {\n              var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());\n              els = [];\n              np = kp;\n              do {\n                p = kp - np;\n                // Elements with column numbers up to an including the number\n                // of the row that we're subtracting can safely be set straight to\n                // zero, since that's the point of this routine and it avoids having\n                // to loop over and correct rounding errors later\n                els.push(p <= i ? new Symbol(0) : _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));\n              } while (--np);\n              M.elements[j] = els;\n            }\n          }\n        } while (--n);\n        return M;\n      }, undefined, this);\n    },\n    transpose: function () {\n      var rows = this.elements.length,\n        cols = this.elements[0].length;\n      var M = new Matrix(),\n        ni = cols,\n        i,\n        nj,\n        j;\n      do {\n        i = cols - ni;\n        M.elements[i] = [];\n        nj = rows;\n        do {\n          j = rows - nj;\n          M.elements[i][j] = this.elements[j][i].clone();\n        } while (--nj);\n      } while (--ni);\n      return M;\n    },\n    // Returns true if the matrix can multiply the argument from the left\n    canMultiplyFromLeft: function (matrix) {\n      var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;\n      // this.columns should equal matrix.rows\n      return this.elements[0].length === l;\n    },\n    sameSize: function (matrix) {\n      return this.rows() === matrix.rows() && this.cols() === matrix.cols();\n    },\n    multiply: function (matrix) {\n      return block('SAFE', function () {\n        var M = matrix.elements || matrix;\n        if (!this.canMultiplyFromLeft(M)) {\n          if (this.sameSize(matrix)) {\n            var MM = new Matrix();\n            var rows = this.rows();\n            for (var i = 0; i < rows; i++) {\n              var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));\n              MM.elements[i] = e.elements;\n            }\n            return MM;\n          }\n          return null;\n        }\n        var ni = this.elements.length,\n          ki = ni,\n          i,\n          nj,\n          kj = M[0].length,\n          j;\n        var cols = this.elements[0].length,\n          elements = [],\n          sum,\n          nc,\n          c;\n        do {\n          i = ki - ni;\n          elements[i] = [];\n          nj = kj;\n          do {\n            j = kj - nj;\n            sum = new Symbol(0);\n            nc = cols;\n            do {\n              c = cols - nc;\n              sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));\n            } while (--nc);\n            elements[i][j] = sum;\n          } while (--nj);\n        } while (--ni);\n        return Matrix.fromArray(elements);\n      }, undefined, this);\n    },\n    add: function (matrix, callback) {\n      var M = new Matrix();\n      if (this.sameSize(matrix)) {\n        this.eachElement(function (e, i, j) {\n          var result = _.add(e.clone(), matrix.elements[i][j].clone());\n          if (callback) {\n            result = callback.call(M, result, e, matrix.elements[i][j]);\n          }\n          M.set(i, j, result);\n        });\n      }\n      return M;\n    },\n    subtract: function (matrix, callback) {\n      var M = new Matrix();\n      if (this.sameSize(matrix)) {\n        this.eachElement(function (e, i, j) {\n          var result = _.subtract(e.clone(), matrix.elements[i][j].clone());\n          if (callback) {\n            result = callback.call(M, result, e, matrix.elements[i][j]);\n          }\n          M.set(i, j, result);\n        });\n      }\n      return M;\n    },\n    negate: function () {\n      this.each(function (e) {\n        return e.negate();\n      });\n      return this;\n    },\n    toVector: function () {\n      if (this.rows() === 1 || this.cols() === 1) {\n        var v = new Vector();\n        v.elements = this.elements;\n        return v;\n      }\n      return this;\n    },\n    toString: function (newline, to_decimal) {\n      var l = this.rows(),\n        s = [];\n      newline = newline === undefined ? '\\n' : newline;\n      for (var i = 0; i < l; i++) {\n        s.push('[' + this.elements[i].map(function (x) {\n          var v = to_decimal ? x.multiplier.toDecimal() : x.toString();\n          return x !== undefined ? v : '';\n        }).join(',') + ']');\n      }\n      return 'matrix' + inBrackets(s.join(','));\n    },\n    text: function () {\n      return 'matrix(' + this.elements.toString('') + ')';\n    },\n    latex: function (option) {\n      var cols = this.cols(),\n        elements = this.elements;\n      return format('\\\\begin{vmatrix}{0}\\\\end{vmatrix}', function () {\n        var tex = [];\n        for (var row in elements) {\n          var row_tex = [];\n          for (var i = 0; i < cols; i++) {\n            row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));\n          }\n          tex.push(row_tex.join(' & '));\n        }\n        return tex.join(' \\\\cr ');\n      });\n    }\n  };\n  // aliases\n  Matrix.prototype.each = Matrix.prototype.eachElement;\n  function Set(set) {\n    this.elements = [];\n    // if the first object isn't an array, convert it to one.\n    if (!isVector(set)) set = Vector.fromArray(arguments);\n    if (set) {\n      var elements = set.elements;\n      for (var i = 0, l = elements.length; i < l; i++) {\n        this.add(elements[i]);\n      }\n    }\n  }\n  Set.fromArray = function (arr) {\n    function F(args) {\n      return Set.apply(this, args);\n    }\n    F.prototype = Set.prototype;\n    return new F(arr);\n  };\n  Set.prototype = {\n    add: function (x) {\n      if (!this.contains(x)) this.elements.push(x.clone());\n    },\n    contains: function (x) {\n      for (var i = 0; i < this.elements.length; i++) {\n        var e = this.elements[i];\n        if (x.equals(e)) return true;\n      }\n      return false;\n    },\n    each: function (f) {\n      var elements = this.elements;\n      var set = new Set();\n      for (var i = 0, l = elements.length; i < l; i++) {\n        var e = elements[i];\n        f.call(this, e, set, i);\n      }\n      return set;\n    },\n    clone: function () {\n      var set = new Set();\n      this.each(function (e) {\n        set.add(e.clone());\n      });\n      return set;\n    },\n    union: function (set) {\n      var _union = this.clone();\n      set.each(function (e) {\n        _union.add(e);\n      });\n      return _union;\n    },\n    difference: function (set) {\n      var diff = this.clone();\n      set.each(function (e) {\n        diff.remove(e);\n      });\n      return diff;\n    },\n    remove: function (element) {\n      for (var i = 0, l = this.elements.length; i < l; i++) {\n        var e = this.elements[i];\n        if (e.equals(element)) {\n          remove(this.elements, i);\n          return true;\n        }\n      }\n      return false;\n    },\n    intersection: function (set) {\n      var _intersection = new Set();\n      var A = this;\n      set.each(function (e) {\n        if (A.contains(e)) {\n          _intersection.add(e);\n        }\n        ;\n      });\n      return _intersection;\n    },\n    intersects: function (set) {\n      return this.intersection(set).elements.length > 0;\n    },\n    is_subset: function (set) {\n      var elements = set.elements;\n      for (var i = 0, l = elements.length; i < l; i++) {\n        if (!this.contains(elements[i])) {\n          return false;\n        }\n      }\n      return true;\n    },\n    toString: function () {\n      return '{' + this.elements.join(',') + '}';\n    }\n  };\n\n  //build ========================================================================\n  var Build = {\n    dependencies: {\n      _rename: {\n        'Math2.factorial': 'factorial'\n      },\n      factorial: {\n        'Math2.gamma': Math2.gamma\n      },\n      gamma_incomplete: {\n        'Math2.factorial': Math2.factorial\n      },\n      Li: {\n        'Math2.Ei': Math2.Ei,\n        'Math2.bigLog': Math2.bigLog,\n        'Frac': Frac\n      },\n      Ci: {\n        'Math2.factorial': Math2.factorial\n      },\n      Ei: {\n        'Math2.factorial': Math2.factorial\n      },\n      Si: {\n        'Math2.factorial': Math2.factorial\n      },\n      Shi: {\n        'Math2.factorial': Math2.factorial\n      },\n      Chi: {\n        'isInt': isInt,\n        'nround': nround,\n        'Math2.num_integrate': Math2.num_integrate\n      },\n      factor: {\n        'Math2.ifactor': Math2.ifactor,\n        'Symbol': Symbol\n      },\n      num_integrate: {\n        'Math2.simpson': Math2.simpson,\n        'nround': nround\n      },\n      fib: {\n        'even': even\n      }\n    },\n    /* Some functions need to be made numeric safe. Build checks if there's a\r\n     * reformat option and calls that instead when compiling the function string.\r\n     */\n    reformat: {\n      // this simply extends the build function\n      diff: function (symbol, deps) {\n        var v = symbol.args[1].toString();\n        var f = 'var f = ' + Build.build(symbol.args[0].toString(), [v]) + ';';\n        deps[1] += 'var diff = ' + Math2.diff.toString() + ';';\n        deps[1] += f;\n        return ['diff(f)(' + v + ')', deps];\n      }\n    },\n    getProperName: function (f) {\n      var map = {\n        continued_fraction: 'continuedFraction'\n      };\n      return map[f] || f;\n    },\n    // assumes that dependences are at max 2 levels\n    compileDependencies: function (f, deps) {\n      // grab the predefined dependiences\n      var dependencies = Build.dependencies[f];\n\n      // the dependency string\n      var dep_string = deps && deps[1] ? deps[1] : '';\n\n      // the functions to be replaced\n      var replacements = deps && deps[0] ? deps[0] : {};\n\n      // loop through them and add them to the list\n      for (var x in dependencies) {\n        if (typeof dependencies[x] === 'object') continue; // skip object\n        var components = x.split('.'); //Math.f becomes f\n        // if the function isn't part of an object then reference the function itself\n        dep_string += 'var ' + (components.length > 1 ? components[1] : components[0]) + '=' + dependencies[x] + ';';\n        replacements[x] = components.pop();\n      }\n      return [replacements, dep_string];\n    },\n    getArgsDeps: function (symbol, dependencies) {\n      var args = symbol.args;\n      for (var i = 0; i < args.length; i++) {\n        symbol.args[i].each(function (x) {\n          if (x.group === FN) dependencies = Build.compileDependencies(x.fname, dependencies);\n        });\n      }\n      return dependencies;\n    },\n    build: function (symbol, arg_array) {\n      symbol = block('PARSE2NUMBER', function () {\n        return _.parse(symbol);\n      }, true);\n      var args = variables(symbol);\n      var supplements = [];\n      var dependencies = [];\n      var ftext = function (symbol, xports) {\n        //Fix for #545 - Parentheses confuse build.\n        if (symbol.fname === '') {\n          symbol = Symbol.unwrapPARENS(symbol);\n        }\n        xports = xports || [];\n        var c = [],\n          group = symbol.group,\n          prefix = '';\n        var ftext_complex = function (group) {\n            var d = group === CB ? '*' : '+',\n              cc = [];\n            for (var x in symbol.symbols) {\n              var sym = symbol.symbols[x],\n                ft = ftext(sym, xports)[0];\n              // wrap it in brackets if it's group PL or CP\n              if (sym.isComposite()) ft = inBrackets(ft);\n              cc.push(ft);\n            }\n            var retval = cc.join(d);\n            retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;\n            return retval;\n          },\n          ftext_function = function (bn) {\n            var retval;\n            if (bn in Math) retval = 'Math.' + bn;else {\n              bn = Build.getProperName(bn);\n              if (supplements.indexOf(bn) === -1) {\n                // make sure you're not adding the function twice\n                //Math2 functions aren't part of the standard javascript\n                //Math library and must be exported.\n                xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');\n                supplements.push(bn);\n              }\n              retval = bn;\n            }\n            retval = retval + inBrackets(symbol.args.map(function (x) {\n              return ftext(x, xports)[0];\n            }).join(','));\n            return retval;\n          };\n\n        // the multiplier\n        if (group === N) c.push(symbol.multiplier.toDecimal());else if (symbol.multiplier.equals(-1)) prefix = '-';else if (!symbol.multiplier.equals(1)) c.push(symbol.multiplier.toDecimal());\n        // the value\n        var value;\n        if (group === S || group === P) value = symbol.value;else if (group === FN) {\n          dependencies = Build.compileDependencies(symbol.fname, dependencies);\n          dependencies = Build.getArgsDeps(symbol, dependencies);\n          if (Build.reformat[symbol.fname]) {\n            var components = Build.reformat[symbol.fname](symbol, dependencies);\n            dependencies = components[1];\n            value = components[0];\n          } else {\n            value = ftext_function(symbol.fname);\n          }\n        } else if (group === EX) {\n          var pg = symbol.previousGroup;\n          if (pg === N || pg === S) value = symbol.value;else if (pg === FN) {\n            value = ftext_function(symbol.fname);\n            dependencies = Build.compileDependencies(symbol.fname, dependencies);\n            dependencies = Build.getArgsDeps(symbol, dependencies);\n          } else value = ftext_complex(symbol.previousGroup);\n        } else {\n          value = ftext_complex(symbol.group);\n        }\n        if (symbol.group !== N && !symbol.power.equals(1)) {\n          var pow = ftext(_.parse(symbol.power));\n          xports.push(pow[1]);\n          value = 'Math.pow' + inBrackets(value + ',' + pow[0]);\n        }\n        if (value) c.push(prefix + value);\n        return [c.join('*'), xports.join('').replace(/\\n+\\s+/g, ' ')];\n      };\n      if (arg_array) {\n        // Fix for issue #546\n        // Disable argument checking since it's a bit presumptuous.\n        // Consider f(x) = 5; If I explicitely pass in an argument array contain x \n        // this check will fail and complain since the function doesn't contain x.\n        /*\r\n         for (var i = 0; i < args.length; i++) {\r\n         var arg = args[i];\r\n         if (arg_array.indexOf(arg) === -1)\r\n         err(arg + ' not found in argument array');\r\n         }\r\n         */\n        args = arg_array;\n      }\n      var f_array = ftext(symbol);\n\n      // make all the substitutions;\n      for (var x in dependencies[0]) {\n        var alias = dependencies[0][x];\n        f_array[1] = f_array[1].replace(x, alias);\n        dependencies[1] = dependencies[1].replace(x, alias);\n      }\n      var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');\n      return f;\n    }\n  };\n\n  //finalize =====================================================================\n  /* FINALIZE */\n  (function () {\n    reserveNames(_.CONSTANTS);\n    reserveNames(_.functions);\n    _.initConstants();\n    //bug fix for error but needs to be revisited\n    if (!_.error) _.error = err;\n\n    //Store the log and log10 functions\n    Settings.LOG_FNS = {\n      log: _.functions['log'],\n      log10: _.functions['log10']\n    };\n  })();\n\n  /* END FINALIZE */\n\n  //Core =========================================================================\n  var Utils = {\n    allSame: allSame,\n    allNumeric: allNumeric,\n    arguments2Array: arguments2Array,\n    arrayAddSlices: arrayAddSlices,\n    arrayClone: arrayClone,\n    arrayMax: arrayMax,\n    arrayMin: arrayMin,\n    arrayEqual: arrayEqual,\n    arrayUnique: arrayUnique,\n    arrayGetVariables: arrayGetVariables,\n    arraySum: arraySum,\n    block: block,\n    build: Build.build,\n    clearU: clearU,\n    comboSort: comboSort,\n    compare: compare,\n    convertToVector: convertToVector,\n    customError: customError,\n    customType: customType,\n    decompose_fn: decompose_fn,\n    each: each,\n    evaluate: evaluate,\n    even: even,\n    evenFraction: evenFraction,\n    fillHoles: fillHoles,\n    firstObject: firstObject,\n    format: format,\n    generatePrimes: generatePrimes,\n    getCoeffs: getCoeffs,\n    getU: getU,\n    importFunctions: importFunctions,\n    inBrackets: inBrackets,\n    isArray: isArray,\n    isExpression: isExpression,\n    isFraction: isFraction,\n    isInt: isInt,\n    isMatrix: isMatrix,\n    isNegative: isNegative,\n    isNumericSymbol: isNumericSymbol,\n    isPrime: isPrime,\n    isReserved: isReserved,\n    isSymbol: isSymbol,\n    isVariableSymbol: isVariableSymbol,\n    isVector: isVector,\n    keys: keys,\n    knownVariable: knownVariable,\n    nroots: nroots,\n    remove: remove,\n    reserveNames: reserveNames,\n    range: range,\n    round: nround,\n    sameSign: sameSign,\n    scientificToDecimal: scientificToDecimal,\n    separate: separate,\n    stringReplace: stringReplace,\n    text: text,\n    validateName: validateName,\n    variables: variables,\n    warn: warn\n  };\n\n  //This contains all the parts of nerdamer and enables nerdamer's internal functions\n  //to be used.\n  var C = {\n    groups: Groups,\n    Symbol: Symbol,\n    Expression: Expression,\n    Frac: Frac,\n    Vector: Vector,\n    Matrix: Matrix,\n    Parser: Parser,\n    Scientific: Scientific,\n    Fraction: Fraction,\n    Math2: Math2,\n    LaTeX: LaTeX,\n    Utils: Utils,\n    PARSER: _,\n    PARENTHESIS: PARENTHESIS,\n    Settings: Settings,\n    err: err,\n    bigInt: bigInt,\n    bigDec: bigDec,\n    exceptions: exceptions\n  };\n\n  //libExports ===================================================================\n  /**\r\n   *\r\n   * @param {String} expression the expression to be evaluated\r\n   * @param {Object} subs the object containing the variable values\r\n   * @param {Integer} location a specific location in the equation list to\r\n   * insert the evaluated expression\r\n   * @param {String} option additional options\r\n   * @returns {Expression}\r\n   */\n  var libExports = function (expression, subs, option, location) {\n    // Initiate the numer flag\n    var numer = false;\n\n    // Is the user declaring a function?\n    var fndec = /^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\n    if (fndec) return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);\n\n    // var variable, fn, args;\n    // Convert any expression passed in to a string\n    if (expression instanceof Expression) expression = expression.toString();\n\n    // Convert it to an array for simplicity\n    if (!isArray(option)) {\n      option = typeof option === 'undefined' ? [] : [option];\n    }\n    option.forEach(function (o) {\n      // Turn on the numer flag if requested\n      if (o === 'numer') {\n        numer = true;\n        return;\n      }\n      // Wrap it in a function if requested. This only holds true for\n      // functions that take a single argument which is the expression\n      var f = _.functions[option];\n      // If there's a function and it takes a single argument, then wrap\n      // the expression in it\n      if (f && f[1] === 1) {\n        expression = `${o}(${expression})`;\n      }\n    });\n    var e = block('PARSE2NUMBER', function () {\n      return _.parse(expression, subs);\n    }, numer || Settings.PARSE2NUMBER);\n    if (location) {\n      EXPRESSIONS[location - 1] = e;\n    } else {\n      EXPRESSIONS.push(e);\n    }\n    return new Expression(e);\n  };\n  /**\r\n   * Converts expression into rpn form\r\n   * @param {String} expression\r\n   * @returns {Token[]}\r\n   */\n  libExports.rpn = function (expression) {\n    return _.tokenize(_.toRPN(expression));\n  };\n\n  /**\r\n   * Generates LaTeX from expression string\r\n   * @param {String} e\r\n   * @param {object} opt\r\n   * @returns {String}\r\n   */\n  libExports.convertToLaTeX = function (e, opt) {\n    return _.toTeX(e, opt);\n  };\n\n  /**\r\n   * Converts latex to text - Very very very basic at the moment\r\n   * @param {String} e\r\n   * @returns {String}\r\n   */\n  libExports.convertFromLaTeX = function (e) {\n    var txt = LaTeX.parse(_.tokenize(e));\n    return new Expression(_.parse(txt));\n  };\n\n  /**\r\n   * Get the version of nerdamer or a loaded add-on\r\n   * @param {String} add_on - The add-on being checked\r\n   * @returns {String} returns the version of nerdamer\r\n   */\n  libExports.version = function (add_on) {\n    if (add_on) {\n      try {\n        return C[add_on].version;\n      } catch (e) {\n        return \"No module named \" + add_on + \" found!\";\n      }\n    }\n    return version;\n  };\n\n  /**\r\n   * Get nerdamer generated warnings\r\n   * @returns {String[]}\r\n   */\n  libExports.getWarnings = function () {\n    return WARNINGS;\n  };\n\n  /**\r\n   *\r\n   * @param {String} constant The name of the constant to be set\r\n   * @param {mixed} value The value of the constant\r\n   * @returns {Object} Returns the nerdamer object\r\n   */\n  libExports.setConstant = function (constant, value) {\n    validateName(constant);\n    if (!isReserved(constant)) {\n      //fix for issue #127\n      if (value === 'delete' || value === '') {\n        delete _.CONSTANTS[constant];\n      } else {\n        if (isNaN(value)) throw new NerdamerTypeError('Constant must be a number!');\n        _.CONSTANTS[constant] = value;\n      }\n    }\n    return this;\n  };\n\n  /**\r\n   * Returns the value of a previously set constant\r\n   * @param {type} constant\r\n   * @returns {String}\r\n   */\n  libExports.getConstant = function (constant) {\n    return String(_.constant[constant]);\n  };\n\n  /**\r\n   *\r\n   * @param {String} name The name of the function\r\n   * @param {Array} params_array A list containing the parameter name of the functions\r\n   * @param {String} body The body of the function\r\n   * @returns {Boolean} returns true if succeeded and falls on fail\r\n   * @example nerdamer.setFunction('f',['x'], 'x^2+2');\r\n   */\n  libExports.setFunction = setFunction;\n\n  /**\r\n   *\r\n   * @returns {C} Exports the nerdamer core functions and objects\r\n   */\n  libExports.getCore = function () {\n    return C;\n  };\n  libExports.getExpression = libExports.getEquation = Expression.getExpression;\n\n  /**\r\n   *\r\n   * @param {Boolean} asArray The returned names are returned as an array if this is set to true;\r\n   * @returns {String|Array}\r\n   */\n  libExports.reserved = function (asArray) {\n    if (asArray) {\n      return RESERVED;\n    }\n    return RESERVED.join(', ');\n  };\n\n  /**\r\n   *\r\n   * @param {Integer} equation_number the number of the equation to clear.\r\n   * If 'all' is supplied then all equations are cleared\r\n   * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed\r\n   * @returns {Object} Returns the nerdamer object\r\n   */\n  libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {\n    if (equation_number === 'all') {\n      EXPRESSIONS = [];\n    } else if (equation_number === 'last') {\n      EXPRESSIONS.pop();\n    } else if (equation_number === 'first') {\n      EXPRESSIONS.shift();\n    } else {\n      var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\n      keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);\n    }\n    return this;\n  };\n\n  /**\r\n   * Alias for nerdamer.clear('all')\r\n   */\n  libExports.flush = function () {\n    this.clear('all');\n    return this;\n  };\n\n  /**\r\n   *\r\n   * @param {Boolean} asObject\r\n   * @param {Boolean} asLaTeX\r\n   * @param {String|String[]} option\r\n   * @returns {Array}\r\n   */\n  libExports.expressions = function (asObject, asLaTeX, option) {\n    var result = asObject ? {} : [];\n    for (var i = 0; i < EXPRESSIONS.length; i++) {\n      var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);\n      asObject ? result[i + 1] = eq : result.push(eq);\n    }\n    return result;\n  };\n\n  //the method for registering modules\n  libExports.register = function (obj) {\n    var core = this.getCore();\n    if (isArray(obj)) {\n      for (var i = 0; i < obj.length; i++) {\n        if (obj) this.register(obj[i]);\n      }\n    } else if (obj && Settings.exclude.indexOf(obj.name) === -1) {\n      //make sure all the dependencies are available\n      if (obj.dependencies) {\n        for (var i = 0; i < obj.dependencies.length; i++) if (!core[obj.dependencies[i]]) throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));\n      }\n      //if no parent object is provided then the function does not have an address and cannot be called directly\n      var parent_obj = obj.parent,\n        fn = obj.build.call(core); //call constructor to get function\n      if (parent_obj) {\n        if (!core[parent_obj]) core[obj.parent] = {};\n        var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];\n        //attach the function to the core\n        ref_obj[obj.name] = fn;\n      }\n      if (obj.visible) _.functions[obj.name] = [fn, obj.numargs]; //make the function available\n    }\n  };\n\n  /**\r\n   * @param {String} name variable name\r\n   * @returns {boolean} validates if the profided string is a valid variable name\r\n   */\n  libExports.validateName = validateName;\n\n  /**\r\n   * @param {String} varname variable name\r\n   * @returns {boolean} validates if the profided string is a valid variable name\r\n   */\n  libExports.validVarName = function (varname) {\n    try {\n      validateName(varname);\n      return RESERVED.indexOf(varname) === -1;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  /**\r\n   *\r\n   * @returns {Array} Array of functions currently supported by nerdamer\r\n   */\n  libExports.supported = function () {\n    return keys(_.functions);\n  };\n\n  /**\r\n   *\r\n   * @returns {Number} The number equations/expressions currently loaded\r\n   */\n  libExports.numEquations = libExports.numExpressions = function () {\n    return EXPRESSIONS.length;\n  };\n  /* END EXPORTS */\n\n  /**\r\n   *\r\n   * @param {String} v variable to be set\r\n   * @param {String} val value of variable. This can be a variable expression or number\r\n   * @returns {Object} Returns the nerdamer object\r\n   */\n  libExports.setVar = function (v, val) {\n    validateName(v);\n    //check if it's not already a constant\n    if (v in _.CONSTANTS) err('Cannot set value for constant ' + v);\n    if (val === 'delete' || val === '') delete VARS[v];else {\n      VARS[v] = isSymbol(val) ? val : _.parse(val);\n    }\n    return this;\n  };\n\n  /**\r\n   * Returns the value of a set variable\r\n   * @param {type} v\r\n   * @returns {varies}\r\n   */\n  libExports.getVar = function (v) {\n    return VARS[v];\n  };\n  /**\r\n   * Clear the variables from the VARS object\r\n   * @returns {Object} Returns the nerdamer object\r\n   */\n  libExports.clearVars = function () {\n    VARS = {};\n    return this;\n  };\n\n  /**\r\n   *\r\n   * @param {Function} loader\r\n   * @returns {nerdamer}\r\n   */\n  libExports.load = function (loader) {\n    loader.call(this);\n    return this;\n  };\n\n  /**\r\n   * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\r\n   * @param {String|String[]} option\r\n   * @returns {Object} Returns an object with the variables\r\n   */\n  libExports.getVars = function (output, option) {\n    output = output || 'text';\n    var variables = {};\n    if (output === 'object') variables = VARS;else {\n      for (var v in VARS) {\n        if (output === 'latex') {\n          variables[v] = VARS[v].latex(option);\n        } else if (output === 'text') {\n          variables[v] = VARS[v].text(option);\n        }\n      }\n    }\n    return variables;\n  };\n\n  /**\r\n   * Set the value of a setting\r\n   * @param {String} setting The setting to be changed\r\n   * @param {boolean} value\r\n   */\n  libExports.set = function (setting, value) {\n    //current options:\n    //PARSE2NUMBER, suppress_errors\n    if (typeof setting === 'object') for (var x in setting) {\n      libExports.set(x, setting[x]);\n    }\n    var disallowed = ['SAFE'];\n    if (disallowed.indexOf(setting) !== -1) err('Cannot modify setting: ' + setting);\n    if (setting === 'PRECISION') {\n      bigDec.set({\n        precision: value\n      });\n      Settings.PRECISION = value;\n\n      // Avoid that nerdamer puts out garbage after 21 decimal place\n      if (value > 21) {\n        this.set('USE_BIG', true);\n      }\n    } else if (setting === 'USE_LN' && value === true) {\n      //set log as LN\n      Settings.LOG = 'LN';\n      //set log10 as log\n      Settings.LOG10 = 'log';\n      //point the functions in the right direction\n      _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10\n      //the log10 function must be explicitly set\n      _.functions['log'][0] = function (x) {\n        if (x.isConstant()) return new Symbol(Math.log10(x));\n        return _.symfunction(Settings.LOG10, [x]);\n      };\n      _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log\n\n      //remove log10\n      delete _.functions['log10'];\n    } else Settings[setting] = value;\n  };\n\n  /**\r\n   * Get the value of a setting\r\n   * @param {type} setting\r\n   * @returns {undefined}\r\n   */\n  libExports.get = function (setting) {\n    return Settings[setting];\n  };\n\n  /**\r\n   * This functions makes internal functions available externally\r\n   * @param {bool} override Override the functions when calling updateAPI if it exists\r\n   */\n  libExports.updateAPI = function (override) {\n    //Map internal functions to external ones\n    var linker = function (fname) {\n      return function () {\n        var args = [].slice.call(arguments);\n        for (var i = 0; i < args.length; i++) args[i] = _.parse(args[i]);\n        return new Expression(block('PARSE2NUMBER', function () {\n          return _.callfunction(fname, args);\n        }));\n      };\n    };\n    //perform the mapping\n    for (var x in _.functions) if (!(x in libExports) || override) libExports[x] = linker(x);\n  };\n  libExports.replaceFunction = function (name, fn, num_args) {\n    var existing = _.functions[name];\n    var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\n    _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];\n  };\n  libExports.setOperator = function (operator, shift) {\n    _.setOperator(operator, shift);\n  };\n  libExports.getOperator = function (operator) {\n    return _.getOperator(operator);\n  };\n  libExports.aliasOperator = function (operator, withOperator) {\n    _.aliasOperator(operator, withOperator);\n  };\n  libExports.tree = function (expression) {\n    return _.tree(_.toRPN(_.tokenize(expression)));\n  };\n  libExports.htmlTree = function (expression, indent) {\n    var tree = this.tree(expression);\n    return '<div class=\"tree\">\\n' + '    <ul>\\n' + '        <li>\\n' + tree.toHTML(3, indent) + '\\n' + '        </li>\\n' + '    </ul>\\n' + '</div>';\n  };\n  libExports.addPeeker = function (name, f) {\n    if (_.peekers[name]) _.peekers[name].push(f);\n  };\n  libExports.removePeeker = function (name, f) {\n    remove(_.peekers[name], f);\n  };\n  libExports.parse = function (e) {\n    return String(e).split(';').map(function (x) {\n      return _.parse(x);\n    });\n  };\n  libExports.updateAPI();\n  return libExports; //Done\n  //imports ======================================================================\n}({\n  //https://github.com/peterolson/BigInteger.js\n  bigInt: function () {\n    var bigInt = function (undefined) {\n      \"use strict\";\n\n      var BASE = 1e7,\n        LOG_BASE = 7,\n        MAX_INT = 9007199254740992,\n        MAX_INT_ARR = smallToArray(MAX_INT),\n        LOG_MAX_INT = Math.log(MAX_INT);\n      function Integer(v, radix) {\n        if (typeof v === \"undefined\") return Integer[0];\n        if (typeof radix !== \"undefined\") return +radix === 10 ? parseValue(v) : parseBase(v, radix);\n        return parseValue(v);\n      }\n      function BigInteger(value, sign) {\n        this.value = value;\n        this.sign = sign;\n        this.isSmall = false;\n      }\n      BigInteger.prototype = Object.create(Integer.prototype);\n      function SmallInteger(value) {\n        this.value = value;\n        this.sign = value < 0;\n        this.isSmall = true;\n      }\n      SmallInteger.prototype = Object.create(Integer.prototype);\n      function isPrecise(n) {\n        return -MAX_INT < n && n < MAX_INT;\n      }\n      function smallToArray(n) {\n        if (n < 1e7) return [n];\n        if (n < 1e14) return [n % 1e7, Math.floor(n / 1e7)];\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\n      }\n      function arrayToSmall(arr) {\n        trim(arr);\n        var length = arr.length;\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\n          switch (length) {\n            case 0:\n              return 0;\n            case 1:\n              return arr[0];\n            case 2:\n              return arr[0] + arr[1] * BASE;\n            default:\n              return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\n          }\n        }\n        return arr;\n      }\n      function trim(v) {\n        var i = v.length;\n        while (v[--i] === 0);\n        v.length = i + 1;\n      }\n      function createArray(length) {\n        var x = new Array(length);\n        var i = -1;\n        while (++i < length) {\n          x[i] = 0;\n        }\n        return x;\n      }\n      function truncate(n) {\n        if (n > 0) return Math.floor(n);\n        return Math.ceil(n);\n      }\n      function add(a, b) {\n        var l_a = a.length,\n          l_b = b.length,\n          r = new Array(l_a),\n          carry = 0,\n          base = BASE,\n          sum,\n          i;\n        for (i = 0; i < l_b; i++) {\n          sum = a[i] + b[i] + carry;\n          carry = sum >= base ? 1 : 0;\n          r[i] = sum - carry * base;\n        }\n        while (i < l_a) {\n          sum = a[i] + carry;\n          carry = sum === base ? 1 : 0;\n          r[i++] = sum - carry * base;\n        }\n        if (carry > 0) r.push(carry);\n        return r;\n      }\n      function addAny(a, b) {\n        if (a.length >= b.length) return add(a, b);\n        return add(b, a);\n      }\n      function addSmall(a, carry) {\n        var l = a.length,\n          r = new Array(l),\n          base = BASE,\n          sum,\n          i;\n        for (i = 0; i < l; i++) {\n          sum = a[i] - base + carry;\n          carry = Math.floor(sum / base);\n          r[i] = sum - carry * base;\n          carry += 1;\n        }\n        while (carry > 0) {\n          r[i++] = carry % base;\n          carry = Math.floor(carry / base);\n        }\n        return r;\n      }\n      BigInteger.prototype.add = function (v) {\n        var n = parseValue(v);\n        if (this.sign !== n.sign) {\n          return this.subtract(n.negate());\n        }\n        var a = this.value,\n          b = n.value;\n        if (n.isSmall) {\n          return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\n        }\n        return new BigInteger(addAny(a, b), this.sign);\n      };\n      BigInteger.prototype.plus = BigInteger.prototype.add;\n      SmallInteger.prototype.add = function (v) {\n        var n = parseValue(v);\n        var a = this.value;\n        if (a < 0 !== n.sign) {\n          return this.subtract(n.negate());\n        }\n        var b = n.value;\n        if (n.isSmall) {\n          if (isPrecise(a + b)) return new SmallInteger(a + b);\n          b = smallToArray(Math.abs(b));\n        }\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\n      };\n      SmallInteger.prototype.plus = SmallInteger.prototype.add;\n      function subtract(a, b) {\n        var a_l = a.length,\n          b_l = b.length,\n          r = new Array(a_l),\n          borrow = 0,\n          base = BASE,\n          i,\n          difference;\n        for (i = 0; i < b_l; i++) {\n          difference = a[i] - borrow - b[i];\n          if (difference < 0) {\n            difference += base;\n            borrow = 1;\n          } else borrow = 0;\n          r[i] = difference;\n        }\n        for (i = b_l; i < a_l; i++) {\n          difference = a[i] - borrow;\n          if (difference < 0) difference += base;else {\n            r[i++] = difference;\n            break;\n          }\n          r[i] = difference;\n        }\n        for (; i < a_l; i++) {\n          r[i] = a[i];\n        }\n        trim(r);\n        return r;\n      }\n      function subtractAny(a, b, sign) {\n        var value;\n        if (compareAbs(a, b) >= 0) {\n          value = subtract(a, b);\n        } else {\n          value = subtract(b, a);\n          sign = !sign;\n        }\n        value = arrayToSmall(value);\n        if (typeof value === \"number\") {\n          if (sign) value = -value;\n          return new SmallInteger(value);\n        }\n        return new BigInteger(value, sign);\n      }\n      function subtractSmall(a, b, sign) {\n        var l = a.length,\n          r = new Array(l),\n          carry = -b,\n          base = BASE,\n          i,\n          difference;\n        for (i = 0; i < l; i++) {\n          difference = a[i] + carry;\n          carry = Math.floor(difference / base);\n          difference %= base;\n          r[i] = difference < 0 ? difference + base : difference;\n        }\n        r = arrayToSmall(r);\n        if (typeof r === \"number\") {\n          if (sign) r = -r;\n          return new SmallInteger(r);\n        }\n        return new BigInteger(r, sign);\n      }\n      BigInteger.prototype.subtract = function (v) {\n        var n = parseValue(v);\n        if (this.sign !== n.sign) {\n          return this.add(n.negate());\n        }\n        var a = this.value,\n          b = n.value;\n        if (n.isSmall) return subtractSmall(a, Math.abs(b), this.sign);\n        return subtractAny(a, b, this.sign);\n      };\n      BigInteger.prototype.minus = BigInteger.prototype.subtract;\n      SmallInteger.prototype.subtract = function (v) {\n        var n = parseValue(v);\n        var a = this.value;\n        if (a < 0 !== n.sign) {\n          return this.add(n.negate());\n        }\n        var b = n.value;\n        if (n.isSmall) {\n          return new SmallInteger(a - b);\n        }\n        return subtractSmall(b, Math.abs(a), a >= 0);\n      };\n      SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\n      BigInteger.prototype.negate = function () {\n        return new BigInteger(this.value, !this.sign);\n      };\n      SmallInteger.prototype.negate = function () {\n        var sign = this.sign;\n        var small = new SmallInteger(-this.value);\n        small.sign = !sign;\n        return small;\n      };\n      BigInteger.prototype.abs = function () {\n        return new BigInteger(this.value, false);\n      };\n      SmallInteger.prototype.abs = function () {\n        return new SmallInteger(Math.abs(this.value));\n      };\n      function multiplyLong(a, b) {\n        var a_l = a.length,\n          b_l = b.length,\n          l = a_l + b_l,\n          r = createArray(l),\n          base = BASE,\n          product,\n          carry,\n          i,\n          a_i,\n          b_j;\n        for (i = 0; i < a_l; ++i) {\n          a_i = a[i];\n          for (var j = 0; j < b_l; ++j) {\n            b_j = b[j];\n            product = a_i * b_j + r[i + j];\n            carry = Math.floor(product / base);\n            r[i + j] = product - carry * base;\n            r[i + j + 1] += carry;\n          }\n        }\n        trim(r);\n        return r;\n      }\n      function multiplySmall(a, b) {\n        var l = a.length,\n          r = new Array(l),\n          base = BASE,\n          carry = 0,\n          product,\n          i;\n        for (i = 0; i < l; i++) {\n          product = a[i] * b + carry;\n          carry = Math.floor(product / base);\n          r[i] = product - carry * base;\n        }\n        while (carry > 0) {\n          r[i++] = carry % base;\n          carry = Math.floor(carry / base);\n        }\n        return r;\n      }\n      function shiftLeft(x, n) {\n        var r = [];\n        while (n-- > 0) r.push(0);\n        return r.concat(x);\n      }\n      function multiplyKaratsuba(x, y) {\n        var n = Math.max(x.length, y.length);\n        if (n <= 30) return multiplyLong(x, y);\n        n = Math.ceil(n / 2);\n        var b = x.slice(n),\n          a = x.slice(0, n),\n          d = y.slice(n),\n          c = y.slice(0, n);\n        var ac = multiplyKaratsuba(a, c),\n          bd = multiplyKaratsuba(b, d),\n          abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\n        trim(product);\n        return product;\n      }\n      function useKaratsuba(l1, l2) {\n        return -.012 * l1 - .012 * l2 + 15e-6 * l1 * l2 > 0;\n      }\n      BigInteger.prototype.multiply = function (v) {\n        var n = parseValue(v),\n          a = this.value,\n          b = n.value,\n          sign = this.sign !== n.sign,\n          abs;\n        if (n.isSmall) {\n          if (b === 0) return Integer[0];\n          if (b === 1) return this;\n          if (b === -1) return this.negate();\n          abs = Math.abs(b);\n          if (abs < BASE) {\n            return new BigInteger(multiplySmall(a, abs), sign);\n          }\n          b = smallToArray(abs);\n        }\n        if (useKaratsuba(a.length, b.length)) return new BigInteger(multiplyKaratsuba(a, b), sign);\n        return new BigInteger(multiplyLong(a, b), sign);\n      };\n      BigInteger.prototype.times = BigInteger.prototype.multiply;\n      function multiplySmallAndArray(a, b, sign) {\n        if (a < BASE) {\n          return new BigInteger(multiplySmall(b, a), sign);\n        }\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\n      }\n      SmallInteger.prototype._multiplyBySmall = function (a) {\n        if (isPrecise(a.value * this.value)) {\n          return new SmallInteger(a.value * this.value);\n        }\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\n      };\n      BigInteger.prototype._multiplyBySmall = function (a) {\n        if (a.value === 0) return Integer[0];\n        if (a.value === 1) return this;\n        if (a.value === -1) return this.negate();\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\n      };\n      SmallInteger.prototype.multiply = function (v) {\n        return parseValue(v)._multiplyBySmall(this);\n      };\n      SmallInteger.prototype.times = SmallInteger.prototype.multiply;\n      function square(a) {\n        var l = a.length,\n          r = createArray(l + l),\n          base = BASE,\n          product,\n          carry,\n          i,\n          a_i,\n          a_j;\n        for (i = 0; i < l; i++) {\n          a_i = a[i];\n          carry = 0 - a_i * a_i;\n          for (var j = i; j < l; j++) {\n            a_j = a[j];\n            product = 2 * (a_i * a_j) + r[i + j] + carry;\n            carry = Math.floor(product / base);\n            r[i + j] = product - carry * base;\n          }\n          r[i + l] = carry;\n        }\n        trim(r);\n        return r;\n      }\n      BigInteger.prototype.square = function () {\n        return new BigInteger(square(this.value), false);\n      };\n      SmallInteger.prototype.square = function () {\n        var value = this.value * this.value;\n        if (isPrecise(value)) return new SmallInteger(value);\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\n      };\n      function divMod1(a, b) {\n        var a_l = a.length,\n          b_l = b.length,\n          base = BASE,\n          result = createArray(b.length),\n          divisorMostSignificantDigit = b[b_l - 1],\n          lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\n          remainder = multiplySmall(a, lambda),\n          divisor = multiplySmall(b, lambda),\n          quotientDigit,\n          shift,\n          carry,\n          borrow,\n          i,\n          l,\n          q;\n        if (remainder.length <= a_l) remainder.push(0);\n        divisor.push(0);\n        divisorMostSignificantDigit = divisor[b_l - 1];\n        for (shift = a_l - b_l; shift >= 0; shift--) {\n          quotientDigit = base - 1;\n          if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\n            quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\n          }\n          carry = 0;\n          borrow = 0;\n          l = divisor.length;\n          for (i = 0; i < l; i++) {\n            carry += quotientDigit * divisor[i];\n            q = Math.floor(carry / base);\n            borrow += remainder[shift + i] - (carry - q * base);\n            carry = q;\n            if (borrow < 0) {\n              remainder[shift + i] = borrow + base;\n              borrow = -1;\n            } else {\n              remainder[shift + i] = borrow;\n              borrow = 0;\n            }\n          }\n          while (borrow !== 0) {\n            quotientDigit -= 1;\n            carry = 0;\n            for (i = 0; i < l; i++) {\n              carry += remainder[shift + i] - base + divisor[i];\n              if (carry < 0) {\n                remainder[shift + i] = carry + base;\n                carry = 0;\n              } else {\n                remainder[shift + i] = carry;\n                carry = 1;\n              }\n            }\n            borrow += carry;\n          }\n          result[shift] = quotientDigit;\n        }\n        remainder = divModSmall(remainder, lambda)[0];\n        return [arrayToSmall(result), arrayToSmall(remainder)];\n      }\n      function divMod2(a, b) {\n        var a_l = a.length,\n          b_l = b.length,\n          result = [],\n          part = [],\n          base = BASE,\n          guess,\n          xlen,\n          highx,\n          highy,\n          check;\n        while (a_l) {\n          part.unshift(a[--a_l]);\n          trim(part);\n          if (compareAbs(part, b) < 0) {\n            result.push(0);\n            continue;\n          }\n          xlen = part.length;\n          highx = part[xlen - 1] * base + part[xlen - 2];\n          highy = b[b_l - 1] * base + b[b_l - 2];\n          if (xlen > b_l) {\n            highx = (highx + 1) * base;\n          }\n          guess = Math.ceil(highx / highy);\n          do {\n            check = multiplySmall(b, guess);\n            if (compareAbs(check, part) <= 0) break;\n            guess--;\n          } while (guess);\n          result.push(guess);\n          part = subtract(part, check);\n        }\n        result.reverse();\n        return [arrayToSmall(result), arrayToSmall(part)];\n      }\n      function divModSmall(value, lambda) {\n        var length = value.length,\n          quotient = createArray(length),\n          base = BASE,\n          i,\n          q,\n          remainder,\n          divisor;\n        remainder = 0;\n        for (i = length - 1; i >= 0; --i) {\n          divisor = remainder * base + value[i];\n          q = truncate(divisor / lambda);\n          remainder = divisor - q * lambda;\n          quotient[i] = q | 0;\n        }\n        return [quotient, remainder | 0];\n      }\n      function divModAny(self, v) {\n        var value,\n          n = parseValue(v);\n        var a = self.value,\n          b = n.value;\n        var quotient;\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\n        if (self.isSmall) {\n          if (n.isSmall) {\n            return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\n          }\n          return [Integer[0], self];\n        }\n        if (n.isSmall) {\n          if (b === 1) return [self, Integer[0]];\n          if (b == -1) return [self.negate(), Integer[0]];\n          var abs = Math.abs(b);\n          if (abs < BASE) {\n            value = divModSmall(a, abs);\n            quotient = arrayToSmall(value[0]);\n            var remainder = value[1];\n            if (self.sign) remainder = -remainder;\n            if (typeof quotient === \"number\") {\n              if (self.sign !== n.sign) quotient = -quotient;\n              return [new SmallInteger(quotient), new SmallInteger(remainder)];\n            }\n            return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\n          }\n          b = smallToArray(abs);\n        }\n        var comparison = compareAbs(a, b);\n        if (comparison === -1) return [Integer[0], self];\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\n        if (a.length + b.length <= 200) value = divMod1(a, b);else value = divMod2(a, b);\n        quotient = value[0];\n        var qSign = self.sign !== n.sign,\n          mod = value[1],\n          mSign = self.sign;\n        if (typeof quotient === \"number\") {\n          if (qSign) quotient = -quotient;\n          quotient = new SmallInteger(quotient);\n        } else quotient = new BigInteger(quotient, qSign);\n        if (typeof mod === \"number\") {\n          if (mSign) mod = -mod;\n          mod = new SmallInteger(mod);\n        } else mod = new BigInteger(mod, mSign);\n        return [quotient, mod];\n      }\n      BigInteger.prototype.divmod = function (v) {\n        var result = divModAny(this, v);\n        return {\n          quotient: result[0],\n          remainder: result[1]\n        };\n      };\n      SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\n      BigInteger.prototype.divide = function (v) {\n        return divModAny(this, v)[0];\n      };\n      SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\n      BigInteger.prototype.mod = function (v) {\n        return divModAny(this, v)[1];\n      };\n      SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\n      BigInteger.prototype.pow = function (v) {\n        var n = parseValue(v),\n          a = this.value,\n          b = n.value,\n          value,\n          x,\n          y;\n        if (b === 0) return Integer[1];\n        if (a === 0) return Integer[0];\n        if (a === 1) return Integer[1];\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\n        if (n.sign) {\n          return Integer[0];\n        }\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\n        if (this.isSmall) {\n          if (isPrecise(value = Math.pow(a, b))) return new SmallInteger(truncate(value));\n        }\n        x = this;\n        y = Integer[1];\n        while (true) {\n          if (b & 1 === 1) {\n            y = y.times(x);\n            --b;\n          }\n          if (b === 0) break;\n          b /= 2;\n          x = x.square();\n        }\n        return y;\n      };\n      SmallInteger.prototype.pow = BigInteger.prototype.pow;\n      BigInteger.prototype.modPow = function (exp, mod) {\n        exp = parseValue(exp);\n        mod = parseValue(mod);\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\n        var r = Integer[1],\n          base = this.mod(mod);\n        while (exp.isPositive()) {\n          if (base.isZero()) return Integer[0];\n          if (exp.isOdd()) r = r.multiply(base).mod(mod);\n          exp = exp.divide(2);\n          base = base.square().mod(mod);\n        }\n        return r;\n      };\n      SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\n      function compareAbs(a, b) {\n        if (a.length !== b.length) {\n          return a.length > b.length ? 1 : -1;\n        }\n        for (var i = a.length - 1; i >= 0; i--) {\n          if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\n        }\n        return 0;\n      }\n      BigInteger.prototype.compareAbs = function (v) {\n        var n = parseValue(v),\n          a = this.value,\n          b = n.value;\n        if (n.isSmall) return 1;\n        return compareAbs(a, b);\n      };\n      SmallInteger.prototype.compareAbs = function (v) {\n        var n = parseValue(v),\n          a = Math.abs(this.value),\n          b = n.value;\n        if (n.isSmall) {\n          b = Math.abs(b);\n          return a === b ? 0 : a > b ? 1 : -1;\n        }\n        return -1;\n      };\n      BigInteger.prototype.compare = function (v) {\n        if (v === Infinity) {\n          return -1;\n        }\n        if (v === -Infinity) {\n          return 1;\n        }\n        var n = parseValue(v),\n          a = this.value,\n          b = n.value;\n        if (this.sign !== n.sign) {\n          return n.sign ? 1 : -1;\n        }\n        if (n.isSmall) {\n          return this.sign ? -1 : 1;\n        }\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\n      };\n      BigInteger.prototype.compareTo = BigInteger.prototype.compare;\n      SmallInteger.prototype.compare = function (v) {\n        if (v === Infinity) {\n          return -1;\n        }\n        if (v === -Infinity) {\n          return 1;\n        }\n        var n = parseValue(v),\n          a = this.value,\n          b = n.value;\n        if (n.isSmall) {\n          return a == b ? 0 : a > b ? 1 : -1;\n        }\n        if (a < 0 !== n.sign) {\n          return a < 0 ? -1 : 1;\n        }\n        return a < 0 ? 1 : -1;\n      };\n      SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\n      BigInteger.prototype.equals = function (v) {\n        return this.compare(v) === 0;\n      };\n      SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\n      BigInteger.prototype.notEquals = function (v) {\n        return this.compare(v) !== 0;\n      };\n      SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\n      BigInteger.prototype.greater = function (v) {\n        return this.compare(v) > 0;\n      };\n      SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\n      BigInteger.prototype.lesser = function (v) {\n        return this.compare(v) < 0;\n      };\n      SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\n      BigInteger.prototype.greaterOrEquals = function (v) {\n        return this.compare(v) >= 0;\n      };\n      SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\n      BigInteger.prototype.lesserOrEquals = function (v) {\n        return this.compare(v) <= 0;\n      };\n      SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\n      BigInteger.prototype.isEven = function () {\n        return (this.value[0] & 1) === 0;\n      };\n      SmallInteger.prototype.isEven = function () {\n        return (this.value & 1) === 0;\n      };\n      BigInteger.prototype.isOdd = function () {\n        return (this.value[0] & 1) === 1;\n      };\n      SmallInteger.prototype.isOdd = function () {\n        return (this.value & 1) === 1;\n      };\n      BigInteger.prototype.isPositive = function () {\n        return !this.sign;\n      };\n      SmallInteger.prototype.isPositive = function () {\n        return this.value > 0;\n      };\n      BigInteger.prototype.isNegative = function () {\n        return this.sign;\n      };\n      SmallInteger.prototype.isNegative = function () {\n        return this.value < 0;\n      };\n      BigInteger.prototype.isUnit = function () {\n        return false;\n      };\n      SmallInteger.prototype.isUnit = function () {\n        return Math.abs(this.value) === 1;\n      };\n      BigInteger.prototype.isZero = function () {\n        return false;\n      };\n      SmallInteger.prototype.isZero = function () {\n        return this.value === 0;\n      };\n      BigInteger.prototype.isDivisibleBy = function (v) {\n        var n = parseValue(v);\n        var value = n.value;\n        if (value === 0) return false;\n        if (value === 1) return true;\n        if (value === 2) return this.isEven();\n        return this.mod(n).equals(Integer[0]);\n      };\n      SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\n      function isBasicPrime(v) {\n        var n = v.abs();\n        if (n.isUnit()) return false;\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\n        if (n.lesser(49)) return true;\n      }\n      function millerRabinTest(n, a) {\n        var nPrev = n.prev(),\n          b = nPrev,\n          r = 0,\n          d,\n          t,\n          i,\n          x;\n        while (b.isEven()) b = b.divide(2), r++;\n        next: for (i = 0; i < a.length; i++) {\n          if (n.lesser(a[i])) continue;\n          x = bigInt(a[i]).modPow(b, n);\n          if (x.equals(Integer[1]) || x.equals(nPrev)) continue;\n          for (d = r - 1; d != 0; d--) {\n            x = x.square().mod(n);\n            if (x.isUnit()) return false;\n            if (x.equals(nPrev)) continue next;\n          }\n          return false;\n        }\n        return true;\n      }\n      BigInteger.prototype.isPrime = function (strict) {\n        var isPrime = isBasicPrime(this);\n        if (isPrime !== undefined) return isPrime;\n        var n = this.abs();\n        var bits = n.bitLength();\n        if (bits <= 64) return millerRabinTest(n, [2, 325, 9375, 28178, 450775, 9780504, 1795265022]);\n        var logN = Math.log(2) * bits;\n        var t = Math.ceil(strict === true ? 2 * Math.pow(logN, 2) : logN);\n        for (var a = [], i = 0; i < t; i++) {\n          a.push(bigInt(i + 2));\n        }\n        return millerRabinTest(n, a);\n      };\n      SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\n      BigInteger.prototype.isProbablePrime = function (iterations) {\n        var isPrime = isBasicPrime(this);\n        if (isPrime !== undefined) return isPrime;\n        var n = this.abs();\n        var t = iterations === undefined ? 5 : iterations;\n        for (var a = [], i = 0; i < t; i++) {\n          a.push(bigInt.randBetween(2, n.minus(2)));\n        }\n        return millerRabinTest(n, a);\n      };\n      SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\n      BigInteger.prototype.modInv = function (n) {\n        var t = bigInt.zero,\n          newT = bigInt.one,\n          r = parseValue(n),\n          newR = this.abs(),\n          q,\n          lastT,\n          lastR;\n        while (!newR.equals(bigInt.zero)) {\n          q = r.divide(newR);\n          lastT = t;\n          lastR = r;\n          t = newT;\n          r = newR;\n          newT = lastT.subtract(q.multiply(newT));\n          newR = lastR.subtract(q.multiply(newR));\n        }\n        if (!r.equals(1)) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\n        if (t.compare(0) === -1) {\n          t = t.add(n);\n        }\n        if (this.isNegative()) {\n          return t.negate();\n        }\n        return t;\n      };\n      SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\n      BigInteger.prototype.next = function () {\n        var value = this.value;\n        if (this.sign) {\n          return subtractSmall(value, 1, this.sign);\n        }\n        return new BigInteger(addSmall(value, 1), this.sign);\n      };\n      SmallInteger.prototype.next = function () {\n        var value = this.value;\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\n        return new BigInteger(MAX_INT_ARR, false);\n      };\n      BigInteger.prototype.prev = function () {\n        var value = this.value;\n        if (this.sign) {\n          return new BigInteger(addSmall(value, 1), true);\n        }\n        return subtractSmall(value, 1, this.sign);\n      };\n      SmallInteger.prototype.prev = function () {\n        var value = this.value;\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\n        return new BigInteger(MAX_INT_ARR, true);\n      };\n      var powersOfTwo = [1];\n      while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\n      var powers2Length = powersOfTwo.length,\n        highestPower2 = powersOfTwo[powers2Length - 1];\n      function shift_isSmall(n) {\n        return (typeof n === \"number\" || typeof n === \"string\") && +Math.abs(n) <= BASE || n instanceof BigInteger && n.value.length <= 1;\n      }\n      BigInteger.prototype.shiftLeft = function (n) {\n        if (!shift_isSmall(n)) {\n          throw new Error(String(n) + \" is too large for shifting.\");\n        }\n        n = +n;\n        if (n < 0) return this.shiftRight(-n);\n        var result = this;\n        if (result.isZero()) return result;\n        while (n >= powers2Length) {\n          result = result.multiply(highestPower2);\n          n -= powers2Length - 1;\n        }\n        return result.multiply(powersOfTwo[n]);\n      };\n      SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\n      BigInteger.prototype.shiftRight = function (n) {\n        var remQuo;\n        if (!shift_isSmall(n)) {\n          throw new Error(String(n) + \" is too large for shifting.\");\n        }\n        n = +n;\n        if (n < 0) return this.shiftLeft(-n);\n        var result = this;\n        while (n >= powers2Length) {\n          if (result.isZero() || result.isNegative() && result.isUnit()) return result;\n          remQuo = divModAny(result, highestPower2);\n          result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n          n -= powers2Length - 1;\n        }\n        remQuo = divModAny(result, powersOfTwo[n]);\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n      };\n      SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\n      function bitwise(x, y, fn) {\n        y = parseValue(y);\n        var xSign = x.isNegative(),\n          ySign = y.isNegative();\n        var xRem = xSign ? x.not() : x,\n          yRem = ySign ? y.not() : y;\n        var xDigit = 0,\n          yDigit = 0;\n        var xDivMod = null,\n          yDivMod = null;\n        var result = [];\n        while (!xRem.isZero() || !yRem.isZero()) {\n          xDivMod = divModAny(xRem, highestPower2);\n          xDigit = xDivMod[1].toJSNumber();\n          if (xSign) {\n            xDigit = highestPower2 - 1 - xDigit;\n          }\n          yDivMod = divModAny(yRem, highestPower2);\n          yDigit = yDivMod[1].toJSNumber();\n          if (ySign) {\n            yDigit = highestPower2 - 1 - yDigit;\n          }\n          xRem = xDivMod[0];\n          yRem = yDivMod[0];\n          result.push(fn(xDigit, yDigit));\n        }\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\n        for (var i = result.length - 1; i >= 0; i -= 1) {\n          sum = sum.multiply(highestPower2).add(bigInt(result[i]));\n        }\n        return sum;\n      }\n      BigInteger.prototype.not = function () {\n        return this.negate().prev();\n      };\n      SmallInteger.prototype.not = BigInteger.prototype.not;\n      BigInteger.prototype.and = function (n) {\n        return bitwise(this, n, function (a, b) {\n          return a & b;\n        });\n      };\n      SmallInteger.prototype.and = BigInteger.prototype.and;\n      BigInteger.prototype.or = function (n) {\n        return bitwise(this, n, function (a, b) {\n          return a | b;\n        });\n      };\n      SmallInteger.prototype.or = BigInteger.prototype.or;\n      BigInteger.prototype.xor = function (n) {\n        return bitwise(this, n, function (a, b) {\n          return a ^ b;\n        });\n      };\n      SmallInteger.prototype.xor = BigInteger.prototype.xor;\n      var LOBMASK_I = 1 << 30,\n        LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\n      function roughLOB(n) {\n        var v = n.value,\n          x = typeof v === \"number\" ? v | LOBMASK_I : v[0] + v[1] * BASE | LOBMASK_BI;\n        return x & -x;\n      }\n      function integerLogarithm(value, base) {\n        if (base.compareTo(value) <= 0) {\n          var tmp = integerLogarithm(value, base.square(base));\n          var p = tmp.p;\n          var e = tmp.e;\n          var t = p.multiply(base);\n          return t.compareTo(value) <= 0 ? {\n            p: t,\n            e: e * 2 + 1\n          } : {\n            p: p,\n            e: e * 2\n          };\n        }\n        return {\n          p: bigInt(1),\n          e: 0\n        };\n      }\n      BigInteger.prototype.bitLength = function () {\n        var n = this;\n        if (n.compareTo(bigInt(0)) < 0) {\n          n = n.negate().subtract(bigInt(1));\n        }\n        if (n.compareTo(bigInt(0)) === 0) {\n          return bigInt(0);\n        }\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\n      };\n      SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\n      function max(a, b) {\n        a = parseValue(a);\n        b = parseValue(b);\n        return a.greater(b) ? a : b;\n      }\n      function min(a, b) {\n        a = parseValue(a);\n        b = parseValue(b);\n        return a.lesser(b) ? a : b;\n      }\n      function gcd(a, b) {\n        a = parseValue(a).abs();\n        b = parseValue(b).abs();\n        if (a.equals(b)) return a;\n        if (a.isZero()) return b;\n        if (b.isZero()) return a;\n        var c = Integer[1],\n          d,\n          t;\n        while (a.isEven() && b.isEven()) {\n          d = Math.min(roughLOB(a), roughLOB(b));\n          a = a.divide(d);\n          b = b.divide(d);\n          c = c.multiply(d);\n        }\n        while (a.isEven()) {\n          a = a.divide(roughLOB(a));\n        }\n        do {\n          while (b.isEven()) {\n            b = b.divide(roughLOB(b));\n          }\n          if (a.greater(b)) {\n            t = b;\n            b = a;\n            a = t;\n          }\n          b = b.subtract(a);\n        } while (!b.isZero());\n        return c.isUnit() ? a : a.multiply(c);\n      }\n      function lcm(a, b) {\n        a = parseValue(a).abs();\n        b = parseValue(b).abs();\n        return a.divide(gcd(a, b)).multiply(b);\n      }\n      function randBetween(a, b) {\n        a = parseValue(a);\n        b = parseValue(b);\n        var low = min(a, b),\n          high = max(a, b);\n        var range = high.subtract(low).add(1);\n        if (range.isSmall) return low.add(Math.floor(Math.random() * range));\n        var length = range.value.length - 1;\n        var result = [],\n          restricted = true;\n        for (var i = length; i >= 0; i--) {\n          var top = restricted ? range.value[i] : BASE;\n          var digit = truncate(Math.random() * top);\n          result.unshift(digit);\n          if (digit < top) restricted = false;\n        }\n        result = arrayToSmall(result);\n        return low.add(typeof result === \"number\" ? new SmallInteger(result) : new BigInteger(result, false));\n      }\n      var parseBase = function (text, base) {\n        var length = text.length;\n        var i;\n        var absBase = Math.abs(base);\n        for (var i = 0; i < length; i++) {\n          var c = text[i].toLowerCase();\n          if (c === \"-\") continue;\n          if (/[a-z0-9]/.test(c)) {\n            if (/[0-9]/.test(c) && +c >= absBase) {\n              if (c === \"1\" && absBase === 1) continue;\n              throw new Error(c + \" is not a valid digit in base \" + base + \".\");\n            } else if (c.charCodeAt(0) - 87 >= absBase) {\n              throw new Error(c + \" is not a valid digit in base \" + base + \".\");\n            }\n          }\n        }\n        if (2 <= base && base <= 36) {\n          if (length <= LOG_MAX_INT / Math.log(base)) {\n            var result = parseInt(text, base);\n            if (isNaN(result)) {\n              throw new Error(c + \" is not a valid digit in base \" + base + \".\");\n            }\n            return new SmallInteger(parseInt(text, base));\n          }\n        }\n        base = parseValue(base);\n        var digits = [];\n        var isNegative = text[0] === \"-\";\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\n          var c = text[i].toLowerCase(),\n            charCode = c.charCodeAt(0);\n          if (48 <= charCode && charCode <= 57) digits.push(parseValue(c));else if (97 <= charCode && charCode <= 122) digits.push(parseValue(c.charCodeAt(0) - 87));else if (c === \"<\") {\n            var start = i;\n            do {\n              i++;\n            } while (text[i] !== \">\");\n            digits.push(parseValue(text.slice(start + 1, i)));\n          } else throw new Error(c + \" is not a valid character\");\n        }\n        return parseBaseFromArray(digits, base, isNegative);\n      };\n      function parseBaseFromArray(digits, base, isNegative) {\n        var val = Integer[0],\n          pow = Integer[1],\n          i;\n        for (i = digits.length - 1; i >= 0; i--) {\n          val = val.add(digits[i].times(pow));\n          pow = pow.times(base);\n        }\n        return isNegative ? val.negate() : val;\n      }\n      function stringify(digit) {\n        if (digit <= 35) {\n          return \"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit);\n        }\n        return \"<\" + digit + \">\";\n      }\n      function toBase(n, base) {\n        base = bigInt(base);\n        if (base.isZero()) {\n          if (n.isZero()) return {\n            value: [0],\n            isNegative: false\n          };\n          throw new Error(\"Cannot convert nonzero numbers to base 0.\");\n        }\n        if (base.equals(-1)) {\n          if (n.isZero()) return {\n            value: [0],\n            isNegative: false\n          };\n          if (n.isNegative()) return {\n            value: [].concat.apply([], Array.apply(null, Array(-n)).map(Array.prototype.valueOf, [1, 0])),\n            isNegative: false\n          };\n          var arr = Array.apply(null, Array(+n - 1)).map(Array.prototype.valueOf, [0, 1]);\n          arr.unshift([1]);\n          return {\n            value: [].concat.apply([], arr),\n            isNegative: false\n          };\n        }\n        var neg = false;\n        if (n.isNegative() && base.isPositive()) {\n          neg = true;\n          n = n.abs();\n        }\n        if (base.equals(1)) {\n          if (n.isZero()) return {\n            value: [0],\n            isNegative: false\n          };\n          return {\n            value: Array.apply(null, Array(+n)).map(Number.prototype.valueOf, 1),\n            isNegative: neg\n          };\n        }\n        var out = [];\n        var left = n,\n          divmod;\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\n          divmod = left.divmod(base);\n          left = divmod.quotient;\n          var digit = divmod.remainder;\n          if (digit.isNegative()) {\n            digit = base.minus(digit).abs();\n            left = left.next();\n          }\n          out.push(digit.toJSNumber());\n        }\n        out.push(left.toJSNumber());\n        return {\n          value: out.reverse(),\n          isNegative: neg\n        };\n      }\n      function toBaseString(n, base) {\n        var arr = toBase(n, base);\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(stringify).join(\"\");\n      }\n      BigInteger.prototype.toArray = function (radix) {\n        return toBase(this, radix);\n      };\n      SmallInteger.prototype.toArray = function (radix) {\n        return toBase(this, radix);\n      };\n      BigInteger.prototype.toString = function (radix) {\n        if (radix === undefined) radix = 10;\n        if (radix !== 10) return toBaseString(this, radix);\n        var v = this.value,\n          l = v.length,\n          str = String(v[--l]),\n          zeros = \"0000000\",\n          digit;\n        while (--l >= 0) {\n          digit = String(v[l]);\n          str += zeros.slice(digit.length) + digit;\n        }\n        var sign = this.sign ? \"-\" : \"\";\n        return sign + str;\n      };\n      SmallInteger.prototype.toString = function (radix) {\n        if (radix === undefined) radix = 10;\n        if (radix != 10) return toBaseString(this, radix);\n        return String(this.value);\n      };\n      BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () {\n        return this.toString();\n      };\n      BigInteger.prototype.valueOf = function () {\n        return parseInt(this.toString(), 10);\n      };\n      BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\n      SmallInteger.prototype.valueOf = function () {\n        return this.value;\n      };\n      SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\n      function parseStringValue(v) {\n        if (isPrecise(+v)) {\n          var x = +v;\n          if (x === truncate(x)) return new SmallInteger(x);\n          throw new Error(\"Invalid integer: \" + v);\n        }\n        var sign = v[0] === \"-\";\n        if (sign) v = v.slice(1);\n        var split = v.split(/e/i);\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\n        if (split.length === 2) {\n          var exp = split[1];\n          if (exp[0] === \"+\") exp = exp.slice(1);\n          exp = +exp;\n          if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\n          var text = split[0];\n          var decimalPlace = text.indexOf(\".\");\n          if (decimalPlace >= 0) {\n            exp -= text.length - decimalPlace - 1;\n            text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\n          }\n          if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\n          text += new Array(exp + 1).join(\"0\");\n          v = text;\n        }\n        var isValid = /^([0-9][0-9]*)$/.test(v);\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\n        var r = [],\n          max = v.length,\n          l = LOG_BASE,\n          min = max - l;\n        while (max > 0) {\n          r.push(+v.slice(min, max));\n          min -= l;\n          if (min < 0) min = 0;\n          max -= l;\n        }\n        trim(r);\n        return new BigInteger(r, sign);\n      }\n      function parseNumberValue(v) {\n        if (isPrecise(v)) {\n          if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\n          return new SmallInteger(v);\n        }\n        return parseStringValue(v.toString());\n      }\n      function parseValue(v) {\n        if (typeof v === \"number\") {\n          return parseNumberValue(v);\n        }\n        if (typeof v === \"string\") {\n          return parseStringValue(v);\n        }\n        return v;\n      }\n      for (var i = 0; i < 1e3; i++) {\n        Integer[i] = new SmallInteger(i);\n        if (i > 0) Integer[-i] = new SmallInteger(-i);\n      }\n      Integer.one = Integer[1];\n      Integer.zero = Integer[0];\n      Integer.minusOne = Integer[-1];\n      Integer.max = max;\n      Integer.min = min;\n      Integer.gcd = gcd;\n      Integer.lcm = lcm;\n      Integer.isInstance = function (x) {\n        return x instanceof BigInteger || x instanceof SmallInteger;\n      };\n      Integer.randBetween = randBetween;\n      Integer.fromArray = function (digits, base, isNegative) {\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\n      };\n      return Integer;\n    }();\n    if (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\n      module.exports = bigInt;\n    }\n    if (typeof define === \"function\" && define.amd) {\n      define(\"big-integer\", [], function () {\n        return bigInt;\n      });\n    }\n    return bigInt;\n  }(),\n  /*\r\n   *  decimal.js v10.2.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\n  bigDec: function (n) {\n    \"use strict\";\n\n    var e,\n      i,\n      t,\n      r,\n      s = 9e15,\n      o = 1e9,\n      u = \"0123456789abcdef\",\n      c = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",\n      f = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",\n      a = {\n        precision: 20,\n        rounding: 4,\n        modulo: 1,\n        toExpNeg: -7,\n        toExpPos: 21,\n        minE: -s,\n        maxE: s,\n        crypto: !1\n      },\n      h = !0,\n      d = \"[DecimalError] \",\n      l = d + \"Invalid argument: \",\n      p = d + \"Precision limit exceeded\",\n      g = d + \"crypto unavailable\",\n      m = Math.floor,\n      w = Math.pow,\n      v = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\n      N = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\n      b = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\n      E = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n      x = 1e7,\n      y = 7,\n      M = c.length - 1,\n      q = f.length - 1,\n      O = {\n        name: \"[object Decimal]\"\n      };\n    function D(n) {\n      var e,\n        i,\n        t,\n        r = n.length - 1,\n        s = \"\",\n        o = n[0];\n      if (r > 0) {\n        for (s += o, e = 1; e < r; e++) t = n[e] + \"\", (i = y - t.length) && (s += k(i)), s += t;\n        o = n[e], (i = y - (t = o + \"\").length) && (s += k(i));\n      } else if (0 === o) return \"0\";\n      for (; o % 10 == 0;) o /= 10;\n      return s + o;\n    }\n    function F(n, e, i) {\n      if (n !== ~~n || n < e || n > i) throw Error(l + n);\n    }\n    function A(n, e, i, t) {\n      var r, s, o, u;\n      for (s = n[0]; s >= 10; s /= 10) --e;\n      return --e < 0 ? (e += y, r = 0) : (r = Math.ceil((e + 1) / y), e %= y), s = w(10, y - e), u = n[r] % s | 0, null == t ? e < 3 ? (0 == e ? u = u / 100 | 0 : 1 == e && (u = u / 10 | 0), o = i < 4 && 99999 == u || i > 3 && 49999 == u || 5e4 == u || 0 == u) : o = (i < 4 && u + 1 == s || i > 3 && u + 1 == s / 2) && (n[r + 1] / s / 100 | 0) == w(10, e - 2) - 1 || (u == s / 2 || 0 == u) && 0 == (n[r + 1] / s / 100 | 0) : e < 4 ? (0 == e ? u = u / 1e3 | 0 : 1 == e ? u = u / 100 | 0 : 2 == e && (u = u / 10 | 0), o = (t || i < 4) && 9999 == u || !t && i > 3 && 4999 == u) : o = ((t || i < 4) && u + 1 == s || !t && i > 3 && u + 1 == s / 2) && (n[r + 1] / s / 1e3 | 0) == w(10, e - 3) - 1, o;\n    }\n    function S(n, e, i) {\n      for (var t, r, s = [0], o = 0, c = n.length; o < c;) {\n        for (r = s.length; r--;) s[r] *= e;\n        for (s[0] += u.indexOf(n.charAt(o++)), t = 0; t < s.length; t++) s[t] > i - 1 && (void 0 === s[t + 1] && (s[t + 1] = 0), s[t + 1] += s[t] / i | 0, s[t] %= i);\n      }\n      return s.reverse();\n    }\n    O.absoluteValue = O.abs = function () {\n      var n = new this.constructor(this);\n      return n.s < 0 && (n.s = 1), P(n);\n    }, O.ceil = function () {\n      return P(new this.constructor(this), this.e + 1, 2);\n    }, O.comparedTo = O.cmp = function (n) {\n      var e,\n        i,\n        t,\n        r,\n        s = this,\n        o = s.d,\n        u = (n = new s.constructor(n)).d,\n        c = s.s,\n        f = n.s;\n      if (!o || !u) return c && f ? c !== f ? c : o === u ? 0 : !o ^ c < 0 ? 1 : -1 : NaN;\n      if (!o[0] || !u[0]) return o[0] ? c : u[0] ? -f : 0;\n      if (c !== f) return c;\n      if (s.e !== n.e) return s.e > n.e ^ c < 0 ? 1 : -1;\n      for (e = 0, i = (t = o.length) < (r = u.length) ? t : r; e < i; ++e) if (o[e] !== u[e]) return o[e] > u[e] ^ c < 0 ? 1 : -1;\n      return t === r ? 0 : t > r ^ c < 0 ? 1 : -1;\n    }, O.cosine = O.cos = function () {\n      var n,\n        e,\n        i = this,\n        t = i.constructor;\n      return i.d ? i.d[0] ? (n = t.precision, e = t.rounding, t.precision = n + Math.max(i.e, i.sd()) + y, t.rounding = 1, i = function (n, e) {\n        var i,\n          t,\n          r = e.d.length;\n        r < 32 ? (i = Math.ceil(r / 3), t = (1 / z(4, i)).toString()) : (i = 16, t = \"2.3283064365386962890625e-10\");\n        n.precision += i, e = J(n, 1, e.times(t), new n(1));\n        for (var s = i; s--;) {\n          var o = e.times(e);\n          e = o.times(o).minus(o).times(8).plus(1);\n        }\n        return n.precision -= i, e;\n      }(t, G(t, i)), t.precision = n, t.rounding = e, P(2 == r || 3 == r ? i.neg() : i, n, e, !0)) : new t(1) : new t(NaN);\n    }, O.cubeRoot = O.cbrt = function () {\n      var n,\n        e,\n        i,\n        t,\n        r,\n        s,\n        o,\n        u,\n        c,\n        f,\n        a = this,\n        d = a.constructor;\n      if (!a.isFinite() || a.isZero()) return new d(a);\n      for (h = !1, (s = a.s * w(a.s * a, 1 / 3)) && Math.abs(s) != 1 / 0 ? t = new d(s.toString()) : (i = D(a.d), (s = ((n = a.e) - i.length + 1) % 3) && (i += 1 == s || -2 == s ? \"0\" : \"00\"), s = w(i, 1 / 3), n = m((n + 1) / 3) - (n % 3 == (n < 0 ? -1 : 2)), (t = new d(i = s == 1 / 0 ? \"5e\" + n : (i = s.toExponential()).slice(0, i.indexOf(\"e\") + 1) + n)).s = a.s), o = (n = d.precision) + 3;;) if (f = (c = (u = t).times(u).times(u)).plus(a), t = Z(f.plus(a).times(u), f.plus(c), o + 2, 1), D(u.d).slice(0, o) === (i = D(t.d)).slice(0, o)) {\n        if (\"9999\" != (i = i.slice(o - 3, o + 1)) && (r || \"4999\" != i)) {\n          +i && (+i.slice(1) || \"5\" != i.charAt(0)) || (P(t, n + 1, 1), e = !t.times(t).times(t).eq(a));\n          break;\n        }\n        if (!r && (P(u, n + 1, 0), u.times(u).times(u).eq(a))) {\n          t = u;\n          break;\n        }\n        o += 4, r = 1;\n      }\n      return h = !0, P(t, n, d.rounding, e);\n    }, O.decimalPlaces = O.dp = function () {\n      var n,\n        e = this.d,\n        i = NaN;\n      if (e) {\n        if (i = ((n = e.length - 1) - m(this.e / y)) * y, n = e[n]) for (; n % 10 == 0; n /= 10) i--;\n        i < 0 && (i = 0);\n      }\n      return i;\n    }, O.dividedBy = O.div = function (n) {\n      return Z(this, new this.constructor(n));\n    }, O.dividedToIntegerBy = O.divToInt = function (n) {\n      var e = this.constructor;\n      return P(Z(this, new e(n), 0, 1, 1), e.precision, e.rounding);\n    }, O.equals = O.eq = function (n) {\n      return 0 === this.cmp(n);\n    }, O.floor = function () {\n      return P(new this.constructor(this), this.e + 1, 3);\n    }, O.greaterThan = O.gt = function (n) {\n      return this.cmp(n) > 0;\n    }, O.greaterThanOrEqualTo = O.gte = function (n) {\n      var e = this.cmp(n);\n      return 1 == e || 0 === e;\n    }, O.hyperbolicCosine = O.cosh = function () {\n      var n,\n        e,\n        i,\n        t,\n        r,\n        s = this,\n        o = s.constructor,\n        u = new o(1);\n      if (!s.isFinite()) return new o(s.s ? 1 / 0 : NaN);\n      if (s.isZero()) return u;\n      i = o.precision, t = o.rounding, o.precision = i + Math.max(s.e, s.sd()) + 4, o.rounding = 1, (r = s.d.length) < 32 ? e = (1 / z(4, n = Math.ceil(r / 3))).toString() : (n = 16, e = \"2.3283064365386962890625e-10\"), s = J(o, 1, s.times(e), new o(1), !0);\n      for (var c, f = n, a = new o(8); f--;) c = s.times(s), s = u.minus(c.times(a.minus(c.times(a))));\n      return P(s, o.precision = i, o.rounding = t, !0);\n    }, O.hyperbolicSine = O.sinh = function () {\n      var n,\n        e,\n        i,\n        t,\n        r = this,\n        s = r.constructor;\n      if (!r.isFinite() || r.isZero()) return new s(r);\n      if (e = s.precision, i = s.rounding, s.precision = e + Math.max(r.e, r.sd()) + 4, s.rounding = 1, (t = r.d.length) < 3) r = J(s, 2, r, r, !0);else {\n        n = (n = 1.4 * Math.sqrt(t)) > 16 ? 16 : 0 | n, r = J(s, 2, r = r.times(1 / z(5, n)), r, !0);\n        for (var o, u = new s(5), c = new s(16), f = new s(20); n--;) o = r.times(r), r = r.times(u.plus(o.times(c.times(o).plus(f))));\n      }\n      return s.precision = e, s.rounding = i, P(r, e, i, !0);\n    }, O.hyperbolicTangent = O.tanh = function () {\n      var n,\n        e,\n        i = this,\n        t = i.constructor;\n      return i.isFinite() ? i.isZero() ? new t(i) : (n = t.precision, e = t.rounding, t.precision = n + 7, t.rounding = 1, Z(i.sinh(), i.cosh(), t.precision = n, t.rounding = e)) : new t(i.s);\n    }, O.inverseCosine = O.acos = function () {\n      var n,\n        e = this,\n        i = e.constructor,\n        t = e.abs().cmp(1),\n        r = i.precision,\n        s = i.rounding;\n      return -1 !== t ? 0 === t ? e.isNeg() ? U(i, r, s) : new i(0) : new i(NaN) : e.isZero() ? U(i, r + 4, s).times(.5) : (i.precision = r + 6, i.rounding = 1, e = e.asin(), n = U(i, r + 4, s).times(.5), i.precision = r, i.rounding = s, n.minus(e));\n    }, O.inverseHyperbolicCosine = O.acosh = function () {\n      var n,\n        e,\n        i = this,\n        t = i.constructor;\n      return i.lte(1) ? new t(i.eq(1) ? 0 : NaN) : i.isFinite() ? (n = t.precision, e = t.rounding, t.precision = n + Math.max(Math.abs(i.e), i.sd()) + 4, t.rounding = 1, h = !1, i = i.times(i).minus(1).sqrt().plus(i), h = !0, t.precision = n, t.rounding = e, i.ln()) : new t(i);\n    }, O.inverseHyperbolicSine = O.asinh = function () {\n      var n,\n        e,\n        i = this,\n        t = i.constructor;\n      return !i.isFinite() || i.isZero() ? new t(i) : (n = t.precision, e = t.rounding, t.precision = n + 2 * Math.max(Math.abs(i.e), i.sd()) + 6, t.rounding = 1, h = !1, i = i.times(i).plus(1).sqrt().plus(i), h = !0, t.precision = n, t.rounding = e, i.ln());\n    }, O.inverseHyperbolicTangent = O.atanh = function () {\n      var n,\n        e,\n        i,\n        t,\n        r = this,\n        s = r.constructor;\n      return r.isFinite() ? r.e >= 0 ? new s(r.abs().eq(1) ? r.s / 0 : r.isZero() ? r : NaN) : (n = s.precision, e = s.rounding, t = r.sd(), Math.max(t, n) < 2 * -r.e - 1 ? P(new s(r), n, e, !0) : (s.precision = i = t - r.e, r = Z(r.plus(1), new s(1).minus(r), i + n, 1), s.precision = n + 4, s.rounding = 1, r = r.ln(), s.precision = n, s.rounding = e, r.times(.5))) : new s(NaN);\n    }, O.inverseSine = O.asin = function () {\n      var n,\n        e,\n        i,\n        t,\n        r = this,\n        s = r.constructor;\n      return r.isZero() ? new s(r) : (e = r.abs().cmp(1), i = s.precision, t = s.rounding, -1 !== e ? 0 === e ? ((n = U(s, i + 4, t).times(.5)).s = r.s, n) : new s(NaN) : (s.precision = i + 6, s.rounding = 1, r = r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(), s.precision = i, s.rounding = t, r.times(2)));\n    }, O.inverseTangent = O.atan = function () {\n      var n,\n        e,\n        i,\n        t,\n        r,\n        s,\n        o,\n        u,\n        c,\n        f = this,\n        a = f.constructor,\n        d = a.precision,\n        l = a.rounding;\n      if (f.isFinite()) {\n        if (f.isZero()) return new a(f);\n        if (f.abs().eq(1) && d + 4 <= q) return (o = U(a, d + 4, l).times(.25)).s = f.s, o;\n      } else {\n        if (!f.s) return new a(NaN);\n        if (d + 4 <= q) return (o = U(a, d + 4, l).times(.5)).s = f.s, o;\n      }\n      for (a.precision = u = d + 10, a.rounding = 1, n = i = Math.min(28, u / y + 2 | 0); n; --n) f = f.div(f.times(f).plus(1).sqrt().plus(1));\n      for (h = !1, e = Math.ceil(u / y), t = 1, c = f.times(f), o = new a(f), r = f; -1 !== n;) if (r = r.times(c), s = o.minus(r.div(t += 2)), r = r.times(c), void 0 !== (o = s.plus(r.div(t += 2))).d[e]) for (n = e; o.d[n] === s.d[n] && n--;);\n      return i && (o = o.times(2 << i - 1)), h = !0, P(o, a.precision = d, a.rounding = l, !0);\n    }, O.isFinite = function () {\n      return !!this.d;\n    }, O.isInteger = O.isInt = function () {\n      return !!this.d && m(this.e / y) > this.d.length - 2;\n    }, O.isNaN = function () {\n      return !this.s;\n    }, O.isNegative = O.isNeg = function () {\n      return this.s < 0;\n    }, O.isPositive = O.isPos = function () {\n      return this.s > 0;\n    }, O.isZero = function () {\n      return !!this.d && 0 === this.d[0];\n    }, O.lessThan = O.lt = function (n) {\n      return this.cmp(n) < 0;\n    }, O.lessThanOrEqualTo = O.lte = function (n) {\n      return this.cmp(n) < 1;\n    }, O.logarithm = O.log = function (n) {\n      var e,\n        i,\n        t,\n        r,\n        s,\n        o,\n        u,\n        c,\n        f = this.constructor,\n        a = f.precision,\n        d = f.rounding;\n      if (null == n) n = new f(10), e = !0;else {\n        if (i = (n = new f(n)).d, n.s < 0 || !i || !i[0] || n.eq(1)) return new f(NaN);\n        e = n.eq(10);\n      }\n      if (i = this.d, this.s < 0 || !i || !i[0] || this.eq(1)) return new f(i && !i[0] ? -1 / 0 : 1 != this.s ? NaN : i ? 0 : 1 / 0);\n      if (e) if (i.length > 1) s = !0;else {\n        for (r = i[0]; r % 10 == 0;) r /= 10;\n        s = 1 !== r;\n      }\n      if (h = !1, o = V(this, u = a + 5), t = e ? T(f, u + 10) : V(n, u), A((c = Z(o, t, u, 1)).d, r = a, d)) do {\n        if (o = V(this, u += 10), t = e ? T(f, u + 10) : V(n, u), c = Z(o, t, u, 1), !s) {\n          +D(c.d).slice(r + 1, r + 15) + 1 == 1e14 && (c = P(c, a + 1, 0));\n          break;\n        }\n      } while (A(c.d, r += 10, d));\n      return h = !0, P(c, a, d);\n    }, O.minus = O.sub = function (n) {\n      var e,\n        i,\n        t,\n        r,\n        s,\n        o,\n        u,\n        c,\n        f,\n        a,\n        d,\n        l,\n        p = this,\n        g = p.constructor;\n      if (n = new g(n), !p.d || !n.d) return p.s && n.s ? p.d ? n.s = -n.s : n = new g(n.d || p.s !== n.s ? p : NaN) : n = new g(NaN), n;\n      if (p.s != n.s) return n.s = -n.s, p.plus(n);\n      if (f = p.d, l = n.d, u = g.precision, c = g.rounding, !f[0] || !l[0]) {\n        if (l[0]) n.s = -n.s;else {\n          if (!f[0]) return new g(3 === c ? -0 : 0);\n          n = new g(p);\n        }\n        return h ? P(n, u, c) : n;\n      }\n      if (i = m(n.e / y), a = m(p.e / y), f = f.slice(), s = a - i) {\n        for ((d = s < 0) ? (e = f, s = -s, o = l.length) : (e = l, i = a, o = f.length), s > (t = Math.max(Math.ceil(u / y), o) + 2) && (s = t, e.length = 1), e.reverse(), t = s; t--;) e.push(0);\n        e.reverse();\n      } else {\n        for ((d = (t = f.length) < (o = l.length)) && (o = t), t = 0; t < o; t++) if (f[t] != l[t]) {\n          d = f[t] < l[t];\n          break;\n        }\n        s = 0;\n      }\n      for (d && (e = f, f = l, l = e, n.s = -n.s), o = f.length, t = l.length - o; t > 0; --t) f[o++] = 0;\n      for (t = l.length; t > s;) {\n        if (f[--t] < l[t]) {\n          for (r = t; r && 0 === f[--r];) f[r] = x - 1;\n          --f[r], f[t] += x;\n        }\n        f[t] -= l[t];\n      }\n      for (; 0 === f[--o];) f.pop();\n      for (; 0 === f[0]; f.shift()) --i;\n      return f[0] ? (n.d = f, n.e = L(f, i), h ? P(n, u, c) : n) : new g(3 === c ? -0 : 0);\n    }, O.modulo = O.mod = function (n) {\n      var e,\n        i = this,\n        t = i.constructor;\n      return n = new t(n), !i.d || !n.s || n.d && !n.d[0] ? new t(NaN) : !n.d || i.d && !i.d[0] ? P(new t(i), t.precision, t.rounding) : (h = !1, 9 == t.modulo ? (e = Z(i, n.abs(), 0, 3, 1)).s *= n.s : e = Z(i, n, 0, t.modulo, 1), e = e.times(n), h = !0, i.minus(e));\n    }, O.naturalExponential = O.exp = function () {\n      return B(this);\n    }, O.naturalLogarithm = O.ln = function () {\n      return V(this);\n    }, O.negated = O.neg = function () {\n      var n = new this.constructor(this);\n      return n.s = -n.s, P(n);\n    }, O.plus = O.add = function (n) {\n      var e,\n        i,\n        t,\n        r,\n        s,\n        o,\n        u,\n        c,\n        f,\n        a,\n        d = this,\n        l = d.constructor;\n      if (n = new l(n), !d.d || !n.d) return d.s && n.s ? d.d || (n = new l(n.d || d.s === n.s ? d : NaN)) : n = new l(NaN), n;\n      if (d.s != n.s) return n.s = -n.s, d.minus(n);\n      if (f = d.d, a = n.d, u = l.precision, c = l.rounding, !f[0] || !a[0]) return a[0] || (n = new l(d)), h ? P(n, u, c) : n;\n      if (s = m(d.e / y), t = m(n.e / y), f = f.slice(), r = s - t) {\n        for (r < 0 ? (i = f, r = -r, o = a.length) : (i = a, t = s, o = f.length), r > (o = (s = Math.ceil(u / y)) > o ? s + 1 : o + 1) && (r = o, i.length = 1), i.reverse(); r--;) i.push(0);\n        i.reverse();\n      }\n      for ((o = f.length) - (r = a.length) < 0 && (r = o, i = a, a = f, f = i), e = 0; r;) e = (f[--r] = f[r] + a[r] + e) / x | 0, f[r] %= x;\n      for (e && (f.unshift(e), ++t), o = f.length; 0 == f[--o];) f.pop();\n      return n.d = f, n.e = L(f, t), h ? P(n, u, c) : n;\n    }, O.precision = O.sd = function (n) {\n      var e,\n        i = this;\n      if (void 0 !== n && n !== !!n && 1 !== n && 0 !== n) throw Error(l + n);\n      return i.d ? (e = _(i.d), n && i.e + 1 > e && (e = i.e + 1)) : e = NaN, e;\n    }, O.round = function () {\n      var n = this,\n        e = n.constructor;\n      return P(new e(n), n.e + 1, e.rounding);\n    }, O.sine = O.sin = function () {\n      var n,\n        e,\n        i = this,\n        t = i.constructor;\n      return i.isFinite() ? i.isZero() ? new t(i) : (n = t.precision, e = t.rounding, t.precision = n + Math.max(i.e, i.sd()) + y, t.rounding = 1, i = function (n, e) {\n        var i,\n          t = e.d.length;\n        if (t < 3) return J(n, 2, e, e);\n        i = (i = 1.4 * Math.sqrt(t)) > 16 ? 16 : 0 | i, e = e.times(1 / z(5, i)), e = J(n, 2, e, e);\n        for (var r, s = new n(5), o = new n(16), u = new n(20); i--;) r = e.times(e), e = e.times(s.plus(r.times(o.times(r).minus(u))));\n        return e;\n      }(t, G(t, i)), t.precision = n, t.rounding = e, P(r > 2 ? i.neg() : i, n, e, !0)) : new t(NaN);\n    }, O.squareRoot = O.sqrt = function () {\n      var n,\n        e,\n        i,\n        t,\n        r,\n        s,\n        o = this,\n        u = o.d,\n        c = o.e,\n        f = o.s,\n        a = o.constructor;\n      if (1 !== f || !u || !u[0]) return new a(!f || f < 0 && (!u || u[0]) ? NaN : u ? o : 1 / 0);\n      for (h = !1, 0 == (f = Math.sqrt(+o)) || f == 1 / 0 ? (((e = D(u)).length + c) % 2 == 0 && (e += \"0\"), f = Math.sqrt(e), c = m((c + 1) / 2) - (c < 0 || c % 2), t = new a(e = f == 1 / 0 ? \"5e\" + c : (e = f.toExponential()).slice(0, e.indexOf(\"e\") + 1) + c)) : t = new a(f.toString()), i = (c = a.precision) + 3;;) if (t = (s = t).plus(Z(o, s, i + 2, 1)).times(.5), D(s.d).slice(0, i) === (e = D(t.d)).slice(0, i)) {\n        if (\"9999\" != (e = e.slice(i - 3, i + 1)) && (r || \"4999\" != e)) {\n          +e && (+e.slice(1) || \"5\" != e.charAt(0)) || (P(t, c + 1, 1), n = !t.times(t).eq(o));\n          break;\n        }\n        if (!r && (P(s, c + 1, 0), s.times(s).eq(o))) {\n          t = s;\n          break;\n        }\n        i += 4, r = 1;\n      }\n      return h = !0, P(t, c, a.rounding, n);\n    }, O.tangent = O.tan = function () {\n      var n,\n        e,\n        i = this,\n        t = i.constructor;\n      return i.isFinite() ? i.isZero() ? new t(i) : (n = t.precision, e = t.rounding, t.precision = n + 10, t.rounding = 1, (i = i.sin()).s = 1, i = Z(i, new t(1).minus(i.times(i)).sqrt(), n + 10, 0), t.precision = n, t.rounding = e, P(2 == r || 4 == r ? i.neg() : i, n, e, !0)) : new t(NaN);\n    }, O.times = O.mul = function (n) {\n      var e,\n        i,\n        t,\n        r,\n        s,\n        o,\n        u,\n        c,\n        f,\n        a = this,\n        d = a.constructor,\n        l = a.d,\n        p = (n = new d(n)).d;\n      if (n.s *= a.s, !(l && l[0] && p && p[0])) return new d(!n.s || l && !l[0] && !p || p && !p[0] && !l ? NaN : l && p ? 0 * n.s : n.s / 0);\n      for (i = m(a.e / y) + m(n.e / y), (c = l.length) < (f = p.length) && (s = l, l = p, p = s, o = c, c = f, f = o), s = [], t = o = c + f; t--;) s.push(0);\n      for (t = f; --t >= 0;) {\n        for (e = 0, r = c + t; r > t;) u = s[r] + p[t] * l[r - t - 1] + e, s[r--] = u % x | 0, e = u / x | 0;\n        s[r] = (s[r] + e) % x | 0;\n      }\n      for (; !s[--o];) s.pop();\n      return e ? ++i : s.shift(), n.d = s, n.e = L(s, i), h ? P(n, d.precision, d.rounding) : n;\n    }, O.toBinary = function (n, e) {\n      return K(this, 2, n, e);\n    }, O.toDecimalPlaces = O.toDP = function (n, e) {\n      var i = this,\n        t = i.constructor;\n      return i = new t(i), void 0 === n ? i : (F(n, 0, o), void 0 === e ? e = t.rounding : F(e, 0, 8), P(i, n + i.e + 1, e));\n    }, O.toExponential = function (n, e) {\n      var i,\n        t = this,\n        r = t.constructor;\n      return void 0 === n ? i = R(t, !0) : (F(n, 0, o), void 0 === e ? e = r.rounding : F(e, 0, 8), i = R(t = P(new r(t), n + 1, e), !0, n + 1)), t.isNeg() && !t.isZero() ? \"-\" + i : i;\n    }, O.toFixed = function (n, e) {\n      var i,\n        t,\n        r = this,\n        s = r.constructor;\n      return void 0 === n ? i = R(r) : (F(n, 0, o), void 0 === e ? e = s.rounding : F(e, 0, 8), i = R(t = P(new s(r), n + r.e + 1, e), !1, n + t.e + 1)), r.isNeg() && !r.isZero() ? \"-\" + i : i;\n    }, O.toFraction = function (n) {\n      var e,\n        i,\n        t,\n        r,\n        s,\n        o,\n        u,\n        c,\n        f,\n        a,\n        d,\n        p,\n        g = this,\n        m = g.d,\n        v = g.constructor;\n      if (!m) return new v(g);\n      if (f = i = new v(1), t = c = new v(0), o = (s = (e = new v(t)).e = _(m) - g.e - 1) % y, e.d[0] = w(10, o < 0 ? y + o : o), null == n) n = s > 0 ? e : f;else {\n        if (!(u = new v(n)).isInt() || u.lt(f)) throw Error(l + u);\n        n = u.gt(e) ? s > 0 ? e : f : u;\n      }\n      for (h = !1, u = new v(D(m)), a = v.precision, v.precision = s = m.length * y * 2; d = Z(u, e, 0, 1, 1), 1 != (r = i.plus(d.times(t))).cmp(n);) i = t, t = r, r = f, f = c.plus(d.times(r)), c = r, r = e, e = u.minus(d.times(r)), u = r;\n      return r = Z(n.minus(i), t, 0, 1, 1), c = c.plus(r.times(f)), i = i.plus(r.times(t)), c.s = f.s = g.s, p = Z(f, t, s, 1).minus(g).abs().cmp(Z(c, i, s, 1).minus(g).abs()) < 1 ? [f, t] : [c, i], v.precision = a, h = !0, p;\n    }, O.toHexadecimal = O.toHex = function (n, e) {\n      return K(this, 16, n, e);\n    }, O.toNearest = function (n, e) {\n      var i = this,\n        t = i.constructor;\n      if (i = new t(i), null == n) {\n        if (!i.d) return i;\n        n = new t(1), e = t.rounding;\n      } else {\n        if (n = new t(n), void 0 === e ? e = t.rounding : F(e, 0, 8), !i.d) return n.s ? i : n;\n        if (!n.d) return n.s && (n.s = i.s), n;\n      }\n      return n.d[0] ? (h = !1, i = Z(i, n, 0, e, 1).times(n), h = !0, P(i)) : (n.s = i.s, i = n), i;\n    }, O.toNumber = function () {\n      return +this;\n    }, O.toOctal = function (n, e) {\n      return K(this, 8, n, e);\n    }, O.toPower = O.pow = function (n) {\n      var e,\n        i,\n        t,\n        r,\n        s,\n        o,\n        u = this,\n        c = u.constructor,\n        f = +(n = new c(n));\n      if (!(u.d && n.d && u.d[0] && n.d[0])) return new c(w(+u, f));\n      if ((u = new c(u)).eq(1)) return u;\n      if (t = c.precision, s = c.rounding, n.eq(1)) return P(u, t, s);\n      if ((e = m(n.e / y)) >= n.d.length - 1 && (i = f < 0 ? -f : f) <= 9007199254740991) return r = C(c, u, i, t), n.s < 0 ? new c(1).div(r) : P(r, t, s);\n      if ((o = u.s) < 0) {\n        if (e < n.d.length - 1) return new c(NaN);\n        if (0 == (1 & n.d[e]) && (o = 1), 0 == u.e && 1 == u.d[0] && 1 == u.d.length) return u.s = o, u;\n      }\n      return (e = 0 != (i = w(+u, f)) && isFinite(i) ? new c(i + \"\").e : m(f * (Math.log(\"0.\" + D(u.d)) / Math.LN10 + u.e + 1))) > c.maxE + 1 || e < c.minE - 1 ? new c(e > 0 ? o / 0 : 0) : (h = !1, c.rounding = u.s = 1, i = Math.min(12, (e + \"\").length), (r = B(n.times(V(u, t + i)), t)).d && A((r = P(r, t + 5, 1)).d, t, s) && (e = t + 10, +D((r = P(B(n.times(V(u, e + i)), e), e + 5, 1)).d).slice(t + 1, t + 15) + 1 == 1e14 && (r = P(r, t + 1, 0))), r.s = o, h = !0, c.rounding = s, P(r, t, s));\n    }, O.toPrecision = function (n, e) {\n      var i,\n        t = this,\n        r = t.constructor;\n      return void 0 === n ? i = R(t, t.e <= r.toExpNeg || t.e >= r.toExpPos) : (F(n, 1, o), void 0 === e ? e = r.rounding : F(e, 0, 8), i = R(t = P(new r(t), n, e), n <= t.e || t.e <= r.toExpNeg, n)), t.isNeg() && !t.isZero() ? \"-\" + i : i;\n    }, O.toSignificantDigits = O.toSD = function (n, e) {\n      var i = this.constructor;\n      return void 0 === n ? (n = i.precision, e = i.rounding) : (F(n, 1, o), void 0 === e ? e = i.rounding : F(e, 0, 8)), P(new i(this), n, e);\n    }, O.toString = function () {\n      var n = this,\n        e = n.constructor,\n        i = R(n, n.e <= e.toExpNeg || n.e >= e.toExpPos);\n      return n.isNeg() && !n.isZero() ? \"-\" + i : i;\n    }, O.truncated = O.trunc = function () {\n      return P(new this.constructor(this), this.e + 1, 1);\n    }, O.valueOf = O.toJSON = function () {\n      var n = this,\n        e = n.constructor,\n        i = R(n, n.e <= e.toExpNeg || n.e >= e.toExpPos);\n      return n.isNeg() ? \"-\" + i : i;\n    };\n    var Z = function () {\n      function n(n, e, i) {\n        var t,\n          r = 0,\n          s = n.length;\n        for (n = n.slice(); s--;) t = n[s] * e + r, n[s] = t % i | 0, r = t / i | 0;\n        return r && n.unshift(r), n;\n      }\n      function e(n, e, i, t) {\n        var r, s;\n        if (i != t) s = i > t ? 1 : -1;else for (r = s = 0; r < i; r++) if (n[r] != e[r]) {\n          s = n[r] > e[r] ? 1 : -1;\n          break;\n        }\n        return s;\n      }\n      function t(n, e, i, t) {\n        for (var r = 0; i--;) n[i] -= r, r = n[i] < e[i] ? 1 : 0, n[i] = r * t + n[i] - e[i];\n        for (; !n[0] && n.length > 1;) n.shift();\n      }\n      return function (r, s, o, u, c, f) {\n        var a,\n          h,\n          d,\n          l,\n          p,\n          g,\n          w,\n          v,\n          N,\n          b,\n          E,\n          M,\n          q,\n          O,\n          D,\n          F,\n          A,\n          S,\n          Z,\n          R,\n          L = r.constructor,\n          T = r.s == s.s ? 1 : -1,\n          U = r.d,\n          _ = s.d;\n        if (!(U && U[0] && _ && _[0])) return new L(r.s && s.s && (U ? !_ || U[0] != _[0] : _) ? U && 0 == U[0] || !_ ? 0 * T : T / 0 : NaN);\n        for (f ? (p = 1, h = r.e - s.e) : (f = x, p = y, h = m(r.e / p) - m(s.e / p)), Z = _.length, A = U.length, b = (N = new L(T)).d = [], d = 0; _[d] == (U[d] || 0); d++);\n        if (_[d] > (U[d] || 0) && h--, null == o ? (O = o = L.precision, u = L.rounding) : O = c ? o + (r.e - s.e) + 1 : o, O < 0) b.push(1), g = !0;else {\n          if (O = O / p + 2 | 0, d = 0, 1 == Z) {\n            for (l = 0, _ = _[0], O++; (d < A || l) && O--; d++) D = l * f + (U[d] || 0), b[d] = D / _ | 0, l = D % _ | 0;\n            g = l || d < A;\n          } else {\n            for ((l = f / (_[0] + 1) | 0) > 1 && (_ = n(_, l, f), U = n(U, l, f), Z = _.length, A = U.length), F = Z, M = (E = U.slice(0, Z)).length; M < Z;) E[M++] = 0;\n            (R = _.slice()).unshift(0), S = _[0], _[1] >= f / 2 && ++S;\n            do {\n              l = 0, (a = e(_, E, Z, M)) < 0 ? (q = E[0], Z != M && (q = q * f + (E[1] || 0)), (l = q / S | 0) > 1 ? (l >= f && (l = f - 1), 1 == (a = e(w = n(_, l, f), E, v = w.length, M = E.length)) && (l--, t(w, Z < v ? R : _, v, f))) : (0 == l && (a = l = 1), w = _.slice()), (v = w.length) < M && w.unshift(0), t(E, w, M, f), -1 == a && (a = e(_, E, Z, M = E.length)) < 1 && (l++, t(E, Z < M ? R : _, M, f)), M = E.length) : 0 === a && (l++, E = [0]), b[d++] = l, a && E[0] ? E[M++] = U[F] || 0 : (E = [U[F]], M = 1);\n            } while ((F++ < A || void 0 !== E[0]) && O--);\n            g = void 0 !== E[0];\n          }\n          b[0] || b.shift();\n        }\n        if (1 == p) N.e = h, i = g;else {\n          for (d = 1, l = b[0]; l >= 10; l /= 10) d++;\n          N.e = d + h * p - 1, P(N, c ? o + N.e + 1 : o, u, g);\n        }\n        return N;\n      };\n    }();\n    function P(n, e, i, t) {\n      var r,\n        s,\n        o,\n        u,\n        c,\n        f,\n        a,\n        d,\n        l,\n        p = n.constructor;\n      n: if (null != e) {\n        if (!(d = n.d)) return n;\n        for (r = 1, u = d[0]; u >= 10; u /= 10) r++;\n        if ((s = e - r) < 0) s += y, o = e, c = (a = d[l = 0]) / w(10, r - o - 1) % 10 | 0;else if ((l = Math.ceil((s + 1) / y)) >= (u = d.length)) {\n          if (!t) break n;\n          for (; u++ <= l;) d.push(0);\n          a = c = 0, r = 1, o = (s %= y) - y + 1;\n        } else {\n          for (a = u = d[l], r = 1; u >= 10; u /= 10) r++;\n          c = (o = (s %= y) - y + r) < 0 ? 0 : a / w(10, r - o - 1) % 10 | 0;\n        }\n        if (t = t || e < 0 || void 0 !== d[l + 1] || (o < 0 ? a : a % w(10, r - o - 1)), f = i < 4 ? (c || t) && (0 == i || i == (n.s < 0 ? 3 : 2)) : c > 5 || 5 == c && (4 == i || t || 6 == i && (s > 0 ? o > 0 ? a / w(10, r - o) : 0 : d[l - 1]) % 10 & 1 || i == (n.s < 0 ? 8 : 7)), e < 1 || !d[0]) return d.length = 0, f ? (e -= n.e + 1, d[0] = w(10, (y - e % y) % y), n.e = -e || 0) : d[0] = n.e = 0, n;\n        if (0 == s ? (d.length = l, u = 1, l--) : (d.length = l + 1, u = w(10, y - s), d[l] = o > 0 ? (a / w(10, r - o) % w(10, o) | 0) * u : 0), f) for (;;) {\n          if (0 == l) {\n            for (s = 1, o = d[0]; o >= 10; o /= 10) s++;\n            for (o = d[0] += u, u = 1; o >= 10; o /= 10) u++;\n            s != u && (n.e++, d[0] == x && (d[0] = 1));\n            break;\n          }\n          if (d[l] += u, d[l] != x) break;\n          d[l--] = 0, u = 1;\n        }\n        for (s = d.length; 0 === d[--s];) d.pop();\n      }\n      return h && (n.e > p.maxE ? (n.d = null, n.e = NaN) : n.e < p.minE && (n.e = 0, n.d = [0])), n;\n    }\n    function R(n, e, i) {\n      if (!n.isFinite()) return j(n);\n      var t,\n        r = n.e,\n        s = D(n.d),\n        o = s.length;\n      return e ? (i && (t = i - o) > 0 ? s = s.charAt(0) + \".\" + s.slice(1) + k(t) : o > 1 && (s = s.charAt(0) + \".\" + s.slice(1)), s = s + (n.e < 0 ? \"e\" : \"e+\") + n.e) : r < 0 ? (s = \"0.\" + k(-r - 1) + s, i && (t = i - o) > 0 && (s += k(t))) : r >= o ? (s += k(r + 1 - o), i && (t = i - r - 1) > 0 && (s = s + \".\" + k(t))) : ((t = r + 1) < o && (s = s.slice(0, t) + \".\" + s.slice(t)), i && (t = i - o) > 0 && (r + 1 === o && (s += \".\"), s += k(t))), s;\n    }\n    function L(n, e) {\n      var i = n[0];\n      for (e *= y; i >= 10; i /= 10) e++;\n      return e;\n    }\n    function T(n, e, i) {\n      if (e > M) throw h = !0, i && (n.precision = i), Error(p);\n      return P(new n(c), e, 1, !0);\n    }\n    function U(n, e, i) {\n      if (e > q) throw Error(p);\n      return P(new n(f), e, i, !0);\n    }\n    function _(n) {\n      var e = n.length - 1,\n        i = e * y + 1;\n      if (e = n[e]) {\n        for (; e % 10 == 0; e /= 10) i--;\n        for (e = n[0]; e >= 10; e /= 10) i++;\n      }\n      return i;\n    }\n    function k(n) {\n      for (var e = \"\"; n--;) e += \"0\";\n      return e;\n    }\n    function C(n, e, i, t) {\n      var r,\n        s = new n(1),\n        o = Math.ceil(t / y + 4);\n      for (h = !1;;) {\n        if (i % 2 && Q((s = s.times(e)).d, o) && (r = !0), 0 === (i = m(i / 2))) {\n          i = s.d.length - 1, r && 0 === s.d[i] && ++s.d[i];\n          break;\n        }\n        Q((e = e.times(e)).d, o);\n      }\n      return h = !0, s;\n    }\n    function I(n) {\n      return 1 & n.d[n.d.length - 1];\n    }\n    function H(n, e, i) {\n      for (var t, r = new n(e[0]), s = 0; ++s < e.length;) {\n        if (!(t = new n(e[s])).s) {\n          r = t;\n          break;\n        }\n        r[i](t) && (r = t);\n      }\n      return r;\n    }\n    function B(n, e) {\n      var i,\n        t,\n        r,\n        s,\n        o,\n        u,\n        c,\n        f = 0,\n        a = 0,\n        d = 0,\n        l = n.constructor,\n        p = l.rounding,\n        g = l.precision;\n      if (!n.d || !n.d[0] || n.e > 17) return new l(n.d ? n.d[0] ? n.s < 0 ? 0 : 1 / 0 : 1 : n.s ? n.s < 0 ? 0 : n : NaN);\n      for (null == e ? (h = !1, c = g) : c = e, u = new l(.03125); n.e > -2;) n = n.times(u), d += 5;\n      for (c += t = Math.log(w(2, d)) / Math.LN10 * 2 + 5 | 0, i = s = o = new l(1), l.precision = c;;) {\n        if (s = P(s.times(n), c, 1), i = i.times(++a), D((u = o.plus(Z(s, i, c, 1))).d).slice(0, c) === D(o.d).slice(0, c)) {\n          for (r = d; r--;) o = P(o.times(o), c, 1);\n          if (null != e) return l.precision = g, o;\n          if (!(f < 3 && A(o.d, c - t, p, f))) return P(o, l.precision = g, p, h = !0);\n          l.precision = c += 10, i = s = u = new l(1), a = 0, f++;\n        }\n        o = u;\n      }\n    }\n    function V(n, e) {\n      var i,\n        t,\n        r,\n        s,\n        o,\n        u,\n        c,\n        f,\n        a,\n        d,\n        l,\n        p = 1,\n        g = n,\n        m = g.d,\n        w = g.constructor,\n        v = w.rounding,\n        N = w.precision;\n      if (g.s < 0 || !m || !m[0] || !g.e && 1 == m[0] && 1 == m.length) return new w(m && !m[0] ? -1 / 0 : 1 != g.s ? NaN : m ? 0 : g);\n      if (null == e ? (h = !1, a = N) : a = e, w.precision = a += 10, t = (i = D(m)).charAt(0), !(Math.abs(s = g.e) < 15e14)) return f = T(w, a + 2, N).times(s + \"\"), g = V(new w(t + \".\" + i.slice(1)), a - 10).plus(f), w.precision = N, null == e ? P(g, N, v, h = !0) : g;\n      for (; t < 7 && 1 != t || 1 == t && i.charAt(1) > 3;) t = (i = D((g = g.times(n)).d)).charAt(0), p++;\n      for (s = g.e, t > 1 ? (g = new w(\"0.\" + i), s++) : g = new w(t + \".\" + i.slice(1)), d = g, c = o = g = Z(g.minus(1), g.plus(1), a, 1), l = P(g.times(g), a, 1), r = 3;;) {\n        if (o = P(o.times(l), a, 1), D((f = c.plus(Z(o, new w(r), a, 1))).d).slice(0, a) === D(c.d).slice(0, a)) {\n          if (c = c.times(2), 0 !== s && (c = c.plus(T(w, a + 2, N).times(s + \"\"))), c = Z(c, new w(p), a, 1), null != e) return w.precision = N, c;\n          if (!A(c.d, a - 10, v, u)) return P(c, w.precision = N, v, h = !0);\n          w.precision = a += 10, f = o = g = Z(d.minus(1), d.plus(1), a, 1), l = P(g.times(g), a, 1), r = u = 1;\n        }\n        c = f, r += 2;\n      }\n    }\n    function j(n) {\n      return String(n.s * n.s / 0);\n    }\n    function $(n, e) {\n      var i, t, r;\n      for ((i = e.indexOf(\".\")) > -1 && (e = e.replace(\".\", \"\")), (t = e.search(/e/i)) > 0 ? (i < 0 && (i = t), i += +e.slice(t + 1), e = e.substring(0, t)) : i < 0 && (i = e.length), t = 0; 48 === e.charCodeAt(t); t++);\n      for (r = e.length; 48 === e.charCodeAt(r - 1); --r);\n      if (e = e.slice(t, r)) {\n        if (r -= t, n.e = i = i - t - 1, n.d = [], t = (i + 1) % y, i < 0 && (t += y), t < r) {\n          for (t && n.d.push(+e.slice(0, t)), r -= y; t < r;) n.d.push(+e.slice(t, t += y));\n          e = e.slice(t), t = y - e.length;\n        } else t -= r;\n        for (; t--;) e += \"0\";\n        n.d.push(+e), h && (n.e > n.constructor.maxE ? (n.d = null, n.e = NaN) : n.e < n.constructor.minE && (n.e = 0, n.d = [0]));\n      } else n.e = 0, n.d = [0];\n      return n;\n    }\n    function W(n, i) {\n      var t, r, s, o, u, c, f, a, d;\n      if (\"Infinity\" === i || \"NaN\" === i) return +i || (n.s = NaN), n.e = NaN, n.d = null, n;\n      if (N.test(i)) t = 16, i = i.toLowerCase();else if (v.test(i)) t = 2;else {\n        if (!b.test(i)) throw Error(l + i);\n        t = 8;\n      }\n      for ((o = i.search(/p/i)) > 0 ? (f = +i.slice(o + 1), i = i.substring(2, o)) : i = i.slice(2), u = (o = i.indexOf(\".\")) >= 0, r = n.constructor, u && (o = (c = (i = i.replace(\".\", \"\")).length) - o, s = C(r, new r(t), o, 2 * o)), o = d = (a = S(i, t, x)).length - 1; 0 === a[o]; --o) a.pop();\n      return o < 0 ? new r(0 * n.s) : (n.e = L(a, d), n.d = a, h = !1, u && (n = Z(n, s, 4 * c)), f && (n = n.times(Math.abs(f) < 54 ? w(2, f) : e.pow(2, f))), h = !0, n);\n    }\n    function J(n, e, i, t, r) {\n      var s,\n        o,\n        u,\n        c,\n        f = n.precision,\n        a = Math.ceil(f / y);\n      for (h = !1, c = i.times(i), u = new n(t);;) {\n        if (o = Z(u.times(c), new n(e++ * e++), f, 1), u = r ? t.plus(o) : t.minus(o), t = Z(o.times(c), new n(e++ * e++), f, 1), void 0 !== (o = u.plus(t)).d[a]) {\n          for (s = a; o.d[s] === u.d[s] && s--;);\n          if (-1 == s) break;\n        }\n        s = u, u = t, t = o, o = s, 0;\n      }\n      return h = !0, o.d.length = a + 1, o;\n    }\n    function z(n, e) {\n      for (var i = n; --e;) i *= n;\n      return i;\n    }\n    function G(n, e) {\n      var i,\n        t = e.s < 0,\n        s = U(n, n.precision, 1),\n        o = s.times(.5);\n      if ((e = e.abs()).lte(o)) return r = t ? 4 : 1, e;\n      if ((i = e.divToInt(s)).isZero()) r = t ? 3 : 2;else {\n        if ((e = e.minus(i.times(s))).lte(o)) return r = I(i) ? t ? 2 : 3 : t ? 4 : 1, e;\n        r = I(i) ? t ? 1 : 4 : t ? 3 : 2;\n      }\n      return e.minus(s).abs();\n    }\n    function K(n, e, t, r) {\n      var s,\n        c,\n        f,\n        a,\n        h,\n        d,\n        l,\n        p,\n        g,\n        m = n.constructor,\n        w = void 0 !== t;\n      if (w ? (F(t, 1, o), void 0 === r ? r = m.rounding : F(r, 0, 8)) : (t = m.precision, r = m.rounding), n.isFinite()) {\n        for (w ? (s = 2, 16 == e ? t = 4 * t - 3 : 8 == e && (t = 3 * t - 2)) : s = e, (f = (l = R(n)).indexOf(\".\")) >= 0 && (l = l.replace(\".\", \"\"), (g = new m(1)).e = l.length - f, g.d = S(R(g), 10, s), g.e = g.d.length), c = h = (p = S(l, 10, s)).length; 0 == p[--h];) p.pop();\n        if (p[0]) {\n          if (f < 0 ? c-- : ((n = new m(n)).d = p, n.e = c, p = (n = Z(n, g, t, r, 0, s)).d, c = n.e, d = i), f = p[t], a = s / 2, d = d || void 0 !== p[t + 1], d = r < 4 ? (void 0 !== f || d) && (0 === r || r === (n.s < 0 ? 3 : 2)) : f > a || f === a && (4 === r || d || 6 === r && 1 & p[t - 1] || r === (n.s < 0 ? 8 : 7)), p.length = t, d) for (; ++p[--t] > s - 1;) p[t] = 0, t || (++c, p.unshift(1));\n          for (h = p.length; !p[h - 1]; --h);\n          for (f = 0, l = \"\"; f < h; f++) l += u.charAt(p[f]);\n          if (w) {\n            if (h > 1) if (16 == e || 8 == e) {\n              for (f = 16 == e ? 4 : 3, --h; h % f; h++) l += \"0\";\n              for (h = (p = S(l, s, e)).length; !p[h - 1]; --h);\n              for (f = 1, l = \"1.\"; f < h; f++) l += u.charAt(p[f]);\n            } else l = l.charAt(0) + \".\" + l.slice(1);\n            l = l + (c < 0 ? \"p\" : \"p+\") + c;\n          } else if (c < 0) {\n            for (; ++c;) l = \"0\" + l;\n            l = \"0.\" + l;\n          } else if (++c > h) for (c -= h; c--;) l += \"0\";else c < h && (l = l.slice(0, c) + \".\" + l.slice(c));\n        } else l = w ? \"0p+0\" : \"0\";\n        l = (16 == e ? \"0x\" : 2 == e ? \"0b\" : 8 == e ? \"0o\" : \"\") + l;\n      } else l = j(n);\n      return n.s < 0 ? \"-\" + l : l;\n    }\n    function Q(n, e) {\n      if (n.length > e) return n.length = e, !0;\n    }\n    function X(n) {\n      return new this(n).abs();\n    }\n    function Y(n) {\n      return new this(n).acos();\n    }\n    function nn(n) {\n      return new this(n).acosh();\n    }\n    function en(n, e) {\n      return new this(n).plus(e);\n    }\n    function tn(n) {\n      return new this(n).asin();\n    }\n    function rn(n) {\n      return new this(n).asinh();\n    }\n    function sn(n) {\n      return new this(n).atan();\n    }\n    function on(n) {\n      return new this(n).atanh();\n    }\n    function un(n, e) {\n      n = new this(n), e = new this(e);\n      var i,\n        t = this.precision,\n        r = this.rounding,\n        s = t + 4;\n      return n.s && e.s ? n.d || e.d ? !e.d || n.isZero() ? (i = e.s < 0 ? U(this, t, r) : new this(0)).s = n.s : !n.d || e.isZero() ? (i = U(this, s, 1).times(.5)).s = n.s : e.s < 0 ? (this.precision = s, this.rounding = 1, i = this.atan(Z(n, e, s, 1)), e = U(this, s, 1), this.precision = t, this.rounding = r, i = n.s < 0 ? i.minus(e) : i.plus(e)) : i = this.atan(Z(n, e, s, 1)) : (i = U(this, s, 1).times(e.s > 0 ? .25 : .75)).s = n.s : i = new this(NaN), i;\n    }\n    function cn(n) {\n      return new this(n).cbrt();\n    }\n    function fn(n) {\n      return P(n = new this(n), n.e + 1, 2);\n    }\n    function an(n) {\n      if (!n || \"object\" != typeof n) throw Error(d + \"Object expected\");\n      var e,\n        i,\n        t,\n        r = !0 === n.defaults,\n        u = [\"precision\", 1, o, \"rounding\", 0, 8, \"toExpNeg\", -s, 0, \"toExpPos\", 0, s, \"maxE\", 0, s, \"minE\", -s, 0, \"modulo\", 0, 9];\n      for (e = 0; e < u.length; e += 3) if (i = u[e], r && (this[i] = a[i]), void 0 !== (t = n[i])) {\n        if (!(m(t) === t && t >= u[e + 1] && t <= u[e + 2])) throw Error(l + i + \": \" + t);\n        this[i] = t;\n      }\n      if (i = \"crypto\", r && (this[i] = a[i]), void 0 !== (t = n[i])) {\n        if (!0 !== t && !1 !== t && 0 !== t && 1 !== t) throw Error(l + i + \": \" + t);\n        if (t) {\n          if (\"undefined\" == typeof crypto || !crypto || !crypto.getRandomValues && !crypto.randomBytes) throw Error(g);\n          this[i] = !0;\n        } else this[i] = !1;\n      }\n      return this;\n    }\n    function hn(n) {\n      return new this(n).cos();\n    }\n    function dn(n) {\n      return new this(n).cosh();\n    }\n    function ln(n, e) {\n      return new this(n).div(e);\n    }\n    function pn(n) {\n      return new this(n).exp();\n    }\n    function gn(n) {\n      return P(n = new this(n), n.e + 1, 3);\n    }\n    function mn() {\n      var n,\n        e,\n        i = new this(0);\n      for (h = !1, n = 0; n < arguments.length;) if ((e = new this(arguments[n++])).d) i.d && (i = i.plus(e.times(e)));else {\n        if (e.s) return h = !0, new this(1 / 0);\n        i = e;\n      }\n      return h = !0, i.sqrt();\n    }\n    function wn(n) {\n      return n instanceof e || n && \"[object Decimal]\" === n.name || !1;\n    }\n    function vn(n) {\n      return new this(n).ln();\n    }\n    function Nn(n, e) {\n      return new this(n).log(e);\n    }\n    function bn(n) {\n      return new this(n).log(2);\n    }\n    function En(n) {\n      return new this(n).log(10);\n    }\n    function xn() {\n      return H(this, arguments, \"lt\");\n    }\n    function yn() {\n      return H(this, arguments, \"gt\");\n    }\n    function Mn(n, e) {\n      return new this(n).mod(e);\n    }\n    function qn(n, e) {\n      return new this(n).mul(e);\n    }\n    function On(n, e) {\n      return new this(n).pow(e);\n    }\n    function Dn(n) {\n      var e,\n        i,\n        t,\n        r,\n        s = 0,\n        u = new this(1),\n        c = [];\n      if (void 0 === n ? n = this.precision : F(n, 1, o), t = Math.ceil(n / y), this.crypto) {\n        if (crypto.getRandomValues) for (e = crypto.getRandomValues(new Uint32Array(t)); s < t;) (r = e[s]) >= 429e7 ? e[s] = crypto.getRandomValues(new Uint32Array(1))[0] : c[s++] = r % 1e7;else {\n          if (!crypto.randomBytes) throw Error(g);\n          for (e = crypto.randomBytes(t *= 4); s < t;) (r = e[s] + (e[s + 1] << 8) + (e[s + 2] << 16) + ((127 & e[s + 3]) << 24)) >= 214e7 ? crypto.randomBytes(4).copy(e, s) : (c.push(r % 1e7), s += 4);\n          s = t / 4;\n        }\n      } else for (; s < t;) c[s++] = 1e7 * Math.random() | 0;\n      for (t = c[--s], n %= y, t && n && (r = w(10, y - n), c[s] = (t / r | 0) * r); 0 === c[s]; s--) c.pop();\n      if (s < 0) i = 0, c = [0];else {\n        for (i = -1; 0 === c[0]; i -= y) c.shift();\n        for (t = 1, r = c[0]; r >= 10; r /= 10) t++;\n        t < y && (i -= y - t);\n      }\n      return u.e = i, u.d = c, u;\n    }\n    function Fn(n) {\n      return P(n = new this(n), n.e + 1, this.rounding);\n    }\n    function An(n) {\n      return (n = new this(n)).d ? n.d[0] ? n.s : 0 * n.s : n.s || NaN;\n    }\n    function Sn(n) {\n      return new this(n).sin();\n    }\n    function Zn(n) {\n      return new this(n).sinh();\n    }\n    function Pn(n) {\n      return new this(n).sqrt();\n    }\n    function Rn(n, e) {\n      return new this(n).sub(e);\n    }\n    function Ln(n) {\n      return new this(n).tan();\n    }\n    function Tn(n) {\n      return new this(n).tanh();\n    }\n    function Un(n) {\n      return P(n = new this(n), n.e + 1, 1);\n    }\n    return (e = function n(e) {\n      var i, t, r;\n      function s(n) {\n        var e,\n          i,\n          t,\n          r = this;\n        if (!(r instanceof s)) return new s(n);\n        if (r.constructor = s, n instanceof s) return r.s = n.s, void (h ? !n.d || n.e > s.maxE ? (r.e = NaN, r.d = null) : n.e < s.minE ? (r.e = 0, r.d = [0]) : (r.e = n.e, r.d = n.d.slice()) : (r.e = n.e, r.d = n.d ? n.d.slice() : n.d));\n        if (\"number\" == (t = typeof n)) {\n          if (0 === n) return r.s = 1 / n < 0 ? -1 : 1, r.e = 0, void (r.d = [0]);\n          if (n < 0 ? (n = -n, r.s = -1) : r.s = 1, n === ~~n && n < 1e7) {\n            for (e = 0, i = n; i >= 10; i /= 10) e++;\n            return void (h ? e > s.maxE ? (r.e = NaN, r.d = null) : e < s.minE ? (r.e = 0, r.d = [0]) : (r.e = e, r.d = [n]) : (r.e = e, r.d = [n]));\n          }\n          return 0 * n != 0 ? (n || (r.s = NaN), r.e = NaN, void (r.d = null)) : $(r, n.toString());\n        }\n        if (\"string\" !== t) throw Error(l + n);\n        return 45 === (i = n.charCodeAt(0)) ? (n = n.slice(1), r.s = -1) : (43 === i && (n = n.slice(1)), r.s = 1), E.test(n) ? $(r, n) : W(r, n);\n      }\n      if (s.prototype = O, s.ROUND_UP = 0, s.ROUND_DOWN = 1, s.ROUND_CEIL = 2, s.ROUND_FLOOR = 3, s.ROUND_HALF_UP = 4, s.ROUND_HALF_DOWN = 5, s.ROUND_HALF_EVEN = 6, s.ROUND_HALF_CEIL = 7, s.ROUND_HALF_FLOOR = 8, s.EUCLID = 9, s.config = s.set = an, s.clone = n, s.isDecimal = wn, s.abs = X, s.acos = Y, s.acosh = nn, s.add = en, s.asin = tn, s.asinh = rn, s.atan = sn, s.atanh = on, s.atan2 = un, s.cbrt = cn, s.ceil = fn, s.cos = hn, s.cosh = dn, s.div = ln, s.exp = pn, s.floor = gn, s.hypot = mn, s.ln = vn, s.log = Nn, s.log10 = En, s.log2 = bn, s.max = xn, s.min = yn, s.mod = Mn, s.mul = qn, s.pow = On, s.random = Dn, s.round = Fn, s.sign = An, s.sin = Sn, s.sinh = Zn, s.sqrt = Pn, s.sub = Rn, s.tan = Ln, s.tanh = Tn, s.trunc = Un, void 0 === e && (e = {}), e && !0 !== e.defaults) for (r = [\"precision\", \"rounding\", \"toExpNeg\", \"toExpPos\", \"maxE\", \"minE\", \"modulo\", \"crypto\"], i = 0; i < r.length;) e.hasOwnProperty(t = r[i++]) || (e[t] = this[t]);\n      return s.config(e), s;\n    }(a)).default = e.Decimal = e, c = new e(c), f = new e(f), \"function\" == typeof define && define.amd ? define(function () {\n      return e;\n    }) : \"undefined\" != typeof module && module.exports ? (\"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator && (O[Symbol.for(\"nodejs.util.inspect.custom\")] = O.toString, O[Symbol.toStringTag] = \"Decimal\"), module.exports = e) : (n || (n = \"undefined\" != typeof self && self && self.self == self ? self : window), t = n.Decimal, e.noConflict = function () {\n      return n.Decimal = t, e;\n    }, n.Decimal = e), e;\n  }(this)\n  //    bigDec: require('decimal.js')\n});\nif (typeof module !== 'undefined') {\n  module.exports = nerdamer;\n}\n;","map":{"version":3,"names":["nerdamer","imports","version","_","Parser","bigInt","bigDec","set","precision","Groups","PRIMES","CUSTOM_OPERATORS","Settings","callPeekers","init_primes","exclude","suppress_errors","PARSE2NUMBER","SAFE","IMAGINARY","FUNCTION_MODULES","Math","ALLOW_CHARS","USE_MULTICHARACTER_VARS","POWER_OPERATOR","VALIDATION_REGEX","IMPLIED_MULTIPLICATION_REGEX","ALIASES","POSITIVE_MULTIPLIERS","CACHE","SILENCE_WARNINGS","PRECISION","EXPRESSION_DECP","DEFAULT_DECP","VECTOR","PARENTHESIS","SQRT","ABS","FACTORIAL","DOUBLEFACTORIAL","LONG_PI","LONG_E","PI","E","LOG","LOG10","LOG10_LATEX","MAX_EXP","SCIENTIFIC_MAX_DECIMAL_PLACES","SCIENTIFIC_IGNORE_ZERO_EXPONENTS","roots","x","y","i","j","nthpow","pow","N","P","S","EX","FN","PL","CB","CP","CONST_HASH","EXPRESSIONS","VARS","RESERVED","WARNINGS","err","msg","ErrorObj","Error","customError","name","message","undefined","error","stack","prototype","Object","create","isReserved","value","indexOf","allSame","arr","last","l","length","equals","warn","push","SHOW_WARNINGS","console","validateName","typ","regex","test","InvalidVariableNameError","scientificToDecimal","num","nsign","sign","abs","zero","parts","String","toLowerCase","split","e","pop","coeff_array","slice","Array","join","dec","isPrime","n","q","floor","sqrt","knownVariable","variable","o","isNumber","allNumeric","isFraction","isSymbol","multiplier","toDecimal","obj","Symbol","isExpression","Expression","variables","poly","vars","c","add","isNaN","group","prevgroup","previousGroup","power","symbols","firstObject","args","sort","arraySum","toNumber","sum","parse","Number","separate","symbol","expand","insert","key","sym","clone","each","isConstant","fname","fillHoles","isVector","Vector","isMatrix","Matrix","isSet","Set","isNumericSymbol","isVariableSymbol","isArray","isInt","toString","isNegative","lessThan","stringify","inBrackets","str","stringReplace","from","to","with_str","substr","customType","custom","sameSign","a","b","format","call","arguments","shift","new_str","replace","match","index","arg","range","start","end","step","keys","both","compare","sym1","sym2","scope","comparison","random","block","setFunction","params_array","body","functions","mapped_function","params","arrayMax","max","apply","arrayMin","min","arrayEqual","arr1","arr2","arrayClone","new_array","arrayAddSlices","slices","retval","delta","nroots","unwrapPARENS","toLinear","_roots","toPolarFormArray","evaluate","r","den","p","formula","t","fromArray","root","negate","map","multiply","imaginary","comboSort","combined","na","nb","decompose_fn","fn","wrt","as_obj","ax","stripVar","subtract","divide","nround","s","MAX_VALUE","round","getU","u","v","clearU","indx","hasOwnProperty","even","evenFraction","arrayUnique","item","arrayGetVariables","concat","removeDuplicates","condition","conditionType","seen","temp","reserveNames","remove","indexOrKey","result","splice","setting","f","opt","current_setting","importFunctions","arguments2Array","getCoeffs","info","coeffs","term","contains","coeff","convertToVector","vector","elements","generatePrimes","upto","last_prime","allNumbers","allConstants","isPi","isE","mix","isComposite","isLinear","expanded","DivisionByZero","ParseError","UndefinedError","OutOfFunctionDomainError","MaximumIterationsReached","NerdamerTypeError","ParityError","OperatorError","OutOfRangeError","DimensionError","ValueLimitExceededError","NerdamerValueError","SolveError","InfiniteLoopError","UnexpectedTokenError","exceptions","Math2","csc","sin","sec","cos","cot","tan","acsc","asin","asec","acos","acot","atan","erf","exp","diff","h","derivative","median","values","half","fromContinued","contd","fractions","whole","continuedFraction","absn","ni","done","epsilon","w","d","EPSILON","idx","bigpow","Frac","isInteger","nthroot","gamma","z","g","C","bigfactorial","times","bigLog","quick","k","invert","factorial","is_int","NaN","dfactorial","GCD","QGCD","gcd","LCM","factor","ifactors","ifactor","factors","updateHash","sfactor","lcprime","prime","input","lt","safety","rho","xf","cz","mod","minus","sm","boxfactor","fib","integer_part","simpson","get_value","side","dx","xi","num_integrate","tol","maxdepth","adsimp","fa","fm","fb","V0","depth","state","nanEncountered","f1","f2","sl","sr","s2","m","V1","V2","maxDepthCount","integrate","Ci","n2","log","Si","Ei","Infinity","Shi","Chi","cosh","Li","gamma_incomplete","rect","sinc","tri","A","xk","dk","dk0","d0","powb","dk_dec","gte","xn","ld","same_delta","decimal","sech","csch","sinh","coth","tanh","asinh","acosh","atanh","log10","LOG10E","trunc","ceil","text","option","useGroup","decp","asHash","wrapCondition","asDecimal","valueOf","frac","exec","negative","quotient","digits","passed","prefix","cycle","numer","denom","divmod","remainder","operator","Scientific","om","collectSymbols","txt","pg","pwg","E_TO_EXP","charAt","cv","parens","primeFactors","getExpression","expression_number","asType","expression","text_","latex","LaTeX","dimensions","first_arg","subs","buildFunction","Build","build","isInfinity","isImaginary","prec","isPolynomial","isPoly","sub","for_symbol","operation","otype","callback","eq","gt","greaterThan","lte","numerator","getNum","denominator","getDenom","hasFunction","containsFunction","toTeX","startsWith","isScientific","fromScientific","convert","exponent","removeLeadingZeroes","removeTrailingZeroes","dot_location","zeroes","leadingZeroes","wholes","copy","rounded","substring","next_two","ed","simple","Fraction","quickConversion","is_neg","isFrac","nstr","m_dc","simplify","isOne","neg","n1","narr","unshift","qcompare","absEquals","isnegative","lcm","USE_BIG","div","infinity","shell","unwrapSQRT","all","hyp","re","im","theta","realpart","imagpart","trig","getNth","isToNth","nthMultiplier","nthPower","isNth","isSquare","isCube","isSimple","powSimp","powers","mfactors","out_","in_","xt","symfunction","multivariate","exclude_x","toArray","hasFunc","fn_group","same_pow","a_is_unit_multiplier","subbed","find","needle","nargs","isMonomial","isSQRT","check_all","check_symbols","names","multiplyPower","p2","p1","setPower","retainSign","isSymbolic","isInverse","properties","isConversion","isUnit","toUnitMultiplier","keepSign","deep","distributeMultiplier","power_only","is_one","distributeExponent","cp","isImgSymbol","keyForGroup","action","existing","hash","attach","combine","contents","is_parens","fn_name","sort_fn","expand_symbol","collected","isCombination","bin","preprocessors","actions","Slice","upper","lower","Collection","append","getItems","pretty_print","collection","Token","node","node_type","column","type","OPERATOR","operators","FUNCTION","precedence","MAX_PRECEDENCE","leftAssoc","is_prefix","VARIABLE_OR_LITERAL","UNIT","KEYWORD","classes","complex","removeDen","sq","squared","asech","acsch","acoth","phi","atan2","R","I","toPower","dividedBy","plus","getQuadrant","trigh","units","postfix","overloaded","overloadAction","overloadLeftAssoc","vectorFn","brackets","id","is_open","is_close","maps_to","radians","degrees","continued_fraction","scientific","pfactor","matrix","imatrix","cbrt","expandall","determinant","size","transpose","dot","cross","vecget","vecset","vectrim","matget","matset","matgetrow","matsetrow","matgetcol","matsetcol","rationalize","IF","is_in","conjugate","polarform","rectform","union","intersection","difference","intersects","is_subset","print","findFunction","fmodules","fmodule","override","which","with_what","restore","what","extend","force_call","extended","callfunction","allowed_args","fn_settings","num_allowed_args","is_array","min_args","max_args","num_args","error_msg","numericArgs","bigConvert","operator_filter_regex","ostr","filter","RegExp","setOperator","postif","getOperator","aliasOperator","getOperators","getBrackets","prepare_expression","group1","group2","first","before","e_org","g1","g2","initConstants","CONSTANTS","peekers","pre_operator","post_operator","pre_function","post_function","tokenize","trim","col","L","lpos","tokens","scopes","target","open_brackets","has_space","SPACE","EMPTY_STRING","COMMA","MINUS","MULT","addScope","scope_type","new_scope","goUp","get_operator_str","start_at","chunkify","operator_str","_operators","ch","add_token","at","token","add_function","set_last_position","position","adjust_column_position","last_token_is_numeric","is_multiplication","bracket","pair","prev","nxt","is_operator","toRPN","output","prefixes","collapse","destination","next","previous","next_is_operator","last_on_stack","parseRPN","rpn","substitutions","pi","Q","is_comma","fromSet","ans","parent","fn_args","ret","next_is_comma","getter","il","element","rethrowErrors","forEach","Node","left","right","toHTML","indent","tab","repeat","html","tree","location","toObject","expression_string","objectify","chunkAtCommas","chunks","rem_brackets","remove_redundant_powers","next_is_array","next_is_minus","before_last","expression_or_obj","decimals","TeX","cdot","nobj","braces","expr","lb","ub","argSplit","ms","V","M","_symbol","cf","symbol1","symbol2","rows","l2","cols","retnum","retden","is_negative","img","qa","tw","nn","rem","sigfigs","asbig","original","symMinMax","numVal","a_val","b_val","SYMBOLIC_MIN_MAX","getval","aval","bval","base","log_sym","log_base","img_part","sIsConstant","toExponential","quadrant","isFinite","clean","new_den","new_num","expand_denominator","expand_functions","rank","identity","tolerance","col_index","vec1","vec2","mat","set1","set2","testSQRT","testPow","fct","getFunction","addPreprocessor","order","shift_cells","PreprocessorError","getPreprocessors","removePreprocessor","aIsSymbol","bIsSymbol","unit","Unit","aneg","bneg","inf","ap","bp","powEQ","v1","v2","aIsComposite","bIsComposite","h1","h2","PN","PNEQ","valEQ","canIterate","bothPL","bIsMatrix","eachElement","row","toFixed","bnum","bden","a_pow","a_multiplier","ONN","isSymbolP1","isSymbolP2","toEX","isEven","bm","logV","ndiv","ddiv","ps","isMatrixB","isMatrixA","isVectorA","isVectorB","raised","aIsZero","bIsZero","bIsConstant","aIsConstant","bIsInt","nre","nim","abs_b","sgn","aa","_a","_b","a1","log_a","b1","c1","neg_num","nr","tn","evenr","evenp","evennp","_result","isEX","pt","IGNORE_E","comma","percent","assign","function_assign","bool2Symbol","opts","qc","fullConversion","stripSign","nparts","cparts","d1","d2","parser","keep","space","LaTeXArray","rowTeX","m_array","v_array","formatFrac","p_array","greek","alpha","beta","zeta","eta","iota","kappa","lambda","mu","nu","omnikron","sigma","tau","upsilon","chi","psi","omega","Gamma","Delta","Epsilon","Theta","Lambda","Xi","Pi","Sigma","Phi","Psi","Omega","arccos","ker","limsup","arcsin","deg","lg","ln","Pr","sup","arctan","det","hom","lim","LN","dim","liminf","inverted","formatSubscripts","t_varray","den_map","num_map","num_c","den_c","setBrackets","container","counter","isDenom","laTex","combine_power","isBracketed","formatP","tp","merge","mn","md","vn","vd","top","bottom","glue","is_pow","bracketTypes","square","brace","angle","filterTokens","filtered","next_token","raw_tokens","parse_next","get","items","arrayPrefill","val","modulus","eql","toUnitVector","angleFrom","mod1","mod2","product","theta_val","isParallelTo","isAntiparallelTo","isPerpendicularTo","B","magnitude","tex","el","lw","rl","F","zeroMatrix","raw_values","raw","nc","toRightTriangular","isSingular","augment","rr","ki","np","kp","els","divisor","inverse_elements","new_element","fel","nel","nj","canMultiplyFromLeft","sameSize","MM","kj","toVector","newline","to_decimal","row_tex","_union","_intersection","dependencies","_rename","reformat","deps","getProperName","compileDependencies","dep_string","replacements","components","getArgsDeps","arg_array","supplements","ftext","xports","ftext_complex","cc","ft","ftext_function","bn","f_array","alias","Function","LOG_FNS","Utils","groups","PARSER","libExports","fndec","convertToLaTeX","convertFromLaTeX","add_on","getWarnings","setConstant","constant","getConstant","getCore","getEquation","reserved","asArray","clear","equation_number","keep_EXPRESSIONS_fixed","flush","expressions","asObject","asLaTeX","register","core","parent_obj","ref_obj","visible","numargs","validVarName","varname","supported","numEquations","numExpressions","setVar","getVar","clearVars","load","loader","getVars","disallowed","updateAPI","linker","replaceFunction","new_num_args","withOperator","htmlTree","addPeeker","removePeeker","BASE","LOG_BASE","MAX_INT","MAX_INT_ARR","smallToArray","LOG_MAX_INT","Integer","radix","parseValue","parseBase","BigInteger","isSmall","SmallInteger","isPrecise","arrayToSmall","compareAbs","createArray","truncate","l_a","l_b","carry","addAny","addSmall","a_l","b_l","borrow","subtractAny","subtractSmall","small","multiplyLong","a_i","b_j","multiplySmall","shiftLeft","multiplyKaratsuba","ac","bd","abcd","useKaratsuba","l1","multiplySmallAndArray","_multiplyBySmall","a_j","divMod1","divisorMostSignificantDigit","quotientDigit","divModSmall","divMod2","part","guess","xlen","highx","highy","check","reverse","divModAny","self","qSign","mSign","over","modPow","isZero","isPositive","isOdd","compareTo","notEquals","neq","greater","lesser","greaterOrEquals","geq","lesserOrEquals","leq","isDivisibleBy","isBasicPrime","millerRabinTest","nPrev","strict","bits","bitLength","logN","isProbablePrime","iterations","randBetween","modInv","newT","one","newR","lastT","lastR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","shiftRight","remQuo","bitwise","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","toJSNumber","and","or","xor","LOBMASK_I","LOBMASK_BI","roughLOB","integerLogarithm","tmp","low","high","restricted","digit","absBase","charCodeAt","parseInt","charCode","parseBaseFromArray","toBase","out","toBaseString","zeros","toJSON","parseStringValue","decimalPlace","isValid","parseNumberValue","minusOne","isInstance","module","exports","define","amd","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","O","D","absoluteValue","constructor","comparedTo","cmp","cosine","sd","J","G","cubeRoot","Z","decimalPlaces","dp","dividedToIntegerBy","divToInt","greaterThanOrEqualTo","hyperbolicCosine","hyperbolicSine","hyperbolicTangent","inverseCosine","isNeg","U","inverseHyperbolicCosine","inverseHyperbolicSine","inverseHyperbolicTangent","inverseSine","inverseTangent","isPos","lessThanOrEqualTo","logarithm","T","naturalExponential","naturalLogarithm","negated","sine","squareRoot","tangent","mul","toBinary","K","toDecimalPlaces","toDP","toFraction","toHexadecimal","toHex","toNearest","toOctal","LN10","toPrecision","toSignificantDigits","toSD","truncated","H","$","search","W","X","Y","en","rn","sn","on","un","cn","an","defaults","getRandomValues","randomBytes","hn","dn","pn","gn","wn","Nn","En","yn","Mn","qn","On","Dn","Uint32Array","Fn","An","Sn","Zn","Pn","Rn","Ln","Tn","Un","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","isDecimal","hypot","log2","default","Decimal","iterator","for","toStringTag","window","noConflict"],"sources":["C:/Users/ROG/ai-solver/node_modules/nerdamer/nerdamer.core.js"],"sourcesContent":["/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\n/* global trig, trigh, Infinity, define, arguments2Array, NaN */\r\n//externals ====================================================================\r\n/* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */\r\n//var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require(\"big-integer\");\r\n/* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\r\n//var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');\r\n\r\nvar nerdamer = (function (imports) {\r\n    \"use strict\"; \r\n\r\n//version ======================================================================\r\n    var version = '1.1.13';\r\n\r\n//inits ========================================================================\r\n    var _ = new Parser(); //nerdamer's parser\r\n\r\n    //import bigInt\r\n    var bigInt = imports.bigInt;\r\n    var bigDec = imports.bigDec;\r\n\r\n    //set the precision to js precision\r\n    bigDec.set({\r\n        precision: 250\r\n    });\r\n\r\n    var Groups = {};\r\n\r\n    //container of pregenerated primes\r\n    var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113\r\n                , 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\r\n        257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\r\n        401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\r\n        563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\r\n        709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\r\n        877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031,\r\n        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171,\r\n        1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303,\r\n        1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471,\r\n        1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607,\r\n        1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,\r\n        1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,\r\n        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083];\r\n\r\n//Settings =====================================================================\r\n    var CUSTOM_OPERATORS = {};\r\n\r\n    var Settings = {\r\n        //Enables/Disables call peekers. False means callPeekers are disabled and true means callPeekers are enabled.\r\n        callPeekers: false,\r\n\r\n        //the max number up to which to cache primes. Making this too high causes performance issues\r\n        init_primes: 1000,\r\n\r\n        exclude: [],\r\n        //If you don't care about division by zero for example then this can be set to true.\r\n        //Has some nasty side effects so choose carefully.\r\n        suppress_errors: false,\r\n        //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\r\n        //cos(9) for convenience but parse to number will always try to return a number if set to true.\r\n        PARSE2NUMBER: false,\r\n        //this flag forces the a clone to be returned when add, subtract, etc... is called\r\n        SAFE: false,\r\n        //the symbol to use for imaginary symbols\r\n        IMAGINARY: 'i',\r\n        //the modules used to link numeric function holders\r\n        FUNCTION_MODULES: [Math],\r\n        //Allow certain characters\r\n        ALLOW_CHARS: ['π'],\r\n        //Allow nerdamer to convert multi-character variables\r\n        USE_MULTICHARACTER_VARS: true,\r\n        //Allow changing of power operator\r\n        POWER_OPERATOR: '^',\r\n        //The variable validation regex\r\n        //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\r\n        VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\r\n        // The regex used to determine which characters should be included in implied multiplication\r\n        IMPLIED_MULTIPLICATION_REGEX: /([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi,\r\n        //Aliases\r\n        ALIASES: {\r\n            'π': 'pi',\r\n            '∞': 'Infinity'\r\n        },\r\n        POSITIVE_MULTIPLIERS: false,\r\n        //Cached items\r\n        CACHE: {},\r\n        //Print out warnings or not\r\n        SILENCE_WARNINGS: false,\r\n        // Precision\r\n        PRECISION: 21,\r\n        // The Expression defaults to this value for decimal places\r\n        EXPRESSION_DECP: 19,\r\n        // The text function defaults to this value for decimal places\r\n        DEFAULT_DECP: 16,\r\n        //function mappings\r\n        VECTOR: 'vector',\r\n        PARENTHESIS: 'parens',\r\n        SQRT: 'sqrt',\r\n        ABS: 'abs',\r\n        FACTORIAL: 'factorial',\r\n        DOUBLEFACTORIAL: 'dfactorial',\r\n        //reference pi and e\r\n        LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' +\r\n                '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\r\n        LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' +\r\n                '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\r\n        PI: Math.PI,\r\n        E: Math.E,\r\n        LOG: 'log',\r\n        LOG10: 'log10',\r\n        LOG10_LATEX: 'log_{10}',\r\n        MAX_EXP: 200000,\r\n        //The number of scientific place to round to\r\n        SCIENTIFIC_MAX_DECIMAL_PLACES: 14,\r\n        //True if ints should not be converted to\r\n        SCIENTIFIC_IGNORE_ZERO_EXPONENTS: true\r\n    };\r\n\r\n    (function () {\r\n        Settings.CACHE.roots = {};\r\n        var x = 40,\r\n                y = 40;\r\n        for(var i = 2; i <= x; i++) {\r\n            for(var j = 2; j <= y; j++) {\r\n                var nthpow = bigInt(i).pow(j);\r\n                Settings.CACHE.roots[nthpow + '-' + j] = i;\r\n            }\r\n        }\r\n    })();\r\n\r\n    //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group\r\n    //The groups that help with organizing during parsing. Note that for FN is still a function even\r\n    //when it's raised to a symbol, which typically results in an EX\r\n    var N = Groups.N = 1, // A number\r\n            P = Groups.P = 2, // A number with a rational power e.g. 2^(3/5).\r\n            S = Groups.S = 3, // A single variable e.g. x.\r\n            EX = Groups.EX = 4, // An exponential\r\n            FN = Groups.FN = 5, // A function\r\n            PL = Groups.PL = 6, // A symbol/expression having same name with different powers e.g. 1/x + x^2\r\n            CB = Groups.CB = 7, // A symbol/expression composed of one or more variables through multiplication e.g. x*y\r\n            CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y\r\n\r\n    var CONST_HASH = Settings.CONST_HASH = '#';\r\n\r\n    var PARENTHESIS = Settings.PARENTHESIS;\r\n\r\n    var SQRT = Settings.SQRT;\r\n\r\n    var ABS = Settings.ABS;\r\n\r\n    var FACTORIAL = Settings.FACTORIAL;\r\n\r\n    var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL;\r\n\r\n    //the storage container \"memory\" for parsed expressions\r\n    var EXPRESSIONS = [];\r\n\r\n    //variables\r\n    var VARS = {};\r\n\r\n    //the container used to store all the reserved functions\r\n    var RESERVED = [];\r\n\r\n    var WARNINGS = [];\r\n\r\n    /**\r\n     * Use this when errors are suppressible\r\n     * @param {String} msg\r\n     * @param {object} ErrorObj\r\n     */\r\n    var err = function (msg, ErrorObj) {\r\n        if(!Settings.suppress_errors) {\r\n            if(ErrorObj)\r\n                throw new ErrorObj(msg);\r\n            else\r\n                throw new Error(msg);\r\n        }\r\n    };\r\n\r\n//Utils ========================================================================\r\n    var customError = function (name) {\r\n        var E = function (message) {\r\n            this.name = name;\r\n            this.message = message !== undefined ? message : '';\r\n            var error = new Error(this.message);\r\n            error.name = this.name;\r\n            this.stack = error.stack;\r\n        }; //create an empty error\r\n        E.prototype = Object.create(Error.prototype);\r\n        return E;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if value is one of nerdamer's reserved names\r\n     * @param {String} value\r\n     * @return boolean\r\n     */\r\n    var isReserved = function (value) {\r\n        return RESERVED.indexOf(value) !== -1;\r\n    };\r\n\r\n    /**\r\n     * Checks to see that all symbols in array are the same\r\n     * @param {Symbol[]} arr\r\n     * @returns {bool}\r\n     */\r\n    var allSame = function (arr) {\r\n        var last = arr[0];\r\n        for(var i = 1, l = arr.length; i < l; i++)\r\n            if(!arr[i].equals(last))\r\n                return false;\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Used to pass warnings or low severity errors about the library\r\n     * @param msg\r\n     */\r\n    var warn = function (msg) {\r\n        WARNINGS.push(msg);\r\n        if(Settings.SHOW_WARNINGS && console && console.warn) {\r\n            console.warn(msg);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Enforces rule: \"must start with a letter or underscore and\r\n     * can have any number of underscores, letters, and numbers thereafter.\"\r\n     * @param name The name of the symbol being checked\r\n     * @param {String} typ - The type of symbols that's being validated\r\n     * @throws {Exception}  - Throws an exception on fail\r\n     */\r\n    var validateName = function (name, typ) {\r\n        typ = typ || 'variable';\r\n        if(Settings.ALLOW_CHARS.indexOf(name) !== -1)\r\n            return;\r\n        var regex = Settings.VALIDATION_REGEX;\r\n        if(!(regex.test(name))) {\r\n            throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Convert number from scientific format to decimal format\r\n     * @param {Number} num\r\n     */\r\n    var scientificToDecimal = function (num) {\r\n        var nsign = Math.sign(num);\r\n        //remove the sign\r\n        num = Math.abs(num);\r\n        //if the number is in scientific notation remove it\r\n        if(/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\r\n            var zero = '0',\r\n                    parts = String(num).toLowerCase().split('e'), //split into coeff and exponent\r\n                    e = parts.pop(), //store the exponential part\r\n                    l = Math.abs(e), //get the number of zeros\r\n                    sign = e / l,\r\n                    coeff_array = parts[0].split('.');\r\n            if(sign === -1) {\r\n                l = l - coeff_array[0].length;\r\n                if(l < 0) {\r\n                    num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');\r\n                }\r\n                else {\r\n                    num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');\r\n                }\r\n            }\r\n            else {\r\n                var dec = coeff_array[1];\r\n                if(dec)\r\n                    l = l - dec.length;\r\n                if(l < 0) {\r\n                    num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);\r\n                }\r\n                else {\r\n                    num = coeff_array.join('') + new Array(l + 1).join(zero);\r\n                }\r\n            }\r\n        }\r\n\r\n        return nsign < 0 ? '-' + num : num;\r\n    };\r\n    /**\r\n     * Checks if number is a prime number\r\n     * @param {Number} n - the number to be checked\r\n     */\r\n    var isPrime = function (n) {\r\n        var q = Math.floor(Math.sqrt(n));\r\n        for(var i = 2; i <= q; i++) {\r\n            if(n % i === 0)\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Generates an object with known variable value for evaluation\r\n     * @param {String} variable\r\n     * @param {any} value Any stringifyable object\r\n     * @returns {Object} \r\n     */\r\n    var knownVariable = function (variable, value) {\r\n        var o = {};\r\n        o[variable] = value;\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Checks if n is a number\r\n     * @param {any} n\r\n     */\r\n    var isNumber = function (n) {\r\n        return /^\\d+\\.?\\d*$/.test(n);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if an array contains only numeric values\r\n     * @param {Array} arr\r\n     */\r\n    var allNumeric = function (arr) {\r\n        for(var i = 0; i < arr.length; i++)\r\n            if(!isNumber(arr[i]))\r\n                return false;\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks to see if a number or Symbol is a fraction\r\n     * @param {Number|Symbol} num\r\n     * @returns {boolean}\r\n     */\r\n    var isFraction = function (num) {\r\n        if(isSymbol(num))\r\n            return isFraction(num.multiplier.toDecimal());\r\n        return (num % 1 !== 0);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is a Symbol\r\n     * @param {Object} obj\r\n     */\r\n    var isSymbol = function (obj) {\r\n        return (obj instanceof Symbol);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is an Expression\r\n     * @param {Object} obj\r\n     */\r\n    var isExpression = function (obj) {\r\n        return (obj instanceof Expression);\r\n    };\r\n\r\n    /**\r\n     * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\r\n     * names are then returned in alphabetical order.\r\n     * @param {Symbol} obj\r\n     * @param {Boolean} poly\r\n     * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\r\n     * automatically. In the future this will be a Collector object.\r\n     * @returns {String[]} - An array containing variable names\r\n     */\r\n    var variables = function (obj, poly, vars) {\r\n        vars = vars || {\r\n            c: [],\r\n            add: function (value) {\r\n                if(this.c.indexOf(value) === -1 && isNaN(value))\r\n                    this.c.push(value);\r\n            }\r\n        };\r\n\r\n        if(isSymbol(obj)) {\r\n            var group = obj.group,\r\n                    prevgroup = obj.previousGroup;\r\n            if(group === EX)\r\n                variables(obj.power, poly, vars);\r\n\r\n            if(group === CP || group === CB || prevgroup === CP || prevgroup === CB) {\r\n                for(var x in obj.symbols) {\r\n                    variables(obj.symbols[x], poly, vars);\r\n                }\r\n            }\r\n            else if(group === S || prevgroup === S) {\r\n                //very crude needs fixing. TODO\r\n                if(!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY))\r\n                    vars.add(obj.value);\r\n            }\r\n            else if(group === PL || prevgroup === PL) {\r\n                variables(firstObject(obj.symbols), poly, vars);\r\n            }\r\n            else if(group === EX) {\r\n                if(!isNaN(obj.value))\r\n                    vars.add(obj.value);\r\n                variables(obj.power, poly, vars);\r\n            }\r\n            else if(group === FN && !poly) {\r\n                for(var i = 0; i < obj.args.length; i++) {\r\n                    variables(obj.args[i], poly, vars);\r\n                }\r\n            }\r\n        }\r\n\r\n        return vars.c.sort();\r\n    };\r\n\r\n    /**\r\n     * Returns the sum of an array\r\n     * @param {Array} arr\r\n     * @param {boolean} toNumber\r\n     * @returns {Symbol}\r\n     */\r\n    var arraySum = function (arr, toNumber) {\r\n        var sum = new Symbol(0);\r\n        for(var i = 0; i < arr.length; i++) {\r\n            var x = arr[i];\r\n            // Convert to symbol if not\r\n            sum = _.add(sum, !isSymbol(x) ? _.parse(x) : x);\r\n        }\r\n\r\n        return toNumber ? Number(sum) : sum;\r\n    };\r\n\r\n    /**\r\n     * Separates out the variables into terms of variabls.\r\n     * e.g. x+y+x*y+sqrt(2)+pi returns\r\n     * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\r\n     * @param {type} symbol\r\n     * @param {type} o\r\n     * @returns {undefined}\r\n     * @throws {Error} for expontentials\r\n     */\r\n    var separate = function (symbol, o) {\r\n        symbol = _.expand(symbol);\r\n        o = o || {};\r\n        var insert = function (key, sym) {\r\n            if(!o[key])\r\n                o[key] = new Symbol(0);\r\n            o[key] = _.add(o[key], sym.clone());\r\n        };\r\n        symbol.each(function (x) {\r\n            if(x.isConstant('all')) {\r\n                insert('constants', x);\r\n            }\r\n            else if(x.group === S) {\r\n                insert(x.value, x);\r\n            }\r\n            else if(x.group === FN && (x.fname === ABS || x.fname === '')) {\r\n                separate(x.args[0]);\r\n            }\r\n            else if(x.group === EX || x.group === FN) {\r\n                throw new Error('Unable to separate. Term cannot be a function!');\r\n            }\r\n            else {\r\n                insert(variables(x).join(' '), x);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Fills holes in an array with zero symbol or generates one with n zeroes\r\n     * @param {Array} arr\r\n     * @param {Number} n\r\n     */\r\n    var fillHoles = function (arr, n) {\r\n        n = n || arr.length;\r\n        for(var i = 0; i < n; i++) {\r\n            var sym = arr[i];\r\n            if(!sym)\r\n                arr[i] = new Symbol(0);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Checks to see if the object provided is a Vector\r\n     * @param {Object} obj\r\n     */\r\n    var isVector = function (obj) {\r\n        return (obj instanceof Vector);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is a Matrix\r\n     * @param {Object} obj\r\n     */\r\n    var isMatrix = function (obj) {\r\n        return (obj instanceof Matrix);\r\n    };\r\n\r\n    var isSet = function (obj) {\r\n        return (obj instanceof Set);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a symbol is in group N\r\n     * @param {Symbol} symbol\r\n     */\r\n    var isNumericSymbol = function (symbol) {\r\n        return symbol.group === N || symbol.group === P;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a symbol is a variable with no multiplier nor power\r\n     * @param {Symbol} symbol\r\n     */\r\n    var isVariableSymbol = function (symbol) {\r\n        return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is an Array\r\n     * @param {Object} arr\r\n     */\r\n    var isArray = function (arr) {\r\n        return Array.isArray(arr);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a number is an integer\r\n     * @param {Number} num\r\n     */\r\n    var isInt = function (num) {\r\n        return /^[-+]?\\d+e?\\+?\\d*$/gim.test(num.toString());\r\n    };\r\n\r\n    /**\r\n     * @param {Number|Symbol} obj\r\n     * @returns {boolean}\r\n     */\r\n    var isNegative = function (obj) {\r\n        if(isSymbol(obj)) {\r\n            obj = obj.multiplier;\r\n        }\r\n        return obj.lessThan(0);\r\n    };\r\n    /**\r\n     * Safely stringify object\r\n     * @param o\r\n     */\r\n    var stringify = function (o) {\r\n        if(!o)\r\n            return o;\r\n        return String(o);\r\n    };\r\n\r\n    /**\r\n     * @param {String} str\r\n     * @returns {String} - returns a formatted string surrounded by brackets\r\n     */\r\n    var inBrackets = function (str) {\r\n        return '(' + str + ')';\r\n    };\r\n\r\n    /**\r\n     * A helper function to replace parts of string\r\n     * @param {String} str - The original string\r\n     * @param {Integer} from - The starting index\r\n     * @param {Integer} to - The ending index\r\n     * @param {String} with_str - The replacement string\r\n     * @returns {String} - A formatted string\r\n     */\r\n    var stringReplace = function (str, from, to, with_str) {\r\n        return str.substr(0, from) + with_str + str.substr(to, str.length);\r\n    };\r\n\r\n    /**\r\n     * the Parser uses this to check if it's allowed to convert the obj to type Symbol\r\n     * @param {Object} obj\r\n     * @returns {boolean}\r\n     */\r\n    var customType = function (obj) {\r\n        return obj !== undefined && obj.custom;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if numbers are both negative or are both positive\r\n     * @param {Number} a\r\n     * @param {Number} b\r\n     * @returns {boolean}\r\n     */\r\n    var sameSign = function (a, b) {\r\n        return (a < 0) === (b < 0);\r\n    };\r\n\r\n    /**\r\n     * A helper function to replace multiple occurences in a string. Takes multiple arguments\r\n     * @example format('{0} nice, {0} sweet', 'something')\r\n     * //returns 'something nice, something sweet'\r\n     */\r\n    var format = function () {\r\n        var args = [].slice.call(arguments),\r\n                str = args.shift();\r\n        var new_str = str.replace(/{(\\d+)}/g, function (match, index) {\r\n            var arg = args[index];\r\n            return typeof arg === 'function' ? arg() : arg;\r\n        });\r\n\r\n        return new_str;\r\n    };\r\n\r\n    /**\r\n     * Generates an array with values within a range. Multiplies by a step if provided\r\n     * @param {Number} start\r\n     * @param {Number} end\r\n     * @param {Number} step\r\n     */\r\n    var range = function (start, end, step) {\r\n        var arr = [];\r\n        step = step || 1;\r\n        for(var i = start; i <= end; i++)\r\n            arr.push(i * step);\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     * Returns an array of all the keys in an array\r\n     * @param {Object} obj\r\n     * @returns {Array}\r\n     */\r\n    var keys = Object.keys;\r\n\r\n    /**\r\n     * Returns the first encountered item in an object. Items do not have a fixed order in objects\r\n     * so only use if you need any first random or if there's only one item in the object\r\n     * @param {Object} obj\r\n     * @param {String} key Return this key as first object\r\n     * @param {Boolean} both\r\n     * @returns {*}\r\n     */\r\n    var firstObject = function (obj, key, both) {\r\n        for(var x in obj)\r\n            break;\r\n        if(key)\r\n            return x;\r\n        if(both)\r\n            return {\r\n                key: x,\r\n                obj: obj[x]\r\n            };\r\n        return obj[x];\r\n    };\r\n\r\n    /**\r\n     * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\r\n     * @param {Symbol} sym1\r\n     * @param {Symbol} sym2\r\n     * @param {String[]} vars - an optional array of variables to use\r\n     * @returns {bool}\r\n     */\r\n    var compare = function (sym1, sym2, vars) {\r\n        var n = 5; //a random number between 1 and 5 is good enough\r\n        var scope = {}; // scope object with random numbers generated using vars\r\n        var comparison;\r\n        for(var i = 0; i < vars.length; i++)\r\n            scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);\r\n        block('PARSE2NUMBER', function () {\r\n            comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));\r\n        });\r\n        return comparison;\r\n    };\r\n\r\n    /**\r\n     * Is used to set a user defined function using the function assign operator\r\n     * @param {String} name\r\n     * @param {String[]} params_array\r\n     * @param {String} body\r\n     * @returns {Boolean}\r\n     */\r\n    var setFunction = function (name, params_array, body) {\r\n        validateName(name);\r\n        if(!isReserved(name)) {\r\n            params_array = params_array || variables(_.parse(body));\r\n            // The function gets set to PARSER.mapped function which is just\r\n            // a generic function call.\r\n            _.functions[name] = [_.mapped_function, params_array.length, {\r\n                    name: name,\r\n                    params: params_array,\r\n                    body: body\r\n                }];\r\n\r\n            return body;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Returns the minimum number in an array\r\n     * @param {Array} arr\r\n     * @returns {Number}\r\n     */\r\n    var arrayMax = function (arr) {\r\n        return Math.max.apply(undefined, arr);\r\n    };\r\n\r\n    /**\r\n     * Returns the maximum number in an array\r\n     * @param {Array} arr\r\n     * @returns {Number}\r\n     */\r\n    var arrayMin = function (arr) {\r\n        return Math.min.apply(undefined, arr);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if two arrays are equal\r\n     * @param {Array} arr1 \r\n     * @param {Array} arr2 \r\n     */\r\n    var arrayEqual = function (arr1, arr2) {\r\n        arr1.sort();\r\n        arr2.sort();\r\n\r\n        // The must be of the same length\r\n        if(arr1.length === arr2.length) {\r\n            for(var i = 0; i < arr1.length; i++) {\r\n                // If any two items don't match we're done\r\n                if(arr1[i] !== arr2[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            // Otherwise they're equal\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Clones array with clonable items\r\n     * @param {Array} arr\r\n     * @returns {Array}\r\n     */\r\n    var arrayClone = function (arr) {\r\n        var new_array = [], l = arr.length;\r\n        for(var i = 0; i < l; i++)\r\n            new_array[i] = arr[i].clone();\r\n        return new_array;\r\n    };\r\n\r\n    /**\r\n     * Fills numbers between array values\r\n     * @param {Numbers[]} arr\r\n     * @param {Integer} slices\r\n     */\r\n    var arrayAddSlices = function (arr, slices) {\r\n        slices = slices || 20;\r\n        var retval = [];\r\n        var c, delta, e;\r\n        retval.push(arr[0]); //push the beginning\r\n        for(var i = 0; i < arr.length - 1; i++) {\r\n            c = arr[i];\r\n            delta = arr[i + 1] - c; //get the difference\r\n            e = delta / slices; //chop it up in the desired number of slices\r\n            for(var j = 0; j < slices; j++) {\r\n                c += e; //add the mesh to the last slice\r\n                retval.push(c);\r\n            }\r\n        }\r\n\r\n        return retval;\r\n    };\r\n\r\n    /**\r\n     * Gets nth roots of a number\r\n     * @param {Symbol} symbol\r\n     * @returns {Vector}\r\n     */\r\n    var nroots = function (symbol) {\r\n        var a, b;\r\n\r\n        if(symbol.group === FN && symbol.fname === '') {\r\n            a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\r\n            b = _.parse(symbol.power);\r\n        }\r\n        else if(symbol.group === P) {\r\n            a = _.parse(symbol.value);\r\n            b = _.parse(symbol.power);\r\n        }\r\n\r\n        if(a && b && (a.group === N) && b.group === N && a.multiplier.isNegative()) {\r\n            var _roots = [];\r\n\r\n            var parts = Symbol.toPolarFormArray(evaluate(symbol));\r\n            var r = parts[0];\r\n\r\n            //var r = _.parse(a).abs().toString();\r\n\r\n            //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\r\n            var x = _.arg(a);\r\n            var n = b.multiplier.den.toString();\r\n            var p = b.multiplier.num.toString();\r\n\r\n            var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\r\n\r\n            for(var i = 0; i < n; i++) {\r\n                var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\r\n                _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\r\n            }\r\n            return Vector.fromArray(_roots);\r\n        }\r\n        else if(symbol.isConstant(true, true)) {\r\n            var sign = symbol.sign();\r\n            var x = evaluate(symbol.abs());\r\n            var root = _.sqrt(x);\r\n\r\n            var _roots = [root.clone(), root.negate()];\r\n\r\n            if(sign < 0)\r\n                _roots = _roots.map(function (x) {\r\n                    return _.multiply(x, Symbol.imaginary());\r\n                });\r\n\r\n        }\r\n        else {\r\n            _roots = [_.parse(symbol)];\r\n        }\r\n\r\n        return Vector.fromArray(_roots);\r\n    };\r\n\r\n    /**\r\n     * Sorts and array given 2 parameters\r\n     * @param {String} a\r\n     * @param {String} b\r\n     */\r\n    var comboSort = function (a, b) {\r\n        var l = a.length,\r\n                combined = []; //the linker\r\n        for(var i = 0; i < a.length; i++) {\r\n            combined.push([a[i], b[i]]); //create the map\r\n        }\r\n\r\n        combined.sort(function (x, y) {\r\n            return x[0] - y[0];\r\n        });\r\n\r\n        var na = [], nb = [];\r\n\r\n        for(i = 0; i < l; i++) {\r\n            na.push(combined[i][0]);\r\n            nb.push(combined[i][1]);\r\n        }\r\n\r\n        return [na, nb];\r\n    };\r\n    /**\r\n     * TODO: Pick a more descriptive name and better description\r\n     * Breaks a function down into it's parts wrt to a variable, mainly coefficients\r\n     * Example a*x^2+b wrt x\r\n     * @param {Symbol} fn\r\n     * @param {String} wrt\r\n     * @param {bool} as_obj\r\n     */\r\n    var decompose_fn = function (fn, wrt, as_obj) {\r\n        wrt = String(wrt); //convert to string\r\n        var ax, a, x, b;\r\n        if(fn.group === CP) {\r\n            var t = _.expand(fn.clone()).stripVar(wrt);\r\n            ax = _.subtract(fn.clone(), t.clone());\r\n            b = t;\r\n        }\r\n        else\r\n            ax = fn.clone();\r\n        a = ax.stripVar(wrt);\r\n        x = _.divide(ax.clone(), a.clone());\r\n        b = b || new Symbol(0);\r\n        if(as_obj)\r\n            return {\r\n                a: a,\r\n                x: x,\r\n                ax: ax,\r\n                b: b\r\n            };\r\n        return [a, x, ax, b];\r\n    };\r\n    /**\r\n     * Rounds a number up to x decimal places\r\n     * @param {Number} x\r\n     * @param {Number} s\r\n     */\r\n    var nround = function (x, s) {\r\n        if(isInt(x)) {\r\n            if(x >= Number.MAX_VALUE)\r\n                return x.toString();\r\n            return Number(x);\r\n        }\r\n\r\n        s = typeof s === 'undefined' ? 14 : s;\r\n        return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);\r\n    };\r\n\r\n    /**\r\n     * Is used for u-substitution. Gets a suitable u for substitution. If for\r\n     * instance a is used in the symbol then it keeps going down the line until\r\n     * one is found that's not in use. If all letters are taken then it\r\n     * starts appending numbers.\r\n     * IMPORTANT! It assumes that the substitution will be undone\r\n     * beore the user gets to interact with the object again.\r\n     * @param {Symbol} symbol\r\n     */\r\n    var getU = function (symbol) {\r\n        //start with u\r\n        var u = 'u', //start with u\r\n                v = u, //init with u\r\n                c = 0, //postfix number\r\n                vars = variables(symbol);\r\n        //make sure this variable isn't reserved and isn't in the variable list\r\n        while(!(RESERVED.indexOf(v) === - 1 && vars.indexOf(v) === - 1))\r\n            v = u + c++;\r\n        //get an empty slot. It seems easier to just push but the\r\n        //problem is that we may have some which are created by clearU\r\n        for(var i = 0, l = RESERVED.length; i <= l; i++)\r\n            //reserved cannot equals false or 0 so we can safely check for a falsy type\r\n            if(!RESERVED[i]) {\r\n                RESERVED[i] = v; //reserve the variable\r\n                break;\r\n            }\r\n        return v;\r\n    };\r\n\r\n    /**\r\n     * Clears the u variable so it's no longer reserved\r\n     * @param {String} u\r\n     */\r\n    var clearU = function (u) {\r\n        var indx = RESERVED.indexOf(u);\r\n        if(indx !== -1)\r\n            RESERVED[indx] = undefined;\r\n    };\r\n\r\n    /**\r\n     * Loops through each item in object and calls function with item as param\r\n     * @param {Object|Array} obj\r\n     * @param {Function} fn\r\n     */\r\n    var each = function (obj, fn) {\r\n        if(isArray(obj)) {\r\n            var l = obj.length;\r\n            for(var i = 0; i < l; i++)\r\n                fn.call(obj, i);\r\n        }\r\n        else {\r\n            for(var x in obj)\r\n                if(obj.hasOwnProperty(x))\r\n                    fn.call(obj, x);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a number is an even number\r\n     * @param {Number} num\r\n     * @returns {boolean}\r\n     */\r\n    var even = function (num) {\r\n        return num % 2 === 0;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a fraction is divisible by 2\r\n     * @param {Number} num\r\n     * @returns {boolean}\r\n     */\r\n    var evenFraction = function (num) {\r\n        return 1 / (num % 1) % 2 === 0;\r\n    };\r\n\r\n    /**\r\n     * Strips duplicates out of an array\r\n     * @param {Array} arr\r\n     */\r\n    var arrayUnique = function (arr) {\r\n        var l = arr.length, a = [];\r\n        for(var i = 0; i < l; i++) {\r\n            var item = arr[i];\r\n            if(a.indexOf(item) === -1)\r\n                a.push(item);\r\n        }\r\n        return a;\r\n    };\r\n\r\n    /**\r\n     * Gets all the variables in an array of Symbols\r\n     * @param {Symbol[]} arr \r\n     */\r\n    var arrayGetVariables = function (arr) {\r\n        var vars = variables(arr[0], null, null, true);\r\n\r\n        //get all variables\r\n        for(var i = 1, l = arr.length; i < l; i++)\r\n            vars = vars.concat(variables(arr[i]));\r\n        //remove duplicates\r\n        vars = arrayUnique(vars).sort();\r\n\r\n        //done\r\n        return vars;\r\n    };\r\n\r\n    /**\r\n     * Removes duplicates from an array. Returns a new array\r\n     * @param {Array} arr\r\n     * @param {Function} condition\r\n     */\r\n    var removeDuplicates = function (arr, condition) {\r\n        var conditionType = typeof condition;\r\n\r\n        if(conditionType !== 'function' || conditionType === 'undefined') {\r\n            condition = function (a, b) {\r\n                return a === b;\r\n            };\r\n        }\r\n\r\n        var seen = [];\r\n\r\n        while(arr.length) {\r\n            var a = arr[0];\r\n            //only one element left so we're done\r\n            if(arr.length === 1) {\r\n                seen.push(a);\r\n                break;\r\n            }\r\n            var temp = [];\r\n            seen.push(a); //we already scanned these\r\n            for(var i = 1; i < arr.length; i++) {\r\n                var b = arr[i];\r\n                //if the number is outside the specified tolerance\r\n                if(!condition(a, b))\r\n                    temp.push(b);\r\n            }\r\n            //start over with the remainder\r\n            arr = temp;\r\n        }\r\n\r\n        return seen;\r\n    };\r\n\r\n    /**\r\n     * Reserves the names in an object so they cannot be used as function names\r\n     * @param {Object} obj\r\n     */\r\n    var reserveNames = function (obj) {\r\n        var add = function (item) {\r\n            if(RESERVED.indexOf(item) === -1)\r\n                RESERVED.push(item);\r\n        };\r\n\r\n        if(typeof obj === 'string')\r\n            add(obj);\r\n        else {\r\n            each(obj, function (x) {\r\n                add(x);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Removes an item from either an array or an object. If the object is an array, the index must be\r\n     * specified after the array. If it's an object then the key must be specified\r\n     * @param {Object|Array} obj\r\n     * @param {Integer} indexOrKey\r\n     */\r\n    var remove = function (obj, indexOrKey) {\r\n        var result;\r\n        if(isArray(obj)) {\r\n            result = obj.splice(indexOrKey, 1)[0];\r\n        }\r\n        else {\r\n            result = obj[indexOrKey];\r\n            delete obj[indexOrKey];\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a temporary block in which one of the global settings is temporarily modified while\r\n     * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\r\n     * answer for a period you would set PARSE2NUMBER to true in the block.\r\n     * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\r\n     * @param {String} setting - The setting being accessed\r\n     * @param {Function} f\r\n     * @param {boolean} opt - The value of the setting in the block\r\n     * @param {String} obj - The obj of interest. Usually a Symbol but could be any object\r\n     */\r\n    var block = function (setting, f, opt, obj) {\r\n        var current_setting = Settings[setting];\r\n        Settings[setting] = opt === undefined ? true : !!opt;\r\n        var retval = f.call(obj);\r\n        Settings[setting] = current_setting;\r\n        return retval;\r\n    };\r\n\r\n    /**\r\n     * provide a mechanism for accessing functions directly. Not yet complete!!!\r\n     * Some functions will return undefined. This can maybe just remove the\r\n     * function object at some point when all functions are eventually\r\n     * housed in the global function object. Returns ALL parser available\r\n     * functions. Parser.functions may not contain all functions\r\n     */\r\n    var importFunctions = function () {\r\n        var o = {};\r\n        for(var x in _.functions)\r\n            o[x] = _.functions[x][0];\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\r\n     * @param {Array|object} obj\r\n     */\r\n    var arguments2Array = function (obj) {\r\n        return [].slice.call(obj);\r\n    };\r\n\r\n    /**\r\n     * Returns the coefficients of a symbol given a variable. Given ax^2+b^x+c, it divides\r\n     * each nth term by x^n.\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} wrt\r\n     */\r\n    var getCoeffs = function (symbol, wrt, info) {\r\n        var coeffs = [];\r\n        //we loop through the symbols and stick them in their respective\r\n        //containers e.g. y*x^2 goes to index 2\r\n        symbol.each(function (term) {\r\n            if(term.contains(wrt)) {\r\n                //we want only the coefficient which in this case will be everything but the variable\r\n                //e.g. a*b*x -> a*b if the variable to solve for is x\r\n                var coeff = term.stripVar(wrt),\r\n                        x = _.divide(term.clone(), coeff.clone()),\r\n                        p = x.power.toDecimal();\r\n            }\r\n            else {\r\n                coeff = term;\r\n                p = 0;\r\n            }\r\n            var e = coeffs[p];\r\n            //if it exists just add it to it\r\n            coeffs[p] = e ? _.add(e, coeff) : coeff;\r\n\r\n        }, true);\r\n\r\n        for(var i = 0; i < coeffs.length; i++)\r\n            if(!coeffs[i])\r\n                coeffs[i] = new Symbol(0);\r\n        //fill the holes\r\n        return coeffs;\r\n    };\r\n\r\n    /**\r\n     * As the name states. It forces evaluation of the expression\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} o\r\n     */\r\n    var evaluate = function (symbol, o) {\r\n        return block('PARSE2NUMBER', function () {\r\n            return _.parse(symbol, o);\r\n        }, true);\r\n    };\r\n\r\n    /**\r\n     * Converts an array to a vector. Consider moving this to Vector.fromArray\r\n     * @param {String[]|String|Symbol|Number|Number[]} x\r\n     */\r\n    var convertToVector = function (x) {\r\n        if(isArray(x)) {\r\n            var vector = new Vector([]);\r\n            for(var i = 0; i < x.length; i++)\r\n                vector.elements.push(convertToVector(x[i]));\r\n            return vector;\r\n        }\r\n        //Ensure that a nerdamer ready object is returned\r\n        if(!isSymbol(x))\r\n            return _.parse(x);\r\n        return x;\r\n    };\r\n\r\n    /**\r\n     * Generates prime numbers up to a specified number\r\n     * @param {Number} upto\r\n     */\r\n    var generatePrimes = function (upto) {\r\n        //get the last prime in the array\r\n        var last_prime = PRIMES[PRIMES.length - 1] || 2;\r\n        //no need to check if we've already encountered the number. Just check the cache.\r\n        for(var i = last_prime; i < upto; i++) {\r\n            if(isPrime(i))\r\n                PRIMES.push(i);\r\n        }\r\n    };\r\n    /**\r\n     * Checks to see if all arguments are numbers\r\n     * @param {object} args\r\n     */\r\n    var allNumbers = function (args) {\r\n        for(var i = 0; i < args.length; i++)\r\n            if(args[i].group !== N)\r\n                return false;\r\n        return true;\r\n    };\r\n    /*\r\n     * Checks if all arguments aren't just all number but if they\r\n     * are constants as well e.g. pi, e.\r\n     * @param {object} args\r\n     */\r\n    var allConstants = function (args) {\r\n        for(var i = 0; i < args.length; i++) {\r\n            if(args[i].isPi() || args[i].isE())\r\n                continue;\r\n            if(!args[i].isConstant(true))\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Used to multiply two expression in expanded form\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     */\r\n    var mix = function (a, b, opt) {\r\n        // Flip them if b is a CP or PL and a is not\r\n        if(b.isComposite() && !a.isComposite() || b.isLinear() && !a.isLinear()) {\r\n            [a, b] = [b, a];\r\n        }\r\n        // A temporary variable to hold the expanded terms\r\n        var t = new Symbol(0);\r\n        if(a.isLinear()) {\r\n            a.each(function (x) {\r\n                // If b is not a PL or a CP then simply multiply it\r\n                if(!b.isComposite()) {\r\n                    var term = _.multiply(_.parse(x), _.parse(b));\r\n                    t = _.add(t, _.expand(term, opt));\r\n                }\r\n                // Otherwise multiply out each term.\r\n                else if(b.isLinear()) {\r\n                    b.each(function (y) {\r\n                        var term = _.multiply(_.parse(x), _.parse(y));\r\n                        var expanded = _.expand(_.parse(term), opt);\r\n                        t = _.add(t, expanded);\r\n                    }, true);\r\n                }\r\n                else {\r\n                    t = _.add(t, _.multiply(x, _.parse(b)));\r\n                }\r\n            }, true);\r\n        }\r\n        else {\r\n            // Just multiply them together\r\n            t = _.multiply(a, b);\r\n        }\r\n\r\n        // The expanded function is now t\r\n        return t;\r\n    };\r\n\r\n//Exceptions ===================================================================\r\n    //Is thrown for division by zero\r\n    var DivisionByZero = customError('DivisionByZero');\r\n    // Is throw if an error occured during parsing\r\n    var ParseError = customError('ParseError');\r\n    // Is thrown if the expression results in undefined\r\n    var UndefinedError = customError('UndefinedError');\r\n    // Is throw input is out of the function domain\r\n    var OutOfFunctionDomainError = customError('OutOfFunctionDomainError');\r\n    // Is throw if a function exceeds x amount of iterations\r\n    var MaximumIterationsReached = customError('MaximumIterationsReached');\r\n    // Is thrown if the parser receives an incorrect type\r\n    var NerdamerTypeError = customError('NerdamerTypeError');\r\n    // Is thrown if bracket parity is not correct\r\n    var ParityError = customError('ParityError');\r\n    // Is thrown if an unexpectd or incorrect operator is encountered\r\n    var OperatorError = customError('OperatorError');\r\n    // Is thrown if an index is out of range.\r\n    var OutOfRangeError = customError('OutOfRangeError');\r\n    // Is thrown if dimensions are incorrect. Mostly for matrices\r\n    var DimensionError = customError('DimensionError');\r\n    // Is thrown if variable name violates naming rule\r\n    var InvalidVariableNameError = customError('InvalidVariableNameError');\r\n    // Is thrown if the limits of the library are exceeded for a function\r\n    // This can be that the function become unstable passed a value\r\n    var ValueLimitExceededError = customError('ValueLimitExceededError');\r\n    // Is throw if the value is an incorrect LH or RH value\r\n    var NerdamerValueError = customError('NerdamerValueError');\r\n    // Is thrown if the value is an incorrect LH or RH value\r\n    var SolveError = customError('SolveError');\r\n    // Is thrown for an infinite loop\r\n    var InfiniteLoopError = customError('InfiniteLoopError');\r\n    // Is thrown if an operator is found when there shouldn't be one\r\n    var UnexpectedTokenError = customError('UnexpectedTokenError');\r\n\r\n    var exceptions = {\r\n        DivisionByZero: DivisionByZero,\r\n        ParseError: ParseError,\r\n        OutOfFunctionDomainError: OutOfFunctionDomainError,\r\n        UndefinedError: UndefinedError,\r\n        MaximumIterationsReached: MaximumIterationsReached,\r\n        NerdamerTypeError: NerdamerTypeError,\r\n        ParityError: ParityError,\r\n        OperatorError: OperatorError,\r\n        OutOfRangeError: OutOfRangeError,\r\n        DimensionError: DimensionError,\r\n        InvalidVariableNameError: InvalidVariableNameError,\r\n        ValueLimitExceededError: ValueLimitExceededError,\r\n        NerdamerValueError: NerdamerValueError,\r\n        SolveError: SolveError,\r\n        InfiniteLoopError: InfiniteLoopError,\r\n        UnexpectedTokenError: UnexpectedTokenError\r\n    };\r\n//Math2 ========================================================================\r\n    //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.\r\n    //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the\r\n    //functions within are pretty self-explanatory.\r\n    //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.\r\n    var Math2 = {\r\n        csc: function (x) {\r\n            return 1 / Math.sin(x);\r\n        },\r\n        sec: function (x) {\r\n            return 1 / Math.cos(x);\r\n        },\r\n        cot: function (x) {\r\n            return 1 / Math.tan(x);\r\n        },\r\n        acsc: function (x) {\r\n            return Math.asin(1 / x);\r\n        },\r\n        asec: function (x) {\r\n            return Math.acos(1 / x);\r\n        },\r\n        acot: function (x) {\r\n            return (Math.PI / 2) - Math.atan(x);\r\n        },\r\n        // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8\r\n        erf: function (x) {\r\n            var t = 1 / (1 + 0.5 * Math.abs(x));\r\n            var result = 1 - t * Math.exp(-x * x - 1.26551223 +\r\n                    t * (1.00002368 +\r\n                            t * (0.37409196 +\r\n                                    t * (0.09678418 +\r\n                                            t * (-0.18628806 +\r\n                                                    t * (0.27886807 +\r\n                                                            t * (-1.13520398 +\r\n                                                                    t * (1.48851587 +\r\n                                                                            t * (-0.82215223 +\r\n                                                                                    t * (0.17087277)))))))))\r\n                    );\r\n            return x >= 0 ? result : -result;\r\n        },\r\n        diff: function (f) {\r\n            var h = 0.001;\r\n\r\n            var derivative = function (x) {\r\n                return (f(x + h) - f(x - h)) / (2 * h);\r\n            };\r\n\r\n            return derivative;\r\n        },\r\n        median: function (...values) {\r\n            values.sort(function (a, b) {\r\n                return a - b;\r\n            });\r\n\r\n            var half = Math.floor(values.length / 2);\r\n\r\n            if(values.length % 2)\r\n                return values[half];\r\n\r\n            return (values[half - 1] + values[half]) / 2.0;\r\n        },\r\n        /*\r\n         * Reverses continued fraction calculation\r\n         * @param {obj} contd\r\n         * @returns {Number}\r\n         */\r\n        fromContinued: function (contd) {\r\n            var arr = contd.fractions.slice();\r\n            var e = 1 / arr.pop();\r\n            for(var i = 0, l = arr.length; i < l; i++) {\r\n                e = 1 / (arr.pop() + e);\r\n            }\r\n            return contd.sign * (contd.whole + e);\r\n        },\r\n        /*\r\n         * Calculates continued fractions\r\n         * @param {Number} n\r\n         * @param {Number} x The number of places\r\n         * @returns {Number}\r\n         */\r\n        continuedFraction: function (n, x) {\r\n            x = x || 20;\r\n            var sign = Math.sign(n); /*store the sign*/\r\n            var absn = Math.abs(n); /*get the absolute value of the number*/\r\n            var whole = Math.floor(absn); /*get the whole*/\r\n            var ni = absn - whole; /*subtract the whole*/\r\n            var c = 0; /*the counter to keep track of iterations*/\r\n            var done = false;\r\n            var epsilon = 1e-14;\r\n            var max = 1e7;\r\n            var e, w;\r\n            var retval = {\r\n                whole: whole,\r\n                sign: sign,\r\n                fractions: []\r\n            };\r\n            /*start calculating*/\r\n            while(!done && ni !== 0) {\r\n                /*invert and get the whole*/\r\n                e = 1 / ni;\r\n                w = Math.floor(e);\r\n                if(w > max) {\r\n                    /*this signals that we may have already gone too far*/\r\n                    var d = Math2.fromContinued(retval) - n;\r\n                    if(d <= Number.EPSILON)\r\n                        break;\r\n                }\r\n                /*add to result*/\r\n                retval.fractions.push(w);\r\n                /*move the ni to the decimal*/\r\n                ni = e - w;\r\n                /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/\r\n                if(ni <= epsilon || c >= x - 1)\r\n                    done = true;\r\n                c++;\r\n            }\r\n            /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/\r\n            var idx = retval.fractions.length - 1;\r\n            if(retval.fractions[idx] === 1) {\r\n                retval.fractions.pop();\r\n                /*increase the last one by one*/\r\n                retval.fractions[--idx]++;\r\n            }\r\n            return retval;\r\n        },\r\n        bigpow: function (n, p) {\r\n            if(!(n instanceof Frac))\r\n                n = Frac.create(n);\r\n            if(!(p instanceof Frac))\r\n                p = Frac.create(p);\r\n            var retval = new Frac(0);\r\n            if(p.isInteger()) {\r\n                retval.num = n.num.pow(p.toString());\r\n                retval.den = n.den.pow(p.toString());\r\n            }\r\n            else {\r\n                var num = Frac.create(Math.pow(n.num, p.num));\r\n                var den = Frac.create(Math.pow(n.den, p.num));\r\n\r\n                retval.num = Math2.nthroot(num, p.den.toString());\r\n                retval.den = Math2.nthroot(den, p.den);\r\n            }\r\n            return retval;\r\n        },\r\n        //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals\r\n        gamma: function (z) {\r\n            var g = 7;\r\n            var C = [\r\n                0.99999999999980993,\r\n                676.5203681218851,\r\n                -1259.1392167224028,\r\n                771.32342877765313,\r\n                -176.61502916214059,\r\n                12.507343278686905,\r\n                -0.13857109526572012,\r\n                9.9843695780195716e-6,\r\n                1.5056327351493116e-7]\r\n                    ;\r\n\r\n            if(z < 0.5)\r\n                return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));\r\n            else {\r\n                z -= 1;\r\n\r\n                var x = C[0];\r\n                for(var i = 1; i < g + 2; i++)\r\n                    x += C[i] / (z + i);\r\n\r\n                var t = z + g + 0.5;\r\n                return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;\r\n            }\r\n        },\r\n        //factorial\r\n        bigfactorial: function (x) {\r\n            var retval = new bigInt(1);\r\n            for(var i = 2; i <= x; i++)\r\n                retval = retval.times(i);\r\n            return new Frac(retval);\r\n        },\r\n        //https://en.wikipedia.org/wiki/Logarithm#Calculation\r\n        bigLog: function (x) {\r\n            varr\n            if(CACHE[x]) {\r\n                return Frac.quick.apply(null, CACHE[x].split('/'));\r\n            }\r\n            x = new Frac(x);\r\n            var n = 80;\r\n            var retval = new Frac(0);\r\n            var a = x.subtract(new Frac(1));\r\n            var b = x.add(new Frac(1));\r\n            for(var i = 0; i < n; i++) {\r\n                var t = new Frac(2 * i + 1);\r\n                var k = Math2.bigpow(a.divide(b), t);\r\n                var r = t.clone().invert().multiply(k);\r\n                retval = retval.add(r);\r\n\r\n            }\r\n            return retval.multiply(new Frac(2));\r\n        },\r\n        //the factorial function but using the big library instead\r\n        factorial: function (x) {\r\n            var is_int = x % 1 === 0;\r\n\r\n            /*factorial for negative integers is complex infinity according to Wolfram Alpha*/\r\n            if(is_int && x < 0)\r\n                return NaN;\r\n\r\n            if(!is_int)\r\n                return Math2.gamma(x + 1);\r\n\r\n            var retval = 1;\r\n            for(var i = 2; i <= x; i++)\r\n                retval = retval * i;\r\n            return retval;\r\n        },\r\n        //double factorial\r\n        //http://mathworld.wolfram.com/DoubleFactorial.html\r\n        dfactorial: function (x) {\r\n            if(isInt(x)) {\r\n                var even = x % 2 === 0;\r\n                /* If x = even then n = x/2 else n = (x-1)/2*/\r\n                var n = even ? x / 2 : (x + 1) / 2;\r\n                /*the return value*/\r\n                var r = new Frac(1);\r\n                /*start the loop*/\r\n                if(even)\r\n                    for(var i = 1; i <= n; i++)\r\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)));\r\n                else\r\n                    for(var i = 1; i <= n; i++)\r\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));\r\n            }\r\n            else {\r\n                /*Not yet extended to bigNum*/\r\n                r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);\r\n            }\r\n\r\n            /*done*/\r\n            return r;\r\n        },\r\n        GCD: function () {\r\n            var args = arrayUnique([].slice.call(arguments)\r\n                    .map(function (x) {\r\n                        return Math.abs(x);\r\n                    })).sort(),\r\n                    a = Math.abs(args.shift()),\r\n                    n = args.length;\r\n\r\n            while(n-- > 0) {\r\n                var b = Math.abs(args.shift());\r\n                while(true) {\r\n                    a %= b;\r\n                    if(a === 0) {\r\n                        a = b;\r\n                        break;\r\n                    }\r\n                    b %= a;\r\n                    if(b === 0)\r\n                        break;\r\n                    ;\r\n                }\r\n            }\r\n            return a;\r\n        },\r\n        QGCD: function () {\r\n            var args = [].slice.call(arguments);\r\n            var a = args[0];\r\n            for(var i = 1; i < args.length; i++) {\r\n                var b = args[i];\r\n                var sign = a.isNegative() && b.isNegative() ? -1 : 1;\r\n                a = b.gcd(a);\r\n                if(sign < 0)\r\n                    a.negate();\r\n            }\r\n            return a;\r\n        },\r\n        LCM: function (a, b) {\r\n            return (a * b) / Math2.GCD(a, b);\r\n        },\r\n        //pow but with the handling of negative numbers\r\n        //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number\r\n        pow: function (b, e) {\r\n            if(b < 0) {\r\n                if(Math.abs(e) < 1) {\r\n                    /*nth root of a negative number is imaginary when n is even*/\r\n                    if(1 / e % 2 === 0)\r\n                        return NaN;\r\n                    return -Math.pow(Math.abs(b), e);\r\n                }\r\n            }\r\n            return Math.pow(b, e);\r\n        },\r\n        factor: function (n) {\r\n            n = Number(n);\r\n            var sign = Math.sign(n); /*store the sign*/\r\n            /*move the number to absolute value*/\r\n            n = Math.abs(n);\r\n            var ifactors = Math2.ifactor(n);\r\n            var factors = new Symbol();\r\n            factors.symbols = {};\r\n            factors.group = CB;\r\n            for(var x in ifactors) {\r\n                var factor = new Symbol(1);\r\n                factor.group = P; /*cheat a little*/\r\n                factor.value = x;\r\n                factor.power = new Symbol(ifactors[x]);\r\n                factors.symbols[x] = factor;\r\n            }\r\n            factors.updateHash();\r\n\r\n            if(n === 1) {\r\n                factors = new Symbol(n);\r\n            }\r\n\r\n            /*put back the sign*/\r\n            if(sign < 0)\r\n                factors.negate();\r\n\r\n            return factors;\r\n        },\r\n        /**\r\n         * Uses trial division\r\n         * @param {Integer} n - the number being factored\r\n         * @param {object} factors -  the factors object\r\n         * @returns {object}\r\n         */\r\n        sfactor: function (n, factors) {\r\n            factors = factors || {};\r\n            var r = Math.floor(Math.sqrt(n));\r\n            var lcprime = PRIMES[PRIMES.length - 1];\r\n            /*a one-time cost... Hopefully ... And don't bother for more than a million*/\r\n            /*takes too long*/\r\n            if(r > lcprime && n < 1e6)\r\n                generatePrimes(r);\r\n            var l = PRIMES.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var prime = PRIMES[i];\r\n                /*trial division*/\r\n                while(n % prime === 0) {\r\n                    n = n / prime;\r\n                    factors[prime] = (factors[prime] || 0) + 1;\r\n                }\r\n            }\r\n            if(n > 1)\r\n                factors[n] = 1;\r\n            return factors;\r\n        },\r\n        /**\r\n         * Pollard's rho\r\n         * @param {Integer} n\r\n         * @returns {object}\r\n         */\r\n        ifactor: function (n) {\r\n            var input = new bigInt(n);\r\n\r\n            n = String(n);\r\n\r\n            if(n === '0')\r\n                return {'0': 1};\r\n            n = new bigInt(n); /*convert to bigInt for safety*/\r\n            var sign = n.sign ? -1 : 1;\r\n            n = n.abs();\r\n            var factors = {}; /*factor object being returned.*/\r\n            if(n.lt('65536')) { /*less than 2^16 just use trial division*/\r\n                factors = Math2.sfactor(n, factors);\r\n            }\r\n            else {\r\n                var add = function (e) {\r\n                    if(!e.isPrime()) {\r\n                        factors = Math2.sfactor(e, factors);\r\n                    }\r\n                    else\r\n                        factors[e] = (factors[e] || 0) + 1;\r\n                };\r\n\r\n                try {\r\n                    //set a safety\r\n                    var max = 1e3;\r\n                    var safety = 0;\r\n\r\n                    while(!n.abs().equals(1)) {\r\n                        if(n.isPrime()) {\r\n                            add(n);\r\n                            break;\r\n                        }\r\n                        else {\r\n                            function rho(c) {\r\n                                var xf = new bigInt(c),\r\n                                        cz = 2,\r\n                                        x = new bigInt(c),\r\n                                        factor = new bigInt(1);\r\n\r\n                                while(factor.equals(1)) {\r\n                                    for(var i = 0; i <= cz && factor.equals(1); i++) {\r\n                                        //trigger the safety\r\n                                        if(safety++ > max)\r\n                                            throw new Error('stopping');\r\n\r\n                                        x = x.pow(2).add(1).mod(n);\r\n                                        factor = bigInt.gcd(x.minus(xf).abs(), n);\r\n                                    }\r\n\r\n                                    cz = cz * 2;\r\n                                    xf = x;\r\n                                }\r\n                                if(factor.equals(n)) {\r\n                                    return rho(c + 1);\r\n                                }\r\n                                return factor;\r\n                            }\r\n                            var factor = rho(2);\r\n                            add(factor);\r\n                            /*divide out the factor*/\r\n                            n = n.divide(factor);\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    //reset factors\r\n                    factors = {};\r\n                    add(input);\r\n                }\r\n\r\n            }\r\n\r\n            /*put the sign back*/\r\n            if(sign === -1) {\r\n                var sm = arrayMin(keys(factors)); /*/get the smallest number*/\r\n                factors['-' + sm] = factors[sm];\r\n                delete factors[sm];\r\n            }\r\n\r\n            return factors;\r\n        },\r\n        //factors a number into rectangular box. If sides are primes that this will be\r\n        //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)\r\n        boxfactor: function (n, max) {\r\n            max = max || 200; //stop after this number of iterations\r\n            var c, r,\r\n                    d = Math.floor((5 / 12) * n), //the divisor\r\n                    i = 0, //number of iterations\r\n                    safety = false;\r\n            while(true) {\r\n                c = Math.floor(n / d);\r\n                r = n % d;\r\n                if(r === 0)\r\n                    break; //we're done\r\n                if(safety)\r\n                    return [n, 1];\r\n                d = Math.max(r, d - r);\r\n                i++;\r\n                safety = i > max;\r\n            }\r\n            return [c, d, i];\r\n        },\r\n        fib: function (n) {\r\n            var sign = Math.sign(n);\r\n            n = Math.abs(n);\r\n            sign = even(n) ? sign : Math.abs(sign);\r\n            var a = 0, b = 1, f = 1;\r\n            for(var i = 2; i <= n; i++) {\r\n                f = a + b;\r\n                a = b;\r\n                b = f;\r\n            }\r\n            return f * sign;\r\n        },\r\n        mod: function (x, y) {\r\n            return x % y;\r\n        },\r\n        //http://mathworld.wolfram.com/IntegerPart.html\r\n        integer_part: function (x) {\r\n            var sign = Math.sign(x);\r\n            return sign * Math.floor(Math.abs(x));\r\n        },\r\n        simpson: function (f, a, b, step) {\r\n            var get_value = function (f, x, side) {\r\n                var v = f(x);\r\n                var d = 0.000000000001;\r\n                if(isNaN(v)) {\r\n                    v = f(side === 1 ? x + d : x - d);\r\n                }\r\n                return v;\r\n            };\r\n\r\n            step = step || 0.0001;\r\n            //calculate the number of intervals\r\n            var n = Math.abs(Math.floor((b - a) / step));\r\n            //simpson's rule requires an even number of intervals. If it's not then add 1\r\n            if(n % 2 !== 0)\r\n                n++;\r\n            //get the interval size\r\n            var dx = (b - a) / n;\r\n            //get x0\r\n            var retval = get_value(f, a, 1);\r\n\r\n            //get the middle part 4x1+2x2+4x3 ...\r\n            //but first set a flag to see if it's even or odd.\r\n            //The first one is odd so we start there\r\n            var even = false;\r\n            //get x1\r\n            var xi = a + dx;\r\n            //the coefficient\r\n            var c, k;\r\n            //https://en.wikipedia.org/wiki/Simpson%27s_rule\r\n            for(var i = 1; i < n; i++) {\r\n                c = even ? 2 : 4;\r\n                k = c * get_value(f, xi, 1);\r\n                retval += k;\r\n                //flip the even flag\r\n                even = !even;\r\n                //increment xi\r\n                xi += dx;\r\n            }\r\n\r\n            //add xn\r\n            return (retval + get_value(f, xi, 2)) * (dx / 3);\r\n\r\n        },\r\n        /**\r\n         * https://github.com/scijs/integrate-adaptive-simpson\r\n         * @param {Function} f - the function being integrated\r\n         * @param {Number} a - lower bound\r\n         * @param {Number} b - upper bound\r\n         * @param {Number} tol - step width\r\n         * @param {Number} maxdepth\r\n         * @returns {Number}\r\n         */\r\n        num_integrate: function (f, a, b, tol, maxdepth) {\r\n            if(maxdepth < 0)\r\n                throw new Error('max depth cannot be negative');\r\n\r\n            /* This algorithm adapted from pseudocode in:*/\r\n            /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/\r\n            function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\r\n                if(state.nanEncountered) {\r\n                    return NaN;\r\n                }\r\n                var h, f1, f2, sl, sr, s2, m, V1, V2, err;\r\n                h = b - a;\r\n                f1 = f(a + h * 0.25);\r\n                f2 = f(b - h * 0.25);\r\n                /* Simple check for NaN:*/\r\n                if(isNaN(f1)) {\r\n                    state.nanEncountered = true;\r\n                    return;\r\n                }\r\n                /* Simple check for NaN:*/\r\n                if(isNaN(f2)) {\r\n                    state.nanEncountered = true;\r\n                    return;\r\n                }\r\n\r\n                sl = h * (fa + 4 * f1 + fm) / 12;\r\n                sr = h * (fm + 4 * f2 + fb) / 12;\r\n                s2 = sl + sr;\r\n                err = (s2 - V0) / 15;\r\n\r\n                if(state.maxDepthCount > 1000 * maxdepth) {\r\n                    return;\r\n                }\r\n\r\n\r\n                if(depth > maxdepth) {\r\n                    state.maxDepthCount++;\r\n                    return s2 + err;\r\n                }\r\n                else if(Math.abs(err) < tol) {\r\n                    return s2 + err;\r\n                }\r\n                else {\r\n                    m = a + h * 0.5;\r\n                    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\r\n                    if(isNaN(V1)) {\r\n                        state.nanEncountered = true;\r\n                        return NaN;\r\n                    }\r\n                    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\r\n\r\n                    if(isNaN(V2)) {\r\n                        state.nanEncountered = true;\r\n                        return NaN;\r\n                    }\r\n\r\n                    return V1 + V2;\r\n                }\r\n            }\r\n\r\n            function integrate(f, a, b, tol, maxdepth) {\r\n                var state = {\r\n                    maxDepthCount: 0,\r\n                    nanEncountered: false\r\n                };\r\n\r\n                if(tol === undefined) {\r\n                    tol = 1e-9;\r\n                }\r\n                if(maxdepth === undefined) {\r\n                    /*Issue #458 - This was lowered because of performance issues. */\r\n                    /*This was suspected from before but is now confirmed with this issue*/\r\n                    maxdepth = 45;\r\n                }\r\n\r\n                var fa = f(a);\r\n                var fm = f(0.5 * (a + b));\r\n                var fb = f(b);\r\n\r\n                var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\r\n\r\n                var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\r\n\r\n                if(state.maxDepthCount > 0) {\r\n                    warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\r\n                }\r\n\r\n                if(state.nanEncountered) {\r\n                    throw new Error('Function does not converge over interval!');\r\n                }\r\n\r\n                return result;\r\n            }\r\n            var retval;\r\n\r\n            try {\r\n                retval = integrate(f, a, b, tol, maxdepth);\r\n            }\r\n            catch(e) {\r\n                /*fallback to non-adaptive*/\r\n                return Math2.simpson(f, a, b);\r\n            }\r\n            return nround(retval, 12);\r\n        },\r\n        //https://en.wikipedia.org/wiki/Trigonometric_integral\r\n        //CosineIntegral\r\n        Ci: function (x) {\r\n            var n = 20,\r\n                    /*roughly Euler–Mascheroni*/\r\n                    g = 0.5772156649015329,\r\n                    sum = 0;\r\n            for(var i = 1; i < n; i++) {\r\n                /*cache 2n*/\r\n                var n2 = 2 * i;\r\n                sum += (Math.pow(-1, i) * Math.pow(x, n2)) / (n2 * Math2.factorial(n2));\r\n            }\r\n            return Math.log(x) + g + sum;\r\n        },\r\n        /*SineIntegral*/\r\n        Si: function (x) {\r\n            var n = 20,\r\n                    sum = 0;\r\n            for(var i = 0; i < n; i++) {\r\n                var n2 = 2 * i;\r\n                sum += (Math.pow(-1, i) * Math.pow(x, n2 + 1)) / ((n2 + 1) * Math2.factorial(n2 + 1));\r\n            }\r\n            return sum;\r\n        },\r\n        /*ExponentialIntegral*/\r\n        Ei: function (x) {\r\n            if(Number(x) === 0)\r\n                return -Infinity;\r\n            var n = 30,\r\n                    g = 0.5772156649015328606, /*roughly Euler–Mascheroni*/\r\n                    sum = 0;\r\n            for(var i = 1; i < n; i++) {\r\n                sum += Math.pow(x, i) / (i * Math2.factorial(i));\r\n            }\r\n            return g + Math.abs(Math.log(x)) + sum;\r\n        },\r\n        /*Hyperbolic Sine Integral*/\r\n        /*http://mathworld.wolfram.com/Shi.html*/\r\n        Shi: function (x) {\r\n            var n = 30,\r\n                    sum = 0,\r\n                    k, t;\r\n            for(var i = 0; i < n; i++) {\r\n                k = 2 * i;\r\n                t = k + 1;\r\n                sum += Math.pow(x, t) / (t * t * Math2.factorial(k));\r\n            }\r\n            return sum;\r\n        },\r\n        /*the cosine integral function*/\r\n        Chi: function (x) {\r\n            var dx, g, f;\r\n            dx = 0.001;\r\n            g = 0.5772156649015328606;\r\n            f = function (t) {\r\n                return (Math.cosh(t) - 1) / t;\r\n            };\r\n            return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);\r\n        },\r\n        /*the log integral*/\r\n        Li: function (x) {\r\n            return Math2.Ei(Math2.bigLog(x));\r\n        },\r\n        /*the gamma incomplete function*/\r\n        gamma_incomplete: function (n, x) {\r\n            var t = n - 1,\r\n                    sum = 0,\r\n                    x = x || 0;\r\n            for(var i = 0; i < t; i++) {\r\n                sum += Math.pow(x, i) / Math2.factorial(i);\r\n            }\r\n            return Math2.factorial(t) * Math.exp(-x) * sum;\r\n        },\r\n        /*\r\n         * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html\r\n         * if x > 0 then 1\r\n         * if x == 0 then 1/2\r\n         * if x < 0 then 0\r\n         */\r\n        step: function (x) {\r\n            if(x > 0)\r\n                return 1;\r\n            if(x < 0)\r\n                return 0;\r\n            return 0.5;\r\n        },\r\n        /*\r\n         * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/RectangleFunction.html\r\n         * if |x| > 1/2 then 0\r\n         * if |x| == 1/2 then 1/2\r\n         * if |x| < 1/2 then 1\r\n         */\r\n        rect: function (x) {\r\n            var x = Math.abs(x);\r\n            if(x === 0.5)\r\n                return x;\r\n            if(x > 0.5)\r\n                return 0;\r\n            return 1;\r\n        },\r\n        /*\r\n         * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/SincFunction.html\r\n         * if x == 0 then 1\r\n         * otherwise sin(x)/x\r\n         */\r\n        sinc: function (x) {\r\n            if(x.equals(0))\r\n                return 1;\r\n            return Math.sin(x) / x;\r\n        },\r\n        /*\r\n         * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/TriangleFunction.html\r\n         * if |x| >= 1 then 0\r\n         * if |x| < then 1-|x|\r\n         */\r\n        tri: function (x) {\r\n            x = Math.abs(x);\r\n            if(x >= 1)\r\n                return 0;\r\n            return 1 - x;\r\n        },\r\n        //https://en.wikipedia.org/wiki/Nth_root_algorithm\r\n        nthroot: function (A, n) {\r\n            /*make sure the input is of type Frac*/\r\n            if(!(A instanceof Frac))\r\n                A = new Frac(A.toString());\r\n            if(!(n instanceof Frac))\r\n                n = new Frac(n.toString());\r\n            if(n.equals(1))\r\n                return A;\r\n            /*begin algorithm*/\r\n            var xk = A.divide(new Frac(2)); /*x0*/\r\n            var e = new Frac(1e-15);\r\n            var dk, dk0, d0;\r\n            var a = n.clone().invert(),\r\n                    b = n.subtract(new Frac(1));\r\n            do {\r\n                var powb = Math2.bigpow(xk, b);\r\n                var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);\r\n                dk = Frac.create(dk_dec);\r\n                if(d0)\r\n                    break;\r\n\r\n                xk = xk.add(dk);\r\n                /*check to see if there's no change from the last xk*/\r\n                var dk_dec = dk.toDecimal();\r\n                d0 = dk0 ? dk0 === dk_dec : false;\r\n                dk0 = dk_dec;\r\n            }\r\n            while(dk.abs().gte(e))\r\n\r\n            return xk;\r\n        },\r\n        /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/\r\n        /*Just the square root function but big :)*/\r\n        sqrt: function (n) {\r\n            if(!(n instanceof Frac))\r\n                n = new Frac(n);\r\n            var xn, d, ld, same_delta;\r\n            var c = 0; /*counter*/\r\n            var done = false;\r\n            var delta = new Frac(1e-20);\r\n            xn = n.divide(new Frac(2));\r\n            var safety = 1000;\r\n            do {\r\n                /*break if we're not converging*/\r\n                if(c > safety)\r\n                    throw new Error('Unable to calculate square root for ' + n);\r\n                xn = xn.add(n.divide(xn)).divide(new Frac(2));\r\n                xn = new Frac(xn.decimal(30));\r\n                /*get the difference from the true square*/\r\n                d = n.subtract(xn.multiply(xn));\r\n                /*if the square of the calculated number is close enough to the number*/\r\n                /*we're getting the square root or the last delta was the same as the new delta*/\r\n                /*then we're done*/\r\n                same_delta = ld ? ld.equals(d) : false;\r\n                if(d.clone().abs().lessThan(delta) || same_delta)\r\n                    done = true;\r\n                /*store the calculated delta*/\r\n                ld = d;\r\n                c++; /*increase the counter*/\r\n            }\r\n            while(!done)\r\n\r\n            return xn;\r\n        }\r\n    };\r\n    //link the Math2 object to Settings.FUNCTION_MODULES\r\n    Settings.FUNCTION_MODULES.push(Math2);\r\n    reserveNames(Math2); //reserve the names in Math2\r\n\r\n\r\n//Polyfills ====================================================================\r\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/\r\n    Math.sign = Math.sign || function (x) {\r\n        x = +x; // convert to a number\r\n        if(x === 0 || isNaN(x)) {\r\n            return x;\r\n        }\r\n        return x > 0 ? 1 : -1;\r\n    };\r\n\r\n    Math.cosh = Math.cosh || function (x) {\r\n        var y = Math.exp(x);\r\n        return (y + 1 / y) / 2;\r\n    };\r\n\r\n    Math.sech = Math.sech || function (x) {\r\n        return 1 / Math.cosh(x);\r\n    };\r\n\r\n    Math.csch = Math.csch || function (x) {\r\n        return 1 / Math.sinh(x);\r\n    };\r\n\r\n    Math.coth = Math.coth || function (x) {\r\n        return 1 / Math.tanh(x);\r\n    };\r\n\r\n    Math.sinh = Math.sinh || function (x) {\r\n        var y = Math.exp(x);\r\n        return (y - 1 / y) / 2;\r\n    };\r\n\r\n    Math.tanh = Math.tanh || function (x) {\r\n        if(x === Infinity) {\r\n            return 1;\r\n        }\r\n        else if(x === -Infinity) {\r\n            return -1;\r\n        }\r\n        else {\r\n            var y = Math.exp(2 * x);\r\n            return (y - 1) / (y + 1);\r\n        }\r\n    };\r\n\r\n    Math.asinh = Math.asinh || function (x) {\r\n        if(x === -Infinity) {\r\n            return x;\r\n        }\r\n        else {\r\n            return Math.log(x + Math.sqrt(x * x + 1));\r\n        }\r\n    };\r\n\r\n    Math.acosh = Math.acosh || function (x) {\r\n        return Math.log(x + Math.sqrt(x * x - 1));\r\n    };\r\n\r\n    Math.atanh = Math.atanh || function (x) {\r\n        return Math.log((1 + x) / (1 - x)) / 2;\r\n    };\r\n\r\n    Math.log10 = Math.log10 || function (x) {\r\n        return Math.log(x) * Math.LOG10E;\r\n    };\r\n\r\n    Math.trunc = Math.trunc || function (x) {\r\n        if(isNaN(x)) {\r\n            return NaN;\r\n        }\r\n        if(x > 0) {\r\n            return Math.floor(x);\r\n        }\r\n        return Math.ceil(x);\r\n    };\r\n\r\n//Global functions =============================================================\r\n    /**\r\n     * This method will return a hash or a text representation of a Symbol, Matrix, or Vector.\r\n     * If all else fails it *assumes* the object has a toString method and will call that.\r\n     *\r\n     * @param {Object} obj\r\n     * @param {String} option get is as a hash\r\n     * @param {int} useGroup\r\n     * @returns {String}\r\n     */\r\n    function text(obj, option, useGroup, decp) { \r\n        var asHash = option === 'hash',\r\n                //whether to wrap numbers in brackets\r\n                wrapCondition = undefined,\r\n                opt = asHash ? undefined : option,\r\n                asDecimal = opt === 'decimal' || opt === 'decimals';\r\n\r\n        if(asDecimal && typeof decp === 'undefined')\r\n            decp = Settings.DEFAULT_DECP;\r\n\r\n        function toString(obj) {\r\n            switch(option)\r\n            {\r\n                case 'decimals':\r\n                case 'decimal':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return false;\r\n                    };\r\n                    return obj.valueOf();\r\n                case 'recurring':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf(\"'\") !== -1;\r\n                    };\r\n\r\n                    var str = obj.toString();\r\n                    //verify that the string is actually a fraction\r\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\r\n                    if(frac.length === 0)\r\n                        return str;\r\n\r\n                    //split the fraction into the numerator and denominator\r\n                    var parts = frac[0].split('/');\r\n                    var negative = false;\r\n                    var m = Number(parts[0]);\r\n                    if(m < 0) {\r\n                        m = -m;\r\n                        negative = true;\r\n                    }\r\n                    var n = Number(parts[1]);\r\n                    if(!n)\r\n                        n = 1;\r\n\r\n                    //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\r\n                    var quotient = Math.floor(m / n), c = 10 * (m - quotient * n);\r\n                    quotient = quotient.toString() + \".\";\r\n                    while(c && c < n) {\r\n                        c *= 10;\r\n                        quotient += \"0\";\r\n                    }\r\n                    var digits = \"\", passed = [], i = 0;\r\n                    while(true) {\r\n                        if(typeof passed[c] !== 'undefined') {\r\n                            var prefix = digits.slice(0, passed[c]),\r\n                                    cycle = digits.slice(passed[c]),\r\n                                    result = quotient + prefix + \"'\" + cycle + \"'\";\r\n                            return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\r\n                        }\r\n                        var q = Math.floor(c / n), r = c - q * n;\r\n                        passed[c] = i;\r\n                        digits += q.toString();\r\n                        i += 1;\r\n                        c = 10 * r;\r\n                    }\r\n                case 'mixed':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf('/') !== -1;\r\n                    };\r\n\r\n                    var str = obj.toString();\r\n                    //verify that the string is actually a fraction\r\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\r\n                    if(frac.length === 0)\r\n                        return str;\r\n\r\n                    //split the fraction into the numerator and denominator\r\n                    var parts = frac[0].split('/');\r\n                    var numer = new bigInt(parts[0]);\r\n                    var denom = new bigInt(parts[1]);\r\n                    if(denom.equals(0))\r\n                        denom = new bigInt(1);\r\n\r\n                    //return the quotient plus the remainder\r\n                    var divmod = numer.divmod(denom);\r\n                    var quotient = divmod.quotient;\r\n                    var remainder = divmod.remainder;\r\n                    var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\r\n                    return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : (remainder.toString() + '/' + parts[1]));\r\n                case 'scientific':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return false;\r\n                    };\r\n                    return new Scientific(obj.valueOf()).toString(Settings.SCIENTIFIC_MAX_DECIMAL_PLACES);\r\n                default:\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf('/') !== -1;\r\n                    };\r\n\r\n                    return obj.toString();\r\n            }\r\n        }\r\n\r\n        //if the object is a symbol\r\n        if(isSymbol(obj)) {\r\n            var multiplier = '',\r\n                    power = '',\r\n                    sign = '',\r\n                    group = obj.group || useGroup,\r\n                    value = obj.value;\r\n\r\n            //if the value is to be used as a hash then the power and multiplier need to be suppressed\r\n            if(!asHash) {\r\n                //use asDecimal to get the object back as a decimal\r\n                var om = toString(obj.multiplier);\r\n                if(om == '-1' && String(obj.multiplier) === '-1') {\r\n                    sign = '-';\r\n                    om = '1';\r\n                }\r\n                //only add the multiplier if it's not 1\r\n                if(om != '1')\r\n                    multiplier = om;\r\n                //use asDecimal to get the object back as a decimal\r\n                var p = obj.power ? toString(obj.power) : '';\r\n                //only add the multiplier\r\n                if(p != '1') {\r\n                    //is it a symbol\r\n                    if(isSymbol(p)) {\r\n                        power = text(p, opt);\r\n                    }\r\n                    else {\r\n                        power = p;\r\n                    }\r\n                }\r\n            }\r\n\r\n            switch(group) {\r\n                case N:\r\n                    multiplier = '';\r\n                    //round if requested\r\n                    var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier);\r\n                    //if it's numerical then all we need is the multiplier\r\n                    value = String(obj.multiplier) == '-1' ? '1' : m;\r\n                    power = '';\r\n                    break;\r\n                case PL:\r\n                    value = obj.collectSymbols().map(function (x) {\r\n                        var txt = text(x, opt, useGroup, decp);\r\n                        if(txt == '0')\r\n                            txt = '';\r\n                        return txt;\r\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\r\n                    break;\r\n                case CP:\r\n                    value = obj.collectSymbols().map(function (x) {\r\n                        var txt = text(x, opt, useGroup, decp);\r\n                        if(txt == '0')\r\n                            txt = '';\r\n                        return txt;\r\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\r\n                    break;\r\n                case CB:\r\n                    value = obj.collectSymbols(function (symbol) {\r\n                        var g = symbol.group;\r\n                        //both groups will already be in brackets if their power is greater than 1\r\n                        //so skip it.\r\n                        if((g === PL || g === CP) && (symbol.power.equals(1) && symbol.multiplier.equals(1))) {\r\n                            return inBrackets(text(symbol, opt));\r\n                        }\r\n                        return text(symbol, opt);\r\n                    }).join('*');\r\n                    break;\r\n                case EX:\r\n                    var pg = obj.previousGroup,\r\n                            pwg = obj.power.group;\r\n\r\n                    //PL are the exception. It's simpler to just collect and set the value\r\n                    if(pg === PL)\r\n                        value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\r\n                    if(!(pg === N || pg === S || pg === FN) && !asHash) {\r\n                        value = inBrackets(value);\r\n                    }\r\n\r\n                    if((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {\r\n                        power = inBrackets(power);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            if(group === FN) {\r\n                value = obj.fname + inBrackets(obj.args.map(function (symbol) {\r\n                    return text(symbol, opt);\r\n                }).join(','));\r\n            }\r\n            //TODO: Needs to be more efficient. Maybe.\r\n            if(group === FN && obj.fname in CUSTOM_OPERATORS) {\r\n                var a = text(obj.args[0]);\r\n                var b = text(obj.args[1]);\r\n                if(obj.args[0].isComposite()) //preserve the brackets\r\n                    a = inBrackets(a);\r\n                if(obj.args[1].isComposite()) //preserve the brackets\r\n                    b = inBrackets(b);\r\n                value = a + CUSTOM_OPERATORS[obj.fname] + b;\r\n            }\r\n            //wrap the power since / is less than ^\r\n            //TODO: introduce method call isSimple\r\n            if(power && group !== EX && wrapCondition(power)) {\r\n                power = inBrackets(power);\r\n            }\r\n\r\n            //the following groups are held together by plus or minus. They can be raised to a power or multiplied\r\n            //by a multiplier and have to be in brackets to preserve the order of precedence\r\n            if(((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-'))\r\n                    || ((group === CB || group === CP || group === PL) && (power && power != '1'))\r\n                    || !asHash && group === P && value == -1\r\n                    || obj.fname === PARENTHESIS) {\r\n\r\n                value = inBrackets(value);\r\n            }\r\n\r\n            if(decp && (option === 'decimal' || option === 'decimals' && multiplier)) {\r\n                multiplier = nround(multiplier, decp);\r\n            }\r\n\r\n\r\n            //add the sign back\r\n            var c = sign + multiplier;\r\n\r\n            if(multiplier && wrapCondition(multiplier))\r\n                c = inBrackets(c);\r\n\r\n            if(power < 0)\r\n                power = inBrackets(power);\r\n\r\n            //add the multiplication back\r\n            if(multiplier)\r\n                c = c + '*';\r\n\r\n            if(power) {\r\n                if(value === 'e' && Settings.E_TO_EXP) {\r\n                    return c + 'exp' + inBrackets(power);\r\n                }\r\n                power = Settings.POWER_OPERATOR + power;\r\n            }\r\n\r\n            //this needs serious rethinking. Must fix\r\n            if(group === EX && value.charAt(0) === '-') {\r\n                value = inBrackets(value);\r\n            }\r\n\r\n            var cv = c + value;\r\n\r\n            if(obj.parens) {\r\n                cv = inBrackets(cv);\r\n            }\r\n\r\n            return cv + power;\r\n        }\r\n        else if(isVector(obj)) {\r\n            var l = obj.elements.length,\r\n                    c = [];\r\n            for(var i = 0; i < l; i++)\r\n                c.push(obj.elements[i].text(option));\r\n            return '[' + c.join(',') + ']';\r\n        }\r\n        else {\r\n            try {\r\n                return obj.toString();\r\n            }\r\n            catch(e) {\r\n                return '';\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calculates prime factors for a number. It first checks if the number\r\n     * is a prime number. If it's not then it will calculate all the primes \r\n     * for that number.\r\n     * @param {int} num\r\n     * @returns {Array}\r\n     */\r\n\r\n    function primeFactors(num) {\r\n        if(isPrime(num)) {\r\n            return [num];\r\n        }\r\n\r\n        var l = num, i = 1, factors = [],\r\n                epsilon = 2.2204460492503130808472633361816E-16;\r\n        while(i < l) {\r\n            var quotient = num / i;\r\n            var whole = Math.floor(quotient);\r\n            var remainder = quotient - whole;\r\n\r\n            if(remainder <= epsilon && i > 1) {\r\n                // If the prime wasn't found but calculated then save it and\r\n                // add it as a factor.\r\n                if(isPrime(i)) {\r\n                    if(PRIMES.indexOf(i) === -1) {\r\n                        PRIMES.push(i);\r\n                    }\r\n                    factors.push(i);\r\n                }\r\n\r\n                // Check if the remainder is a prime\r\n                if(isPrime(whole)) {\r\n                    factors.push(whole);\r\n                    break;\r\n                }\r\n\r\n                l = whole;\r\n            }\r\n            i++;\r\n        }\r\n\r\n        return factors.sort(function (a, b) {\r\n            return a - b;\r\n        });\r\n    }\r\n    ;\r\n    primeFactors(314146179365)\r\n//Expression ===================================================================\r\n    /**\r\n     * This is what nerdamer returns. It's sort of a wrapper around the symbol class and\r\n     * provides the user with some useful functions. If you want to provide the user with extra\r\n     * library functions then add them to this class's prototype.\r\n     * @param {Symbol} symbol\r\n     * @returns {Expression} wraps around the Symbol class\r\n     */\r\n    function Expression(symbol) {\r\n        //we don't want arrays wrapped\r\n        this.symbol = symbol;\r\n    }\r\n    /**\r\n     * Returns stored expression at index. For first index use 1 not 0.\r\n     * @param {bool} asType\r\n     * @param {Integer} expression_number\r\n     */\r\n    Expression.getExpression = function (expression_number, asType) {\r\n        if(expression_number === 'last' || !expression_number)\r\n            expression_number = EXPRESSIONS.length;\r\n        if(expression_number === 'first')\r\n            expression_number = 1;\r\n        var index = expression_number - 1,\r\n                expression = EXPRESSIONS[index],\r\n                retval = expression ? new Expression(expression) : expression;\r\n        return retval;\r\n    };\r\n    Expression.prototype = {\r\n        /**\r\n         * Returns the text representation of the expression\r\n         * @param {String} opt - option of formatting numbers\r\n         * @param {Number} n The number of significant figures\r\n         * @returns {String}\r\n         */\r\n        text: function (opt, n) {\r\n            n = n || Settings.EXPRESSION_DECP;\r\n            opt = opt || 'decimals';\r\n            if(this.symbol.text_)\r\n                return this.symbol.text_(opt);\r\n\r\n            return text(this.symbol, opt, undefined, n);\r\n        },\r\n        /**\r\n         * Returns the latex representation of the expression\r\n         * @param {String} option - option for formatting numbers\r\n         * @returns {String}\r\n         */\r\n        latex: function (option) {\r\n            if(this.symbol.latex)\r\n                return this.symbol.latex(option);\r\n            return LaTeX.latex(this.symbol, option);\r\n        },\r\n        valueOf: function () {\r\n            return this.symbol.valueOf();\r\n        },\r\n\r\n        /**\r\n         * Evaluates the expression and tries to reduce it to a number if possible.\r\n         * If an argument is given in the form of %{integer} it will evaluate that expression.\r\n         * Other than that it will just use it's own text and reparse\r\n         * @returns {Expression}\r\n         */\r\n        evaluate: function () {\r\n\r\n            // Don't evaluate an empty vector\r\n            if(isVector(this.symbol) && this.symbol.dimensions() === 0) {\r\n                return this;\r\n            }\r\n\r\n            var first_arg = arguments[0], expression, idx = 1;\r\n\r\n            //Enable getting of expressions using the % so for example %1 should get the first expression\r\n            if(typeof first_arg === 'string') {\r\n                expression = (first_arg.charAt(0) === '%') ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;\r\n            }\r\n            else if(first_arg instanceof Expression || isSymbol(first_arg)) {\r\n                expression = first_arg.text();\r\n            }\r\n            else {\r\n                expression = this.symbol.text();\r\n                idx--;\r\n            }\r\n\r\n            var subs = arguments[idx] || {};\r\n\r\n            var retval = new Expression(block('PARSE2NUMBER', function () {\r\n                return _.parse(expression, subs);\r\n            }, true));\r\n\r\n            return retval;\r\n        },\r\n        /**\r\n         * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of\r\n         * the default alphabetical order\r\n         * @param vars {Array}\r\n         */\r\n        buildFunction: function (vars) {\r\n            return Build.build(this.symbol, vars);\r\n        },\r\n        /**\r\n         * Checks to see if the expression is just a plain old number\r\n         * @returns {boolean}\r\n         */\r\n        isNumber: function () {\r\n            return isNumericSymbol(this.symbol);\r\n        },\r\n        /**\r\n         * Checks to see if the expression is infinity\r\n         * @returns {boolean}\r\n         */\r\n        isInfinity: function () {\r\n            return Math.abs(this.symbol.multiplier) === Infinity;\r\n        },\r\n        /**\r\n         * Checks to see if the expression contains imaginary numbers\r\n         * @returns {boolean}\r\n         */\r\n        isImaginary: function () {\r\n            return evaluate(_.parse(this.symbol)).isImaginary();\r\n        },\r\n        /**\r\n         * Returns all the variables in the expression\r\n         * @returns {Array}\r\n         */\r\n        variables: function () {\r\n            return variables(this.symbol);\r\n        },\r\n\r\n        toString: function () {\r\n            try {\r\n                if(isArray(this.symbol))\r\n                    return '[' + this.symbol.toString() + ']';\r\n                return this.symbol.toString();\r\n            }\r\n            catch(e) {\r\n                return '';\r\n            }\r\n        },\r\n        //forces the symbol to be returned as a decimal\r\n        toDecimal: function (prec) {\r\n            Settings.precision = prec;\r\n            var dec = text(this.symbol, 'decimals');\r\n            Settings.precision = undefined;\r\n            return dec;\r\n        },\r\n        //checks to see if the expression is a fraction\r\n        isFraction: function () {\r\n            return isFraction(this.symbol);\r\n        },\r\n        //checks to see if the symbol is a multivariate polynomial\r\n        isPolynomial: function () {\r\n            return this.symbol.isPoly();\r\n        },\r\n        //performs a substitution\r\n        sub: function (symbol, for_symbol) {\r\n            return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));\r\n        },\r\n        operation: function (otype, symbol) {\r\n            if(isExpression(symbol))\r\n                symbol = symbol.symbol;\r\n            else if(!isSymbol(symbol))\r\n                symbol = _.parse(symbol);\r\n            return new Expression(_[otype](this.symbol.clone(), symbol.clone()));\r\n        },\r\n        add: function (symbol) {\r\n            return this.operation('add', symbol);\r\n        },\r\n        subtract: function (symbol) {\r\n            return this.operation('subtract', symbol);\r\n        },\r\n        multiply: function (symbol) {\r\n            return this.operation('multiply', symbol);\r\n        },\r\n        divide: function (symbol) {\r\n            return this.operation('divide', symbol);\r\n        },\r\n        pow: function (symbol) {\r\n            return this.operation('pow', symbol);\r\n        },\r\n        expand: function () {\r\n            return new Expression(_.expand(this.symbol));\r\n        },\r\n        each: function (callback, i) {\r\n            if(this.symbol.each)\r\n                this.symbol.each(callback, i);\r\n            else if(isArray(this.symbol)) {\r\n                for(var i = 0; i < this.symbol.length; i++)\r\n                    callback.call(this.symbol, this.symbol[i], i);\r\n            }\r\n            else\r\n                callback.call(this.symbol);\r\n        },\r\n        eq: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = _.subtract(this.symbol.clone(), value);\r\n                return d.equals(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n            ;\r\n        },\r\n        lt: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\r\n                return d.lessThan(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n            ;\r\n        },\r\n        gt: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\r\n                return d.greaterThan(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n        },\r\n        gte: function (value) {\r\n            return this.gt(value) || this.eq(value);\r\n        },\r\n        lte: function (value) {\r\n            return this.lt(value) || this.eq(value);\r\n        },\r\n\r\n        numerator: function () {\r\n            return new Expression(this.symbol.getNum());\r\n        },\r\n        denominator: function () {\r\n            return new Expression(this.symbol.getDenom());\r\n        },\r\n        hasFunction: function (f) {\r\n            return this.symbol.containsFunction(f);\r\n        },\r\n        contains: function (variable) {\r\n            return this.symbol.contains(variable);\r\n        }\r\n    };\r\n    //Aliases\r\n    Expression.prototype.toTeX = Expression.prototype.latex;\r\n\r\n    \r\n//Scientific ===================================================================\r\n    /*\r\n     * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\r\n     * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\r\n     */\r\n\r\n    function Scientific(num) {\r\n        if(!(this instanceof Scientific))\r\n            return new Scientific(num);\r\n\r\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\r\n\r\n        //remove the sign\r\n        if(num.startsWith('-')) {\r\n            this.sign = -1;\r\n            //remove the sign\r\n            num = num.substr(1, num.length);\r\n        }\r\n        else {\r\n            this.sign = 1;\r\n        }\r\n\r\n        if(Scientific.isScientific(num)) {\r\n            this.fromScientific(num);\r\n        }\r\n        else {\r\n            this.convert(num);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    Scientific.prototype = {\r\n        fromScientific: function (num) {\r\n            var parts = String(num).toLowerCase().split('e');\r\n            this.coeff = parts[0];\r\n            this.exponent = parts[1];\r\n\r\n            return this;\r\n        },\r\n        convert: function (num) {\r\n            //get wholes and decimals\r\n            var parts = num.split('.');\r\n            //make zero go away\r\n            var w = parts[0] || '';\r\n            var d = parts[1] || '';\r\n            //convert zero to blank strings\r\n            w = Scientific.removeLeadingZeroes(w);\r\n            d = Scientific.removeTrailingZeroes(d);\r\n            //find the location of the decimal place which is right after the wholes\r\n            var dot_location = w.length;\r\n            //add them together so we can move the dot\r\n            var n = w + d;\r\n            //find the next number\r\n            var zeroes = Scientific.leadingZeroes(n).length;\r\n            //set the exponent\r\n            this.exponent = dot_location - (zeroes + 1);\r\n            //set the coeff but first remove leading zeroes\r\n            var coeff = Scientific.removeLeadingZeroes(n);\r\n            this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\r\n\r\n            //the coeff decimal places\r\n            var dec = this.coeff.split('.')[1] || ''; //if it's undefined or zero it's going to blank\r\n\r\n            this.decp = dec === '0' ? 0 : dec.length;\r\n            //decimals\r\n            this.dec = d;\r\n            //wholes\r\n            this.wholes = w;\r\n\r\n            return this;\r\n        },\r\n        round: function (num) {\r\n            var n = this.copy();\r\n\r\n            num = Number(num); //cast to number for safety\r\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\r\n            //we can round based on this\r\n            if(num === 0)\r\n                n.coeff = n.coeff.charAt(0);\r\n            else {\r\n                //get up to n-1 digits\r\n                var rounded = this.coeff.substring(0, num + 1);\r\n                //get the next two\r\n                var next_two = this.coeff.substring(num + 1, num + 3);\r\n                //the extra digit\r\n                var ed = next_two.charAt(0);\r\n\r\n                if(next_two.charAt(1) > 4)\r\n                    ed++;\r\n\r\n                n.coeff = rounded + ed;\r\n            }\r\n\r\n            return n;\r\n        },\r\n        copy: function () {\r\n            var n = new Scientific(0);\r\n            n.coeff = this.coeff;\r\n            n.exponent = this.exponent;\r\n            n.sign = this.sign;\r\n            return n;\r\n        },\r\n        toString: function (n) {\r\n            var retval;\r\n\r\n            if(Settings.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && this.exponent === 0 && this.decp < n) {\r\n                if(this.decp === 0)\r\n                    retval = this.wholes;\r\n                else\r\n                    retval = this.coeff;\r\n            }\r\n            else {\r\n                var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, Math.min(n, this.decp || 1));\r\n                retval = this.exponent === 0 ? coeff : coeff + 'e' + this.exponent;\r\n            }\r\n\r\n            return (this.sign === -1 ? '-' : '') + retval;\r\n        }\r\n    };\r\n\r\n    Scientific.isScientific = function (num) {\r\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\r\n    };\r\n    Scientific.leadingZeroes = function (num) {\r\n        var match = num.match(/^(0*).*$/);\r\n        return match ? match[1] : '';\r\n    };\r\n    Scientific.removeLeadingZeroes = function (num) {\r\n        var match = num.match(/^0*(.*)$/);\r\n        return match ? match[1] : '';\r\n    };\r\n\r\n    Scientific.removeTrailingZeroes = function (num) {\r\n        var match = num.match(/0*$/);\r\n        return match ? num.substring(0, num.length - match[0].length) : '';\r\n    };\r\n\r\n    Scientific.round = function (c, n) {\r\n        var coeff = nround(c, n);\r\n        var m = String(coeff).split('.').pop();\r\n        var d = n - m.length;\r\n        //if we're asking for more significant figures\r\n        if(d > 0) {\r\n            coeff = coeff + (new Array(d + 1).join(0));\r\n        }\r\n        return coeff;\r\n    };\r\n\r\n//Frac =========================================================================\r\n    function Frac(n) {\r\n        if(n instanceof Frac)\r\n            return n;\r\n        if(n === undefined)\r\n            return this;\r\n        try {\r\n            if(isInt(n)) {\r\n                try {\r\n                    this.num = bigInt(n);\r\n                    this.den = bigInt(1);\r\n                }\r\n                catch(e) {\r\n                    return Frac.simple(n);\r\n                }\r\n            }\r\n            else {\r\n                var frac = n instanceof bigDec ? Fraction.quickConversion(n) : Fraction.convert(n);\r\n                this.num = new bigInt(frac[0]);\r\n                this.den = new bigInt(frac[1]);\r\n            }\r\n        }\r\n        catch(e) {\r\n            return Frac.simple(n);\r\n        }\r\n\r\n    }\r\n    //safe to use with negative numbers or other types\r\n    Frac.create = function (n) {\r\n        if(n instanceof Frac)\r\n            return n;\r\n        n = n.toString();\r\n        var is_neg = n.charAt(0) === '-'; //check if it's negative\r\n        if(is_neg)\r\n            n = n.substr(1, n.length - 1); //remove the sign\r\n        var frac = new Frac(n);\r\n        //put the sign back\r\n        if(is_neg)\r\n            frac.negate();\r\n        return frac;\r\n    };\r\n    Frac.isFrac = function (o) {\r\n        return (o instanceof Frac);\r\n    };\r\n    Frac.quick = function (n, d) {\r\n        var frac = new Frac();\r\n        frac.num = new bigInt(n);\r\n        frac.den = new bigInt(d);\r\n        return frac;\r\n    };\r\n    Frac.simple = function (n) {\r\n        var nstr = String(scientificToDecimal(n)),\r\n                m_dc = nstr.split('.'),\r\n                num = m_dc.join(''),\r\n                den = 1,\r\n                l = (m_dc[1] || '').length;\r\n        for(var i = 0; i < l; i++)\r\n            den += '0';\r\n        var frac = Frac.quick(num, den);\r\n        return frac.simplify();\r\n    };\r\n    Frac.prototype = {\r\n        multiply: function (m) {\r\n            if(this.isOne()) {\r\n                return m.clone();\r\n            }\r\n            if(m.isOne()) {\r\n                return this.clone();\r\n            }\r\n\r\n            var c = this.clone();\r\n            c.num = c.num.multiply(m.num);\r\n            c.den = c.den.multiply(m.den);\r\n\r\n            return c.simplify();\r\n        },\r\n        divide: function (m) {\r\n            if(m.equals(0))\r\n                throw new DivisionByZero('Division by zero not allowed!');\r\n            return this.clone().multiply(m.clone().invert()).simplify();\r\n        },\r\n        subtract: function (m) {\r\n            return this.clone().add(m.clone().neg());\r\n        },\r\n        neg: function () {\r\n            this.num = this.num.multiply(-1);\r\n            return this;\r\n        },\r\n        add: function (m) {\r\n            var n1 = this.den, n2 = m.den, c = this.clone();\r\n            var a = c.num, b = m.num;\r\n            if(n1.equals(n2)) {\r\n                c.num = a.add(b);\r\n            }\r\n            else {\r\n                c.num = a.multiply(n2).add(b.multiply(n1));\r\n                c.den = n1.multiply(n2);\r\n            }\r\n\r\n            return c.simplify();\r\n        },\r\n        mod: function (m) {\r\n            var a = this.clone(),\r\n                    b = m.clone();\r\n            //make their denominators even and return the mod of their numerators\r\n            a.num = a.num.multiply(b.den);\r\n            a.den = a.den.multiply(b.den);\r\n            b.num = b.num.multiply(this.den);\r\n            b.den = b.den.multiply(this.den);\r\n            a.num = a.num.mod(b.num);\r\n            return a.simplify();\r\n        },\r\n        simplify: function () {\r\n            var gcd = bigInt.gcd(this.num, this.den);\r\n\r\n            this.num = this.num.divide(gcd);\r\n            this.den = this.den.divide(gcd);\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            var m = new Frac();\r\n            m.num = new bigInt(this.num);\r\n            m.den = new bigInt(this.den);\r\n            return m;\r\n        },\r\n        decimal: function (prec) {\r\n            var sign = this.num.isNegative() ? '-' : '';\r\n            if(this.num.equals(this.den)) {\r\n                return '1';\r\n            }\r\n            //go plus one for rounding\r\n            prec = prec || Settings.PRECISION;\r\n            prec++;\r\n            var narr = [],\r\n                    n = this.num.abs(),\r\n                    d = this.den;\r\n            for(var i = 0; i < prec; i++) {\r\n                var w = n.divide(d), //divide out whole\r\n                        r = n.subtract(w.multiply(d)); //get remainder\r\n\r\n                narr.push(w);\r\n                if(r.equals(0))\r\n                    break;\r\n                n = r.times(10); //shift one dec place\r\n            }\r\n            var whole = narr.shift();\r\n            if(narr.length === 0) {\r\n                return sign + whole.toString();\r\n            }\r\n\r\n            if(i === prec) {\r\n                var lt = [];\r\n                //get the last two so we can round it\r\n                for(var i = 0; i < 2; i++)\r\n                    lt.unshift(narr.pop());\r\n                //put the last digit back by rounding the last two\r\n                narr.push(Math.round(lt.join('.')));\r\n            }\r\n\r\n            var dec = whole.toString() + '.' + narr.join('');\r\n            return sign + dec;\r\n        },\r\n        toDecimal: function (prec) { \r\n            prec = prec || Settings.PRECISION;\r\n            if(prec) {\r\n                return this.decimal(prec);\r\n            }\r\n            else {\r\n                return this.num / this.den;\r\n            }\r\n        },\r\n        qcompare: function (n) {\r\n            return [this.num.multiply(n.den), n.num.multiply(this.den)];\r\n        },\r\n        equals: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].equals(q[1]);\r\n        },\r\n        absEquals: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].abs().equals(q[1]);\r\n        },\r\n        //lazy check to be fixed. Sufficient for now but will cause future problems\r\n        greaterThan: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].gt(q[1]);\r\n        },\r\n        gte: function (n) {\r\n            return this.greaterThan(n) || this.equals(n);\r\n        },\r\n        lte: function (n) {\r\n            return this.lessThan(n) || this.equals(n);\r\n        },\r\n        lessThan: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].lt(q[1]);\r\n        },\r\n        isInteger: function () {\r\n            return this.den.equals(1);\r\n        },\r\n        negate: function () {\r\n            this.num = this.num.multiply(-1);\r\n            return this;\r\n        },\r\n        invert: function () {\r\n            var t = this.den;\r\n            //why invert 0/1? It'll become 1/0 and that's a lie.\r\n            if(!this.num.equals(0)) {\r\n                var isnegative = this.num.isNegative();\r\n                this.den = this.num.abs();\r\n                this.num = t;\r\n                if(isnegative)\r\n                    this.num = this.num.multiply(-1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        isOne: function () {\r\n            return this.num.equals(1) && this.den.equals(1);\r\n        },\r\n        sign: function () {\r\n            return this.num.isNegative() ? -1 : 1;\r\n        },\r\n        abs: function () {\r\n            this.num = this.num.abs();\r\n            return this;\r\n        },\r\n        gcd: function (f) {\r\n            return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));\r\n        },\r\n        toString: function () {\r\n            return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\r\n        },\r\n        valueOf: function () {\r\n//            if(this.num == 24) throw new Error(999)\r\n            if(Settings.USE_BIG)\r\n                return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));\r\n            var retval = this.num / this.den;\r\n            return retval;\r\n        },\r\n        isNegative: function () {\r\n            return this.toDecimal() < 0;\r\n        }\r\n    };\r\n\r\n//Symbol =======================================================================\r\n    /**\r\n     * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group.\r\n     * All symbols except for \"numbers (group N)\" have a power.\r\n     * @class Primary data type for the Parser.\r\n     * @param {String} obj\r\n     * @returns {Symbol}\r\n     */\r\n    function Symbol(obj) {\r\n        var isInfinity = obj === 'Infinity';\r\n        // This enables the class to be instantiated without the new operator\r\n        if(!(this instanceof Symbol)) {\r\n            return new Symbol(obj);\r\n        }\r\n        // Convert big numbers to a string\r\n        if(obj instanceof bigDec) {\r\n            obj = obj.toString();\r\n        }\r\n        //define numeric symbols\r\n        if(/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(obj) || obj instanceof bigDec) {\r\n            this.group = N;\r\n            this.value = CONST_HASH;\r\n            this.multiplier = new Frac(obj);\r\n        }\r\n        //define symbolic symbols\r\n        else {\r\n            this.group = S;\r\n            validateName(obj);\r\n            this.value = obj;\r\n            this.multiplier = new Frac(1);\r\n            this.imaginary = obj === Settings.IMAGINARY;\r\n            this.isInfinity = isInfinity;\r\n        }\r\n\r\n        //As of 6.0.0 we switched to infinite precision so all objects have a power\r\n        //Although this is still redundant in constants, it simplifies the logic in\r\n        //other parts so we'll keep it\r\n        this.power = new Frac(1);\r\n\r\n        // Added to silence the strict warning.\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns vanilla imaginary symbol\r\n     * @returns {Symbol}\r\n     */\r\n    Symbol.imaginary = function () {\r\n        var s = new Symbol(Settings.IMAGINARY);\r\n        s.imaginary = true;\r\n        return s;\r\n    };\r\n    /**\r\n     * Return nerdamer's representation of Infinity\r\n     * @param {int} negative -1 to return negative infinity\r\n     * @returns {Symbol}\r\n     */\r\n    Symbol.infinity = function (negative) {\r\n        var v = new Symbol('Infinity');\r\n        if(negative === -1)\r\n            v.negate();\r\n        return v;\r\n    };\r\n    Symbol.shell = function (group, value) {\r\n        var symbol = new Symbol(value);\r\n        symbol.group = group;\r\n        symbol.symbols = {};\r\n        symbol.length = 0;\r\n        return symbol;\r\n    };\r\n    //sqrt(x) -> x^(1/2)\r\n    Symbol.unwrapSQRT = function (symbol, all) {\r\n        var p = symbol.power;\r\n        if(symbol.fname === SQRT && (symbol.isLinear() || all)) {\r\n            var t = symbol.args[0].clone();\r\n            t.power = t.power.multiply(new Frac(1 / 2));\r\n            t.multiplier = t.multiplier.multiply(symbol.multiplier);\r\n            symbol = t;\r\n            if(all)\r\n                symbol.power = p.multiply(new Frac(1 / 2));\r\n        }\r\n\r\n        return symbol;\r\n    };\r\n    Symbol.hyp = function (a, b) {\r\n        a = a || new Symbol(0);\r\n        b = b || new Symbol(0);\r\n        return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));\r\n    };\r\n    //converts to polar form array\r\n    Symbol.toPolarFormArray = function (symbol) {\r\n        var re, im, r, theta;\r\n        re = symbol.realpart();\r\n        im = symbol.imagpart();\r\n        r = Symbol.hyp(re, im);\r\n        theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));\r\n        return [r, theta];\r\n    };\r\n    //removes parentheses\r\n    Symbol.unwrapPARENS = function (symbol) {\r\n        if(symbol.fname === '') {\r\n            var r = symbol.args[0];\r\n            r.power = r.power.multiply(symbol.power);\r\n            r.multiplier = r.multiplier.multiply(symbol.multiplier);\r\n            if(symbol.fname === '')\r\n                return Symbol.unwrapPARENS(r);\r\n            return r;\r\n        }\r\n        return symbol;\r\n    };\r\n    //quickly creates a Symbol\r\n    Symbol.create = function (value, power) {\r\n        power = power === undefined ? 1 : power;\r\n        return _.parse('(' + value + ')^(' + power + ')');\r\n    };\r\n    Symbol.prototype = {\r\n        /**\r\n         * Gets nth root accounting for rounding errors\r\n         * @param {Number} n\r\n         * @return {Number}\r\n         */\r\n        getNth: function (n) {\r\n            // First calculate the root\r\n            var root = evaluate(_.pow(_.parse(this.multiplier), _.parse(n).invert()));\r\n            // Round of any errors\r\n            var rounded = _.parse(nround(root));\r\n            // Reverse the root\r\n            var e = evaluate(_.pow(rounded, _.parse(n)));\r\n            // If the rounded root equals the original number then we're good \r\n            if(e.equals(_.parse(this.multiplier))) {\r\n                return rounded;\r\n            }\r\n            // Otherwise return the unrounded version\r\n            return root;\r\n        },\r\n        /**\r\n         * Checks if symbol is to the nth power\r\n         * @returns {Boolean}\r\n         */\r\n        isToNth: function (n) {\r\n            // Start by check in the multiplier for squareness\r\n            // First get the root but round it because currently we still depend \r\n            var root = this.getNth(n);\r\n            var nthMultiplier = isInt(root);\r\n            var nthPower;\r\n\r\n            if(this.group === CB) {\r\n                // Start by assuming that all will be square.\r\n                nthPower = true;\r\n                // All it takes is for one of the symbols to not have an even power\r\n                // e.g. x^n1*y^n2 requires that both n1 and n2 are even\r\n                this.each(function (x) {\r\n                    var isNth = x.isToNth(n);\r\n\r\n                    if(!isNth) {\r\n                        nthPower = false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                // Check if the power is divisible by n if it's not a number.\r\n                nthPower = this.group === N ? true : isInt(_.divide(_.parse(this.power), _.parse(n)));\r\n            }\r\n\r\n            return nthMultiplier && nthPower;\r\n        },\r\n        /**\r\n         * Checks if a symbol is square\r\n         * @return {Boolean}\r\n         */\r\n        isSquare: function () {\r\n            return this.isToNth(2);\r\n        },\r\n        /**\r\n         * Checks if a symbol is cube\r\n         * @return {Boolean}\r\n         */\r\n        isCube: function () {\r\n            return this.isToNth(3);\r\n        },\r\n        /**\r\n         * Checks if a symbol is a bare variable\r\n         * @return {Boolean}\r\n         */\r\n        isSimple: function () {\r\n            return this.power.equals(1) && this.multiplier.equals(1);\r\n        },\r\n        /**\r\n         * Simplifies the power of the symbol\r\n         * @returns {Symbol} a clone of the symbol\r\n         */\r\n        powSimp: function () {\r\n            if(this.group === CB) {\r\n                var powers = [],\r\n                        sign = this.multiplier.sign();\r\n                this.each(function (x) {\r\n                    var p = x.power;\r\n                    //why waste time if I can't do anything anyway\r\n                    if(isSymbol(p) || p.equals(1))\r\n                        return this.clone();\r\n                    powers.push(p);\r\n                });\r\n                var min = new Frac(arrayMin(powers));\r\n\r\n                //handle the coefficient\r\n                //handle the multiplier\r\n                var sign = this.multiplier.sign(),\r\n                        m = this.multiplier.clone().abs(),\r\n                        mfactors = Math2.ifactor(m);\r\n                //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\r\n                //we can then reduce it to 2*3*5*(15)^2\r\n                var out_ = new Frac(1);\r\n                var in_ = new Frac(1);\r\n\r\n                for(var x in mfactors) {\r\n                    var n = new Frac(mfactors[x]);\r\n                    if(!n.lessThan(min)) {\r\n                        n = n.divide(min).subtract(new Frac(1));\r\n                        in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket\r\n                    }\r\n\r\n                    out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);\r\n                }\r\n                var t = new Symbol(in_);\r\n                this.each(function (x) {\r\n                    x = x.clone();\r\n                    x.power = x.power.divide(min);\r\n                    t = _.multiply(t, x);\r\n                });\r\n\r\n                var xt = _.symfunction(PARENTHESIS, [t]);\r\n                xt.power = min;\r\n                xt.multiplier = sign < 0 ? out_.negate() : out_;\r\n\r\n                return xt;\r\n            }\r\n            return this.clone();\r\n        },\r\n        /**\r\n         * Checks to see if two functions are of equal value\r\n         * @param {Symbol} symbol\r\n         */\r\n        equals: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.value === symbol.value && this.power.equals(symbol.power)\r\n                    && this.multiplier.equals(symbol.multiplier)\r\n                    && this.group === symbol.group;\r\n        },\r\n        abs: function () {\r\n            var e = this.clone();\r\n            e.multiplier.abs();\r\n            return e;\r\n        },\r\n        // Greater than\r\n        gt: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\r\n        },\r\n        // Greater than\r\n        gte: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.equals(symbol) ||\r\n                    this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\r\n        },\r\n        // Less than\r\n        lt: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\r\n        },\r\n        // Less than\r\n        lte: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.equals(symbol) ||\r\n                    this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\r\n        },\r\n        /**\r\n         * Because nerdamer doesn't group symbols by polynomials but\r\n         * rather a custom grouping method, this has to be\r\n         * reinserted in order to make use of most algorithms. This function\r\n         * checks if the symbol meets the criteria of a polynomial.\r\n         * @param {bool} multivariate\r\n         * @returns {boolean}\r\n         */\r\n        isPoly: function (multivariate) {\r\n            var g = this.group,\r\n                    p = this.power;\r\n            //the power must be a integer so fail if it's not\r\n            if(!isInt(p) || p < 0)\r\n                return false;\r\n            //constants and first orders\r\n            if(g === N || g === S || this.isConstant(true))\r\n                return true;\r\n            var vars = variables(this);\r\n            if(g === CB && vars.length === 1) {\r\n                //the variable is assumed the only one that was found\r\n                var v = vars[0];\r\n                //if no variable then guess what!?!? We're done!!! We have a polynomial.\r\n                if(!v)\r\n                    return true;\r\n                for(var x in this.symbols) {\r\n                    var sym = this.symbols[x];\r\n                    //sqrt(x)\r\n                    if(sym.group === FN && !sym.args[0].isConstant())\r\n                        return false;\r\n                    if(!sym.contains(v) && !sym.isConstant(true))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            //PL groups. These only fail if a power is not an int\r\n            //this should handle cases such as x^2*t\r\n            if(this.isComposite() || g === CB && multivariate) {\r\n                //fail if we're not checking for multivariate polynomials\r\n                if(!multivariate && vars.length > 1)\r\n                    return false;\r\n                //loop though the symbols and check if they qualify\r\n                for(var x in this.symbols) {\r\n                    //we've already the symbols if we're not checking for multivariates at this point\r\n                    //so we check the sub-symbols\r\n                    if(!this.symbols[x].isPoly(multivariate))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n\r\n            /*\r\n             //all tests must have passed so we must be dealing with a polynomial\r\n             return true;\r\n             */\r\n        },\r\n        //removes the requested variable from the symbol and returns the remainder\r\n        stripVar: function (x, exclude_x) {\r\n            var retval;\r\n            if((this.group === PL || this.group === S) && this.value === x)\r\n                retval = new Symbol(exclude_x ? 0 : this.multiplier);\r\n            else if(this.group === CB && this.isLinear()) {\r\n                retval = new Symbol(1);\r\n                this.each(function (s) {\r\n                    if(!s.contains(x, true))\r\n                        retval = _.multiply(retval, s.clone());\r\n                });\r\n                retval.multiplier = retval.multiplier.multiply(this.multiplier);\r\n            }\r\n            else if(this.group === CP && !this.isLinear()) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === CP && this.isLinear()) {\r\n                retval = new Symbol(0);\r\n                this.each(function (s) {\r\n                    if(!s.contains(x)) {\r\n                        var t = s.clone();\r\n                        t.multiplier = t.multiplier.multiply(this.multiplier);\r\n                        retval = _.add(retval, t);\r\n                    }\r\n                });\r\n                //BIG TODO!!! It doesn't make much sense\r\n                if(retval.equals(0))\r\n                    retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === EX && this.power.contains(x, true)) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === FN && this.contains(x)) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else\r\n                //wth? This should technically be the multiplier.\r\n                //Unfortunately this method wasn't very well thought out :`(.\r\n                //should be: retval = new Symbol(this.multiplier);\r\n                //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\r\n                //this will break a bunch of unit tests so be ready to for the long haul\r\n                retval = this.clone();\r\n\r\n\r\n            return retval;\r\n        },\r\n        //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a].\r\n        toArray: function (v, arr) {\r\n            arr = arr || {\r\n                arr: [],\r\n                add: function (x, idx) {\r\n                    var e = this.arr[idx];\r\n                    this.arr[idx] = e ? _.add(e, x) : x;\r\n                }\r\n            };\r\n            var g = this.group;\r\n\r\n            if(g === S && this.contains(v)) {\r\n                arr.add(new Symbol(this.multiplier), this.power);\r\n            }\r\n            else if(g === CB) {\r\n                var a = this.stripVar(v),\r\n                        x = _.divide(this.clone(), a.clone());\r\n                var p = x.isConstant() ? 0 : x.power;\r\n                arr.add(a, p);\r\n            }\r\n            else if(g === PL && this.value === v) {\r\n                this.each(function (x, p) {\r\n                    arr.add(x.stripVar(v), p);\r\n                });\r\n            }\r\n            else if(g === CP) {\r\n                //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\r\n                //each case is handled above\r\n                this.each(function (x) {\r\n                    x.toArray(v, arr);\r\n                });\r\n            }\r\n            else if(this.contains(v)) {\r\n                throw new NerdamerTypeError('Cannot convert to array! Exiting');\r\n            }\r\n            else {\r\n                arr.add(this.clone(), 0); //it's just a constant wrt to v\r\n            }\r\n            //fill the holes\r\n            arr = arr.arr; //keep only the array since we don't need the object anymore\r\n            for(var i = 0; i < arr.length; i++)\r\n                if(!arr[i])\r\n                    arr[i] = new Symbol(0);\r\n            return arr;\r\n        },\r\n        //checks to see if a symbol contans a function\r\n        hasFunc: function (v) {\r\n            var fn_group = this.group === FN || this.group === EX;\r\n            if(fn_group && !v || fn_group && this.contains(v))\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].hasFunc(v))\r\n                        return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        sub: function (a, b) {\r\n            a = !isSymbol(a) ? _.parse(a) : a.clone();\r\n            b = !isSymbol(b) ? _.parse(b) : b.clone();\r\n            if(a.group === N || a.group === P)\r\n                err('Cannot substitute a number. Must be a variable');\r\n            var same_pow = false,\r\n                    a_is_unit_multiplier = a.multiplier.equals(1),\r\n                    m = this.multiplier.clone(),\r\n                    retval;\r\n            /*\r\n             * In order to make the substitution the bases have to first match take\r\n             * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\r\n             * In both cases the first condition is that the bases match so we begin there\r\n             * Either both are PL or both are not PL but we cannot have PL and a non-PL group match\r\n             */\r\n            if(this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {\r\n                //we cleared the first hurdle but a subsitution may not be possible just yet\r\n                if(a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\r\n                    if(a.isLinear()) {\r\n                        retval = b;\r\n                    }\r\n                    else if(a.power.equals(this.power)) {\r\n                        retval = b;\r\n                        same_pow = true;\r\n                    }\r\n                    if(a.multiplier.equals(this.multiplier))\r\n                        m = new Frac(1);\r\n                }\r\n            }\r\n            //the next thing is to handle CB\r\n            else if(this.group === CB || this.previousGroup === CB) {\r\n                retval = new Symbol(1);\r\n                this.each(function (x) {\r\n                    var subbed = _.parse(x.sub(a, b)); //parse it again for safety\r\n                    retval = _.multiply(retval, subbed);\r\n\r\n                });\r\n            }\r\n            else if(this.isComposite()) {\r\n                var symbol = this.clone();\r\n\r\n                if(a.isComposite() && symbol.isComposite() && symbol.isLinear() && a.isLinear()) {\r\n                    var find = function (stack, needle) {\r\n                        for(var x in stack.symbols) {\r\n                            var sym = stack.symbols[x];\r\n                            //if the symbol equals the needle or it's within the sub-symbols we're done\r\n                            if(sym.isComposite() && find(sym, needle) || sym.equals(needle))\r\n                                return true;\r\n                        }\r\n                        return false;\r\n                    };\r\n                    //go fish\r\n                    for(var x in a.symbols) {\r\n                        if(!find(symbol, a.symbols[x]))\r\n                            return symbol.clone();\r\n                    }\r\n                    retval = _.add(_.subtract(symbol.clone(), a), b);\r\n                }\r\n                else {\r\n                    retval = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        retval = _.add(retval, x.sub(a, b));\r\n                    });\r\n                }\r\n            }\r\n            else if(this.group === EX) {\r\n                // the parsed value could be a function so parse and sub\r\n                retval = _.parse(this.value).sub(a, b);\r\n            }\r\n            else if(this.group === FN) {\r\n                var nargs = [];\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    var arg = this.args[i];\r\n                    if(!isSymbol(arg))\r\n                        arg = _.parse(arg);\r\n                    nargs.push(arg.sub(a, b));\r\n                }\r\n                retval = _.symfunction(this.fname, nargs);\r\n            }\r\n            //if we did manage a substitution\r\n            if(retval) {\r\n                if(!same_pow) {\r\n                    //substitute the power\r\n                    var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);\r\n                    //now raise the symbol to that power\r\n                    retval = _.pow(retval, p);\r\n                }\r\n\r\n                //transfer the multiplier\r\n                retval.multiplier = retval.multiplier.multiply(m);\r\n\r\n                //done\r\n                return retval;\r\n            }\r\n            //if all else fails\r\n            return this.clone();\r\n        },\r\n        isMonomial: function () {\r\n            if(this.group === S)\r\n                return true;\r\n            if(this.group === CB) {\r\n                for(var x in this.symbols)\r\n                    if(this.symbols[x].group !== S)\r\n                        return false;\r\n            }\r\n            else\r\n                return false;\r\n            return true;\r\n        },\r\n        isPi: function () {\r\n            return this.group === S && this.value === 'pi';\r\n        },\r\n        sign: function () {\r\n            return this.multiplier.sign();\r\n        },\r\n        isE: function () {\r\n            return this.value === 'e';\r\n        },\r\n        isSQRT: function () {\r\n            return this.fname === SQRT;\r\n        },\r\n        isConstant: function (check_all, check_symbols) {\r\n            if(check_symbols && this.group === CB) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].isConstant(true))\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            if(check_all === 'functions' && this.isComposite()) {\r\n                var isConstant = true;\r\n\r\n                this.each(function (x) {\r\n                    if(!x.isConstant(check_all, check_symbols)) {\r\n                        isConstant = false;\r\n                    }\r\n                }, true);\r\n\r\n                return isConstant;\r\n            }\r\n\r\n            if(check_all === 'all' && (this.isPi() || this.isE())) {\r\n                return true;\r\n            }\r\n\r\n            if(check_all && this.group === FN) {\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    if(!this.args[i].isConstant(check_all))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            if(check_all)\r\n                return isNumericSymbol(this);\r\n            return this.value === CONST_HASH;\r\n        },\r\n        //the symbols is imaginary if\r\n        //1. n*i\r\n        //2. a+b*i\r\n        //3. a*i\r\n        isImaginary: function () {\r\n            if(this.imaginary)\r\n                return true;\r\n            else if(this.symbols) {\r\n                for(var x in this.symbols)\r\n                    if(this.symbols[x].isImaginary())\r\n                        return true;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Returns the real part of a symbol\r\n         * @returns {Symbol}\r\n         */\r\n        realpart: function () {\r\n            if(this.isConstant()) {\r\n                return this.clone();\r\n            }\r\n            else if(this.imaginary)\r\n                return new Symbol(0);\r\n            else if(this.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                this.each(function (x) {\r\n                    retval = _.add(retval, x.realpart());\r\n                });\r\n                return retval;\r\n            }\r\n            else if(this.isImaginary())\r\n                return new Symbol(0);\r\n            return this.clone();\r\n        },\r\n        /*\r\n         * Return imaginary part of a symbol\r\n         * @returns {Symbol}\r\n         */\r\n        imagpart: function () {\r\n            if(this.group === S && this.isImaginary())\r\n                return new Symbol(this.multiplier);\r\n            if(this.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                this.each(function (x) {\r\n                    retval = _.add(retval, x.imagpart());\r\n                });\r\n                return retval;\r\n            }\r\n            if(this.group === CB)\r\n                return this.stripVar(Settings.IMAGINARY);\r\n            return new Symbol(0);\r\n        },\r\n        isInteger: function () {\r\n            return this.isConstant() && this.multiplier.isInteger();\r\n        },\r\n        isLinear: function (wrt) {\r\n            if(wrt) {\r\n                if(this.isConstant())\r\n                    return true;\r\n                if(this.group === S) {\r\n                    if(this.value === wrt)\r\n                        return this.power.equals(1);\r\n                    else\r\n                        return true;\r\n                }\r\n\r\n                if(this.isComposite() && this.power.equals(1)) {\r\n                    for(var x in this.symbols) {\r\n                        if(!this.symbols[x].isLinear(wrt))\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                if(this.group === CB && this.symbols[wrt])\r\n                    return this.symbols[wrt].isLinear(wrt);\r\n                return false;\r\n            }\r\n            else\r\n                return this.power.equals(1);\r\n        },\r\n        /**\r\n         * Checks to see if a symbol has a function by a specified name or within a specified list\r\n         * @param {String|String[]} names\r\n         * @returns {Boolean}\r\n         */\r\n        containsFunction: function (names) {\r\n            if(typeof names === 'string')\r\n                names = [names];\r\n            if(this.group === FN && names.indexOf(this.fname) !== -1)\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].containsFunction(names))\r\n                        return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        multiplyPower: function (p2) {\r\n            //leave out 1\r\n            if(this.group === N && this.multiplier.equals(1))\r\n                return this;\r\n\r\n            var p1 = this.power;\r\n\r\n            if(this.group !== EX && p2.group === N) {\r\n                var p = p2.multiplier;\r\n                if(this.group === N && !p.isInteger()) {\r\n                    this.convert(P);\r\n                }\r\n\r\n                this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\r\n\r\n                if(this.group === P && isInt(this.power)) {\r\n                    //bring it back to an N\r\n                    this.value = Math.pow(this.value, this.power);\r\n                    this.toLinear();\r\n                    this.convert(N);\r\n                }\r\n            }\r\n            else {\r\n                if(this.group !== EX) {\r\n                    p1 = new Symbol(p1);\r\n                    this.convert(EX);\r\n                }\r\n                this.power = _.multiply(p1, p2);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        setPower: function (p, retainSign) {\r\n            //leave out 1\r\n            if(this.group === N && this.multiplier.equals(1)) {\r\n                return this;\r\n            }\r\n            if(this.group === EX && !isSymbol(p)) {\r\n                this.group = this.previousGroup;\r\n                delete this.previousGroup;\r\n                if(this.group === N) {\r\n                    this.multiplier = new Frac(this.value);\r\n                    this.value = CONST_HASH;\r\n                }\r\n                else\r\n                    this.power = p;\r\n            }\r\n            else {\r\n                var isSymbolic = false;\r\n                if(isSymbol(p)) {\r\n                    if(p.group === N) {\r\n                        //p should be the multiplier instead\r\n                        p = p.multiplier;\r\n\r\n                    }\r\n                    else {\r\n                        isSymbolic = true;\r\n                    }\r\n                }\r\n                var group = isSymbolic ? EX : P;\r\n                this.power = p;\r\n                if(this.group === N && group)\r\n                    this.convert(group, retainSign);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * Checks to see if symbol is located in the denominator\r\n         * @returns {boolean}\r\n         */\r\n        isInverse: function () {\r\n            if(this.group === EX)\r\n                return (this.power.multiplier.lessThan(0));\r\n            return this.power < 0;\r\n        },\r\n        /**\r\n         * Make a duplicate of a symbol by copying a predefined list of items.\r\n         * The name 'copy' would probably be a more appropriate name.\r\n         * to a new symbol\r\n         * @param {Symbol} c\r\n         * @returns {Symbol}\r\n         */\r\n        clone: function (c) {\r\n            var clone = c || new Symbol(0),\r\n                    //list of properties excluding power as this may be a symbol and would also need to be a clone.\r\n                    properties = [\r\n                        'value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\r\n                    l = properties.length, i;\r\n            if(this.symbols) {\r\n                clone.symbols = {};\r\n                for(var x in this.symbols) {\r\n                    clone.symbols[x] = this.symbols[x].clone();\r\n                }\r\n            }\r\n\r\n            for(i = 0; i < l; i++) {\r\n                if(this[properties[i]] !== undefined) {\r\n                    clone[properties[i]] = this[properties[i]];\r\n                }\r\n            }\r\n\r\n            clone.power = this.power.clone();\r\n            clone.multiplier = this.multiplier.clone();\r\n            //add back the flag to track if this symbol is a conversion symbol\r\n            if(this.isConversion)\r\n                clone.isConversion = this.isConversion;\r\n\r\n            if(this.isUnit)\r\n                clone.isUnit = this.isUnit;\r\n\r\n            return clone;\r\n        },\r\n        /**\r\n         * Converts a symbol multiplier to one.\r\n         * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\r\n         * @returns {Symbol}\r\n         */\r\n        toUnitMultiplier: function (keepSign) {\r\n            this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\r\n            this.multiplier.den = new bigInt(1);\r\n            return this;\r\n        },\r\n        /**\r\n         * Converts a Symbol's power to one.\r\n         * @returns {Symbol}\r\n         */\r\n        toLinear: function () {\r\n            // Do nothing if it's already linear\r\n            if(this.power.equals(1)) {\r\n                return this;\r\n            }\r\n            this.setPower(new Frac(1));\r\n            return this;\r\n        },\r\n        /**\r\n         * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\r\n         * @param {Function} fn\r\n         * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well\r\n         */\r\n        each: function (fn, deep) {\r\n            if(!this.symbols) {\r\n                fn.call(this, this, this.value);\r\n            }\r\n            else {\r\n                for(var x in this.symbols) {\r\n                    var sym = this.symbols[x];\r\n                    if(sym.group === PL && deep) {\r\n                        for(var y in sym.symbols) {\r\n                            fn.call(x, sym.symbols[y], y);\r\n                        }\r\n                    }\r\n                    else\r\n                        fn.call(this, sym, x);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * A numeric value to be returned for Javascript. It will try to\r\n         * return a number as far a possible but in case of a pure symbolic\r\n         * symbol it will just return its text representation\r\n         * @returns {String|Number}\r\n         */\r\n        valueOf: function () {\r\n            if(this.group === N)\r\n                return this.multiplier.valueOf();\r\n            else if(this.power === 0) {\r\n                return 1;\r\n            }\r\n            else if(this.multiplier === 0) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return text(this, 'decimals');\r\n            }\r\n        },\r\n        /**\r\n         * Checks to see if a symbols has a particular variable within it.\r\n         * Pass in true as second argument to include the power of exponentials\r\n         * which aren't check by default.\r\n         * @example var s = _.parse('x+y+z'); s.contains('y');\r\n         * //returns true\r\n         * @param {any} variable\r\n         * @param {boolean} all\r\n         * @returns {boolean}\r\n         */\r\n        contains: function (variable, all) {\r\n            //contains expects a string\r\n            variable = String(variable);\r\n            var g = this.group;\r\n            if(this.value === variable)\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].contains(variable, all))\r\n                        return true;\r\n                }\r\n            }\r\n            if(g === FN || this.previousGroup === FN) {\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    if(this.args[i].contains(variable, all))\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            if(g === EX) {\r\n                //exit only if it does\r\n                if(all && this.power.contains(variable, all)) {\r\n                    return true;\r\n                }\r\n                if(this.value === variable)\r\n                    return true;\r\n\r\n            }\r\n\r\n            return this.value === variable;\r\n        },\r\n        /**\r\n         * Negates a symbols\r\n         * @returns {boolean}\r\n         */\r\n        negate: function () {\r\n            this.multiplier.negate();\r\n            if(this.group === CP || this.group === PL)\r\n                this.distributeMultiplier();\r\n            return this;\r\n        },\r\n        /**\r\n         * Inverts a symbol\r\n         * @param {boolean} power_only\r\n         * @param {boolean} all\r\n         * @returns {boolean}\r\n         */\r\n        invert: function (power_only, all) {\r\n            //invert the multiplier\r\n            if(!power_only)\r\n                this.multiplier = this.multiplier.invert();\r\n            //invert the rest\r\n            if(isSymbol(this.power)) {\r\n                this.power.negate();\r\n            }\r\n            else if(this.group === CB && all) {\r\n                this.each(function (x) {\r\n                    return x.invert();\r\n                });\r\n            }\r\n            else {\r\n                if(this.power && this.group !== N)\r\n                    this.power.negate();\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Symbols of group CP or PL may have the multiplier being carried by\r\n         * the top level symbol at any given time e.g. 2*(x+y+z). This is\r\n         * convenient in many cases, however in some cases the multiplier needs\r\n         * to be carried individually e.g. 2*x+2*y+2*z.\r\n         * This method distributes the multiplier over the entire symbol\r\n         * @param {boolean} all\r\n         * @returns {Symbol}\r\n         */\r\n        distributeMultiplier: function (all) {\r\n            var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\r\n            if(this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {\r\n                for(var x in this.symbols) {\r\n                    var s = this.symbols[x];\r\n                    s.multiplier = s.multiplier.multiply(this.multiplier);\r\n                    s.distributeMultiplier();\r\n                }\r\n                this.toUnitMultiplier();\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * This method expands the exponent over the entire symbol just like\r\n         * distributeMultiplier\r\n         * @returns {Symbol}\r\n         */\r\n        distributeExponent: function () {\r\n            if(!this.power.equals(1)) {\r\n                var p = this.power;\r\n                for(var x in this.symbols) {\r\n                    var s = this.symbols[x];\r\n                    if(s.group === EX) {\r\n                        s.power = _.multiply(s.power, new Symbol(p));\r\n                    }\r\n                    else {\r\n                        this.symbols[x].power = this.symbols[x].power.multiply(p);\r\n                    }\r\n                }\r\n                this.toLinear();\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * This method will attempt to up-convert or down-convert one symbol\r\n         * from one group to another. Not all symbols are convertible from one\r\n         * group to another however. In that case the symbol will remain\r\n         * unchanged.\r\n         * @param {int} group\r\n         * @param {string} imaginary\r\n         */\r\n        convert: function (group, imaginary) {\r\n            if(group > FN) {\r\n                //make a clone of this symbol;\r\n                var cp = this.clone();\r\n\r\n                //attach a symbols object and upgrade the group\r\n                this.symbols = {};\r\n\r\n                if(group === CB) {\r\n                    //symbol of group CB hold symbols bound together through multiplication\r\n                    //because of commutativity this multiplier can technically be anywhere within the group\r\n                    //to keep track of it however it's easier to always have the top level carry it\r\n                    cp.toUnitMultiplier();\r\n                }\r\n                else {\r\n                    //reset the symbol\r\n                    this.toUnitMultiplier();\r\n                }\r\n\r\n                if(this.group === FN) {\r\n                    cp.args = this.args;\r\n                    delete this.args;\r\n                    delete this.fname;\r\n                }\r\n\r\n                //the symbol may originate from the symbol i but this property no longer holds true\r\n                //after copying\r\n                if(this.isImgSymbol)\r\n                    delete this.isImgSymbol;\r\n\r\n                this.toLinear();\r\n                //attach a clone of this symbol to the symbols object using its proper key\r\n                this.symbols[cp.keyForGroup(group)] = cp;\r\n                this.group = group;\r\n                //objects by default don't have a length property. However, in order to keep track of the number\r\n                //of sub-symbols we have to impliment our own.\r\n                this.length = 1;\r\n            }\r\n            else if(group === EX) {\r\n                //1^x is just one so check and make sure\r\n                if(!(this.group === N && this.multiplier.equals(1))) {\r\n                    if(this.group !== EX)\r\n                        this.previousGroup = this.group;\r\n                    if(this.group === N) {\r\n                        this.value = this.multiplier.num.toString();\r\n                        this.toUnitMultiplier();\r\n                    }\r\n                    //update the hash to reflect the accurate hash\r\n                    else\r\n                        this.value = text(this, 'hash');\r\n\r\n                    this.group = EX;\r\n                }\r\n            }\r\n            else if(group === N) {\r\n                var m = this.multiplier.toDecimal();\r\n                if(this.symbols)\r\n                    this.symbols = undefined;\r\n                new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);\r\n            }\r\n            else if(group === P && this.group === N) {\r\n                this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\r\n                this.toUnitMultiplier(!imaginary);\r\n                this.group = P;\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * This method is one of the principal methods to make it all possible.\r\n         * It performs cleanup and prep operations whenever a symbols is\r\n         * inserted. If the symbols results in a 1 in a CB (multiplication)\r\n         * group for instance it will remove the redundant symbol. Similarly\r\n         * in a symbol of group PL or CP (symbols glued by multiplication) it\r\n         * will remove any dangling zeroes from the symbol. It will also\r\n         * up-convert or down-convert a symbol if it detects that it's\r\n         * incorrectly grouped. It should be noted that this method is not\r\n         * called directly but rather by the 'attach' method for addition groups\r\n         * and the 'combine' method for multiplication groups.\r\n         * @param {Symbol} symbol\r\n         * @param {String} action\r\n         */\r\n        insert: function (symbol, action) {\r\n            //this check can be removed but saves a lot of aggravation when trying to hunt down\r\n            //a bug. If left, you will instantly know that the error can only be between 2 symbols.\r\n            if(!isSymbol(symbol))\r\n                err('Object ' + symbol + ' is not of type Symbol!');\r\n            if(this.symbols) {\r\n                var group = this.group;\r\n                if(group > FN) {\r\n                    var key = symbol.keyForGroup(group);\r\n                    var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\r\n                    if(action === 'add') {\r\n                        var hash = key;\r\n                        if(existing) {\r\n                            //add them together using the parser\r\n                            this.symbols[hash] = _.add(existing, symbol);\r\n                            //if the addition resulted in a zero multiplier remove it\r\n                            if(this.symbols[hash].multiplier.equals(0)) {\r\n                                delete this.symbols[hash];\r\n                                this.length--;\r\n\r\n                                if(this.length === 0) {\r\n                                    this.convert(N);\r\n                                    this.multiplier = new Frac(0);\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.symbols[key] = symbol;\r\n                            this.length++;\r\n                        }\r\n                    }\r\n                    else {\r\n                        //check if this is of group P and unwrap before inserting\r\n                        if(symbol.group === P && isInt(symbol.power)) {\r\n                            symbol.convert(N);\r\n                        }\r\n\r\n                        //transfer the multiplier to the upper symbol but only if the symbol numeric\r\n                        if(symbol.group !== EX) {\r\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier);\r\n                            symbol.toUnitMultiplier();\r\n                        }\r\n                        else {\r\n                            symbol.parens = symbol.multiplier.lessThan(0);\r\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\r\n                            symbol.toUnitMultiplier(true);\r\n                        }\r\n\r\n                        if(existing) {\r\n                            //remove because the symbol may have changed\r\n                            symbol = _.multiply(remove(this.symbols, key), symbol);\r\n                            if(symbol.isConstant()) {\r\n                                this.multiplier = this.multiplier.multiply(symbol.multiplier);\r\n                                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\r\n                            }\r\n\r\n                            this.length--;\r\n                            //clean up\r\n                        }\r\n\r\n                        //don't insert the symbol if it's 1\r\n                        if(!symbol.isOne(true)) {\r\n                            this.symbols[key] = symbol;\r\n                            this.length++;\r\n                        }\r\n                        else if(symbol.multiplier.lessThan(0)) {\r\n                            this.negate(); //put back the sign\r\n                        }\r\n                    }\r\n\r\n                    //clean up\r\n                    if(this.length === 0)\r\n                        this.convert(N);\r\n                    //update the hash\r\n                    if(this.group === CP || this.group === CB) {\r\n                        this.updateHash();\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n        //the insert method for addition\r\n        attach: function (symbol) {\r\n            if(isArray(symbol)) {\r\n                for(var i = 0; i < symbol.length; i++)\r\n                    this.insert(symbol[i], 'add');\r\n                return this;\r\n            }\r\n            return this.insert(symbol, 'add');\r\n        },\r\n        //the insert method for multiplication\r\n        combine: function (symbol) {\r\n            if(isArray(symbol)) {\r\n                for(var i = 0; i < symbol.length; i++)\r\n                    this.insert(symbol[i], 'multiply');\r\n                return this;\r\n            }\r\n            return this.insert(symbol, 'multiply');\r\n        },\r\n        /**\r\n         * This method should be called after any major \"surgery\" on a symbol.\r\n         * It updates the hash of the symbol for example if the fname of a\r\n         * function has changed it will update the hash of the symbol.\r\n         */\r\n        updateHash: function () {\r\n            if(this.group === N)\r\n                return;\r\n\r\n            if(this.group === FN) {\r\n                var contents = '',\r\n                        args = this.args,\r\n                        is_parens = this.fname === PARENTHESIS;\r\n                for(var i = 0; i < args.length; i++)\r\n                    contents += (i === 0 ? '' : ',') + text(args[i]);\r\n                var fn_name = is_parens ? '' : this.fname;\r\n                this.value = fn_name + (is_parens ? contents : inBrackets(contents));\r\n            }\r\n            else if(!(this.group === S || this.group === PL)) {\r\n                this.value = text(this, 'hash');\r\n            }\r\n        },\r\n        /**\r\n         * this function defines how every group in stored within a group of\r\n         * higher order think of it as the switchboard for the library. It\r\n         * defines the hashes for symbols.\r\n         * @param {int} group\r\n         */\r\n        keyForGroup: function (group) {\r\n            var g = this.group;\r\n            var key;\r\n\r\n            if(g === N) {\r\n                key = this.value;\r\n            }\r\n            else if(g === S || g === P) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = this.value;\r\n            }\r\n            else if(g === FN) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n            else if(g === PL) {\r\n                //if the order is reversed then we'll assume multiplication\r\n                //TODO: possible future dilemma\r\n                if(group === CB)\r\n                    key = text(this, 'hash');\r\n                else if(group === CP) {\r\n                    if(this.power.equals(1))\r\n                        key = this.value;\r\n                    else\r\n                        key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();\r\n                }\r\n                else if(group === PL)\r\n                    key = this.power.toString();\r\n                else\r\n                    key = this.value;\r\n                return key;\r\n            }\r\n            else if(g === CP) {\r\n                if(group === CP) {\r\n                    key = text(this, 'hash');\r\n                }\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = this.value;\r\n            }\r\n            else if(g === CB) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n            else if(g === EX) {\r\n                if(group === PL)\r\n                    key = text(this.power);\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n\r\n            return key;\r\n        },\r\n        /**\r\n         * Symbols are typically stored in an object which works fine for most\r\n         * cases but presents a problem when the order of the symbols makes\r\n         * a difference. This function simply collects all the symbols and\r\n         * returns them as an array. If a function is supplied then that\r\n         * function is called on every symbol contained within the object.\r\n         * @param {Function} fn\r\n         * @param {Object} opt\r\n         * @param {Function} sort_fn\r\n         * @@param {Boolean} expand_symbol\r\n         * @returns {Array}\r\n         */\r\n        collectSymbols: function (fn, opt, sort_fn, expand_symbol) {\r\n            var collected = [];\r\n            if(!this.symbols)\r\n                collected.push(this);\r\n            else {\r\n                for(var x in this.symbols) {\r\n                    var symbol = this.symbols[x];\r\n                    if(expand_symbol && (symbol.group === PL || symbol.group === CP)) {\r\n                        collected = collected.concat(symbol.collectSymbols());\r\n                    }\r\n                    else\r\n                        collected.push(fn ? fn(symbol, opt) : symbol);\r\n                }\r\n            }\r\n            if(sort_fn === null)\r\n                sort_fn = undefined; //WTF Firefox? Seriously?\r\n\r\n            return collected.sort(sort_fn);//sort hopefully gives us some sort of consistency\r\n        },\r\n        /**\r\n         * Returns the latex representation of the symbol\r\n         * @param {String} option\r\n         * @returns {String}\r\n         */\r\n        latex: function (option) {\r\n            return LaTeX.latex(this, option);\r\n        },\r\n        /**\r\n         * Returns the text representation of a symbol\r\n         * @param {String} option\r\n         * @returns {String}\r\n         */\r\n        text: function (option) {\r\n            return text(this, option);\r\n        },\r\n        /**\r\n         * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\r\n         * @@param {bool} abs Compares the absolute value\r\n         */\r\n        isOne: function (abs) {\r\n            var f = abs ? 'absEquals' : 'equals';\r\n            if(this.group === N)\r\n                return this.multiplier[f](1);\r\n            else\r\n                return this.power.equals(0);\r\n        },\r\n        isComposite: function () {\r\n            var g = this.group,\r\n                    pg = this.previousGroup;\r\n            return g === CP || g === PL || pg === PL || pg === CP;\r\n        },\r\n        isCombination: function () {\r\n            var g = this.group,\r\n                    pg = this.previousGroup;\r\n            return g === CB || pg === CB;\r\n        },\r\n        lessThan: function (n) {\r\n            return this.multiplier.lessThan(n);\r\n        },\r\n        greaterThan: function (n) {\r\n            if(!isSymbol(n)) {\r\n                n = new Symbol(n);\r\n            }\r\n\r\n            // We can't tell for sure if a is greater than be if they're not both numbers\r\n            if(!this.isConstant(true) || !n.isConstant(true)) {\r\n                return false;\r\n            }\r\n\r\n            return this.multiplier.greaterThan(n.multiplier);\r\n        },\r\n        /**\r\n         * Get's the denominator of the symbol if the symbol is of class CB (multiplication)\r\n         * with other classes the symbol is either the denominator or not.\r\n         * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\r\n         * denominator and has to be found by looking at the actual symbols themselves.\r\n         */\r\n        getDenom: function () {\r\n            var retval, symbol;\r\n            symbol = this.clone();\r\n            //e.g. 1/(x*(x+1))\r\n            if(this.group === CB && this.power.lessThan(0))\r\n                symbol = _.expand(symbol);\r\n\r\n            //if the symbol already is the denominator... DONE!!!\r\n            if(symbol.power.lessThan(0) || symbol.group === EX && symbol.power.multiplier.lessThan(0)) {\r\n                var d = _.parse(symbol.multiplier.den);\r\n                retval = symbol.toUnitMultiplier();\r\n                retval.power.negate();\r\n                retval = _.multiply(d, retval); //put back the coeff\r\n            }\r\n            else if(symbol.group === CB) {\r\n                retval = _.parse(symbol.multiplier.den);\r\n                for(var x in symbol.symbols) {\r\n                    var s = symbol.symbols[x];\r\n                    if(s.power < 0 || s.group === EX && s.power.multiplier.lessThan(0))\r\n                        retval = _.multiply(retval, symbol.symbols[x].clone().invert());\r\n                }\r\n            }\r\n            else {\r\n                retval = _.parse(symbol.multiplier.den);\r\n            }\r\n            return retval;\r\n        },\r\n        getNum: function () {\r\n            var retval, symbol;\r\n            symbol = this.clone();\r\n            //e.g. 1/(x*(x+1))\r\n            if(symbol.group === CB && symbol.power.lessThan(0))\r\n                symbol = _.expand(symbol);\r\n            //if the symbol already is the denominator... DONE!!!\r\n            if(symbol.power.greaterThan(0) && symbol.group !== CB || symbol.group === EX && symbol.power.multiplier.greaterThan(0)) {\r\n                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\r\n            }\r\n            else if(symbol.group === CB) {\r\n                retval = _.parse(symbol.multiplier.num);\r\n                symbol.each(function (x) {\r\n                    if(x.power > 0 || x.group === EX && x.power.multiplier > 0) {\r\n                        retval = _.multiply(retval, x.clone());\r\n                    }\r\n                });\r\n            }\r\n//            else if(symbol.group === EX && this.previousGroup === S) {\r\n//                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\r\n//            }\r\n            else {\r\n                retval = _.parse(symbol.multiplier.num);\r\n            }\r\n            return retval;\r\n        },\r\n        toString: function () {\r\n            return this.text();\r\n        }\r\n    };\r\n\r\n//Parser =======================================================================\r\n    //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\r\n    function Parser() {\r\n        //Point to the local parser instead of the global one\r\n        var _ = this;\r\n        var bin = {};\r\n        var preprocessors = {names: [], actions: []};\r\n\r\n//Parser.classes ===============================================================\r\n        function Slice(upper, lower) {\r\n            this.start = upper;\r\n            this.end = lower;\r\n        }\r\n        ;\r\n        Slice.prototype.isConstant = function () {\r\n            return this.start.isConstant() && this.end.isConstant();\r\n        };\r\n        Slice.prototype.text = function () {\r\n            return text(this.start) + ':' + text(this.end);\r\n        };\r\n\r\n        /**\r\n         * Class used to collect arguments for functions\r\n         * @returns {Parser.Collection}\r\n         */\r\n        function Collection() {\r\n            this.elements = [];\r\n        }\r\n        Collection.prototype.append = function (e) {\r\n            this.elements.push(e);\r\n        };\r\n        Collection.prototype.getItems = function () {\r\n            return this.elements;\r\n        };\r\n        Collection.prototype.toString = function () {\r\n            return _.pretty_print(this.elements);\r\n        };\r\n        Collection.create = function (e) {\r\n            var collection = new Collection();\r\n            if(e)\r\n                collection.append(e);\r\n            return collection;\r\n        };\r\n\r\n        function Token(node, node_type, column) {\r\n            this.type = node_type;\r\n            this.value = node;\r\n            if(column !== undefined)\r\n                this.column = column + 1;\r\n            if(node_type === Token.OPERATOR) {\r\n                //copy everything over from the operator\r\n                var operator = operators[node];\r\n                for(var x in operator)\r\n                    this[x] = operator[x];\r\n\r\n            }\r\n            else if(node_type === Token.FUNCTION) {\r\n                this.precedence = Token.MAX_PRECEDENCE; //leave enough roon\r\n                this.leftAssoc = false;\r\n            }\r\n        }\r\n        Token.prototype.toString = function () {\r\n            return this.value;\r\n        };\r\n        Token.prototype.toString = function () {\r\n            if(this.is_prefix)\r\n                return '`' + this.value;\r\n            return this.value;\r\n        };\r\n        //some constants\r\n        Token.OPERATOR = 'OPERATOR';\r\n        Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';\r\n        Token.FUNCTION = 'FUNCTION';\r\n        Token.UNIT = 'UNIT';\r\n        Token.KEYWORD = 'KEYWORD';\r\n        Token.MAX_PRECEDENCE = 999;\r\n        //create link to classes\r\n        this.classes = {\r\n            Collection: Collection,\r\n            Slice: Slice,\r\n            Token: Token\r\n        };\r\n//Parser.modules ===============================================================\r\n        //object for functions which handle complex number\r\n        var complex = {\r\n            prec: undefined,\r\n            cos: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.cos(r) * Math.cosh(i));\r\n                im = _.parse(Math.sin(r) * Math.sinh(i));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sin: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sin(r) * Math.cosh(i));\r\n                im = _.parse(Math.cos(r) * Math.sinh(i));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            tan: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));\r\n                im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sec: function (r, i) {\r\n                var t = this.removeDen(this.cos(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            csc: function (r, i) {\r\n                var t = this.removeDen(this.sin(r, i));\r\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            cot: function (r, i) {\r\n                var t = this.removeDen(this.tan(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            acos: function (r, i) {\r\n                var symbol, sq, a, b, c, squared;\r\n                symbol = this.fromArray([r, i]);\r\n                squared = _.pow(symbol.clone(), new Symbol(2));\r\n                sq = _.expand(squared); //z*z\r\n                a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());\r\n                b = _.expand(_.add(symbol.clone(), a));\r\n                c = log(b);\r\n                return _.expand(_.multiply(Symbol.imaginary().negate(), c));\r\n            },\r\n            asin: function (r, i) {\r\n                return _.subtract(_.parse('pi/2'), this.acos(r, i));\r\n            },\r\n            atan: function (r, i) {\r\n                // Handle i and -i\r\n                if(r.equals(0) && (i.equals(1) || i.equals(-1))) {\r\n                    // Just copy Wolfram Alpha for now. The parenthesis \r\n                    return _.parse(`${Symbol.infinity()}*${Settings.IMAGINARY}*${i}`);\r\n                }\r\n                var a, b, c, symbol;\r\n                symbol = complex.fromArray([r, i]);\r\n                a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));\r\n                b = log(_.expand(_.subtract(new Symbol(1), a.clone())));\r\n                c = log(_.expand(_.add(new Symbol(1), a.clone())));\r\n                return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));\r\n            },\r\n            asec: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.acos.apply(this, d);\r\n            },\r\n            acsc: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.asin.apply(this, d);\r\n            },\r\n            acot: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.atan.apply(this, d);\r\n            },\r\n            //Hyperbolic trig\r\n            cosh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.cosh(r) * Math.cos(i));\r\n                im = _.parse(Math.sinh(r) * Math.sin(i));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sinh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sinh(r) * Math.cos(i));\r\n                im = _.parse(Math.cosh(r) * Math.sin(i));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            tanh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));\r\n                im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sech: function (r, i) {\r\n                var t = this.removeDen(this.cosh(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            csch: function (r, i) {\r\n                var t = this.removeDen(this.sinh(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            coth: function (r, i) {\r\n                var t = this.removeDen(this.tanh(r, i));\r\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            acosh: function (r, i) {\r\n                var a, b, z;\r\n                z = this.fromArray([r, i]);\r\n                a = sqrt(_.add(z.clone(), new Symbol(1)));\r\n                b = sqrt(_.subtract(z.clone(), new Symbol(1)));\r\n                return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));\r\n            },\r\n            asinh: function (r, i) {\r\n                var a, z;\r\n                z = this.fromArray([r, i]);\r\n                a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));\r\n                return _.expand(log(_.add(z, a)));\r\n            },\r\n            atanh: function (r, i) {\r\n                var a, b, z;\r\n                z = this.fromArray([r, i]);\r\n                a = log(_.add(z.clone(), new Symbol(1)));\r\n                b = log(_.subtract(new Symbol(1), z));\r\n                return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));\r\n            },\r\n            asech: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.acosh.apply(this, t);\r\n            },\r\n            acsch: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.asinh.apply(this, t);\r\n            },\r\n            acoth: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.atanh.apply(this, t);\r\n            },\r\n            sqrt: function (symbol) {\r\n                var re, im, h, a, d;\r\n                re = symbol.realpart();\r\n                im = symbol.imagpart();\r\n                h = Symbol.hyp(re, im);\r\n                a = _.add(re.clone(), h);\r\n                d = sqrt(_.multiply(new Symbol(2), a.clone()));\r\n                return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));\r\n            },\r\n            log: function (r, i) {\r\n                var re, im, phi;\r\n                re = log(Symbol.hyp(r, i));\r\n                phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal())) : Math.atan2(i, r);\r\n                im = _.parse(phi);\r\n                return _.add(re, _.multiply(Symbol.imaginary(), im));\r\n            },\r\n            erf(symbol, n) {\r\n                //Do nothing for now. Revisit this in the future.\r\n                return _.symfunction('erf', [symbol]);\r\n\r\n                n = n || 30;\r\n\r\n                var f = function (R, I) {\r\n                    return block('PARSE2NUMBER', function () {\r\n                        var retval = new Symbol(0);\r\n                        for(var i = 0; i < n; i++) {\r\n                            var a, b;\r\n                            a = _.parse(bigDec.exp(bigDec(i).toPower(2).neg().dividedBy(bigDec(n).pow(2).plus(bigDec(R).toPower(2).times(4)))));\r\n                            b = _.parse(format('2*({1})-e^(-(2*{0}*{1}*{2}))*(2*{1}*cosh({2}*{3})-{0}*{3}*sinh({3}*{2}))', Settings.IMAGINARY, R, I, i));\r\n                            retval = _.add(retval, _.multiply(a, b));\r\n                        }\r\n                        return _.multiply(retval, new Symbol(2));\r\n                    }, true);\r\n                };\r\n                var re, im, a, b, c, k;\r\n                re = symbol.realpart();\r\n                im = symbol.imagpart();\r\n\r\n                k = _.parse(format('(e^(-{0}^2))/pi', re));\r\n                a = _.parse(format('(1-e^(-(2*{0}*{1}*{2})))/(2*{1})', Settings.IMAGINARY, re, im));\r\n                b = f(re.toString(), im.toString());\r\n\r\n                return _.add(_.parse(Math2.erf(re.toString())), _.multiply(k, _.add(a, b)));\r\n            },\r\n            removeDen: function (symbol) {\r\n                var den, r, i, re, im;\r\n                if(isArray(symbol)) {\r\n                    r = symbol[0];\r\n                    i = symbol[1];\r\n                }\r\n                else {\r\n                    r = symbol.realpart();\r\n                    i = symbol.imagpart();\r\n                }\r\n\r\n                den = Math.pow(r, 2) + Math.pow(i, 2);\r\n                re = _.parse(r / den);\r\n                im = _.parse(i / den);\r\n                return [re, im];\r\n            },\r\n            fromArray: function (arr) {\r\n                return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));\r\n            },\r\n            evaluate: function (symbol, f) {\r\n                var re, im, sign;\r\n\r\n                sign = symbol.power.sign();\r\n                //remove it from under the denominator\r\n                symbol.power = symbol.power.abs();\r\n                //expand\r\n                if(symbol.power.greaterThan(1))\r\n                    symbol = _.expand(symbol);\r\n                //remove the denominator\r\n                if(sign < 0) {\r\n                    var d = this.removeDen(symbol);\r\n                    re = d[0];\r\n                    im = d[1];\r\n                }\r\n                else {\r\n                    re = symbol.realpart();\r\n                    im = symbol.imagpart();\r\n                }\r\n\r\n                if(re.isConstant('all') && im.isConstant('all'))\r\n                    return this[f].call(this, re, im);\r\n\r\n                return _.symfunction(f, [symbol]);\r\n            }\r\n        };\r\n        //object for functions which handle trig\r\n        var trig = this.trig = {\r\n            //container for trigonometric function\r\n            cos: function (symbol) {\r\n                if(symbol.equals('pi') && symbol.multiplier.den.equals(2))\r\n                    return new Symbol(0);\r\n\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(new Symbol(Settings.PI / 2)))\r\n                        return new Symbol(0);\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.cos(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.cos(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'cos');\r\n                    }\r\n                }\r\n                if(symbol.equals(0))\r\n                    return new Symbol(1);\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 1 or -1 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(even(m) ? 1 : -1);\r\n                    }\r\n                    else {\r\n                        var n = Number(m.num), d = Number(m.den);\r\n                        if(d === 2)\r\n                            retval = new Symbol(0);\r\n                        else if(d === 3) {\r\n                            retval = _.parse('1/2');\r\n                            c = true;\r\n                        }\r\n                        else if(d === 4) {\r\n                            retval = _.parse('1/sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d === 6) {\r\n                            retval = _.parse('sqrt(3)/2');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('cos', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(c && (q === 2 || q === 3))\r\n                    retval.negate();\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('cos', [symbol]);\r\n\r\n                return retval;\r\n            },\r\n            sin: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(symbol % Math.PI === 0) {\r\n                            return new Symbol(0);\r\n                        }\r\n\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.sin(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.sin(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'sin');\r\n                }\r\n\r\n                if(symbol.equals(0))\r\n                    return new Symbol(0);\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        sign = symbol.multiplier.sign(),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n                if(symbol.equals('pi'))\r\n                    retval = new Symbol(0);\r\n                else if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 0 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(0);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 3) {\r\n                            retval = _.parse('sqrt(3)/2');\r\n                            c = true\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('1/sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('1/2');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\r\n\r\n                if(c && (q === 3 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            tan: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol % Math.PI === 0 && symbol.isLinear()) {\r\n                        return new Symbol(0);\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.tan(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.tan(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'tan');\r\n                }\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier;\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return 0 for all multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(0);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            throw new UndefinedError('tan is undefined for ' + symbol.toString());\r\n                        else if(d == 3) {\r\n                            retval = _.parse('sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('1/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('tan', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('tan', [symbol]);\r\n\r\n                if(c && (q === 2 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            sec: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.cos(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.sec(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'sec');\r\n                    return _.parse(format('1/cos({0})', symbol));\r\n                }\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 1 or -1 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(even(m) ? 1 : -1);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            throw new UndefinedError('sec is undefined for ' + symbol.toString());\r\n                        else if(d == 3) {\r\n                            retval = new Symbol(2);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('2/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('sec', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(c && (q === 2 || q === 3))\r\n                    retval.negate();\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('sec', [symbol]);\r\n\r\n                return retval;\r\n            },\r\n            csc: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.sin(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.csc(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'csc');\r\n                    return _.parse(format('1/sin({0})', symbol));\r\n                }\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        sign = symbol.multiplier.sign(),\r\n                        m = symbol.multiplier.abs();\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 0 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        throw new UndefinedError('csc is undefined for ' + symbol.toString());\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 3) {\r\n                            retval = _.parse('2/sqrt(3)');\r\n                            c = true\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = new Symbol(2);\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\r\n\r\n                if(c && (q === 3 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            cot: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol % (Math.PI/2) === 0) {\r\n                        return new Symbol(0);\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.tan(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.cot(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'cot');\r\n                    return _.parse(format('1/tan({0})', symbol));\r\n                }\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier;\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return 0 for all multiples of pi\r\n                    if(isInt(m)) {\r\n                        throw new UndefinedError('cot is undefined for ' + symbol.toString());\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            retval = new Symbol(0);\r\n                        else if(d == 3) {\r\n                            retval = _.parse('1/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('cot', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('cot', [symbol]);\r\n\r\n                if(c && (q === 2 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            acos: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle values in the complex domain\r\n                        if(symbol.gt(1) || symbol.lt(-1)) {\r\n                            var x = symbol.toString();\r\n                            return expand(evaluate(`pi/2-asin(${x})`));\r\n                        }\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.acos(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.acos(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acos');\r\n                }\r\n                return _.symfunction('acos', arguments);\r\n            },\r\n            asin: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle values in the complex domain\r\n                        if(symbol.gt(1) || symbol.lt(-1)) {\r\n                            var i = Settings.IMAGINARY;\r\n                            var x = symbol.multiplier.toDecimal();\r\n                            return expand(evaluate(`${i}*log(sqrt(1-${x}^2)-${i}*${x})`));\r\n                        }\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.asin(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.asin(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'asin');\r\n                }\r\n                return _.symfunction('asin', arguments);\r\n            },\r\n            atan: function (symbol) {\r\n                var retval;\r\n                if(symbol.equals(0))\r\n                    retval = new Symbol(0);\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.atan(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.atan(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'atan');\r\n                    return _.symfunction('atan', arguments);\r\n                }\r\n                else if(symbol.equals(-1))\r\n                    retval = _.parse('-pi/4');\r\n                else\r\n                    retval = _.symfunction('atan', arguments);\r\n                return retval;\r\n            },\r\n            asec: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(0)) {\r\n                        throw new OutOfFunctionDomainError('Input is out of the domain of sec!');\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        return trig.acos(symbol.invert());\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'asec');\r\n                    }\r\n                }\r\n                return _.symfunction('asec', arguments);\r\n            },\r\n            acsc: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return trig.asin(symbol.invert());\r\n                    }\r\n\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acsc');\r\n                }\r\n                return _.symfunction('acsc', arguments);\r\n            },\r\n            acot: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());\r\n                    }\r\n\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acot');\r\n                }\r\n                return _.symfunction('acot', arguments);\r\n            },\r\n            atan2: function (a, b) {\r\n                if(a.equals(0) && b.equals(0))\r\n                    throw new UndefinedError('atan2 is undefined for 0, 0');\r\n\r\n                if(Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {\r\n                    return new Symbol(Math.atan2(a, b));\r\n                }\r\n                return _.symfunction('atan2', arguments);\r\n            }\r\n        };\r\n        //object for functions which handle hyperbolic trig\r\n        var trigh = this.trigh = {\r\n            //container for hyperbolic trig function\r\n            cosh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.cosh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'cosh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('cosh', arguments);\r\n            },\r\n            sinh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.sinh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'sinh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('sinh', arguments);\r\n            },\r\n            tanh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.tanh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'tanh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('tanh', arguments);\r\n            },\r\n            sech: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return new Symbol(Math.sech(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'sech');\r\n                    }\r\n                    return _.parse(format('1/cosh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('sech', arguments);\r\n            },\r\n            csch: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.csch(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'csch');\r\n                    }\r\n                    return _.parse(format('1/sinh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('csch', arguments);\r\n            },\r\n            coth: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.coth(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'coth');\r\n                    }\r\n                    return _.parse(format('1/tanh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('coth', arguments);\r\n            },\r\n            acosh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acosh');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2-1))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('acosh', arguments);\r\n                return retval;\r\n            },\r\n            asinh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'asinh');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2+1))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('asinh', arguments);\r\n                return retval;\r\n            },\r\n            atanh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'atanh');\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    retval = evaluate(_.parse(format('(1/2)*' + Settings.LOG + '((1+({0}))/(1-({0})))', symbol.toString())));\r\n                }\r\n                else\r\n                    retval = _.symfunction('atanh', arguments);\r\n                return retval;\r\n            },\r\n            asech: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'asech');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));\r\n                else\r\n                    retval = _.symfunction('asech', arguments);\r\n                return retval;\r\n            },\r\n            acsch: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acsch');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('acsch', arguments);\r\n                return retval;\r\n            },\r\n            acoth: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acoth');\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(1))\r\n                        retval = Symbol.infinity();\r\n                    else\r\n                        retval = evaluate(\r\n                                _.divide(\r\n                                        log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))),\r\n                                        new Symbol(2)));\r\n                }\r\n                else\r\n                    retval = _.symfunction('acoth', arguments);\r\n                return retval;\r\n            }\r\n        };\r\n        //list of supported units\r\n        this.units = {};\r\n        //list all the supported operators\r\n        var operators = {\r\n            '\\\\': {\r\n                precedence: 8,\r\n                operator: '\\\\',\r\n                action: 'slash',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; //bypass the slash\r\n                }\r\n            },\r\n            '!!': {\r\n                precedence: 7,\r\n                operator: '!!',\r\n                action: 'dfactorial',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\r\n                }\r\n            },\r\n            '!': {\r\n                precedence: 7,\r\n                operator: '!',\r\n                action: 'factorial',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return factorial(e); //wrap it in a factorial function\r\n                }\r\n            },\r\n            '^': {\r\n                precedence: 6,\r\n                operator: '^',\r\n                action: 'pow',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            },\r\n            '**': {\r\n                precedence: 6,\r\n                operator: '**',\r\n                action: 'pow',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            },\r\n            '%': {\r\n                precedence: 4,\r\n                operator: '%',\r\n                action: 'percent',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                overloaded: true,\r\n                overloadAction: 'mod',\r\n                overloadLeftAssoc: false,\r\n                operation: function (x) {\r\n                    return _.divide(x, new Symbol(100));\r\n                }\r\n            },\r\n            '*': {\r\n                precedence: 4,\r\n                operator: '*',\r\n                action: 'multiply',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '/': {\r\n                precedence: 4,\r\n                operator: '/',\r\n                action: 'divide',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '+': {\r\n                precedence: 3,\r\n                operator: '+',\r\n                action: 'add',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x;\r\n                }\r\n            },\r\n            'plus': {\r\n                precedence: 3,\r\n                operator: 'plus',\r\n                action: 'add',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x;\r\n                }\r\n            },\r\n            '-': {\r\n                precedence: 3,\r\n                operator: '-',\r\n                action: 'subtract',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x.negate();\r\n                }\r\n            },\r\n            '=': {\r\n                precedence: 2,\r\n                operator: '=',\r\n                action: 'equals',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '==': {\r\n                precedence: 1,\r\n                operator: '==',\r\n                action: 'eq',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '<': {\r\n                precedence: 1,\r\n                operator: '<',\r\n                action: 'lt',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '<=': {\r\n                precedence: 1,\r\n                operator: '<=',\r\n                action: 'lte',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '>': {\r\n                precedence: 1,\r\n                operator: '>',\r\n                action: 'gt',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '=>': {\r\n                precedence: 1,\r\n                operator: '=>',\r\n                action: 'gte',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            ',': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'comma',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            ':': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'assign',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                vectorFn: 'slice'\r\n            },\r\n            ':=': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'function_assign',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            }\r\n        };\r\n        //brackets\r\n        var brackets = {\r\n            '(': {\r\n                type: 'round',\r\n                id: 1,\r\n                is_open: true,\r\n                is_close: false\r\n            },\r\n            ')': {\r\n                type: 'round',\r\n                id: 2,\r\n                is_open: false,\r\n                is_close: true\r\n            },\r\n            '[': {\r\n                type: 'square',\r\n                id: 3,\r\n                is_open: true,\r\n                is_close: false,\r\n                maps_to: 'vector'\r\n            },\r\n            ']': {\r\n                type: 'square',\r\n                id: 4,\r\n                is_open: false,\r\n                is_close: true\r\n            },\r\n            '{': {\r\n                type: 'curly',\r\n                id: 5,\r\n                is_open: true,\r\n                is_close: false,\r\n                maps_to: 'Set'\r\n            },\r\n            '}': {\r\n                type: 'curly',\r\n                id: 6,\r\n                is_open: false,\r\n                is_close: true\r\n            }\r\n        };\r\n        // Supported functions.\r\n        // Format: function_name: [mapped_function, number_of_parameters]\r\n        var functions = this.functions = {\r\n            'cos': [trig.cos, 1],\r\n            'sin': [trig.sin, 1],\r\n            'tan': [trig.tan, 1],\r\n            'sec': [trig.sec, 1],\r\n            'csc': [trig.csc, 1],\r\n            'cot': [trig.cot, 1],\r\n            'acos': [trig.acos, 1],\r\n            'asin': [trig.asin, 1],\r\n            'atan': [trig.atan, 1],\r\n            'arccos': [trig.acos, 1],\r\n            'arcsin': [trig.asin, 1],\r\n            'arctan': [trig.atan, 1],\r\n            'asec': [trig.asec, 1],\r\n            'acsc': [trig.acsc, 1],\r\n            'acot': [trig.acot, 1],\r\n            'atan2': [trig.atan2, 2],\r\n            'acoth': [trigh.acoth, 1],\r\n            'asech': [trigh.asech, 1],\r\n            'acsch': [trigh.acsch, 1],\r\n            'sinh': [trigh.sinh, 1],\r\n            'cosh': [trigh.cosh, 1],\r\n            'tanh': [trigh.tanh, 1],\r\n            'asinh': [trigh.asinh, 1],\r\n            'sech': [trigh.sech, 1],\r\n            'csch': [trigh.csch, 1],\r\n            'coth': [trigh.coth, 1],\r\n            'acosh': [trigh.acosh, 1],\r\n            'atanh': [trigh.atanh, 1],\r\n            'log10': [, 1],\r\n            'exp': [exp, 1],\r\n            'radians': [radians, 1],\r\n            'degrees': [degrees, 1],\r\n            'min': [min, -1],\r\n            'max': [max, -1],\r\n            'erf': [, 1],\r\n            'floor': [, 1],\r\n            'ceil': [, 1],\r\n            'trunc': [, 1],\r\n            'Si': [, 1],\r\n            'step': [, 1],\r\n            'rect': [, 1],\r\n            'sinc': [sinc, 1],\r\n            'tri': [, 1],\r\n            'sign': [sign, 1],\r\n            'Ci': [, 1],\r\n            'Ei': [, 1],\r\n            'Shi': [, 1],\r\n            'Chi': [, 1],\r\n            'Li': [, 1],\r\n            'fib': [, 1],\r\n            'fact': [factorial, 1],\r\n            'factorial': [factorial, 1],\r\n            'continued_fraction': [continued_fraction, [1, 2]],\r\n            'dfactorial': [, 1],\r\n            'gamma_incomplete': [, [1, 2]],\r\n            'round': [round, [1, 2]],\r\n            'scientific': [scientific, [1, 2]],\r\n            'mod': [mod, 2],\r\n            'pfactor': [pfactor, 1],\r\n            'vector': [vector, -1],\r\n            'matrix': [matrix, -1],\r\n            'Set': [set, -1],\r\n            'imatrix': [imatrix, -1],\r\n            'parens': [parens, -1],\r\n            'sqrt': [sqrt, 1],\r\n            'cbrt': [cbrt, 1],\r\n            'nthroot': [nthroot, 2],\r\n            'log': [log, [1, 2]],\r\n            'expand': [expandall, 1],\r\n            'abs': [abs, 1],\r\n            'invert': [invert, 1],\r\n            'determinant': [determinant, 1],\r\n            'size': [size, 1],\r\n            'transpose': [transpose, 1],\r\n            'dot': [dot, 2],\r\n            'cross': [cross, 2],\r\n            'vecget': [vecget, 2],\r\n            'vecset': [vecset, 3],\r\n            'vectrim': [vectrim, [1, 2]],\r\n            'matget': [matget, 3],\r\n            'matset': [matset, 4],\r\n            'matgetrow': [matgetrow, 2],\r\n            'matsetrow': [matsetrow, 3],\r\n            'matgetcol': [matgetcol, 2],\r\n            'matsetcol': [matsetcol, 3],\r\n            'rationalize': [rationalize, 1],\r\n            'IF': [IF, 3],\r\n            'is_in': [is_in, 2],\r\n            //imaginary support\r\n            'realpart': [realpart, 1],\r\n            'imagpart': [imagpart, 1],\r\n            'conjugate': [conjugate, 1],\r\n            'arg': [arg, 1],\r\n            'polarform': [polarform, 1],\r\n            'rectform': [rectform, 1],\r\n            'sort': [sort, [1, 2]],\r\n            'integer_part': [, 1],\r\n            'union': [union, 2],\r\n            'contains': [contains, 2],\r\n            'intersection': [intersection, 2],\r\n            'difference': [difference, 2],\r\n            'intersects': [intersects, 2],\r\n            'is_subset': [is_subset, 2],\r\n            //system support\r\n            'print': [print, -1]\r\n        };\r\n\r\n        //error handler\r\n        this.error = err;\r\n        //this function is used to comb through the function modules and find a function given its name\r\n        var findFunction = function (fname) {\r\n            var fmodules = Settings.FUNCTION_MODULES,\r\n                    l = fmodules.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var fmodule = fmodules[i];\r\n                if(fname in fmodule)\r\n                    return fmodule[fname];\r\n            }\r\n            err('The function ' + fname + ' is undefined!');\r\n        };\r\n\r\n        /**\r\n         * This method gives the ability to override operators with new methods.\r\n         * @param {String} which\r\n         * @param {Function} with_what\r\n         */\r\n        this.override = function (which, with_what) {\r\n            if(!bin[which])\r\n                bin[which] = [];\r\n            bin[which].push(this[which]);\r\n            this[which] = with_what;\r\n        };\r\n\r\n        /**\r\n         * Restores a previously overridden operator\r\n         * @param {String} what\r\n         */\r\n        this.restore = function (what) {\r\n            if(this[what])\r\n                this[what] = bin[what].pop();\r\n        };\r\n\r\n        /**\r\n         * This method is supposed to behave similarly to the override method but it does not override\r\n         * the existing function rather it only extends it\r\n         * @param {String} what\r\n         * @param {Function} with_what\r\n         * @param {boolean} force_call\r\n         */\r\n        this.extend = function (what, with_what, force_call) {\r\n            var _ = this,\r\n                    extended = this[what];\r\n            if(typeof extended === 'function' && typeof with_what === 'function') {\r\n                var f = this[what];\r\n                this[what] = function (a, b) {\r\n                    if(isSymbol(a) && isSymbol(b) && !force_call)\r\n                        return f.call(_, a, b);\r\n                    else\r\n                        return with_what.call(_, a, b, f);\r\n                };\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Generates library's representation of a function. It's a fancy way of saying a symbol with\r\n         * a few extras. The most important thing is that that it gives a fname and\r\n         * an args property to the symbols in addition to changing its group to FN\r\n         * @param {String} fn_name\r\n         * @param {Array} params\r\n         * @returns {Symbol}\r\n         */\r\n        this.symfunction = function (fn_name, params) {\r\n            //call the proper function and return the result;\r\n            var f = new Symbol(fn_name);\r\n            f.group = FN;\r\n            if(typeof params === 'object')\r\n                params = [].slice.call(params);//ensure an array\r\n            f.args = params;\r\n            f.fname = fn_name === PARENTHESIS ? '' : fn_name;\r\n            f.updateHash();\r\n            return f;\r\n        };\r\n\r\n        /**\r\n         * An internal function call for the Parser. This will either trigger a real\r\n         * function call if it can do so or just return a symbolic representation of the\r\n         * function using symfunction.\r\n         * @param {String} fn_name\r\n         * @param {Array} args\r\n         * @param {int} allowed_args\r\n         * @returns {Symbol}\r\n         */\r\n        this.callfunction = function (fn_name, args, allowed_args) {\r\n            var fn_settings = functions[fn_name];\r\n\r\n            if(!fn_settings)\r\n                err('Nerdamer currently does not support the function ' + fn_name);\r\n\r\n            var num_allowed_args = fn_settings[1] || allowed_args, //get the number of allowed arguments\r\n                    fn = fn_settings[0], //get the mapped function\r\n                    retval;\r\n            //We want to be able to call apply on the arguments or create a symfunction. Both require\r\n            //an array so make sure to wrap the argument in an array.\r\n            if(!(args instanceof Array))\r\n                args = args !== undefined ? [args] : [];\r\n\r\n            if(num_allowed_args !== -1) {\r\n                var is_array = isArray(num_allowed_args),\r\n                        min_args = is_array ? num_allowed_args[0] : num_allowed_args,\r\n                        max_args = is_array ? num_allowed_args[1] : num_allowed_args,\r\n                        num_args = args.length;\r\n\r\n                var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\r\n\r\n                if(num_args < min_args)\r\n                    err(format(error_msg, 'minimum', min_args, num_args));\r\n                if(num_args > max_args)\r\n                    err(format(error_msg, 'maximum', max_args, num_args));\r\n            }\r\n\r\n            /*\r\n             * The following are very important to the how nerdamer constructs functions!\r\n             * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\r\n             *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\r\n             * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\r\n             * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\r\n             *     they are expecting a symbolic output.\r\n             */\r\n            //check if arguments are all numers\r\n            var numericArgs = allNumbers(args);\r\n            //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\r\n//            if (Settings.USE_BIG && numericArgs) {\r\n//                retval = Big[fn_name].apply(undefined, args);\r\n//            }\r\n//            else {\r\n            if(!fn) {\r\n                //Remember assumption 1. No function defined so it MUST be numeric in nature\r\n                fn = findFunction(fn_name);\r\n                if(Settings.PARSE2NUMBER && numericArgs)\r\n                    retval = bigConvert(fn.apply(fn, args));\r\n                else\r\n                    retval = _.symfunction(fn_name, args);\r\n            }\r\n            else {\r\n                //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\r\n                retval = fn.apply(fn_settings[2], args);\r\n            }\r\n//            }\r\n\r\n            return retval;\r\n        };\r\n        /**\r\n         * Build a regex based on the operators currently loaded. These operators are to be ignored when\r\n         * substituting spaces for multiplication\r\n         */\r\n        this.operator_filter_regex = (function () {\r\n            //we only want the operators which are singular since those are the ones\r\n            //that nerdamer uses anyway\r\n            var ostr = '^\\\\' + Object.keys(operators).filter(function (x) {\r\n                if(x.length === 1)\r\n                    return x;\r\n            }).join('\\\\');\r\n            //create a regex which captures all spaces between characters except those\r\n            //have an operator on one end\r\n            return new RegExp('([' + ostr + '])\\\\s+([' + ostr + '])');\r\n        })();\r\n\r\n        /**\r\n         * Replaces nerdamer.setOperator\r\n         * @param {object} operator\r\n         * @param {boolean} shift\r\n         */\r\n        this.setOperator = function (operator, action, shift) {\r\n            var name = operator.operator; //take the name to be the symbol\r\n            operators[name] = operator;\r\n            if(action)\r\n                this[operator.action] = action;\r\n            //make the parser aware of the operator\r\n            _[name] = operator.operation;\r\n            //make the action available to the parser if infix\r\n            if(!operator.action && !(operator.prefix || operator.postif)) {\r\n                operator.action = name;\r\n            }\r\n            //if this operator is exclusive then all successive operators should be shifted\r\n            if(shift === 'over' || shift === 'under') {\r\n                var precedence = operator.precedence;\r\n\r\n                for(var x in operators) {\r\n                    var o = operators[x];\r\n                    var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\r\n                    if(condition)\r\n                        o.precedence++;\r\n                }\r\n                ;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets an opererator by its symbol\r\n         * @param {String} operator\r\n         * @returns {Object}\r\n         */\r\n        this.getOperator = function (operator) {\r\n            return operators[operator];\r\n        };\r\n\r\n        this.aliasOperator = function (o, n) {\r\n            var t = {};\r\n            var operator = operators[o];\r\n            //copy everything over to the new operator\r\n            for(var x in operator) {\r\n                t[x] = operator[x];\r\n            }\r\n            //update the symbol\r\n            t.operator = n;\r\n\r\n            this.setOperator(t);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of operators. Caution! Can break parser!\r\n         * @returns {object}\r\n         */\r\n        this.getOperators = function () {\r\n            //will replace this with some cloning action in the future\r\n            return operators;\r\n        };\r\n\r\n        this.getBrackets = function () {\r\n            return brackets;\r\n        };\r\n        /*\r\n         * Preforms preprocessing on the string. Useful for making early modification before\r\n         * sending to the parser\r\n         * @param {String} e\r\n         */\r\n        var prepare_expression = function (e) {\r\n            /*\r\n             * Since variables cannot start with a number, the assumption is made that when this occurs the\r\n             * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for\r\n             * a side-by-side close and open parenthesis\r\n             */\r\n            e = String(e);\r\n            //apply preprocessors\r\n            for(var i = 0; i < preprocessors.actions.length; i++)\r\n                e = preprocessors.actions[i].call(this, e);\r\n\r\n            //e = e.split(' ').join('');//strip empty spaces\r\n            //replace multiple spaces with one space\r\n            e = e.replace(/\\s+/g, ' ');\r\n\r\n            //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\r\n            if(/e/gi.test(e)) {\r\n                e = e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi, function (x) {\r\n                    return scientificToDecimal(x);\r\n                });\r\n            }\r\n            //replace scientific numbers\r\n\r\n            //allow omission of multiplication after coefficients\r\n            e = e.replace(Settings.IMPLIED_MULTIPLICATION_REGEX, function () {\r\n                var str = arguments[4],\r\n                        group1 = arguments[1],\r\n                        group2 = arguments[2],\r\n                        start = arguments[3],\r\n                        first = str.charAt(start),\r\n                        before = '',\r\n                        d = '*';\r\n                if(!first.match(/[\\+\\-\\/\\*]/))\r\n                    before = str.charAt(start - 1);\r\n                if(before.match(/[a-z]/i))\r\n                    d = '';\r\n                return group1 + d + group2;\r\n            })\r\n                    .replace(/([a-z0-9_]+)/gi, function (match, a) {\r\n                        if(Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {\r\n                            if(!isNaN(a))\r\n                                return a;\r\n                            return a.split('').join('*');\r\n                        }\r\n                        return a;\r\n                    })\r\n                    //allow omission of multiplication sign between brackets\r\n                    .replace(/\\)\\(/g, ')*(') || '0';\r\n            //replace x(x+a) with x*(x+a)\r\n            while(true) {\r\n                var e_org = e; //store the original\r\n                e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\r\n                    var g1 = a || c,\r\n                            g2 = b || d;\r\n                    if(g1 in functions) //create a passthrough for functions\r\n                        return g1 + g2;\r\n                    return g1 + '*' + g2;\r\n                });\r\n                //if the original equals the replace we're done\r\n                if(e_org === e)\r\n                    break;\r\n            }\r\n            return e;\r\n        };\r\n        //delay setting of constants until Settings is ready\r\n        this.initConstants = function () {\r\n            this.CONSTANTS = {\r\n                E: new Symbol(Settings.E),\r\n                PI: new Symbol(Settings.PI)\r\n            };\r\n        };\r\n        /*\r\n         * Debugging method used to better visualize vector and arrays\r\n         * @param {object} o\r\n         * @returns {String}\r\n         */\r\n        this.pretty_print = function (o) {\r\n            if(Array.isArray(o)) {\r\n                var s = o.map(x => _.pretty_print(x)).join(', ');\r\n                if(o.type === 'vector')\r\n                    return 'vector<' + s + '>';\r\n                return '(' + s + ')';\r\n            }\r\n            return o.toString();\r\n        };\r\n        this.peekers = {\r\n            pre_operator: [],\r\n            post_operator: [],\r\n            pre_function: [],\r\n            post_function: []\r\n        };\r\n\r\n        this.callPeekers = function (name) {\r\n            if(Settings.callPeekers) {\r\n                var peekers = this.peekers[name];\r\n                //remove the first items and stringify\r\n                var args = arguments2Array(arguments).slice(1).map(stringify);\r\n                //call each one of the peekers\r\n                for(var i = 0; i < peekers.length; i++) {\r\n                    peekers[i].apply(null, args);\r\n                }\r\n            }\r\n        };\r\n        /*\r\n         * Tokenizes the string\r\n         * @param {String} e\r\n         * @returns {Token[]}\r\n         */\r\n        this.tokenize = function (e) {\r\n            //cast to String\r\n            e = String(e);\r\n            //remove multiple white spaces and spaces at beginning and end of string\r\n            e = e.trim().replace(/\\s+/g, ' ');\r\n            //remove spaces before and after brackets\r\n            for(var x in brackets) {\r\n                var regex = new RegExp(brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\r\n                e = e.replace(regex, x);\r\n            }\r\n\r\n            var col = 0; //the column position\r\n            var L = e.length; //expression length\r\n            var lpos = 0; //marks beginning of next token\r\n            var tokens = []; //the tokens container\r\n            var scopes = [tokens]; //initiate with the tokens as the highest scope\r\n            var target = scopes[0]; //the target to which the tokens are added. This can swing up or down\r\n            var depth = 0;\r\n            var open_brackets = [];\r\n            var has_space = false; //marks if an open space character was found\r\n            var SPACE = ' ';\r\n            var EMPTY_STRING = '';\r\n            var COMMA = ',';\r\n            var MINUS = '-';\r\n            var MULT = '*';\r\n            //Possible source of bug. Review\r\n            /*\r\n             //gets the next space\r\n             var next_space = function(from) {\r\n             for(var i=from; i<L; i++) {\r\n             if(e.charAt(i) === ' ')\r\n             return i;\r\n             }\r\n             \r\n             return L; //assume the end of the string instead\r\n             };\r\n             */\r\n            /**\r\n             * Adds a scope to tokens\r\n             * @param {String} scope_type\r\n             * @param {int} column\r\n             * @returns {undefined}\r\n             */\r\n            var addScope = function (scope_type, column) {\r\n                var new_scope = []; //create a new scope\r\n                if(scope_type !== undefined) {\r\n                    new_scope.type = scope_type;\r\n                }\r\n                new_scope.column = column; //mark the column of the scope\r\n                scopes.push(new_scope); //add it to the list of scopes\r\n                target.push(new_scope); //add it to the tokens list since now it's a scope\r\n                target = new_scope; //point to it\r\n                depth++; //go down one in scope\r\n            };\r\n            /**\r\n             * Goes up in scope by one\r\n             * @returns {undefined}\r\n             */\r\n            var goUp = function () {\r\n                scopes.pop(); //remove the scope from the scopes stack\r\n                target = scopes[--depth]; //point the above scope\r\n            };\r\n            /**\r\n             * Extracts all the operators from the expression string starting at postion start_at\r\n             * @param {int} start_at\r\n             * @returns {String}\r\n             */\r\n            var get_operator_str = function (start_at) {\r\n                start_at = start_at !== undefined ? start_at : col;\r\n                //mark the end of the operator as the start since we're just going\r\n                //to be walking along the string\r\n                var end = start_at + 1;\r\n                //just keep moving along\r\n                while(e.charAt(end++) in operators) {\r\n                }\r\n                //remember that we started at one position ahead. The beginning operator is what triggered\r\n                //this function to be called in the first place. String.CharAt is zero based so we now\r\n                //have to correct two places. The initial increment + the extra++ at the end of end during\r\n                //the last iteration.\r\n                return e.substring(start_at, end - 1);\r\n            };\r\n            /**\r\n             * Breaks operator up in to several different operators as defined in operators\r\n             * @param {String} operator_str\r\n             * @returns {String[]}\r\n             */\r\n            var chunkify = function (operator_str) {\r\n                var start = col - operator_str.length; //start of operator\r\n                var _operators = [];\r\n                var operator = operator_str.charAt(0);\r\n                //grab the largest possible chunks but start at 2 since we already know\r\n                //that the first character is an operator\r\n\r\n                for(var i = 1, L = operator_str.length; i < L; i++) {\r\n                    var ch = operator_str.charAt(i);\r\n                    var o = operator + ch;\r\n                    //since the operator now is undefined then the last operator\r\n                    //was the largest possible combination.\r\n                    if(!(o in operators)) {\r\n                        _operators.push(new Token(operator, Token.OPERATOR, start + i));\r\n                        operator = ch;\r\n                    }\r\n                    else\r\n                        operator = o;//now the operator is the larger chunk\r\n                }\r\n                //add the last operator\r\n                _operators.push(new Token(operator, Token.OPERATOR, start + i));\r\n                return _operators;\r\n            };\r\n\r\n            /**\r\n             * Is used to add a token to the tokens array. Makes sure that no empty token is added\r\n             * @param {int} at\r\n             * @param {String} token\r\n             * @returns {undefined}\r\n             */\r\n            var add_token = function (at, token) {\r\n                //grab the token if we're not supplied one\r\n                if(token === undefined)\r\n                    token = e.substring(lpos, at);\r\n                //only add it if it's not an empty string\r\n                if(token in _.units)\r\n                    target.push(new Token(token, Token.UNIT, lpos));\r\n                else if(token !== '')\r\n                    target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));\r\n            };\r\n            /**\r\n             * Adds a function to the output\r\n             * @param {String} f\r\n             * @returns {undefined}\r\n             */\r\n            var add_function = function (f) {\r\n                target.push(new Token(f, Token.FUNCTION, lpos));\r\n            };\r\n            /**\r\n             * Tokens are found between operators so this marks the location of where the last token was found\r\n             * @param {int} position\r\n             * @returns {undefined}\r\n             */\r\n            var set_last_position = function (position) {\r\n                lpos = position + 1;\r\n            };\r\n            /**\r\n             * When a operator is found and added, especially a combo operator, then the column location\r\n             * has to be adjusted to the end of the operator\r\n             * @returns {undefined}\r\n             */\r\n            var adjust_column_position = function () {\r\n                lpos = lpos + operator_str.length - 2;\r\n                col = lpos - 1;\r\n            };\r\n            for(; col < L; col++) {\r\n                var ch = e.charAt(col);\r\n                if(ch in operators) {\r\n                    add_token(col);\r\n                    //is the last token numeric?\r\n                    var last_token_is_numeric = target[0] && isNumber(target[0]);\r\n                    //is this character multiplication?\r\n                    var is_multiplication = last_token_is_numeric && ch === MULT;\r\n                    //if we're in a new scope then go up by one but if the space\r\n                    //is right befor an operator then it makes no sense to go up in scope\r\n                    //consider sin -x. The last position = current position at the minus sign\r\n                    //this means that we're going for sin(x) -x which is wrong\r\n                    //Ignore comma since comma is still part of the existing scope.\r\n                    if(has_space && lpos < col && !(ch === COMMA || is_multiplication)) {\r\n                        has_space = false;\r\n                        goUp();\r\n                    }\r\n                    //mark the last position that a\r\n                    set_last_position(col + 1);\r\n                    var operator_str = get_operator_str(col);\r\n\r\n                    adjust_column_position();\r\n                    target.push.apply(target, chunkify(operator_str));\r\n                }\r\n                else if(ch in brackets) {\r\n                    var bracket = brackets[ch];\r\n\r\n                    if(bracket.is_open) {\r\n                        //mark the bracket\r\n                        open_brackets.push([bracket, lpos]);\r\n                        var f = e.substring(lpos, col);\r\n                        if(f in functions) {\r\n                            add_function(f);\r\n                        }\r\n                        else if(f !== '') {\r\n                            //assume multiplication\r\n                            //TODO: Add the multiplication to stack\r\n                            target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));\r\n                        }\r\n                        //go down one in scope\r\n                        addScope(bracket.maps_to, col);\r\n                    }\r\n                    else if(bracket.is_close) {\r\n                        //get the matching bracket\r\n                        var pair = open_brackets.pop();\r\n                        //throw errors accordingly\r\n                        //missing open bracket\r\n                        if(!pair)\r\n                            throw new ParityError('Missing open bracket for bracket at: ' + (col + 1));\r\n                        //incorrect pair\r\n                        else if(pair[0].id !== bracket.id - 1)\r\n                            throw new ParityError('Parity error');\r\n\r\n                        add_token(col);\r\n                        goUp();\r\n                    }\r\n                    set_last_position(col);\r\n                }\r\n                else if(ch === SPACE) {\r\n                    var prev = e.substring(lpos, col); //look back\r\n                    var nxt = e.charAt(col + 1); //look forward\r\n                    if(has_space) {\r\n\r\n                        if(prev in operators) {\r\n                            target.push(new Token(prev, Token.OPERATOR, col));\r\n                        }\r\n                        else {\r\n                            add_token(undefined, prev);\r\n                            //we're at the closing space\r\n                            goUp(); //go up in scope if we're at a space\r\n\r\n                            //assume multiplication if it's not an operator except for minus\r\n                            var is_operator = nxt in operators;\r\n\r\n                            if((is_operator && operators[nxt].value === MINUS) || !is_operator) {\r\n                                target.push(new Token(MULT, Token.OPERATOR, col));\r\n                            }\r\n                        }\r\n                        has_space = false; //remove the space\r\n                    }\r\n                    else {\r\n                        //we're at the closing space\r\n                        //check if it's a function\r\n                        var f = e.substring(lpos, col);\r\n\r\n                        if(f in functions) {\r\n                            //there's no need to go up in scope if the next character is an operator\r\n                            has_space = true; //mark that a space was found\r\n                            add_function(f);\r\n                            addScope();\r\n                        }\r\n                        else if(f in operators) {\r\n                            target.push(new Token(f, Token.OPERATOR, col));\r\n                        }\r\n                        else {\r\n                            add_token(undefined, f);\r\n                            //peek ahead to the next character\r\n                            var nxt = e.charAt(col + 1);\r\n\r\n                            //If it's a number then add the multiplication operator to the stack but make sure that the next character\r\n                            //is not an operator\r\n\r\n                            if(prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators))\r\n                                target.push(new Token(MULT, Token.OPERATOR, col));\r\n                        }\r\n                        //Possible source of bug. Review\r\n                        /*\r\n                         //space can mean multiplication so add the symbol if the is encountered\r\n                         if(/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\r\n                         var next = e.charAt(col+1);\r\n                         var next_is_operator = next in operators;\r\n                         var ns = next_space(col+1);\r\n                         var next_word = e.substring(col+1, ns);\r\n                         //the next can either be a prefix operator or no operator\r\n                         if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\r\n                         target.push(new Token('*', Token.OPERATOR, col));\r\n                         }\r\n                         */\r\n                    }\r\n                    set_last_position(col); //mark this location\r\n                }\r\n            }\r\n            //check that all brackets were closed\r\n            if(open_brackets.length) {\r\n                var b = open_brackets.pop();\r\n                throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));\r\n            }\r\n            //add the last token\r\n            add_token(col);\r\n\r\n            return tokens;\r\n        };\r\n        /*\r\n         * Puts token array in Reverse Polish Notation\r\n         * @param {Token[]} tokens\r\n         * @returns {Token[]}\r\n         */\r\n        this.toRPN = function (tokens) {\r\n            var fn = tokens.type;\r\n            var l = tokens.length, i;\r\n            var output = [];\r\n            var stack = [];\r\n            var prefixes = [];\r\n            var collapse = function (target, destination) {\r\n                while(target.length)\r\n                    destination.push(target.pop());\r\n            };\r\n            //mark all the prefixes and add them to the stack\r\n            for(i = 0; i < l; i++) {\r\n                var token = tokens[i];\r\n                if(token.type !== Token.OPERATOR)\r\n                    break;\r\n                if(!token.prefix)\r\n                    throw new OperatorError('Not a prefix operator');\r\n                token.is_prefix = true;\r\n                stack.push(token);\r\n            }\r\n            //begin with remaining tokens\r\n            for(; i < l; i++) {\r\n                var e = tokens[i];\r\n                if(e.type === Token.OPERATOR) {\r\n                    var operator = e;\r\n\r\n                    //create the option for the operator being overloaded\r\n                    if(operator.overloaded) {\r\n                        var next = tokens[i + 1];\r\n                        //if it's followed by a number or variable then we assume it's not a postfix operator\r\n                        if(next && next.type === Token.VARIABLE_OR_LITERAL) {\r\n                            operator.postfix = false;\r\n                            //override the original function with the overload function\r\n                            operator.action = operator.overloadAction;\r\n                            operator.leftAssoc = operator.overloadLeftAssoc;\r\n                        }\r\n                    }\r\n\r\n                    //if the stack is not empty\r\n                    while(stack.length) {\r\n                        var last = stack[stack.length - 1];\r\n                        //if (there is an operator at the top of the operator stack with greater precedence)\r\n                        //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia\r\n                        //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.\r\n                        if(!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence))\r\n                            break;\r\n                        output.push(stack.pop());\r\n                    }\r\n\r\n                    //change the behavior of the operator if it's a vector and we've been asked to do so\r\n                    if((fn === 'vector' || fn === 'set') && 'vectorFn' in operator)\r\n                        operator.action = operator.vectorFn;\r\n\r\n\r\n                    //if the operator is a postfix operator then we're ready to go since it belongs\r\n                    //to the preceding token. However the output cannot be empty. It must have either\r\n                    //an operator or a variable/literal\r\n                    if(operator.postfix) {\r\n                        var previous = tokens[i - 1];\r\n                        if(!previous)\r\n                            throw new OperatorError(\"Unexpected prefix operator '\" + e.value + \"'! at \" + e.column);\r\n                        else if(previous.type === Token.OPERATOR) {\r\n                            //a postfix can only be followed by a postfix\r\n                            if(!previous.postfix)\r\n                                throw new OperatorError(\"Unexpected prefix operator '\" + previous.value + \"'! at \" + previous.column);\r\n                        }\r\n                    }\r\n                    else {\r\n                        //we must be at an infix so point the operator this\r\n                        do {\r\n                            //the first one is an infix operator all others have to be prefix operators so jump to the end\r\n                            var next = tokens[i + 1]; //take a look ahead\r\n                            var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator\r\n                            if(next_is_operator) {\r\n                                //if it's not a prefix operator then it not in the right place\r\n                                if(!next.prefix) {\r\n                                    throw new OperatorError('A prefix operator was expected at ' + next.column);\r\n                                }\r\n                                //mark it as a confirmed prefix\r\n                                next.is_prefix = true;\r\n                                //add it to the prefixes\r\n                                prefixes.push(next);\r\n                                i++;\r\n                            }\r\n                        }\r\n                        while(next_is_operator)\r\n                    }\r\n\r\n                    //if it's a prefix it should be on a special stack called prefixes\r\n                    //we do this to hold on to prefixes because of left associative operators.\r\n                    //they belong to the variable/literal but if placed on either the stack\r\n                    //or output there's no way of knowing this. I might be wrong so I welcome\r\n                    //any discussion about this.\r\n\r\n                    if(operator.is_prefix) //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!\r\n                        prefixes.push(operator);\r\n                    else\r\n                        stack.push(operator);\r\n                    //move the prefixes to the stack\r\n                    while(prefixes.length) {\r\n                        if(operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence) //revisit for commas\r\n                            stack.push(prefixes.pop());\r\n                        else\r\n                            break;\r\n                    }\r\n                }\r\n                else if(e.type === Token.VARIABLE_OR_LITERAL) {\r\n                    //move prefixes to stack at beginning of scope\r\n                    if(output.length === 0)\r\n                        collapse(prefixes, stack);\r\n                    //done with token\r\n                    output.push(e);\r\n                    var last_on_stack = stack[stack.length - 1];\r\n                    //then move all the prefixes to the output\r\n                    if(!last_on_stack || !last_on_stack.leftAssoc)\r\n                        collapse(prefixes, output);\r\n                }\r\n                else if(e.type === Token.FUNCTION) {\r\n                    stack.push(e);\r\n                }\r\n                else if(e.type === Token.UNIT) {\r\n                    //if it's a unit it belongs on the stack since it's tied to the previous token\r\n                    output.push(e);\r\n                }\r\n                //if it's an additonal scope then put that into RPN form\r\n                if(Array.isArray(e)) {\r\n                    output.push(this.toRPN(e));\r\n                    if(e.type)\r\n                        output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column\r\n\r\n                }\r\n            }\r\n            //collapse the remainder of the stack and prefixes to output\r\n            collapse(stack, output);\r\n            collapse(prefixes, output);\r\n\r\n            return output;\r\n        };\r\n        /*\r\n         * Parses the tokens\r\n         * @param {Tokens[]} rpn\r\n         * @param {object} substitutions\r\n         * @returns {Symbol}\r\n         */\r\n        this.parseRPN = function (rpn, substitutions) {\r\n            try {\r\n                //default substitutions\r\n                substitutions = substitutions || {};\r\n                //prepare the substitutions.\r\n                //we first parse them out as-is\r\n                for(var x in substitutions)\r\n                    substitutions[x] = _.parse(substitutions[x], {});\r\n\r\n                //Although technically constants,\r\n                //pi and e are only available when evaluating the expression so add to the subs.\r\n                //Doing this avoids rounding errors\r\n                //link e and pi\r\n                if(Settings.PARSE2NUMBER) {\r\n                    //use the value provided if the individual for some strange reason prefers this.\r\n                    //one reason could be to sub e but not pi or vice versa\r\n                    if(!('e' in substitutions))\r\n                        substitutions.e = new Symbol(Settings.E);\r\n                    if((!('pi' in substitutions)))\r\n                        substitutions.pi = new Symbol(Settings.PI);\r\n                }\r\n\r\n                var Q = [];\r\n                for(var i = 0, l = rpn.length; i < l; i++) {\r\n                    var e = rpn[i];\r\n\r\n                    //Arrays indicate a new scope so parse that out\r\n                    if(Array.isArray(e)) {\r\n                        e = this.parseRPN(e, substitutions);\r\n                    }\r\n\r\n                    if(e) {\r\n                        if(e.type === Token.OPERATOR) {\r\n                            if(e.is_prefix || e.postfix)\r\n                                //resolve the operation assocated with the prefix\r\n                                Q.push(e.operation(Q.pop()));\r\n                            else {\r\n                                var b = Q.pop();\r\n                                var a = Q.pop();\r\n                                //Throw an error if the RH value is empty. This cannot be a postfix since we already checked\r\n                                if(typeof a === 'undefined')\r\n                                    throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);\r\n\r\n                                var is_comma = e.action === 'comma';\r\n                                //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually\r\n                                if(a instanceof Set && !is_comma)\r\n                                    a = Vector.fromSet(a);\r\n\r\n                                if(b instanceof Set && !is_comma)\r\n                                    b = Vector.fromSet(b);\r\n\r\n                                //call all the pre-operators\r\n                                this.callPeekers('pre_operator', a, b, e);\r\n\r\n                                var ans = _[e.action](a, b);\r\n\r\n                                //call all the pre-operators\r\n                                this.callPeekers('post_operator', ans, a, b, e);\r\n\r\n                                Q.push(ans);\r\n                            }\r\n                        }\r\n                        else if(e.type === Token.FUNCTION) {\r\n                            var args = Q.pop();\r\n                            var parent = args.parent; //make a note of the parent\r\n                            if(!(args instanceof Collection))\r\n                                args = Collection.create(args);\r\n                            //the return value may be a vector. If it is then we check\r\n                            //Q to see if there's another vector on the stack. If it is then\r\n                            //we check if has elements. If it does then we know that we're dealing\r\n                            //with an \"getter\" object and return the requested values\r\n\r\n                            //call the function. This is the _.callfunction method in nerdamer\r\n                            //call the function. This is the _.callfunction method in nerdamer\r\n                            var fn_name = e.value;\r\n                            var fn_args = args.getItems();\r\n\r\n                            //call the pre-function peekers\r\n                            this.callPeekers('pre_function', fn_name, fn_args);\r\n\r\n                            var ret = _.callfunction(fn_name, fn_args);\r\n\r\n                            //call the post-function peekers\r\n                            this.callPeekers('post_function', ret, fn_name, fn_args);\r\n\r\n                            var last = Q[Q.length - 1];\r\n                            var next = rpn[i + 1];\r\n                            var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';\r\n\r\n                            if(!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {\r\n                                //remove the item from the queue\r\n                                var item = Q.pop();\r\n\r\n                                var getter = ret.elements[0];\r\n                                //check if it's symbolic. If so put it back and add the item to the stack\r\n                                if(!getter.isConstant()) {\r\n                                    item.getter = getter;\r\n                                    Q.push(item);\r\n                                    Q.push(ret);\r\n                                }\r\n                                else if(getter instanceof Slice) {\r\n                                    //if it's a Slice return the slice\r\n                                    Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));\r\n                                }\r\n                                else {\r\n                                    var index = Number(getter);\r\n                                    var il = item.elements.length;\r\n                                    //support for negative indices\r\n                                    if(index < 0)\r\n                                        index = il + index;\r\n                                    //it it's still out of bounds\r\n                                    if(index < 0 || index >= il) //index should no longer be negative since it's been reset above\r\n                                        //range error\r\n                                        throw new OutOfRangeError('Index out of range ' + (e.column + 1));\r\n\r\n                                    var element = item.elements[index];\r\n                                    //cyclic but we need to mark this for future reference\r\n                                    item.getter = index;\r\n                                    element.parent = item;\r\n\r\n                                    Q.push(element);\r\n                                }\r\n                            }\r\n                            else {\r\n                                //extend the parent reference\r\n                                if(parent)\r\n                                    ret.parent = parent;\r\n                                Q.push(ret);\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            var subbed;\r\n                            var v = e.value;\r\n\r\n                            if(v in Settings.ALIASES)\r\n                                e = _.parse(Settings.ALIASES[e]);\r\n                            //wrap it in a symbol if need be\r\n                            else if(e.type === Token.VARIABLE_OR_LITERAL)\r\n                                e = new Symbol(v);\r\n                            else if(e.type === Token.UNIT) {\r\n                                e = new Symbol(v);\r\n                                e.isUnit = true;\r\n                            }\r\n\r\n                            //make substitutions\r\n                            //Always constants first. This avoids the being overridden\r\n                            if(v in _.CONSTANTS) {\r\n                                subbed = e;\r\n                                e = new Symbol(_.CONSTANTS[v]);\r\n                            }\r\n                            //next substitutions. This allows declared variable to be overridden\r\n                            //check if the values match to avoid erasing the multiplier.\r\n                            //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.\r\n                            else if(v in substitutions && v !== substitutions[v].toString()) {\r\n                                subbed = e;\r\n                                e = substitutions[v].clone();\r\n                            }\r\n                            //next declare variables\r\n                            else if(v in VARS) {\r\n                                subbed = e;\r\n                                e = VARS[v].clone();\r\n                            }\r\n                            //make notation of what it was before\r\n                            if(subbed)\r\n                                e.subbed = subbed;\r\n\r\n                            Q.push(e);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var retval = Q[0];\r\n\r\n                if(['undefined', 'string', 'number'].indexOf(typeof retval) !== -1) {\r\n                    throw new UnexpectedTokenError('Unexpected token!');\r\n                }\r\n\r\n                return retval;\r\n            }\r\n            catch(error) {\r\n                var rethrowErrors = [OutOfFunctionDomainError];\r\n                // Rethrow certain errors in the same class to preserve them\r\n                rethrowErrors.forEach(function (E) {\r\n                    if(error instanceof E) {\r\n                        throw new E(error.message + ': ' + e.column);\r\n                    }\r\n                });\r\n\r\n                throw new ParseError(error.message + ': ' + e.column);\r\n            }\r\n        };\r\n        /**\r\n         * This is the method that triggers the parsing of the string. It generates a parse tree but processes\r\n         * it right away. The operator functions are called when their respective operators are reached. For instance\r\n         * + with cause this.add to be called with the left and right hand values. It works by walking along each\r\n         * character of the string and placing the operators on the stack and values on the output. When an operator\r\n         * having a lower order than the last is reached then the stack is processed from the last operator on the\r\n         * stack.\r\n         * @param {String} token\r\n         */\r\n\r\n        function Node(token) {\r\n            this.type = token.type;\r\n            this.value = token.value;\r\n            //the incoming token may already be a Node type\r\n            this.left = token.left;\r\n            this.right = token.right;\r\n        }\r\n\r\n        Node.prototype.toString = function () {\r\n            var left = this.left ? this.left.toString() + '---' : '';\r\n            var right = this.right ? '---' + this.right.toString() : '';\r\n            return left + '(' + this.value + ')' + right;\r\n        };\r\n\r\n        Node.prototype.toHTML = function (depth, indent) {\r\n            depth = depth || 0;\r\n            indent = typeof indent === 'undefined' ? 4 : indent;\r\n            var tab = function (n) {\r\n                return ' '.repeat(indent * n);\r\n            };\r\n            var html = '';\r\n            var left = this.left ? tab(depth + 1) + '<li>\\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \\n' : '';\r\n            var right = this.right ? tab(depth + 1) + '<li>\\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\\n' : '';\r\n            var html = tab(depth) + '<div class=\"' + this.type.toLowerCase() + '\"><span>' + this.value + '</span></div>' + tab(depth) + '\\n';\r\n            if(left || right) {\r\n                html += tab(depth) + '<ul>\\n' + left + right + tab(depth) + '</ul>\\n';\r\n            }\r\n            html += '';\r\n            return html;\r\n        };\r\n\r\n        this.tree = function (tokens) {\r\n            var Q = [];\r\n            for(var i = 0; i < tokens.length; i++) {\r\n                var e = tokens[i];\r\n                //Arrays indicate a new scope so parse that out\r\n                if(Array.isArray(e)) {\r\n                    e = this.tree(e);\r\n                    //if it's a comma then it's just arguments\r\n                    Q.push(e);\r\n                    continue;\r\n                }\r\n                if(e.type === Token.OPERATOR) {\r\n                    if(e.is_prefix || e.postfix) {\r\n                        //prefixes go to the left, postfix to the right\r\n                        var location = e.is_prefix ? 'left' : 'right';\r\n                        var last = Q.pop();\r\n                        e = new Node(e);\r\n                        e[location] = last;\r\n                        Q.push(e);\r\n                    }\r\n                    else {\r\n                        e = new Node(e);\r\n                        e.right = Q.pop();\r\n                        e.left = Q.pop();\r\n                        Q.push(e);\r\n                    }\r\n                }\r\n                else if(e.type === Token.FUNCTION) {\r\n                    e = new Node(e);\r\n                    var args = Q.pop();\r\n                    e.right = args;\r\n                    if(e.value === 'object') {\r\n                        //check if Q has a value\r\n                        var last = Q[Q.length - 1];\r\n                        if(last) {\r\n                            while(last.right) {\r\n                                last = last.right;\r\n                            }\r\n                            last.right = e;\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    Q.push(e);\r\n                }\r\n                else {\r\n                    Q.push(new Node(e));\r\n                }\r\n            }\r\n\r\n            return Q[0];\r\n        };\r\n        this.parse = function (e, substitutions) {\r\n            e = prepare_expression(e);\r\n            substitutions = substitutions || {};\r\n            //three passes but easier to debug\r\n            var tokens = this.tokenize(e);\r\n            var rpn = this.toRPN(tokens);\r\n            return this.parseRPN(rpn, substitutions);\r\n        };\r\n        /**\r\n         * TODO: Switch to Parser.tokenize for this method\r\n         * Reads a string into an array of Symbols and operators\r\n         * @param {String} expression_string\r\n         * @returns {Array}\r\n         */\r\n        this.toObject = function (expression_string) {\r\n            var objectify = function (tokens) {\r\n                var output = [];\r\n                for(var i = 0, l = tokens.length; i < l; i++) {\r\n                    var token = tokens[i];\r\n                    var v = token.value;\r\n                    if(token.type === Token.VARIABLE_OR_LITERAL) {\r\n                        output.push(new Symbol(v));\r\n                    }\r\n                    else if(token.type === Token.FUNCTION) {\r\n                        //jump ahead since the next object are the arguments\r\n                        i++;\r\n                        //create a symbolic function and stick it on output\r\n                        var f = _.symfunction(v, objectify(tokens[i]));\r\n                        f.isConversion = true;\r\n                        output.push(f);\r\n                    }\r\n                    else if(token.type === Token.OPERATOR) {\r\n                        output.push(v);\r\n                    }\r\n                    else {\r\n                        output.push(objectify(token));\r\n                    }\r\n                }\r\n\r\n                return output;\r\n            };\r\n            return objectify(_.tokenize(expression_string));\r\n        };\r\n\r\n        // A helper method for toTeX\r\n        var chunkAtCommas = function (arr) {\r\n            var j, k = 0, chunks = [[]];\r\n            for(var j = 0, l = arr.length; j < l; j++) {\r\n                if(arr[j] === ',') {\r\n                    k++;\r\n                    chunks[k] = [];\r\n                }\r\n                else {\r\n                    chunks[k].push(arr[j]);\r\n                }\r\n            }\r\n            return chunks;\r\n        };\r\n\r\n        // Helper method for toTeX\r\n        var rem_brackets = function (str) {\r\n            return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\r\n                if(a)\r\n                    return a;\r\n                return str;\r\n            });\r\n        };\r\n\r\n        var remove_redundant_powers = function (arr) {\r\n            // The filtered array\r\n            var narr = [];\r\n\r\n            while(arr.length) {\r\n                // Remove the element from the front\r\n                var e = arr.shift();\r\n                var next = arr[0];\r\n                var next_is_array = isArray(next);\r\n                var next_is_minus = next === '-';\r\n\r\n                // Remove redundant plusses \r\n                if(e === '^') {\r\n                    if(next === '+') {\r\n                        arr.shift();\r\n                    }\r\n                    else if(next_is_array && next[0] === '+') {\r\n                        next.shift();\r\n                    }\r\n\r\n                    // Remove redundant parentheses\r\n                    if(next_is_array && next.length === 1) {\r\n                        arr.unshift(arr.shift()[0]);\r\n                    }\r\n                }\r\n\r\n                // Check if it's a negative power\r\n                if(e === '^' && (next_is_array && next[0] === '-' || next_is_minus)) {\r\n                    // If so:\r\n                    // - Remove it from the new array, place a one and a division sign in that array and put it back\r\n                    var last = narr.pop();\r\n                    // Check if it's something multiplied by\r\n                    var before = narr[narr.length - 1];\r\n                    var before_last = '1';\r\n\r\n                    if(before === '*') {\r\n                        narr.pop();\r\n                        // For simplicity we just pop it. \r\n                        before_last = narr.pop();\r\n                    }\r\n                    // Implied multiplication\r\n                    else if(isArray(before)) {\r\n                        before_last = narr.pop();\r\n                    }\r\n\r\n                    narr.push(before_last, '/', last, e);\r\n\r\n                    // Remove the negative sign from the power \r\n                    if(next_is_array) {\r\n                        next.shift();\r\n                    }\r\n                    else {\r\n                        arr.shift();\r\n                    }\r\n\r\n                    // Remove it from the array so we don't end up with redundant parentheses if we can\r\n                    if(next_is_array && next.length === 1) {\r\n                        narr.push(arr.shift()[0]);\r\n                    }\r\n                }\r\n                else {\r\n                    narr.push(e);\r\n                }\r\n            }\r\n\r\n            return narr;\r\n        };\r\n        /*\r\n         * Convert expression or object to LaTeX\r\n         * @param {String} expression_or_obj\r\n         * @param {object} opt\r\n         * @returns {String}\r\n         */\r\n        this.toTeX = function (expression_or_obj, opt) {\r\n            opt = opt || {};\r\n            // Add decimal option as per issue #579. Consider passing an object to Latex.latex as option instead of string\r\n            var decimals = opt.decimals === true ? 'decimals' : undefined;\r\n\r\n            var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\r\n                    TeX = [],\r\n                    cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\r\n\r\n            // Remove negative powers as per issue #570\r\n            obj = remove_redundant_powers(obj);\r\n\r\n            if(isArray(obj)) {\r\n                var nobj = [], a, b;\r\n                //first handle ^\r\n                for(var i = 0; i < obj.length; i++) {\r\n                    a = obj[i];\r\n\r\n                    if(obj[i + 1] === '^') {\r\n                        b = obj[i + 2];\r\n                        nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));\r\n                        i += 2;\r\n                    }\r\n                    else {\r\n                        nobj.push(a);\r\n                    }\r\n                }\r\n                obj = nobj;\r\n            }\r\n\r\n            for(var i = 0, l = obj.length; i < l; i++) {\r\n                var e = obj[i];\r\n\r\n                // Convert * to cdot\r\n                if(e === '*') {\r\n                    e = cdot;\r\n                }\r\n\r\n                if(isSymbol(e)) {\r\n                    if(e.group === FN) {\r\n                        var fname = e.fname, f;\r\n\r\n                        if(fname === SQRT) {\r\n                            f = '\\\\sqrt' + LaTeX.braces(this.toTeX(e.args));\r\n                        }\r\n                        else if(fname === ABS) {\r\n                            f = LaTeX.brackets(this.toTeX(e.args), 'abs');\r\n                        }\r\n                        else if(fname === PARENTHESIS) {\r\n                            f = LaTeX.brackets(this.toTeX(e.args), 'parens');\r\n                        }\r\n                        else if(fname === Settings.LOG10) {\r\n                            f = '\\\\' + Settings.LOG10_LATEX + '\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\r\n                        }\r\n                        else if(fname === 'integrate') {\r\n                            /* Retrive [Expression, x] */\r\n                            var chunks = chunkAtCommas(e.args);\r\n                            /* Build TeX */\r\n                            var expr = LaTeX.braces(this.toTeX(chunks[0])),\r\n                                    dx = this.toTeX(chunks[1]);\r\n                            f = '\\\\int ' + expr + '\\\\, d' + dx;\r\n                        }\r\n                        else if(fname === 'defint') {\r\n                            var chunks = chunkAtCommas(e.args),\r\n                                    expr = LaTeX.braces(this.toTeX(chunks[0])),\r\n                                    dx = this.toTeX(chunks[3]),\r\n                                    lb = this.toTeX(chunks[1]),\r\n                                    ub = this.toTeX(chunks[2]);\r\n                            f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\\\, d' + dx;\r\n\r\n                        }\r\n                        else if(fname === 'diff') {\r\n                            var chunks = chunkAtCommas(e.args);\r\n                            var dx = '', expr = LaTeX.braces(this.toTeX(chunks[0]));\r\n                            /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\r\n                            if(chunks.length === 1) {\r\n                                var vars = [];\r\n                                for(j = 0; j < chunks[0].length; j++) {\r\n                                    if(chunks[0][j].group === 3) {\r\n                                        vars.push(chunks[0][j].value);\r\n                                    }\r\n                                }\r\n                                vars.sort();\r\n                                dx = vars.length > 0 ? ('\\\\frac{d}{d ' + vars[0] + '}') : '\\\\frac{d}{d x}';\r\n                            }\r\n                            /* If two arguments, we have expression and variable, we assume n = 1 */\r\n                            else if(chunks.length === 2) {\r\n                                dx = '\\\\frac{d}{d ' + chunks[1] + '}';\r\n                            }\r\n                            /* If we have more than 2 arguments, we assume we've got everything */\r\n                            else {\r\n                                dx = '\\\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';\r\n                            }\r\n\r\n                            f = dx + '\\\\left(' + expr + '\\\\right)';\r\n\r\n                        }\r\n                        else if(fname === 'sum' || fname === 'product') {\r\n                            // Split e.args into 4 parts based on locations of , symbols.\r\n                            var argSplit = [[], [], [], []], j = 0, i;\r\n                            for(i = 0; i < e.args.length; i++) {\r\n                                if(e.args[i] === ',') {\r\n                                    j++;\r\n                                    continue;\r\n                                }\r\n                                argSplit[j].push(e.args[i]);\r\n                            }\r\n                            // Then build TeX string.\r\n                            f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\r\n                            f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));\r\n                        }\r\n                        else if(fname === 'limit') {\r\n                            var args = chunkAtCommas(e.args).map(function (x) {\r\n                                if(Array.isArray(x))\r\n                                    return _.toTeX(x.join(''));\r\n                                return _.toTeX(String(x));\r\n                            });\r\n                            f = '\\\\lim_' + LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);\r\n                        }\r\n                        else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\r\n                            f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');\r\n                        }\r\n                        else {\r\n                            f = LaTeX.latex(e, decimals);\r\n                            //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\r\n                        }\r\n\r\n                        TeX.push(f);\r\n                    }\r\n                    else {\r\n                        TeX.push(LaTeX.latex(e, decimals));\r\n                    }\r\n                }\r\n                else if(isArray(e)) {\r\n                    TeX.push(LaTeX.brackets(this.toTeX(e)));\r\n                }\r\n                else {\r\n                    if(e === '/')\r\n                        TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));\r\n                    else\r\n                        TeX.push(e);\r\n                }\r\n            }\r\n\r\n            return TeX.join(' ');\r\n        };\r\n\r\n//Parser.functions ==============================================================\r\n        /* Although parens is not a \"real\" function it is important in some cases when the\r\n         * symbol must carry parenthesis. Once set you don't have to worry about it anymore\r\n         * as the parser will get rid of it at the first opportunity\r\n         */\r\n        function parens(symbol) {\r\n            if(Settings.PARSE2NUMBER) {\r\n                return symbol;\r\n            }\r\n            return _.symfunction('parens', [symbol]);\r\n        }\r\n\r\n        function abs(symbol) {\r\n\r\n            //|-∞| = ∞\r\n            if(symbol.isInfinity) {\r\n                return Symbol.infinity();\r\n            }\r\n            if(symbol.multiplier.lessThan(0))\r\n                symbol.multiplier.negate();\r\n\r\n            if(symbol.isImaginary()) {\r\n                var re = symbol.realpart();\r\n                var im = symbol.imagpart();\r\n                if(re.isConstant() && im.isConstant())\r\n                    return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));\r\n            }\r\n            else if(isNumericSymbol(symbol) || even(symbol.power)) {\r\n                return symbol;\r\n            }\r\n\r\n            if(symbol.isComposite()) {\r\n                var ms = [];\r\n                symbol.each(function (x) {\r\n                    ms.push(x.multiplier);\r\n                });\r\n                var gcd = Math2.QGCD.apply(null, ms);\r\n                if(gcd.lessThan(0)) {\r\n                    symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));\r\n                    symbol.distributeMultiplier();\r\n                }\r\n            }\r\n\r\n            //convert |n*x| to n*|x|\r\n            var m = _.parse(symbol.multiplier);\r\n            symbol.toUnitMultiplier();\r\n\r\n            return _.multiply(m, _.symfunction(ABS, [symbol]));\r\n        }\r\n        /**\r\n         * The factorial function\r\n         * @param {Symbol} symbol\r\n         * @return {Symbol}\r\n         */\r\n        function factorial(symbol) {\r\n            var retval;\r\n            if(isVector(symbol)) {\r\n                var V = new Vector();\r\n                symbol.each(function (x, i) {\r\n                    //i start at one.\r\n                    V.set(i - 1, factorial(x));\r\n                });\r\n                return V;\r\n            }\r\n            if(isMatrix(symbol)) {\r\n                var M = new Matrix();\r\n                symbol.each(function (x, i, j) {\r\n                    //i start at one.\r\n                    M.set(i, j, factorial(x));\r\n                });\r\n                return M;\r\n            }\r\n            if(Settings.PARSE2NUMBER && symbol.isConstant()) {\r\n                if(isInt(symbol)) {\r\n                    retval = Math2.bigfactorial(symbol);\r\n                }\r\n                else {\r\n                    retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());\r\n                }\r\n\r\n                retval = bigConvert(retval);\r\n                return retval;\r\n            }\r\n            else if(symbol.isConstant()) {\r\n                var den = symbol.getDenom();\r\n                if(den.equals(2)) {\r\n                    var num = symbol.getNum();\r\n                    var a, b, c, n;\r\n\r\n                    if(!symbol.multiplier.isNegative()) {\r\n                        n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));\r\n                        a = Math2.bigfactorial(new Frac(2).multiply(n));\r\n                        b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\r\n                    }\r\n                    else {\r\n                        n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));\r\n                        a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\r\n                        b = Math2.bigfactorial(new Frac(2).multiply(n));\r\n                    }\r\n                    c = a.divide(b);\r\n                    return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));\r\n                }\r\n            }\r\n            return _.symfunction(FACTORIAL, [symbol]);\r\n        }\r\n        ;\r\n        /**\r\n         * Returns the continued fraction of a number\r\n         * @param {Symbol} symbol\r\n         * @param {Symbol} n\r\n         * @returns {Symbol}\r\n         */\r\n        function continued_fraction(symbol, n) {\r\n            var _symbol = evaluate(symbol);\r\n            if(_symbol.isConstant()) {\r\n                var cf = Math2.continuedFraction(_symbol, n);\r\n                //convert the fractions array to a new Vector\r\n                var fractions = Vector.fromArray(cf.fractions.map(function (x) {\r\n                    return new Symbol(x);\r\n                }));\r\n                return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);\r\n            }\r\n            return _.symfunction('continued_fraction', arguments);\r\n        }\r\n        /**\r\n         * Returns the error function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function erf(symbol) {\r\n            var _symbol = evaluate(symbol);\r\n\r\n            if(_symbol.isConstant()) {\r\n                return Math2.erf(_symbol);\r\n            }\r\n            else if(_symbol.isImaginary()) {\r\n                return complex.erf(symbol);\r\n            }\r\n            return _.symfunction('erf', arguments);\r\n        }\r\n        ;\r\n        /**\r\n         * The mod function\r\n         * @param {Symbol} symbol1\r\n         * @param {Symbol} symbol2\r\n         * @returns {Symbol}\r\n         */\r\n        function mod(symbol1, symbol2) {\r\n            if(symbol1.isConstant() && symbol2.isConstant()) {\r\n                var retval = new Symbol(1);\r\n                retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));\r\n                return retval;\r\n            }\r\n            //try to see if division has remainder of zero\r\n            var r = _.divide(symbol1.clone(), symbol2.clone());\r\n            if(isInt(r))\r\n                return new Symbol(0);\r\n            return _.symfunction('mod', [symbol1, symbol2]);\r\n        }\r\n        /**\r\n         * A branghing function\r\n         * @param {Boolean} condition\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        function IF(condition, a, b) {\r\n            if(typeof condition !== 'boolean')\r\n                if(isNumericSymbol(condition))\r\n                    condition = !!Number(condition);\r\n            if(condition)\r\n                return a;\r\n            return b;\r\n        }\r\n        /**\r\n         *\r\n         * @param {Matrix|Vector|Set|Collection} obj\r\n         * @param {Symbol} item\r\n         * @returns {Boolean}\r\n         */\r\n        function is_in(obj, item) {\r\n            if(isMatrix(obj)) {\r\n                for(var i = 0, l = obj.rows(); i < l; i++) {\r\n                    for(var j = 0, l2 = obj.cols(); j < l2; j++) {\r\n                        var element = obj.elements[i][j];\r\n                        if(element.equals(item))\r\n                            return new Symbol(1);\r\n                    }\r\n                }\r\n            }\r\n            else if(obj.elements) {\r\n                for(var i = 0, l = obj.elements.length; i < l; i++) {\r\n                    if(obj.elements[i].equals(item))\r\n                        return new Symbol(1);\r\n                }\r\n            }\r\n\r\n            return new Symbol(0);\r\n        }\r\n\r\n        /**\r\n         * A symbolic extension for sinc\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function sinc(symbol) {\r\n            if(Settings.PARSE2NUMBER) {\r\n                if(symbol.isConstant()) {\r\n                    return new Symbol(Math2.sinc(symbol));\r\n                }\r\n                return _.parse(format('sin({0})/({0})', symbol));\r\n            }\r\n            return _.symfunction('sinc', [symbol]);\r\n        }\r\n\r\n        /**\r\n         * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.\r\n         * Thanks @ Happypig375\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function exp(symbol) {\r\n            if(symbol.fname === Settings.LOG && symbol.isLinear()) {\r\n                return _.pow(symbol.args[0], Symbol.create(symbol.multiplier));\r\n            }\r\n            return _.parse(format('e^({0})', symbol));\r\n        }\r\n\r\n        /**\r\n         * Converts value degrees to radians\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function radians(symbol) {\r\n            return _.parse(format('({0})*pi/180', symbol));\r\n        }\r\n\r\n        /**\r\n         * Converts value from radians to degrees\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function degrees(symbol) {\r\n            return _.parse(format('({0})*180/pi', symbol));\r\n        }\r\n\r\n        function nroots(symbol) {\r\n            var a, b;\r\n            if(symbol.group === FN && symbol.fname === '') {\r\n                a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\r\n                b = _.parse(symbol.power);\r\n            }\r\n            else if(symbol.group === P) {\r\n                a = _.parse(symbol.value);\r\n                b = _.parse(symbol.power);\r\n            }\r\n\r\n            if(a && b && a.group === N && b.group === N) {\r\n                var _roots = [];\r\n                var parts = Symbol.toPolarFormArray(symbol);\r\n                var r = _.parse(a).abs().toString();\r\n                //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\r\n                var x = arg(a).toString();\r\n                var n = b.multiplier.den.toString();\r\n                var p = b.multiplier.num.toString();\r\n\r\n                var formula = \"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\";\r\n                for(var i = 0; i < n; i++) {\r\n                    var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\r\n                    _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\r\n                }\r\n                return Vector.fromArray(_roots);\r\n            }\r\n            else if(symbol.isConstant(true)) {\r\n                var sign = symbol.sign();\r\n                var x = evaluate(symbol.abs());\r\n                var root = _.sqrt(x);\r\n\r\n                var _roots = [root.clone(), root.negate()];\r\n\r\n                if(sign < 0)\r\n                    _roots = _roots.map(function (x) {\r\n                        return _.multiply(x, Symbol.imaginary());\r\n                    });\r\n            }\r\n            else {\r\n                _roots = [_.parse(symbol)];\r\n            }\r\n\r\n            return Vector.fromArray(_roots);\r\n        }\r\n\r\n        /**\r\n         * Rationalizes a symbol\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function rationalize(symbol) {\r\n            if(symbol.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                var num, den, retnum, retden, a, b, n, d;\r\n                symbol.each(function (x) {\r\n                    num = x.getNum();\r\n                    den = x.getDenom();\r\n                    retnum = retval.getNum();\r\n                    retden = retval.getDenom();\r\n                    a = _.multiply(den, retnum);\r\n                    b = _.multiply(num, retden);\r\n                    n = _.expand(_.add(a, b));\r\n                    d = _.multiply(retden, den);\r\n                    retval = _.divide(n, d);\r\n                }, true);\r\n\r\n                return retval;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        /**\r\n         * The square root function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function sqrt(symbol) {\r\n            if(!isSymbol(symbol)) {\r\n                symbol = _.parse(symbol);\r\n            }\r\n            \r\n            // Exit early for EX\r\n            if(symbol.group === EX) {\r\n                return _.symfunction(SQRT, [symbol]);\r\n            }\r\n\r\n            if(symbol.fname === '' && symbol.power.equals(1))\r\n                symbol = symbol.args[0];\r\n\r\n            var is_negative = symbol.multiplier.sign() < 0;\r\n\r\n            if(Settings.PARSE2NUMBER) {\r\n                if(symbol.isConstant() && !is_negative) {\r\n                    return new Symbol(bigDec.sqrt(symbol.multiplier.toDecimal()));\r\n                }\r\n                else if(symbol.isImaginary()) {\r\n                    return complex.sqrt(symbol);\r\n                }\r\n                else if(symbol.group === S) {\r\n                    return _.symfunction('sqrt', [symbol]);\r\n                }\r\n            }\r\n\r\n            var img, retval,\r\n                    isConstant = symbol.isConstant();\r\n\r\n            if(symbol.group === CB && symbol.isLinear()) {\r\n                var m = sqrt(Symbol(symbol.multiplier));\r\n                for(var s in symbol.symbols) {\r\n                    var x = symbol.symbols[s];\r\n                    m = _.multiply(m, sqrt(x));\r\n                }\r\n\r\n                retval = m;\r\n            }\r\n            //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\r\n            else if(symbol.fname === SQRT) {\r\n                var s = symbol.args[0];\r\n                var ms = symbol.multiplier;\r\n                s.setPower(symbol.power.multiply(new Frac(0.25)));\r\n                retval = s;\r\n                //grab the multiplier\r\n                if(!ms.equals(1))\r\n                    retval = _.multiply(sqrt(_.parse(ms)), retval);\r\n            }\r\n            //if the symbol is a fraction then we don't keep can unwrap it. For instance\r\n            //no need to keep sqrt(x^(1/3))\r\n            else if(!symbol.power.isInteger()) {\r\n                symbol.setPower(symbol.power.multiply(new Frac(0.5)));\r\n                retval = symbol;\r\n            }\r\n            else if(symbol.multiplier < 0 && symbol.group === S) {\r\n                var a = _.parse(symbol.multiplier).negate();\r\n                var b = _.parse(symbol).toUnitMultiplier().negate();\r\n                retval = _.multiply(_.symfunction(Settings.SQRT, [b]), sqrt(a));\r\n            }\r\n            else {\r\n\r\n                //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\r\n                //to sqrt(a)*sqrt(b)^1 for better simplification\r\n                //the sign of the power\r\n                var sign = symbol.power.sign();\r\n                //remove the sign\r\n                symbol.power = symbol.power.abs();\r\n\r\n                //if the symbols is imagary then we place in the imaginary part. We'll return it\r\n                //as a product\r\n                if(isConstant && symbol.multiplier.lessThan(0)) {\r\n                    img = Symbol.imaginary();\r\n                    symbol.multiplier = symbol.multiplier.abs();\r\n                }\r\n\r\n                var q = symbol.multiplier.toDecimal(),\r\n                        qa = Math.abs(q),\r\n                        t = Math.sqrt(qa);\r\n\r\n                var m;\r\n                //it's a perfect square so take the square\r\n                if(isInt(t)) {\r\n                    m = new Symbol(t);\r\n                }\r\n                else if(isInt(q)) {\r\n                    var factors = Math2.ifactor(q);\r\n                    var tw = 1;\r\n                    for(var x in factors) {\r\n                        var n = factors[x],\r\n                                nn = (n - (n % 2)); //get out the whole numbers\r\n                        if(nn) { //if there is a whole number ...\r\n                            var w = Math.pow(x, nn);\r\n                            tw *= Math.pow(x, nn / 2); //add to total wholes\r\n                            q /= w; //reduce the number by the wholes\r\n                        }\r\n                    }\r\n                    m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));\r\n                }\r\n                else {\r\n                    //reduce the numerator and denominator using prime factorization\r\n                    var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];\r\n                    var r = [new Symbol(1), new Symbol(1)];\r\n                    var sq = [new Symbol(1), new Symbol(1)];\r\n                    for(var i = 0; i < 2; i++) {\r\n                        var n = c[i];\r\n                        //get the prime factors and loop through each.\r\n                        pfactor(n).each(function (x) {\r\n                            x = Symbol.unwrapPARENS(x);\r\n                            var b = x.clone().toLinear();\r\n                            var p = Number(x.power);\r\n                            //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\r\n                            var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\r\n                            var w = (p - rem) / 2; //get the whole numbers of n/2\r\n                            r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));\r\n                            sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));\r\n                        });\r\n                    }\r\n                    m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));\r\n                }\r\n\r\n\r\n                //strip the multiplier since we already took the sqrt\r\n                symbol = symbol.toUnitMultiplier(true);\r\n                //if the symbol is one just return one and not the sqrt function\r\n                if(symbol.isOne()) {\r\n                    retval = symbol;\r\n                }\r\n                else if(even(symbol.power.toString())) {\r\n                    //just raise it to the 1/2\r\n                    retval = _.pow(symbol.clone(), new Symbol(0.5));\r\n                }\r\n                else {\r\n                    retval = _.symfunction(SQRT, [symbol]);\r\n                }\r\n\r\n                //put back the sign that was removed earlier\r\n                if(sign < 0)\r\n                    retval.power.negate();\r\n\r\n                if(m)\r\n                    retval = _.multiply(m, retval);\r\n\r\n                if(img)\r\n                    retval = _.multiply(img, retval);\r\n            }\r\n\r\n            if(is_negative && Settings.PARSE2NUMBER)\r\n                return _.parse(retval);\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * The cube root function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function cbrt(symbol) {\r\n            if(!symbol.isConstant(true)) {\r\n                var retval;\r\n\r\n                var n = symbol.power / 3;\r\n                //take the cube root of the multplier\r\n                var m = _.pow(_.parse(symbol.multiplier), new Symbol(1 / 3));\r\n                //strip the multiplier\r\n                var sym = symbol.toUnitMultiplier();\r\n\r\n                //simplify the power\r\n                if(isInt(n)) {\r\n                    retval = _.pow(sym.toLinear(), _.parse(n));\r\n                }\r\n                else {\r\n                    if(sym.group === CB) {\r\n                        retval = new Symbol(1);\r\n                        sym.each(function (x) {\r\n                            retval = _.multiply(retval, cbrt(x));\r\n                        });\r\n                    }\r\n                    else {\r\n                        retval = _.symfunction('cbrt', [sym]);\r\n                    }\r\n                }\r\n\r\n                return _.multiply(m, retval);\r\n            }\r\n            return nthroot(symbol, new Symbol(3));\r\n        }\r\n\r\n        function scientific(symbol, sigfigs) {\r\n            //Just set the flag and keep it moving. Symbol.toString will deal with how to\r\n            //display this\r\n            symbol.scientific = sigfigs || 10;\r\n            return symbol;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {Symbol} num - the number being raised\r\n         * @param {Symbol} p - the exponent\r\n         * @param {type} prec - the precision wanted\r\n         * @param {bool} asbig - true if a bigDecimal is wanted\r\n         * @returns {Symbol}\r\n         */\r\n        function nthroot(num, p, prec, asbig) {\r\n            //clone p and convert to a number if possible\r\n            p = evaluate(_.parse(p));\r\n\r\n            //cannot calculate if p = 0. nthroot(0, 0) => 0^(1/0) => undefined\r\n            if(p.equals(0)) {\r\n                throw new UndefinedError('Unable to calculate nthroots of zero');\r\n            }\r\n\r\n            //Stop computation if it negative and even since we have an imaginary result\r\n            if(num < 0 && even(p))\r\n                throw new Error('Cannot calculate nthroot of negative number for even powers');\r\n\r\n            //return non numeric values unevaluated\r\n            if(!num.isConstant(true)) {\r\n                return _.symfunction('nthroot', arguments);\r\n            }\r\n\r\n            //evaluate numeric values\r\n            if(num.group !== N) {\r\n                num = evaluate(num);\r\n            }\r\n\r\n            //default is to return a big value\r\n            if(typeof asbig === 'undefined')\r\n                asbig = true;\r\n\r\n            prec = prec || 25;\r\n\r\n            var sign = num.sign();\r\n            var retval;\r\n            var ans;\r\n\r\n            if(sign < 0) {\r\n                num = abs(num); //remove the sign\r\n            }\r\n\r\n            if(isInt(num) && p.isConstant()) {\r\n\r\n                if(num < 18446744073709551616) {\r\n                    //2^64\r\n                    ans = Frac.create(Math.pow(num, 1 / p));\r\n                }\r\n                else {\r\n                    ans = Math2.nthroot(num, p);\r\n                }\r\n\r\n                var retval;\r\n                if(asbig) {\r\n                    retval = new Symbol(ans);\r\n                }\r\n                retval = new Symbol(ans.toDecimal(prec));\r\n\r\n                return _.multiply(new Symbol(sign), retval);\r\n            }\r\n        }\r\n\r\n        function pfactor(symbol) {\r\n            //Fix issue #458 | nerdamer(\"sqrt(1-(3.3333333550520926e-7)^2)\").evaluate().text()\r\n            //More Big Number issues >:(\r\n            if(symbol.greaterThan(9.999999999998891e+41) || symbol.equals(-1))\r\n                return symbol;\r\n            //Fix issue #298\r\n            if(symbol.equals(Math.PI))\r\n                return new Symbol(Math.PI);\r\n            //evaluate the symbol to merge constants\r\n            symbol = evaluate(symbol.clone());\r\n\r\n            if(symbol.isConstant()) {\r\n                var retval = new Symbol(1);\r\n                var m = symbol.toString();\r\n                if(isInt(m)) {\r\n                    var factors = Math2.ifactor(m);\r\n                    for(var factor in factors) {\r\n                        var p = factors[factor];\r\n                        retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));\r\n                    }\r\n                }\r\n                else {\r\n                    var n = pfactor(new Symbol(symbol.multiplier.num));\r\n                    var d = pfactor(new Symbol(symbol.multiplier.den));\r\n                    retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());\r\n                }\r\n            }\r\n            else\r\n                retval = _.symfunction('pfactor', arguments);\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * Get's the real part of a complex number. Return number if real\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function realpart(symbol) {\r\n            return symbol.realpart();\r\n        }\r\n\r\n        /**\r\n         * Get's the imaginary part of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function imagpart(symbol) {\r\n            return symbol.imagpart();\r\n        }\r\n\r\n        /**\r\n         * Computes the conjugate of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function conjugate(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));\r\n        }\r\n\r\n        /**\r\n         * Returns the arugment of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function arg(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            if(re.isConstant() && im.isConstant())\r\n                return new Symbol(Math.atan2(im, re));\r\n            return _.symfunction('atan2', [im, re]);\r\n        }\r\n\r\n        /**\r\n         * Returns the arugment of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function arg(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            if(re.isConstant() && im.isConstant()) {\r\n                if(im.equals(0) && re.equals(-1)) {\r\n                    return _.parse('pi');\r\n                }\r\n                else if(im.equals(1) && re.equals(0)) {\r\n                    return _.parse('pi/2');\r\n                }\r\n                else if(im.equals(1) && re.equals(1)) {\r\n                    return _.parse('pi/4');\r\n                }\r\n                return new Symbol(Math.atan2(im, re));\r\n            }\r\n            return _.symfunction('atan2', [im, re]);\r\n        }\r\n\r\n        /**\r\n         * Returns the polarform of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function polarform(symbol) {\r\n            var p, r, e, theta;\r\n            p = Symbol.toPolarFormArray(symbol);\r\n            theta = p[1];\r\n            r = p[0];\r\n            e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));\r\n            return _.multiply(r, e);\r\n        }\r\n\r\n        /**\r\n         * Returns the rectangular form of a complex number. Does not work for symbolic coefficients\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function rectform(symbol) {\r\n            //TODO: e^((i*pi)/4)\r\n            var original = symbol.clone();\r\n            try {\r\n                var f, p, q, s, h, d, n;\r\n                f = decompose_fn(symbol, 'e', true);\r\n                p = _.divide(f.x.power, Symbol.imaginary());\r\n                q = evaluate(trig.tan(p));\r\n                s = _.pow(f.a, new Symbol(2));\r\n                d = q.getDenom(true);\r\n                n = q.getNum();\r\n                h = Symbol.hyp(n, d);\r\n                //check\r\n                if(h.equals(f.a)) {\r\n                    return _.add(d, _.multiply(Symbol.imaginary(), n));\r\n                }\r\n                else {\r\n                    return original;\r\n                }\r\n            }\r\n            catch(e) {\r\n                return original;\r\n            }\r\n        }\r\n\r\n        function symMinMax(f, args) {\r\n            args.map(function (x) {\r\n                x.numVal = evaluate(x).multiplier;\r\n            });\r\n            var l, a, b, a_val, b_val;\r\n            while(true) {\r\n                l = args.length;\r\n                if(l < 2)\r\n                    return args[0];\r\n                a = args.pop();\r\n                b = args[l - 2];\r\n                if(f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {\r\n                    args.pop();\r\n                    args.push(a);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns maximum of a set of numbers\r\n         * @returns {Symbol}\r\n         */\r\n        function max() {\r\n            var args = [].slice.call(arguments);\r\n            if(allSame(args))\r\n                return args[0];\r\n            if(allNumbers(args))\r\n                return new Symbol(Math.max.apply(null, args));\r\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\r\n                return symMinMax('max', args);\r\n            return _.symfunction('max', args);\r\n        }\r\n\r\n        /**\r\n         * Returns minimum of a set of numbers\r\n         * @returns {Symbol}\r\n         */\r\n        function min() {\r\n            var args = [].slice.call(arguments);\r\n            if(allSame(args))\r\n                return args[0];\r\n            if(allNumbers(args))\r\n                return new Symbol(Math.min.apply(null, args));\r\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\r\n                return symMinMax('min', args);\r\n            return _.symfunction('min', args);\r\n        }\r\n\r\n        /**\r\n         * Returns the sign of a number\r\n         * @param {Symbol} x\r\n         * @returns {Symbol}\r\n         */\r\n        function sign(x) {\r\n            if(x.isConstant(true))\r\n                return new Symbol(Math.sign(evaluate(x)));\r\n            return _.symfunction('sign', arguments);\r\n        }\r\n\r\n        function sort(symbol, opt) {\r\n            opt = opt ? opt.toString() : 'asc';\r\n            var getval = function (e) {\r\n                if(e.group === N)\r\n                    return e.multiplier;\r\n                if(e.group === FN) {\r\n                    if(e.fname === '')\r\n                        return getval(e.args[0]);\r\n                    return e.fname;\r\n                }\r\n                if(e.group === S)\r\n                    return e.power;\r\n\r\n                return e.value;\r\n            };\r\n            var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();\r\n            return new Vector(symbols.sort(function (a, b) {\r\n                var aval = getval(a),\r\n                        bval = getval(b);\r\n                if(opt === 'desc')\r\n                    return bval - aval;\r\n                return aval - bval;\r\n            }));\r\n        }\r\n\r\n        /**\r\n         * The log function\r\n         * @param {Symbol} symbol\r\n         * @param {Symbol} base\r\n         * @returns {Symbol}\r\n         */\r\n        function log(symbol, base) {\r\n\r\n            if(symbol.equals(1)) {\r\n                return new Symbol(0);\r\n            }\r\n\r\n            var retval;\r\n\r\n            if(symbol.fname === SQRT && symbol.multiplier.equals(1)) {\r\n                retval = _.divide(log(symbol.args[0]), new Symbol(2));\r\n\r\n                if(symbol.power.sign() < 0) {\r\n                    retval.negate();\r\n                }\r\n\r\n                // Exit early\r\n                return retval;\r\n            }\r\n\r\n            //log(0) is undefined so complain\r\n            if(symbol.equals(0)) {\r\n                throw new UndefinedError(Settings.LOG + '(0) is undefined!');\r\n            }\r\n\r\n            //deal with imaginary values\r\n            if(symbol.isImaginary()) {\r\n                return complex.evaluate(symbol, Settings.LOG);\r\n            }\r\n\r\n            if(symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {\r\n                var log_sym = Math.log(symbol);\r\n                var log_base = Math.log(base);\r\n                retval = new Symbol(log_sym / log_base);\r\n            }\r\n            else if(symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {\r\n                symbol.power.negate();\r\n                //move the negative outside but keep the positive inside :)\r\n                retval = log(symbol).negate();\r\n            }\r\n            else if(symbol.value === 'e' && symbol.multiplier.equals(1)) {\r\n                var p = symbol.power;\r\n                retval = isSymbol(p) ? p : new Symbol(p);\r\n            }\r\n            else if(symbol.group === FN && symbol.fname === 'exp') {\r\n                var s = symbol.args[0];\r\n                if(symbol.multiplier.equals(1))\r\n                    retval = _.multiply(s, new Symbol(symbol.power));\r\n                else\r\n                    retval = _.symfunction(Settings.LOG, [symbol]);\r\n            }\r\n            else if(Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {\r\n                // Parse for safety.\r\n                symbol = _.parse(symbol);\r\n\r\n                var img_part;\r\n                if(symbol.multiplier.lessThan(0)) {\r\n                    symbol.negate();\r\n                    img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));\r\n                }\r\n\r\n                retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));\r\n\r\n                if(img_part) {\r\n                    retval = _.add(retval, img_part);\r\n                }\r\n\r\n            }\r\n            else {\r\n                var s;\r\n                if(!symbol.power.equals(1) && !symbol.contains('e')) {\r\n                    s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);\r\n                    symbol.toLinear();\r\n                }\r\n                //log(a,a) = 1 since the base is allowed to be changed.\r\n                //This was pointed out by Happypig375 in issue #280\r\n                if(arguments.length > 1 && allSame(arguments)) {\r\n                    retval = new Symbol(1);\r\n                }\r\n                else {\r\n                    retval = _.symfunction(Settings.LOG, arguments);\r\n                }\r\n\r\n                if(s)\r\n                    retval = _.multiply(s, retval);\r\n            }\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * Round a number up to s decimal places\r\n         * @param {Number} x\r\n         * @param {int} s - the number of decimal places\r\n         * @returns {undefined}\r\n         */\r\n        function round(x, s) {\r\n            var sIsConstant = s && s.isConstant() || typeof s === 'undefined';\r\n            if(x.isConstant() && sIsConstant) {\r\n                var v, e, exp, retval;\r\n                v = x;\r\n                //round the coefficient of then number but not the actual decimal value\r\n                //we know this because a negative number was passed\r\n                if(s && s.lessThan(0)) {\r\n                    s = abs(s);\r\n                    //convert the number to exponential form\r\n                    e = Number(x).toExponential().toString().split('e');\r\n                    //point v to the coefficient of then number\r\n                    v = e[0];\r\n                    //set the expontent\r\n                    exp = e[1];\r\n                }\r\n                //round the number to the requested precision\r\n                retval = new Symbol(nround(v, Number(s || 0)));\r\n                //if there's a exponent then put it back\r\n                return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)))\r\n            }\r\n\r\n\r\n            return _.symfunction('round', arguments);\r\n        }\r\n\r\n        /**\r\n         * Gets the quadrant of the trig function\r\n         * @param {Frac} m\r\n         * @returns {Int}\r\n         */\r\n        function getQuadrant(m) {\r\n            var v = m % 2, quadrant;\r\n\r\n            if(v < 0)\r\n                v = 2 + v; //put it in terms of pi\r\n\r\n            if(v >= 0 && v <= 0.5)\r\n                quadrant = 1;\r\n            else if(v > 0.5 && v <= 1)\r\n                quadrant = 2;\r\n            else if(v > 1 && v <= 1.5)\r\n                quadrant = 3;\r\n            else\r\n                quadrant = 4;\r\n            return quadrant;\r\n        }\r\n\r\n        /*\r\n         * Serves as a bridge between numbers and bigNumbers\r\n         * @param {Frac|Number} n\r\n         * @returns {Symbol}\r\n         */\r\n        function bigConvert(n) {\r\n            if(!isFinite(n)) {\r\n                var sign = Math.sign(n);\r\n                var r = new Symbol(String(Math.abs(n)));\r\n                r.multiplier = r.multiplier.multiply(new Frac(sign));\r\n                return r;\r\n            }\r\n            if(isSymbol(n))\r\n                return n;\r\n            if(typeof n === 'number') {\r\n                try {\r\n                    n = Frac.simple(n);\r\n                }\r\n                catch(e) {\r\n                    n = new Frac(n);\r\n                }\r\n            }\r\n\r\n            var symbol = new Symbol(0);\r\n            symbol.multiplier = n;\r\n            return symbol;\r\n        }\r\n        ;\r\n\r\n        function clean(symbol) {\r\n            // handle functions with numeric values\r\n            // handle denominator within denominator\r\n            // handle trig simplifications\r\n            var g = symbol.group, retval;\r\n            //Now let's get to work\r\n            if(g === CP) {\r\n                var num = symbol.getNum(),\r\n                        den = symbol.getDenom() || new Symbol(1),\r\n                        p = Number(symbol.power),\r\n                        factor = new Symbol(1);\r\n                if(Math.abs(p) === 1) {\r\n                    den.each(function (x) {\r\n                        if(x.group === CB) {\r\n                            factor = _.multiply(factor, clean(x.getDenom()));\r\n                        }\r\n                        else if(x.power.lessThan(0)) {\r\n                            factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));\r\n                        }\r\n                    });\r\n\r\n                    var new_den = new Symbol(0);\r\n                    //now divide out the factor and add to new den\r\n                    den.each(function (x) {\r\n                        new_den = _.add(_.divide(x, factor.clone()), new_den);\r\n                    });\r\n\r\n                    factor.invert(); //invert so it can be added to the top\r\n                    var new_num;\r\n                    if(num.isComposite()) {\r\n                        new_num = new Symbol(0);\r\n                        num.each(function (x) {\r\n                            new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);\r\n                        });\r\n                    }\r\n                    else\r\n                        new_num = _.multiply(factor, num);\r\n\r\n                    retval = _.divide(new_num, new_den);\r\n                }\r\n            }\r\n            else if(g === CB) {\r\n                retval = new Symbol(1);\r\n                symbol.each(function (x) {\r\n                    retval = _.multiply(retval, _.clean(x));\r\n                });\r\n            }\r\n            else if(g === FN) {\r\n                if(symbol.args.length === 1 && symbol.args[0].isConstant())\r\n                    retval = block('PARSE2NUMBER', function () {\r\n                        return _.parse(symbol);\r\n                    }, true);\r\n            }\r\n\r\n            if(!retval)\r\n                retval = symbol;\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * A wrapper for the expand function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function expandall(symbol, opt) {\r\n            opt = opt || {\r\n                expand_denominator: true,\r\n                expand_functions: true\r\n            };\r\n            return expand(symbol, opt);\r\n        }\r\n        /**\r\n         * Expands a symbol\r\n         * @param symbol\r\n         */\r\n        // Old expand\r\n        function expand(symbol, opt) {\r\n            if(Array.isArray(symbol)) {\r\n                return symbol.map(function (x) {\r\n                    return expand(x, opt);\r\n                });\r\n            }\r\n            opt = opt || {};\r\n            //deal with parenthesis\r\n            if(symbol.group === FN && symbol.fname === '') {\r\n                var f = expand(symbol.args[0], opt);\r\n                var x = expand(_.pow(f, _.parse(symbol.power)), opt);\r\n                return _.multiply(_.parse(symbol.multiplier), x).distributeMultiplier();\r\n            }\r\n            // We can expand these groups so no need to waste time. Just return and be done.\r\n            if([N, P, S].indexOf(symbol.group) !== -1) {\r\n                return symbol; //nothing to do\r\n            }\r\n\r\n            var original = symbol.clone();\r\n\r\n            // Set up a try-catch block. If anything goes wrong then we simply return the original symbol\r\n            try {\r\n                // Store the power and multiplier\r\n                var m = symbol.multiplier.toString();\r\n                var p = Number(symbol.power);\r\n                var retval = symbol;\r\n\r\n                // Handle (a+b)^2 | (x+x^2)^2\r\n                if(symbol.isComposite() && isInt(symbol.power) && symbol.power > 0) {\r\n                    var n = p - 1;\r\n                    // Strip the expression of it's multiplier and power. We'll call it f. The power will be p and the multiplier m.\r\n                    var f = new Symbol(0);\r\n\r\n                    symbol.each(function (x) {\r\n                        f = _.add(f, expand(_.parse(x), opt));\r\n                    });\r\n\r\n                    var expanded = _.parse(f);\r\n\r\n                    for(var i = 0; i < n; i++) {\r\n                        expanded = mix(expanded, f, opt);\r\n                    }\r\n\r\n                    retval = _.multiply(_.parse(m), expanded).distributeMultiplier();\r\n                }\r\n                else if(symbol.group === FN && opt.expand_functions === true) {\r\n                    var args = [];\r\n                    // Expand function the arguments\r\n                    symbol.args.forEach(function (x) {\r\n                        args.push(expand(x, opt));\r\n                    });\r\n                    // Put back the power and multiplier\r\n                    retval = _.pow(_.symfunction(symbol.fname, args), _.parse(symbol.power));\r\n                    retval = _.multiply(retval, _.parse(symbol.multiplier));\r\n                }\r\n                else if(symbol.isComposite() && isInt(symbol.power) && symbol.power < 0 && opt.expand_denominator === true) {\r\n                    // Invert it. Expand it and then re-invert it.\r\n                    symbol = symbol.invert();\r\n                    retval = expand(symbol, opt);\r\n                    retval.invert();\r\n                }\r\n                else if(symbol.group === CB) {\r\n                    var rank = function (s) {\r\n                        switch(s.group) {\r\n                            case CP:\r\n                                return 0;\r\n                            case PL:\r\n                                return 1;\r\n                            case CB:\r\n                                return 2;\r\n                            case FN:\r\n                                return 3;\r\n                            default:\r\n                                return 4;\r\n                        }\r\n                    };\r\n                    // Consider (a+b)(c+d). The result will be (a*c+a*d)+(b*c+b*d).\r\n                    // We start by moving collecting the symbols. We want others>FN>CB>PL>CP\r\n                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                        return rank(b) - rank(a);\r\n                    })\r\n                            // Distribute the power to each symbol and expand\r\n                            .map(function (s) {\r\n                                var x = _.pow(s, _.parse(p));\r\n                                var e = expand(x, opt);\r\n                                return e;\r\n                            });\r\n\r\n                    var f = symbols.pop();\r\n\r\n                    // If the first symbols isn't a composite then we're done\r\n                    if(f.isComposite() && f.isLinear()) {\r\n                        symbols.forEach(function (s) {\r\n                            f = mix(f, s, opt);\r\n                        });\r\n\r\n                        // If f is of group PL or CP then we can expand some more\r\n                        if(f.isComposite()) {\r\n                            if(f.power > 1) {\r\n                                f = expand(_.pow(f, _.parse(f.power)), opt);\r\n                            }\r\n                            // Put back the multiplier\r\n                            retval = _.multiply(_.parse(m), f).distributeMultiplier();\r\n                            ;\r\n                        }\r\n                        else {\r\n                            // Everything is expanded at this point so if it's still a CB\r\n                            // then just return the symbol\r\n                            retval = f;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Just multiply back in the expanded form of each\r\n                        retval = f;\r\n                        symbols.forEach(function (s) {\r\n                            retval = _.multiply(retval, s);\r\n                        });\r\n                        // Put back the multiplier\r\n                        retval = _.multiply(retval, _.parse(m)).distributeMultiplier();\r\n                    }\r\n\r\n                    // TODO: This exists solely as a quick fix for sqrt(11)*sqrt(33) not simplifying.\r\n                    if(retval.group === CB) {\r\n                        retval = _.parse(retval);\r\n                    }\r\n                }\r\n                else {\r\n                    // Otherwise just return the expression\r\n                    retval = symbol;\r\n                }\r\n                // Final cleanup and return\r\n                return retval;\r\n            }\r\n            catch(e) {\r\n                return original;\r\n            }\r\n\r\n            return original;\r\n        }\r\n\r\n        /**\r\n         * Returns an identity matrix of nxn\r\n         * @param {Number} n\r\n         * @returns {Matrix}\r\n         */\r\n        function imatrix(n) {\r\n            return Matrix.identity(n);\r\n        }\r\n\r\n        /**\r\n         * Retrieves and item from a vector\r\n         * @param {Vector} vector\r\n         * @param {Number} index\r\n         * @returns {Vector|Symbol}\r\n         */\r\n        function vecget(vector, index) {\r\n            if(index.isConstant() && isInt(index))\r\n                return vector.elements[index];\r\n            return _.symfunction('vecget', arguments);\r\n        }\r\n\r\n        /**\r\n         * Removes duplicates from a vector\r\n         * @param {Vector} vector\r\n         * @param {Number} tolerance\r\n         * @returns {Vector}\r\n         */\r\n        function vectrim(vector, tolerance) {\r\n            tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\r\n\r\n            vector = vector.clone();\r\n\r\n            tolerance = Number(tolerance);\r\n            //place algebraic solutions first\r\n            vector.elements.sort(function (a, b) {\r\n                return b.group - a.group;\r\n            });\r\n            //depending on the start point we may have duplicates so we need to clean those up a bit.\r\n            //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\r\n            vector.elements = removeDuplicates(vector.elements, function (a, b) {\r\n                var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());\r\n                return diff <= tolerance;\r\n            });\r\n\r\n            return vector;\r\n        }\r\n\r\n        /**\r\n         * Set a value for a vector at a given index\r\n         * @param {Vector} vector\r\n         * @param {Number} index\r\n         * @param {Symbol} value\r\n         * @returns {Vector}\r\n         */\r\n        function vecset(vector, index, value) {\r\n            if(!index.isConstant)\r\n                return _.symfunction('vecset', arguments);\r\n            vector.elements[index] = value;\r\n            return vector;\r\n        }\r\n\r\n        function matget(matrix, i, j) {\r\n            if(i.isConstant() && j.isConstant())\r\n                return matrix.elements[i][j];\r\n            return _.symfunction('matget', arguments);\r\n        }\r\n\r\n        function matgetrow(matrix, i) {\r\n            if(i.isConstant())\r\n                return new Matrix(matrix.elements[i]);\r\n            return _.symfunction('matgetrow', arguments);\r\n        }\r\n\r\n        function matsetrow(matrix, i, x) {\r\n            //handle symbolics\r\n            if(!i.isConstant())\r\n                return _.symfunction('matsetrow', arguments);\r\n            if(matrix.elements[i].length !== x.elements.length)\r\n                throw new DimensionError('Matrix row must match row dimensions!');\r\n            var M = matrix.clone();\r\n            M.elements[i] = x.clone().elements;\r\n            return M;\r\n        }\r\n\r\n        function matgetcol(matrix, col_index) {\r\n            //handle symbolics\r\n            if(!col_index.isConstant())\r\n                return _.symfunction('matgetcol', arguments);\r\n            col_index = Number(col_index);\r\n            var M = Matrix.fromArray([]);\r\n            matrix.each(function (x, i, j) {\r\n                if(j === col_index) {\r\n                    M.elements.push([x.clone()]);\r\n                }\r\n            });\r\n            return M;\r\n        }\r\n\r\n        function matsetcol(matrix, j, col) {\r\n            //handle symbolics\r\n            if(!j.isConstant())\r\n                return _.symfunction('matsetcol', arguments);\r\n            j = Number(j);\r\n            if(matrix.rows() !== col.elements.length)\r\n                throw new DimensionError('Matrix columns must match number of columns!');\r\n            col.each(function (x, i) {\r\n                matrix.set(i - 1, j, x.elements[0].clone());\r\n            });\r\n            return matrix;\r\n        }\r\n\r\n\r\n        function matset(matrix, i, j, value) {\r\n            matrix.elements[i][j] = value;\r\n            return matrix;\r\n        }\r\n\r\n        //the constructor for vectors\r\n        function vector() {\r\n            return new Vector([].slice.call(arguments));\r\n        }\r\n\r\n        //the constructor for matrices\r\n        function matrix() {\r\n            return Matrix.fromArray(arguments);\r\n        }\r\n\r\n        //the constructor for sets\r\n        function set() {\r\n            return Set.fromArray(arguments);\r\n        }\r\n\r\n        function determinant(symbol) {\r\n            if(isMatrix(symbol)) {\r\n                return symbol.determinant();\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        function size(symbol) {\r\n            var retval;\r\n            if(isMatrix(symbol))\r\n                retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];\r\n            else if(isVector(symbol) || isSet(symbol))\r\n                retval = new Symbol(symbol.elements.length);\r\n            else\r\n                err('size expects a matrix or a vector');\r\n            return retval;\r\n        }\r\n\r\n        function dot(vec1, vec2) {\r\n            if(isVector(vec1) && isVector(vec2))\r\n                return vec1.dot(vec2);\r\n            err('function dot expects 2 vectors');\r\n        }\r\n\r\n        function cross(vec1, vec2) {\r\n            if(isVector(vec1) && isVector(vec2))\r\n                return vec1.cross(vec2);\r\n            err('function cross expects 2 vectors');\r\n        }\r\n\r\n        function transpose(mat) {\r\n            if(isMatrix(mat))\r\n                return mat.transpose();\r\n            err('function transpose expects a matrix');\r\n        }\r\n\r\n        function invert(mat) {\r\n            if(isMatrix(mat))\r\n                return mat.invert();\r\n            err('invert expects a matrix');\r\n        }\r\n\r\n        //basic set functions\r\n        function union(set1, set2) {\r\n            return set1.union(set2);\r\n        }\r\n\r\n        function intersection(set1, set2) {\r\n            return set1.intersection(set2);\r\n        }\r\n\r\n        function contains(set1, e) {\r\n            return set1.contains(e);\r\n        }\r\n\r\n        function difference(set1, set2) {\r\n            return set1.difference(set2);\r\n        }\r\n\r\n        function intersects(set1, set2) {\r\n            return new Symbol(Number(set1.intersects(set2)));\r\n        }\r\n\r\n        function is_subset(set1, set2) {\r\n            return new Symbol(Number(set1.is_subset(set2)));\r\n        }\r\n\r\n        function print() {\r\n            arguments2Array(arguments).map(function (x) {\r\n                console.log(x.toString());\r\n            });\r\n        }\r\n\r\n        function testSQRT(symbol) {\r\n            //wrap the symbol in sqrt. This eliminates one more check down the line.\r\n            if(!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {\r\n                var sign = symbol.power.sign();\r\n                //don't devide the power directly. Notice the use of toString. This makes it possible\r\n                //to use a bigNumber library in the future\r\n                var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear());\r\n                //place back the sign of the power\r\n                if(sign < 0)\r\n                    retval.invert();\r\n                return retval;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        //try to reduce a symbol by pulling its power\r\n        function testPow(symbol) {\r\n            if(symbol.group === P) {\r\n                var v = symbol.value;\r\n\r\n                var fct = primeFactors(v)[0];\r\n\r\n                //safety\r\n                if(!fct) {\r\n                    warn('Unable to compute prime factors. This should not happen. Please review and report.');\r\n                    return symbol;\r\n                }\r\n\r\n                var n = new Frac(Math.log(v) / Math.log(fct)),\r\n                        p = n.multiply(symbol.power);\r\n\r\n                //we don't want a more complex number than before\r\n                if(p.den > symbol.power.den)\r\n                    return symbol;\r\n\r\n                if(isInt(p))\r\n                    symbol = Symbol(Math.pow(fct, p));\r\n                else\r\n                    symbol = new Symbol(fct).setPower(p);\r\n            }\r\n\r\n            return symbol;\r\n        }\r\n\r\n        //Link the functions to the parse so they're available outside of the library.\r\n        //This is strictly for convenience and may be deprecated.\r\n        this.expand = expand;\r\n        this.round = round;\r\n        this.clean = clean;\r\n        this.sqrt = sqrt;\r\n        this.cbrt = cbrt;\r\n        this.abs = abs;\r\n        this.log = log;\r\n        this.rationalize = rationalize;\r\n        this.nthroot = nthroot;\r\n        this.arg = arg;\r\n        this.conjugate = conjugate;\r\n        this.imagpart = imagpart;\r\n        this.realpart = realpart;\r\n\r\n        //TODO:\r\n        //Utilize the function below instead of the linked function\r\n        this.getFunction = function (name) {\r\n            return functions[name][0];\r\n        };\r\n\r\n//Parser.methods ===============================================================\r\n        this.addPreprocessor = function (name, action, order, shift_cells) {\r\n            var names = preprocessors.names;\r\n            var actions = preprocessors.actions;\r\n            if((typeof action !== 'function')) //the person probably forgot to specify a name\r\n                throw new PreprocessorError('Incorrect parameters. Function expected!');\r\n            if(!order) {\r\n                names.push(name);\r\n                actions.push(action);\r\n            }\r\n            else {\r\n                if(shift_cells) {\r\n                    names.splice(order, 0, name);\r\n                    actions.splice(order, 0, action);\r\n                }\r\n                else {\r\n                    names[order] = name;\r\n                    actions[order] = action;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.getPreprocessors = function () {\r\n            var preprocessors = {};\r\n            for(var i = 0, l = preprocessors.names.length; i < l; i++) {\r\n                var name = preprocessors.names[i];\r\n                preprocessors[name] = {\r\n                    order: i,\r\n                    action: preprocessors.actions[i]\r\n                };\r\n            }\r\n            return preprocessors;\r\n        };\r\n\r\n        this.removePreprocessor = function (name, shift_cells) {\r\n            var i = preprocessors.names.indexOf(name);\r\n            if(shift_cells) {\r\n                remove(preprocessors.names, i);\r\n                remove(preprocessors.actions, i);\r\n            }\r\n            else {\r\n                preprocessors.names[i] = undefined;\r\n                preprocessors.actions[i] = undefined;\r\n            }\r\n        };\r\n\r\n        //The loader for functions which are not part of Math2\r\n        this.mapped_function = function () {\r\n            var subs = {},\r\n                    params = this.params;\r\n\r\n            for(var i = 0; i < params.length; i++) {\r\n                subs[params[i]] = String(arguments[i]);\r\n            }\r\n\r\n            return _.parse(this.body, subs);\r\n        };\r\n        /**\r\n         * Adds two symbols\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.add = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            //we're dealing with two symbols\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //forward the adding of symbols with units to the Unit module\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.add(a, b);\r\n                }\r\n                //handle Infinity\r\n                //https://www.encyclopediaofmath.org/index.php/Infinity\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    var aneg = a.multiplier.lessThan(0),\r\n                            bneg = b.multiplier.lessThan(0);\r\n\r\n                    if(a.isInfinity && b.isInfinity && aneg !== bneg) {\r\n                        throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');\r\n                    }\r\n\r\n                    var inf = Symbol.infinity();\r\n                    if(bneg)\r\n                        inf.negate();\r\n                    return inf;\r\n                }\r\n\r\n                if(a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {\r\n                    a.distributeMultiplier();\r\n                    b.distributeMultiplier();\r\n                    // Fix for issue #606\r\n                    if(b.length > a.length && a.group === b.group) {\r\n                        [a, b] = [b, a];\r\n                    }\r\n                }\r\n                \r\n                //no need to waste time on zeroes\r\n                if(a.multiplier.equals(0))\r\n                    return b;\r\n                if(b.multiplier.equals(0))\r\n                    return a;\r\n\r\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\r\n                    var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));\r\n                    return result;\r\n                }\r\n\r\n                var g1 = a.group,\r\n                        g2 = b.group,\r\n                        ap = a.power.toString(),\r\n                        bp = b.power.toString();\r\n\r\n                //always keep the greater group on the left.\r\n                if(g1 < g2 || (g1 === g2 && ap > bp && bp > 0)) {\r\n                    return this.add(b, a);\r\n                }\r\n\r\n                /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy\r\n                 * because it doesn't know which one to prioritize. */\r\n                //correction to PL dilemma\r\n                if(g1 === CB && g2 === PL && a.value === b.value) {\r\n                    //swap\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t;\r\n                    g1 = a.group;\r\n                    g2 = b.group;\r\n                    ap = a.power.toString();\r\n                    bp = b.power.toString();\r\n                }\r\n\r\n                var powEQ = ap === bp,\r\n                        v1 = a.value,\r\n                        v2 = b.value,\r\n                        aIsComposite = a.isComposite(),\r\n                        bIsComposite = b.isComposite(),\r\n                        h1, h2, result;\r\n\r\n                if(aIsComposite)\r\n                    h1 = text(a, 'hash');\r\n                if(bIsComposite)\r\n                    h2 = text(b, 'hash');\r\n\r\n                if(g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {\r\n                    return this.add(b, a);\r\n                }\r\n\r\n                //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x\r\n                if(g1 === PL && g2 === PL) {\r\n                    v1 = h1;\r\n                    v2 = h2;\r\n                }\r\n\r\n                var PN = g1 === P && g2 === N,\r\n                        PNEQ = a.value === b.multiplier.toString(),\r\n                        valEQ = (v1 === v2 || h1 === h2 && h1 !== undefined || (PN && PNEQ));\r\n\r\n                //equal values, equal powers\r\n                if(valEQ && powEQ && g1 === g2) {\r\n                    //make sure to convert N to something P can work with\r\n                    if(PN)\r\n                        b = b.convert(P);//CL\r\n\r\n                    //handle PL\r\n                    if(g1 === PL && (g2 === S || g2 === P)) {\r\n                        a.distributeMultiplier();\r\n                        result = a.attach(b);\r\n                    }\r\n                    else {\r\n                        result = a;//CL\r\n                        if(a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {\r\n                            for(var s in b.symbols) {\r\n                                var x = b.symbols[s];\r\n                                result.attach(x);\r\n                            }\r\n                        }\r\n                        else\r\n                            result.multiplier = result.multiplier.add(b.multiplier);\r\n                    }\r\n                }\r\n                //equal values uneven powers\r\n                else if(valEQ && g1 !== PL) {\r\n                    //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)\r\n                    if(g1 === CP && g2 === PL) {\r\n                        b.insert(a, 'add');\r\n                        result = b;\r\n                    }\r\n                    else {\r\n                        result = Symbol.shell(PL).attach([a, b]);\r\n                        //update the hash\r\n                        result.value = g1 === PL ? h1 : v1;\r\n                    }\r\n                }\r\n                else if(aIsComposite && a.isLinear()) {\r\n                    var canIterate = g1 === g2,\r\n                            bothPL = g1 === PL && g2 === PL;\r\n\r\n                    //we can only iterate group PL if they values match\r\n                    if(bothPL)\r\n                        canIterate = a.value === b.value;\r\n                    //distribute the multiplier over the entire symbol\r\n                    a.distributeMultiplier();\r\n\r\n                    if(b.isComposite() && b.isLinear() && canIterate) {\r\n                        b.distributeMultiplier();\r\n                        //CL\r\n                        for(var s in b.symbols) {\r\n                            var x = b.symbols[s];\r\n                            a.attach(x);\r\n                        }\r\n                        result = a;\r\n                    }\r\n                    //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2\r\n                    else if(bothPL && a.value !== h2 || g1 === PL && !valEQ) {\r\n                        result = Symbol.shell(CP).attach([a, b]);\r\n                        result.updateHash();\r\n\r\n                    }\r\n                    else {\r\n                        result = a.attach(b);\r\n                    }\r\n                }\r\n                else {\r\n                    if(g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {\r\n                        var m = b.multiplier.clone();\r\n                        b = sqrt(b.toUnitMultiplier().toLinear());\r\n                        b.multiplier = m;\r\n                    }\r\n                    //fix for issue #3 and #159\r\n                    if(a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {\r\n                        result = _.add(expand(a), expand(b));\r\n                    }\r\n                    else {\r\n                        result = Symbol.shell(CP).attach([a, b]);\r\n                        result.updateHash();\r\n                    }\r\n                }\r\n\r\n                if(result.multiplier.equals(0))\r\n                    result = new Symbol(0);\r\n\r\n                //make sure to remove unnecessary wraps\r\n                if(result.length === 1) {\r\n                    var m = result.multiplier;\r\n                    result = firstObject(result.symbols);\r\n                    result.multiplier = result.multiplier.multiply(m);\r\n                }\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                //keep symbols to the right\r\n                if(bIsSymbol && !aIsSymbol) {\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t; //swap\r\n                    t = bIsSymbol;\r\n                    bIsSymbol = aIsSymbol;\r\n                    aIsSymbol = t;\r\n                }\r\n\r\n                var bIsMatrix = isMatrix(b);\r\n\r\n                if(aIsSymbol && bIsMatrix) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (e, i, j) {\r\n                        M.set(i, j, _.add(a.clone(), e));\r\n                    });\r\n\r\n                    b = M\r\n                }\r\n                else {\r\n                    if(isMatrix(a) && bIsMatrix) {\r\n                        b = a.add(b);\r\n                    }\r\n                    else if(aIsSymbol && isVector(b)) {\r\n                        b.each(function (x, i) {\r\n                            i--;\r\n                            b.elements[i] = _.add(a.clone(), b.elements[i]);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if(isVector(a) && isVector(b)) {\r\n                            b.each(function (x, i) {\r\n                                i--;\r\n                                b.elements[i] = _.add(a.elements[i], b.elements[i]);\r\n                            });\r\n                        }\r\n                        else if(isVector(a) && isMatrix(b)) {\r\n                            //try to convert a to a matrix\r\n                            return _.add(b, a);\r\n                        }\r\n                        else if(isMatrix(a) && isVector(b)) {\r\n                            if(b.elements.length === a.rows()) {\r\n                                var M = new Matrix(), l = a.cols();\r\n                                b.each(function (e, i) {\r\n                                    var row = [];\r\n                                    for(var j = 0; j < l; j++) {\r\n                                        row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));\r\n                                    }\r\n                                    M.elements.push(row);\r\n                                });\r\n                                return M;\r\n                            }\r\n                            else\r\n                                err('Dimensions must match!');\r\n                        }\r\n                    }\r\n                }\r\n                return b;\r\n            }\r\n\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the - operator. Not the prefix operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.subtract = function (a, b) {\r\n            var aIsSymbol = aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b), t;\r\n\r\n            if(aIsSymbol && bIsSymbol) {\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.subtract(a, b);\r\n                }\r\n                return this.add(a, b.negate());\r\n            }\r\n            else {\r\n                if(bIsSymbol && isVector(a)) {\r\n                    b = a.map(function (x) {\r\n                        return _.subtract(x, b.clone());\r\n                    });\r\n                }\r\n                else if(aIsSymbol && isVector(b)) {\r\n                    b = b.map(function (x) {\r\n                        return _.subtract(a.clone(), x);\r\n                    });\r\n                }\r\n                else if(isVector(a) && isVector(b)) {\r\n                    if(a.dimensions() === b.dimensions())\r\n                        b = a.subtract(b);\r\n                    else\r\n                        _.error('Unable to subtract vectors. Dimensions do not match.');\r\n                }\r\n                else if(isMatrix(a) && isVector(b)) {\r\n                    if(b.elements.length === a.rows()) {\r\n                        var M = new Matrix(), l = a.cols();\r\n                        b.each(function (e, i) {\r\n                            var row = [];\r\n                            for(var j = 0; j < l; j++) {\r\n                                row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));\r\n                            }\r\n                            M.elements.push(row);\r\n                        });\r\n                        return M;\r\n                    }\r\n                    else\r\n                        err('Dimensions must match!');\r\n                }\r\n                else if(isVector(a) && isMatrix(b)) {\r\n                    var M = b.clone().negate();\r\n                    return _.add(M, a);\r\n                }\r\n                else if(isMatrix(a) && isMatrix(b)) {\r\n                    b = a.subtract(b);\r\n                }\r\n                else if(isMatrix(a) && bIsSymbol) {\r\n                    var M = new Matrix();\r\n                    a.each(function (x, i, j) {\r\n                        M.set(i, j, _.subtract(x, b.clone()));\r\n                    });\r\n                    b = M;\r\n                }\r\n                else if(aIsSymbol && isMatrix(b)) {\r\n                    var M = new Matrix();\r\n                    b.each(function (x, i, j) {\r\n                        M.set(i, j, _.subtract(a.clone(), x));\r\n                    });\r\n                    b = M;\r\n                }\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the * operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.multiply = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            //we're dealing with function assignment here\r\n            if(aIsSymbol && b instanceof Collection) {\r\n                b.elements.push(a);\r\n                return b;\r\n            }\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //if it has a unit then add it and return it right away.\r\n                if(b.isUnit) {\r\n                    var result = a.clone();\r\n                    a.unit = b;\r\n                    return result;\r\n                }\r\n                \r\n                //if it has units then just forward that problem to the unit module\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.multiply(a, b);\r\n                }\r\n\r\n                //handle Infinty\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    if(a.equals(0) || b.equals(0))\r\n                        throw new UndefinedError(a + '*' + b + ' is undefined!');\r\n                    //x/infinity\r\n                    if(b.power.lessThan(0)) {\r\n                        if(!a.isInfinity) {\r\n                            return new Symbol(0);\r\n                        }\r\n                        else {\r\n                            throw new UndefinedError('Infinity/Infinity is not defined!');\r\n                        }\r\n                    }\r\n\r\n                    var sign = a.multiplier.multiply(b.multiplier).sign(),\r\n                            inf = Symbol.infinity();\r\n                    if(a.isConstant() || b.isConstant() || (a.isInfinity && b.isInfinity)) {\r\n                        if(sign < 0)\r\n                            inf.negate();\r\n\r\n                        return inf;\r\n                    }\r\n                }\r\n                //the quickies\r\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\r\n                    var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();\r\n                    var retval = new Symbol(t);\r\n                    return retval;\r\n                }\r\n\r\n                //don't waste time\r\n                if(a.isOne()) {\r\n                    return b.clone();\r\n                }\r\n                if(b.isOne()) {\r\n                    return a.clone();\r\n                }\r\n\r\n                if(a.multiplier.equals(0) || b.multiplier.equals(0))\r\n                    return new Symbol(0);\r\n\r\n                if(b.group > a.group && !(b.group === CP))\r\n                    return this.multiply(b, a);\r\n                //correction for PL/CB dilemma\r\n                if(a.group === CB && b.group === PL && a.value === b.value) {\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t;//swap\r\n                }\r\n\r\n                var g1 = a.group,\r\n                        g2 = b.group,\r\n                        bnum = b.multiplier.num,\r\n                        bden = b.multiplier.den;\r\n\r\n                if(g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\r\n                    //unwrap sqrt\r\n                    var a_pow = a.power;\r\n                    var a_multiplier = _.parse(a.multiplier);\r\n                    a = _.multiply(a_multiplier, a.args[0].clone());\r\n                    a.setPower(new Frac(0.5).multiply(a_pow));\r\n                    g1 = a.group;\r\n                }\r\n                //simplify n/sqrt(n). Being very specific\r\n                else if(g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\r\n                    a = _.symfunction(SQRT, [b.clone()]);\r\n                    b = new Symbol(1);\r\n                }\r\n                ;\r\n\r\n                var v1 = a.value,\r\n                        v2 = b.value,\r\n                        sign = new Frac(a.sign()),\r\n                        //since P is just a morphed version of N we need to see if they relate\r\n                        ONN = (g1 === P && g2 === N && b.multiplier.equals(a.value)),\r\n                        //don't multiply the multiplier of b since that's equal to the value of a\r\n                        m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\r\n                        result = a.clone().toUnitMultiplier();\r\n                b = b.clone().toUnitMultiplier(true);\r\n\r\n                //further simplification of sqrt\r\n                if(g1 === FN && g2 === FN) {\r\n                    var u = a.args[0].clone();\r\n                    var v = b.args[0].clone();\r\n                    if(a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {\r\n\r\n                        var q = _.divide(u, v).invert();\r\n                        if(q.gt(1) && isInt(q)) {\r\n                            //b contains a factor a which can be moved to a\r\n                            result = _.multiply(a.args[0].clone(), sqrt(q.clone()));\r\n                            b = new Symbol(1);\r\n                        }\r\n                    }\r\n                    //simplify factorial but only if\r\n                    //1 - It's division so b will have a negative power\r\n                    //2 - We're not dealing with factorials of numbers\r\n                    else if(a.fname === FACTORIAL && b.fname === FACTORIAL && !u.isConstant() && !v.isConstant() && b.power < 0) {\r\n                        //assume that n = positive\r\n                        var d = _.subtract(u.clone(), v.clone());\r\n\r\n                        //if it's not numeric then we don't know if we can simplify so just return\r\n                        if(d.isConstant()) {\r\n\r\n                            //there will never be a case where d == 0 since this will already have\r\n                            //been handled at the beginning of this function\r\n                            t = new Symbol(1);\r\n                            if(d < 0) {\r\n                                //If d is negative then the numerator is larger so expand that\r\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\r\n                                    var s = _.add(u.clone(), new Symbol(i));\r\n                                    t = _.multiply(t, s);\r\n                                }\r\n\r\n                                result = _.multiply(_.pow(u, new Symbol(a.power)), _.pow(t, new Symbol(b.power)));\r\n\r\n                                b = new Symbol(1);\r\n                            }\r\n                            else {\r\n                                //Otherwise the denominator is larger so expand that\r\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\r\n                                    var s = _.add(v.clone(), new Symbol(i));\r\n                                    t = _.multiply(t, s);\r\n                                }\r\n\r\n                                result = _.multiply(_.pow(t, new Symbol(a.power)), _.pow(v, new Symbol(b.power)));\r\n\r\n                                b = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                //if both are PL then their hashes have to match\r\n                if(v1 === v2 && g1 === PL && g1 === g2) {\r\n                    v1 = a.text('hash');\r\n                    v2 = b.text('hash');\r\n                }\r\n\r\n                //same issue with (x^2+1)^x*(x^2+1)\r\n                //EX needs an exception when multiplying because it needs to recognize\r\n                //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\r\n                if(g2 === EX && b.previousGroup === PL && g1 === PL) {\r\n                    v1 = text(a, 'hash', EX);\r\n                }\r\n\r\n                if((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {\r\n                    var p1 = a.power,\r\n                            p2 = b.power,\r\n                            isSymbolP1 = isSymbol(p1),\r\n                            isSymbolP2 = isSymbol(p2),\r\n                            toEX = (isSymbolP1 || isSymbolP2);\r\n                    //TODO: this needs cleaning up\r\n                    if(g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {\r\n                        result = new Symbol(0);\r\n                        a.each(function (x) {\r\n                            result = _.add(result, _.multiply(x, b.clone()));\r\n                        }, true);\r\n                    }\r\n                    else {\r\n                        //add the powers\r\n                        result.power = toEX ? _.add(\r\n                                !(isSymbol(p1)) ? new Symbol(p1) : p1,\r\n                                !(isSymbol(p2)) ? new Symbol(p2) : p2\r\n                                ) : (g1 === N /*don't add powers for N*/ ? p1 : p1.add(p2));\r\n\r\n                        //eliminate zero power values and convert them to numbers\r\n                        if(result.power.equals(0))\r\n                            result = result.convert(N);\r\n\r\n                        //properly convert to EX\r\n                        if(toEX)\r\n                            result.convert(EX);\r\n\r\n                        //take care of imaginaries\r\n                        if(a.imaginary && b.imaginary) {\r\n                            var isEven = even(result.power % 2);\r\n                            if(isEven) {\r\n                                result = new Symbol(1);\r\n                                m.negate();\r\n                            }\r\n                        }\r\n\r\n                        //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\r\n                        if(result.group !== EX && result.previousGroup)\r\n                            result.previousGroup = undefined;\r\n                        //the sign for b is floating around. Remember we are assuming that the odd variable will carry\r\n                        //the sign but this isn't true if they're equals symbols\r\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\r\n                    }\r\n                }\r\n                else if(g1 === CB && a.isLinear()) {\r\n                    if(g2 === CB)\r\n                        b.distributeExponent();\r\n                    if(g2 === CB && b.isLinear()) {\r\n                        for(var s in b.symbols) {\r\n                            var x = b.symbols[s];\r\n                            result = result.combine(x);\r\n                        }\r\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\r\n                    }\r\n                    else {\r\n                        result.combine(b);\r\n                    }\r\n                }\r\n                else {\r\n                    //the multiplier was already handled so nothing left to do\r\n                    if(g1 !== N) {\r\n                        if(g1 === CB) {\r\n                            result.distributeExponent();\r\n                            result.combine(b);\r\n                        }\r\n                        else if(!b.isOne()) {\r\n                            var bm = b.multiplier.clone();\r\n                            b.toUnitMultiplier();\r\n                            result = Symbol.shell(CB).combine([result, b]);\r\n                            //transfer the multiplier to the outside\r\n                            result.multiplier = result.multiplier.multiply(bm);\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = b.clone().toUnitMultiplier();\r\n                    }\r\n                }\r\n\r\n                if(result.group === P) {\r\n                    var logV = Math.log(result.value),\r\n                            n1 = Math.log(bnum) / logV,\r\n                            n2 = Math.log(bden) / logV,\r\n                            ndiv = m.num / bnum,\r\n                            ddiv = m.den / bden;\r\n                    //we don't want to divide by zero no do we? Strange things happen.\r\n                    if(n1 !== 0 && isInt(n1) && isInt(ndiv)) {\r\n                        result.power = result.power.add(new Frac(n1));\r\n                        m.num /= bnum; //BigInt? Keep that in mind for the future.\r\n                    }\r\n                    if(n2 !== 0 && isInt(n2) && isInt(ddiv)) {\r\n                        result.power = result.power.subtract(new Frac(n2));\r\n                        m.den /= bden; //BigInt? Keep that in mind for the future.\r\n                    }\r\n                }\r\n\r\n                //unpack CB if length is only one\r\n                if(result.length === 1) {\r\n                    var t = result.multiplier;\r\n                    //transfer the multiplier\r\n                    result = firstObject(result.symbols);\r\n                    result.multiplier = result.multiplier.multiply(t);\r\n                }\r\n\r\n                //reduce square root\r\n                var ps = result.power.toString();\r\n                if(even(ps) && result.fname === SQRT) {\r\n                    //grab the sign of the symbol\r\n                    sign = sign * result.sign();\r\n                    var p = result.power;\r\n                    result = result.args[0];\r\n                    result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));\r\n                    //flip it back to the correct sign\r\n                    if(sign < 0)\r\n                        result.negate()\r\n                }\r\n                else {\r\n                    result.multiplier = result.multiplier.multiply(m).multiply(sign);\r\n                    if(result.group === CP && result.isImaginary())\r\n                        result.distributeMultiplier();\r\n                }\r\n\r\n                //back convert group P to a simpler group N if possible\r\n                if(result.group === P && isInt(result.power.toDecimal()))\r\n                    result = result.convert(N);\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                //****** Matrices & Vector *****//\r\n                if(bIsSymbol && !aIsSymbol) { //keep symbols to the right\r\n                    t = a;\r\n                    a = b;\r\n                    b = t; //swap\r\n                    t = bIsSymbol;\r\n                    bIsSymbol = aIsSymbol;\r\n                    aIsSymbol = t;\r\n                }\r\n\r\n                var isMatrixB = isMatrix(b), isMatrixA = isMatrix(a);\r\n                if(aIsSymbol && isMatrixB) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (e, i, j) {\r\n                        M.set(i, j, _.multiply(a.clone(), e));\r\n                    });\r\n\r\n                    b = M;\r\n                }\r\n                else {\r\n                    if(isMatrixA && isMatrixB) {\r\n                        b = a.multiply(b);\r\n                    }\r\n                    else if(aIsSymbol && isVector(b)) {\r\n                        b.each(function (x, i) {\r\n                            i--;\r\n                            b.elements[i] = _.multiply(a.clone(), b.elements[i]);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if(isVector(a) && isVector(b)) {\r\n                            b.each(function (x, i) {\r\n                                i--;\r\n                                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);\r\n                            });\r\n                        }\r\n                        else if(isVector(a) && isMatrix(b)) {\r\n                            //try to convert a to a matrix\r\n                            return this.multiply(b, a);\r\n                        }\r\n                        else if(isMatrix(a) && isVector(b)) {\r\n                            if(b.elements.length === a.rows()) {\r\n                                var M = new Matrix(), l = a.cols();\r\n                                b.each(function (e, i) {\r\n                                    var row = [];\r\n                                    for(var j = 0; j < l; j++) {\r\n                                        row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));\r\n                                    }\r\n                                    M.elements.push(row);\r\n                                });\r\n                                return M;\r\n                            }\r\n                            else\r\n                                err('Dimensions must match!');\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the / operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.divide = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //forward to Unit division\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.divide(a, b);\r\n                }\r\n                var result;\r\n                if(b.equals(0))\r\n                    throw new DivisionByZero('Division by zero not allowed!');\r\n\r\n                if(a.isConstant() && b.isConstant()) {\r\n                    result = a.clone();\r\n                    result.multiplier = result.multiplier.divide(b.multiplier);\r\n                }\r\n                else {\r\n                    b.invert();\r\n                    result = _.multiply(a, b);\r\n                }\r\n                return result;\r\n            }\r\n            else {\r\n                //******* Vectors & Matrices *********//\r\n                var isVectorA = isVector(a), isVectorB = isVector(b);\r\n                if(aIsSymbol && isVectorB) {\r\n                    b = b.map(function (x) {\r\n                        return _.divide(a.clone(), x);\r\n                    });\r\n                }\r\n                else if(isVectorA && bIsSymbol) {\r\n                    b = a.map(function (x) {\r\n                        return _.divide(x, b.clone());\r\n                    });\r\n                }\r\n                else if(isVectorA && isVectorB) {\r\n                    if(a.dimensions() === b.dimensions()) {\r\n                        b = b.map(function (x, i) {\r\n                            return _.divide(a.elements[--i], x);\r\n                        });\r\n                    }\r\n                    else\r\n                        _.error('Cannot divide vectors. Dimensions do not match!');\r\n                }\r\n                else {\r\n                    var isMatrixA = isMatrix(a), isMatrixB = isMatrix(b);\r\n                    if(isMatrixA && bIsSymbol) {\r\n                        var M = new Matrix();\r\n                        a.eachElement(function (x, i, j) {\r\n                            M.set(i, j, _.divide(x, b.clone()));\r\n                        });\r\n                        b = M;\r\n                    }\r\n                    else if(aIsSymbol && isMatrixB) {\r\n                        var M = new Matrix();\r\n                        b.eachElement(function (x, i, j) {\r\n                            M.set(i, j, _.divide(a.clone(), x));\r\n                        });\r\n                        b = M;\r\n                    }\r\n                    else if(isMatrixA && isMatrixB) {\r\n                        var M = new Matrix();\r\n                        if(a.rows() === b.rows() && a.cols() === b.cols()) {\r\n                            a.eachElement(function (x, i, j) {\r\n                                M.set(i, j, _.divide(x, b.elements[i][j]));\r\n                            });\r\n                            b = M;\r\n                        }\r\n                        else {\r\n                            _.error('Dimensions do not match!');\r\n                        }\r\n                    }\r\n                    else if(isMatrixA && isVectorB) {\r\n                        if(a.cols() === b.dimensions()) {\r\n                            var M = new Matrix();\r\n                            a.eachElement(function (x, i, j) {\r\n                                M.set(i, j, _.divide(x, b.elements[i].clone()));\r\n                            });\r\n                            b = M;\r\n                        }\r\n                        else {\r\n                            _.error('Unable to divide matrix by vector.');\r\n                        }\r\n                    }\r\n                }\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the ^ operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.pow = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //it has units then it's the Unit module's problem\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.pow(a, b);\r\n                }\r\n                \r\n                // Handle abs\r\n                if(a.group === FN && a.fname === ABS && even(b)) {\r\n                    var m = a.multiplier.clone();\r\n                    var raised = _.pow(a.args[0], b);\r\n                    raised.multiplier = m;\r\n                    return raised;\r\n                }\r\n                \r\n                // Handle infinity\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    if(a.isInfinity && b.isInfinity)\r\n                        throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');\r\n\r\n                    if(a.isConstant() && b.isInfinity) {\r\n                        if(a.equals(0)) {\r\n                            if(b.lessThan(0))\r\n                                throw new UndefinedError('0^Infinity is undefined!');\r\n                            return new Symbol(0);\r\n                        }\r\n                        if(a.equals(1))\r\n                            throw new UndefinedError('1^' + b.toString() + ' is undefined!');\r\n                        //a^-oo\r\n                        if(b.lessThan(0))\r\n                            return new Symbol(0);\r\n                        //a^oo\r\n                        if(!a.lessThan(0))\r\n                            return Symbol.infinity();\r\n                    }\r\n\r\n                    if(a.isInfinity && b.isConstant()) {\r\n                        if(b.equals(0))\r\n                            throw new UndefinedError(a + '^0 is undefined!');\r\n                        if(b.lessThan(0))\r\n                            return new Symbol(0);\r\n                        return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));\r\n                    }\r\n                }\r\n\r\n                var aIsZero = a.equals(0);\r\n                var bIsZero = b.equals(0);\r\n                if(aIsZero && bIsZero)\r\n                    throw new UndefinedError('0^0 is undefined!');\r\n\r\n                // Return 0 right away if possible\r\n                if(aIsZero && b.isConstant() && b.multiplier.greaterThan(0))\r\n                    return new Symbol(0);\r\n\r\n                if(bIsZero)\r\n                    return new Symbol(1);\r\n\r\n                var bIsConstant = b.isConstant(),\r\n                        aIsConstant = a.isConstant(),\r\n                        bIsInt = b.isInteger(),\r\n                        m = a.multiplier,\r\n                        result = a.clone();\r\n\r\n                // 0^0, 1/0, etc. Complain.\r\n                if(aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0))\r\n                    throw new UndefinedError('Division by zero is not allowed!');\r\n\r\n                // Compute imaginary numbers right away\r\n                if(Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {\r\n                    var k, re, im;\r\n                    k = Math.PI * b;\r\n                    re = new Symbol(Math.cos(k));\r\n                    im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));\r\n                    return _.add(re, im);\r\n                }\r\n\r\n                // Imaginary number under negative nthroot or to the n\r\n                if(Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {\r\n                    var re, im, r, theta, nre, nim, phi;\r\n                    re = a.realpart();\r\n                    im = a.imagpart();\r\n                    if(re.isConstant('all') && im.isConstant('all')) {\r\n                        phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal()).times(b.toString())) : Math.atan2(im, re) * b;\r\n                        theta = new Symbol(phi);\r\n                        r = _.pow(Symbol.hyp(re, im), b);\r\n                        nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));\r\n                        nim = _.multiply(r, _.trig.sin(theta));\r\n                        return _.add(nre, _.multiply(Symbol.imaginary(), nim));\r\n                    }\r\n                }\r\n\r\n                // Take care of the symbolic part\r\n                result.toUnitMultiplier();\r\n                //simpifly sqrt\r\n                if(result.group === FN && result.fname === SQRT && !bIsConstant) {\r\n                    var s = result.args[0];\r\n                    s.multiplyPower(new Symbol(0.5));\r\n                    s.multiplier.multiply(result.multiplier);\r\n                    s.multiplyPower(b);\r\n                    result = s;\r\n                }\r\n                else {\r\n                    var sign = m.sign();\r\n                    //handle cases such as (-a^3)^(1/4)\r\n                    if(evenFraction(b) && sign < 0) {\r\n                        // Swaperoo\r\n                        // First put the sign back on the symbol\r\n                        result.negate();\r\n                        // Wrap it in brackets\r\n                        result = _.symfunction(PARENTHESIS, [result]);\r\n                        // Move the sign back the exterior and let nerdamer handle the rest\r\n                        result.negate();\r\n                    }\r\n\r\n                    result.multiplyPower(b);\r\n                }\r\n\r\n                if(aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {\r\n                    var c;\r\n                    //remove the sign\r\n                    if(sign < 0) {\r\n                        a.negate();\r\n                        if(b.multiplier.den.equals(2))\r\n                            //we know that the numerator has to be odd and therefore it's i\r\n                            c = new Symbol(Settings.IMAGINARY);\r\n                        else if(isInt(b.multiplier)) {\r\n                            if(even(b.multiplier))\r\n                                c = new Symbol(1);\r\n                            else\r\n                                c = new Symbol(-1);\r\n                        }\r\n                        else if(!even(b.multiplier.den)) {\r\n                            c = new Symbol(Math.pow(sign, b.multiplier.num));\r\n                        }\r\n                        else {\r\n                            c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\r\n                        }\r\n                    }\r\n\r\n                    result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));\r\n\r\n                    //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\r\n                    //put the back sign\r\n                    if(c)\r\n                        result = _.multiply(result, c);\r\n                }\r\n                else if(bIsInt && !m.equals(1)) {\r\n                    var abs_b = b.abs();\r\n                    // Provide fall back to JS until big number implementation is improved\r\n                    if(abs_b.gt(Settings.MAX_EXP)) {\r\n                        if(b.sign() < 0)\r\n                            return new Symbol(0);\r\n                        return Symbol.infinity();\r\n                    }\r\n                    else {\r\n                        var p = b.multiplier.toDecimal();\r\n                        var sgn = Math.sign(p);\r\n                        p = Math.abs(p);\r\n                        var multiplier = new Frac(1);\r\n                        multiplier.num = m.num.pow(p);\r\n                        multiplier.den = m.den.pow(p);\r\n                        if(sgn < 0)\r\n                            multiplier.invert();\r\n                        //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N\r\n                        result.multiplier = result.multiplier.multiply(multiplier);\r\n                    }\r\n                }\r\n                else {\r\n                    var sign = a.sign();\r\n                    if(b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\r\n                        //we know the sign is negative so if the denominator for b == 2 then it's i\r\n                        if(b.multiplier.den.equals(2)) {\r\n                            var i = new Symbol(Settings.IMAGINARY);\r\n                            a.negate();//remove the sign\r\n                            //if the power is negative then i is negative\r\n                            if(b.lessThan(0)) {\r\n                                i.negate();\r\n                                b.negate();//remove the sign from the power\r\n                            }\r\n                            //pull the power normally and put back the imaginary\r\n                            result = _.multiply(_.pow(a, b), i);\r\n                        }\r\n                        else {\r\n                            var aa = a.clone();\r\n                            aa.multiplier.negate();\r\n                            result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\r\n                            var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());\r\n                            var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());\r\n                            var r = _.divide(_a, _b);\r\n                            result = _.multiply(result, r);\r\n                        }\r\n                    }\r\n                    else if(Settings.PARSE2NUMBER && b.isImaginary()) {\r\n                        //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))\r\n\r\n                        var re = b.realpart();\r\n                        var im = b.imagpart();\r\n                        /*\r\n                         if(b.group === CP && false) {\r\n                         var ex = _.pow(a.clone(), re);\r\n                         var xi = _.multiply(_.multiply(ex.clone(), trig.sin(im.clone())), Symbol.imaginary());\r\n                         var xa = _.multiply(trig.cos(im), ex);\r\n                         result = _.add(xi, xa);\r\n                         }\r\n                         else {\r\n                         */\r\n                        var aa = a.clone().toLinear();\r\n                        var a1 = _.pow(aa.clone(), re);\r\n                        var log_a = log(aa.clone());\r\n                        var b1 = trig.cos(_.multiply(im.clone(), log_a));\r\n                        var c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());\r\n                        result = _.multiply(a1, _.add(b1, c1));\r\n                        result = _.expand(_.parse(result));\r\n                        /*\r\n                         }   \r\n                         */\r\n                    }\r\n                    else {\r\n                        //b is a symbol\r\n                        var neg_num = a.group === N && sign < 0,\r\n                            num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\r\n                            den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());\r\n\r\n                        //eliminate imaginary if possible\r\n                        if(a.imaginary) {\r\n                            if(bIsInt) {\r\n                                var s, p, n;\r\n                                s = Math.sign(b);\r\n                                p = abs(b);\r\n                                n = p % 4;\r\n                                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);\r\n                                if(n === 0 || s < 0 && (n === 1) || s > 0 && (n === 3)) {\r\n                                    result.negate();\r\n                                }\r\n                            }\r\n                            else {\r\n                                //assume i = sqrt(-1) -> (-1)^(1/2)\r\n                                var nr = b.multiplier.multiply(Frac.quick(1, 2)),\r\n                                        //the denominator denotes the power so raise to it. It will turn positive it round\r\n                                        tn = Math.pow(-1, nr.num);\r\n                                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);\r\n                            }\r\n                        }\r\n                        //ensure that the sign is carried by the symbol and not the multiplier\r\n                        //this enables us to check down the line if the multiplier can indeed be transferred\r\n                        if(sign < 0 && !neg_num)\r\n                            result.negate();\r\n\r\n                        //retain the absolute value\r\n                        if(bIsConstant && a.group !== EX) {\r\n                            var evenr = even(b.multiplier.den),\r\n                                    evenp = even(a.power),\r\n                                    n = result.power.toDecimal(),\r\n                                    evennp = even(n);\r\n                            if(evenr && evenp && !evennp) {\r\n                                if(n === 1)\r\n                                    result = _.symfunction(ABS, [result]);\r\n                                else if(!isInt(n)) {\r\n                                    var p = result.power;\r\n                                    result = _.symfunction(ABS, [result.toLinear()]).setPower(p);\r\n                                }\r\n                                else {\r\n                                    result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]),\r\n                                            result.clone().setPower(new Frac(n - 1)));\r\n                                }\r\n                                //quick workaround. Revisit\r\n                                if(Settings.POSITIVE_MULTIPLIERS && result.fname === ABS)\r\n                                    result = result.args[0];\r\n                            }\r\n                        }\r\n                        //multiply out sqrt\r\n                        if(b.equals(2) && result.group === CB) {\r\n                            var _result = new Symbol(1);\r\n                            result.each(function (sym) {\r\n                                _result = _.multiply(_result, _.pow(sym, b));\r\n                            });\r\n                            result = _result;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                result = testSQRT(result);\r\n\r\n                // Don't multiply until we've tested the remaining symbol\r\n                if(num && den) {\r\n                    result = _.multiply(result, testPow(_.multiply(num, den)));\r\n                }\r\n\r\n                // Reduce square root\r\n                if(result.fname === SQRT) {\r\n                    var isEX = result.group === EX;\r\n                    var t = isEX ? result.power.multiplier.toString() : result.power.toString();\r\n                    if(even(t)) {\r\n                        var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),\r\n                                m = result.multiplier;\r\n                        result = _.pow(result.args[0], pt);\r\n                        result.multiplier = result.multiplier.multiply(m);\r\n                    }\r\n                }\r\n                // Detect Euler's identity\r\n                else if(!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi')\r\n                        && result.power.contains(Settings.IMAGINARY) && b.group === CB) {\r\n                    var theta = b.stripVar(Settings.IMAGINARY);\r\n                    result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta)));\r\n                }\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                if(isVector(a) && bIsSymbol) {\r\n                    a = a.map(function (x) {\r\n                        return _.pow(x, b.clone());\r\n                    });\r\n                }\r\n                else if(isMatrix(a) && bIsSymbol) {\r\n                    var M = new Matrix();\r\n                    a.eachElement(function (x, i, j) {\r\n                        M.set(i, j, _.pow(x, b.clone()));\r\n                    });\r\n                    a = M;\r\n                }\r\n                else if(aIsSymbol && isMatrix(b)) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (x, i, j) {\r\n                        M.set(i, j, _.pow(a.clone(), x));\r\n                    });\r\n                    a = M;\r\n                }\r\n                return a;\r\n            }\r\n        };\r\n        // Gets called when the parser finds the , operator.\r\n        // Commas return a Collector object which is roughly an array\r\n        this.comma = function (a, b) {\r\n            if(!(a instanceof Collection))\r\n                a = Collection.create(a);\r\n            a.append(b);\r\n            return a;\r\n        };\r\n        // Link to modulus\r\n        this.mod = function (a, b) {\r\n            return mod(a, b);\r\n        };\r\n        // Used to slice elements from arrays\r\n        this.slice = function (a, b) {\r\n            return new Slice(a, b);\r\n        };\r\n        // The equality setter\r\n        this.equals = function (a, b) {\r\n            // Equality can only be set for group S so complain it's not\r\n            if(a.group !== S && !a.isLinear())\r\n                err('Cannot set equality for ' + a.toString());\r\n            VARS[a.value] = b.clone();\r\n            return b;\r\n        };\r\n        // Percent\r\n        this.percent = function (a) {\r\n            return _.divide(a, new Symbol(100));\r\n        };\r\n        // Set variable\r\n        this.assign = function (a, b) {\r\n            if(a instanceof Collection && b instanceof Collection) {\r\n                a.elements.map(function (x, i) {\r\n                    return _.assign(x, b.elements[i]);\r\n                });\r\n                return Vector.fromArray(b.elements);\r\n            }\r\n            if(a.parent) {\r\n                // It's referring to the parent instead. The current item can be discarded\r\n                var e = a.parent;\r\n                e.elements[e.getter] = b;\r\n                delete e.getter;\r\n                return e;\r\n            }\r\n\r\n            if(a.group !== S)\r\n                throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\r\n            VARS[a.value] = b;\r\n            return b;\r\n        };\r\n        this.function_assign = function (a, b) {\r\n            var f = a.elements.pop();\r\n            return setFunction(f, a.elements, b);\r\n        };\r\n        // Function to quickly convert bools to Symbols\r\n        var bool2Symbol = function (x) {\r\n            return new Symbol(x === true ? 1 : 0);\r\n        };\r\n        //check for equality\r\n        this.eq = function (a, b) {\r\n            return bool2Symbol(a.equals(b));\r\n        };\r\n        //checks for greater than\r\n        this.gt = function (a, b) {\r\n            return bool2Symbol(a.gt(b));\r\n        };\r\n        //checks for greater than equal\r\n        this.gte = function (a, b) {\r\n            return bool2Symbol(a.gte(b));\r\n        };\r\n        //checks for less than\r\n        this.lt = function (a, b) {\r\n            return bool2Symbol(a.lt(b));\r\n        };\r\n        //checks for less than equal\r\n        this.lte = function (a, b) {\r\n            return bool2Symbol(a.lte(b));\r\n        };\r\n        // wraps the factorial\r\n        this.factorial = function (a) {\r\n            return this.symfunction(FACTORIAL, [a]);\r\n        };\r\n        // wraps the double factorial\r\n        this.dfactorial = function (a) {\r\n            return this.symfunction(DOUBLEFACTORIAL, [a]);\r\n        };\r\n    }\r\n    ;\r\n\r\n    /* \"STATIC\" */\r\n    // converts a number to a fraction.\r\n    var Fraction = {\r\n        /**\r\n         * Converts a decimal to a fraction\r\n         * @param {number} value\r\n         * @param {object} opts\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        convert: function (value, opts) {\r\n            var frac;\r\n            if(value === 0) {\r\n                frac = [0, 1];\r\n            }\r\n            else {\r\n                if(value < 1e-6 || value > 1e20) {\r\n                    var qc = this.quickConversion(Number(value));\r\n                    if(qc[1] <= 1e20) {\r\n                        var abs = Math.abs(value);\r\n                        var sign = value / abs;\r\n                        frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\r\n                        frac[0] = frac[0] * sign;\r\n                    }\r\n                    else {\r\n                        frac = qc;\r\n                    }\r\n                }\r\n                else {\r\n                    frac = this.fullConversion(value);\r\n                }\r\n            }\r\n            return frac;\r\n        },\r\n        /**\r\n         * If the fraction is too small or too large this gets called instead of fullConversion method\r\n         * @param {number} dec\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        quickConversion: function (value) {\r\n            var stripSign = function (s) {\r\n                // Explicitely convert to a string\r\n                if(typeof s !== 'string') {\r\n                    s = s.toString();\r\n                }\r\n\r\n                var sign = '';\r\n\r\n                // Remove and store the sign\r\n                var start = s.charAt(0);\r\n                if(start === '-') {\r\n                    s = s.substr(1, s.length);\r\n                    sign = '-';\r\n                }\r\n                else if(start === '+') {\r\n                    // Just remove the plus sign\r\n                    s = s.substr(1, s.length);\r\n                }\r\n\r\n                return {\r\n                    sign: sign,\r\n                    value: s\r\n                };\r\n            };\r\n\r\n\r\n            function convert(value) {\r\n                // Explicitely convert to a decimal\r\n                if(Scientific.isScientific(value)) {\r\n                    value = scientificToDecimal(value);\r\n                }\r\n\r\n                // Split the value into the sign and the value\r\n                var nparts = stripSign(value);\r\n\r\n                // Split it at the decimal. We'll refer to it as the coeffient parts\r\n                var cparts = nparts.value.split('.');\r\n\r\n                // Combine the entire number by removing leading zero and adding the decimal part\r\n                // This would be teh same as moving the decimal point to the end\r\n                var num;\r\n                // We're dealing with integers\r\n                if(cparts.length === 1) {\r\n                    num = cparts[0];\r\n                }\r\n                else {\r\n                    num = cparts[0] + cparts[1];\r\n                }\r\n                var n = cparts[1] ? cparts[1].length : 0;\r\n                // Generate the padding for the zeros\r\n                var den = `1${'0'.repeat(n)}`;\r\n\r\n                if(num !== '0') {\r\n                    num = num.replace(/^0+/, '');\r\n                }\r\n                return [nparts.sign + num, den];\r\n            }\r\n\r\n            return convert(value);\r\n        },\r\n        /**\r\n         * Returns a good approximation of a fraction. This method gets called by convert\r\n         * http://mathforum.org/library/drmath/view/61772.html\r\n         * Decimal To Fraction Conversion - A Simpler Version\r\n         * Dr Peterson\r\n         * @param {number} dec\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        fullConversion: function (dec) {\r\n            var done = false;\r\n            // you can adjust the epsilon to a larger number if you don't need very high precision\r\n            var n1 = 0, d1 = 1, n2 = 1, d2 = 0, n = 0, q = dec, epsilon = 1e-16;\r\n            while(!done) {\r\n                n++;\r\n                if(n > 10000) {\r\n                    done = true;\r\n                }\r\n                var a = Math.floor(q);\r\n                var num = n1 + a * n2;\r\n                var den = d1 + a * d2;\r\n                var e = (q - a);\r\n                if(e < epsilon) {\r\n                    done = true;\r\n                }\r\n                q = 1 / e;\r\n                n1 = n2;\r\n                d1 = d2;\r\n                n2 = num;\r\n                d2 = den;\r\n                if(Math.abs(num / den - dec) < epsilon || n > 30) {\r\n                    done = true;\r\n                }\r\n            }\r\n            return [num, den];\r\n        }\r\n    };\r\n    //Depends on Fraction\r\n\r\n    //The latex generator\r\n    var LaTeX = {\r\n        parser: (function () {\r\n            // create a parser and strip it from everything except the items that you need\r\n            var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\r\n            var parser = new Parser();\r\n            for(var x in parser) {\r\n                if(keep.indexOf(x) === -1)\r\n                    delete parser[x];\r\n            }\r\n            // declare the operators\r\n            parser.setOperator({\r\n                precedence: 8,\r\n                operator: '\\\\',\r\n                action: 'slash',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; // bypass the slash\r\n                }\r\n            });\r\n            parser.setOperator({\r\n                precedence: 8,\r\n                operator: '\\\\,',\r\n                action: 'slash_comma',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; // bypass the slash\r\n                }\r\n            });\r\n            // have braces not map to anything. We want them to be return as-is\r\n            var brackets = parser.getBrackets();\r\n            brackets['{'].maps_to = undefined;\r\n            return parser;\r\n        })(),\r\n        space: '~',\r\n        dot: ' \\\\cdot ',\r\n        // grab a list of supported functions but remove the excluded ones found in exclFN\r\n\r\n        latex: function (symbol, option) {\r\n            // it might be an array\r\n            if(symbol.clone) {\r\n                symbol = symbol.clone(); // leave original as-is\r\n            }\r\n            if(symbol instanceof _.classes.Collection)\r\n                symbol = symbol.elements;\r\n\r\n            if(isArray(symbol)) {\r\n                var LaTeXArray = [];\r\n                for(var i = 0; i < symbol.length; i++) {\r\n                    var sym = symbol[i];\r\n                    //This way I can generate LaTeX on an array of strings.\r\n                    if(!isSymbol(sym))\r\n                        sym = _.parse(sym);\r\n                    LaTeXArray.push(this.latex(sym, option));\r\n                }\r\n                return this.brackets(LaTeXArray.join(', '), 'square');\r\n            }\r\n\r\n            else if(isMatrix(symbol)) {\r\n                var TeX = '\\\\begin{pmatrix}\\n';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    var rowTeX = [],\r\n                            e = symbol.elements[i];\r\n                    for(var j = 0; j < e.length; j++) {\r\n                        rowTeX.push(this.latex(e[j], option));\r\n                    }\r\n                    TeX += rowTeX.join(' & ');\r\n                    if(i < symbol.elements.length - 1) {\r\n                        TeX += '\\\\\\\\\\n';\r\n                    }\r\n                }\r\n                TeX += '\\\\end{pmatrix}';\r\n                return TeX;\r\n            }\r\n\r\n            else if(isVector(symbol)) {\r\n                var TeX = '\\\\left[';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\r\n                }\r\n                TeX += '\\\\right]';\r\n                return TeX;\r\n            }\r\n\r\n            else if(isSet(symbol)) {\r\n                var TeX = '\\\\{';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\r\n                }\r\n                TeX += '\\\\}';\r\n                return TeX;\r\n            }\r\n\r\n            symbol = symbol.clone();\r\n\r\n            var decimal = (option === 'decimal' || option === 'decimals'),\r\n                    power = symbol.power,\r\n                    invert = isNegative(power),\r\n                    negative = symbol.multiplier.lessThan(0);\r\n\r\n            if(symbol.group === P && decimal) {\r\n                return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\r\n            }\r\n            else {\r\n                symbol.multiplier = symbol.multiplier.abs();\r\n\r\n                // if the user wants the result in decimal format then return it as such by placing it at the top part\r\n                var m_array;\r\n\r\n                if(decimal) {\r\n                    var m = String(symbol.multiplier.toDecimal());\r\n                    // if(String(m) === '1' && !decimal) m = '';\r\n                    m_array = [m, ''];\r\n                }\r\n                else {\r\n                    m_array = [symbol.multiplier.num, symbol.multiplier.den];\r\n                }\r\n                // get the value as a two part array\r\n                var v_array = this.value(symbol, invert, option, negative),\r\n                        p;\r\n                // make it all positive since we know whether to push the power to the numerator or denominator already.\r\n                if(invert)\r\n                    power.negate();\r\n                // the power is simple since it requires no additional formatting. We can get it to a\r\n                // string right away. pass in true to neglect unit powers\r\n                if(decimal) {\r\n                    p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\r\n                    if(String(p) === '1')\r\n                        p = '';\r\n                }\r\n                // get the latex representation\r\n                else if(isSymbol(power))\r\n                    p = this.latex(power, option);\r\n                // get it as a fraction\r\n                else\r\n                    p = this.formatFrac(power, true);\r\n                // use this array to specify if the power is getting attached to the top or the bottom\r\n                var p_array = ['', ''],\r\n                        // stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\r\n                        index = invert ? 1 : 0;\r\n                p_array[index] = p;\r\n\r\n                // special case group P and decimal\r\n                var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);\r\n\r\n                return retval.replace(/\\+\\-/gi, '-');\r\n            }\r\n\r\n        },\r\n        // greek mapping\r\n        greek: {\r\n            alpha: '\\\\alpha',\r\n            beta: '\\\\beta',\r\n            gamma: '\\\\gamma',\r\n            delta: '\\\\delta',\r\n            epsilon: '\\\\epsilon',\r\n            zeta: '\\\\zeta',\r\n            eta: '\\\\eta',\r\n            theta: '\\\\theta',\r\n            iota: '\\\\iota',\r\n            kappa: '\\\\kappa',\r\n            lambda: '\\\\lambda',\r\n            mu: '\\\\mu',\r\n            nu: '\\\\nu',\r\n            xi: '\\\\xi',\r\n            omnikron: '\\\\omnikron',\r\n            pi: '\\\\pi',\r\n            rho: '\\\\rho',\r\n            sigma: '\\\\sigma',\r\n            tau: '\\\\tau',\r\n            upsilon: '\\\\upsilon',\r\n            phi: '\\\\phi',\r\n            chi: '\\\\chi',\r\n            psi: '\\\\psi',\r\n            omega: '\\\\omega',\r\n            Gamma: '\\\\Gamma',\r\n            Delta: '\\\\Delta',\r\n            Epsilon: '\\\\Epsilon',\r\n            Theta: '\\\\Theta',\r\n            Lambda: '\\\\Lambda',\r\n            Xi: '\\\\Xi',\r\n            Pi: '\\\\Pi',\r\n            Sigma: '\\\\Sigma',\r\n            Phi: '\\\\Phi',\r\n            Psi: '\\\\Psi',\r\n            Omega: '\\\\Omega'\r\n        },\r\n        symbols: {\r\n            arccos: '\\\\arccos',\r\n            cos: '\\\\cos',\r\n            csc: '\\\\csc',\r\n            exp: '\\\\exp',\r\n            ker: '\\\\ker',\r\n            limsup: '\\\\limsup',\r\n            min: '\\\\min',\r\n            sinh: '\\\\sinh',\r\n            arcsin: '\\\\arcsin',\r\n            cosh: '\\\\cosh',\r\n            deg: '\\\\deg',\r\n            gcd: '\\\\gcd',\r\n            lg: '\\\\lg',\r\n            ln: '\\\\ln',\r\n            Pr: '\\\\Pr',\r\n            sqrt: '\\\\sqrt',\r\n            sup: '\\\\sup',\r\n            arctan: '\\\\arctan',\r\n            cot: '\\\\cot',\r\n            det: '\\\\det',\r\n            hom: '\\\\hom',\r\n            lim: '\\\\lim',\r\n            log: '\\\\log',\r\n            LN: '\\\\LN',\r\n            sec: '\\\\sec',\r\n            tan: '\\\\tan',\r\n            arg: '\\\\arg',\r\n            coth: '\\\\coth',\r\n            dim: '\\\\dim',\r\n            inf: '\\\\inf',\r\n            liminf: '\\\\liminf',\r\n            max: '\\\\max',\r\n            sin: '\\\\sin',\r\n            tanh: '\\\\tanh'\r\n        },\r\n        // get the raw value of the symbol as an array\r\n        value: function (symbol, inverted, option, negative) {\r\n            var group = symbol.group,\r\n                    previousGroup = symbol.previousGroup,\r\n                    v = ['', ''],\r\n                    index = inverted ? 1 : 0;\r\n            /*if(group === N) // do nothing since we want to return top & bottom blank; */\r\n            if(symbol.isInfinity) {\r\n                v[index] = '\\\\infty';\r\n            }\r\n            else if(group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {\r\n                var value = this.formatSubscripts(symbol.value);\r\n                if(value.replace)\r\n                    value = value.replace(/(.+)_$/, '$1\\\\_');\r\n                // split it so we can check for instances of alpha as well as alpha_b\r\n                var t_varray = String(value).split('_');\r\n                var greek = this.greek[t_varray[0]];\r\n                if(greek) {\r\n                    t_varray[0] = greek;\r\n                    value = t_varray.join('_');\r\n                }\r\n                var symbol = this.symbols[t_varray[0]];\r\n                if(symbol) {\r\n                    t_varray[0] = symbol;\r\n                    value = t_varray.join('_');\r\n                }\r\n                v[index] = value;\r\n            }\r\n            else if(group === FN || previousGroup === FN) {\r\n                var name,\r\n                        input = [],\r\n                        fname = symbol.fname;\r\n                // collect the arguments\r\n                for(var i = 0; i < symbol.args.length; i++) {\r\n                    var arg = symbol.args[i], item;\r\n                    if(typeof arg === 'string')\r\n                        item = arg;\r\n                    else {\r\n                        item = this.latex(arg, option);\r\n                    }\r\n                    input.push(item);\r\n                }\r\n\r\n                if(fname === SQRT) {\r\n                    v[index] = '\\\\sqrt' + this.braces(input.join(','));\r\n                }\r\n                else if(fname === ABS) {\r\n                    v[index] = this.brackets(input.join(','), 'abs');\r\n                }\r\n                else if(fname === PARENTHESIS) {\r\n                    v[index] = this.brackets(input.join(','), 'parens');\r\n                }\r\n                else if(fname === 'limit') {\r\n                    v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\r\n                }\r\n                else if(fname === 'integrate') {\r\n                    v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\r\n                }\r\n                else if(fname === 'defint') {\r\n                    v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\r\n                }\r\n                else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\r\n                    var arg = symbol.args[0];\r\n                    if(arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\r\n                        input[0] = this.brackets(input[0]);\r\n                    }\r\n                    v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');\r\n                }\r\n                else if(fname === 'floor') {\r\n                    v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\r\n                }\r\n                else if(fname === 'ceil') {\r\n                    v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\r\n                }\r\n                // capture log(a, b)\r\n                else if(fname === Settings.LOG && input.length > 1) {\r\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\r\n                }\r\n                // capture log(a, b)\r\n                else if(fname === Settings.LOG10) {\r\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\r\n                }\r\n                else if(fname === 'sum') {\r\n                    var a = input[0],\r\n                            b = input[1],\r\n                            c = input[2],\r\n                            d = input[3];\r\n                    v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\r\n                }\r\n                else if(fname === 'product') {\r\n                    var a = input[0],\r\n                            b = input[1],\r\n                            c = input[2],\r\n                            d = input[3];\r\n                    v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\r\n                }\r\n                else if(fname === 'nthroot') {\r\n                    v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\r\n                }\r\n                else if(fname === 'mod') {\r\n                    v[index] = input[0] + ' \\\\bmod ' + input[1];\r\n                }\r\n                else if(fname === 'realpart') {\r\n                    v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\r\n                }\r\n                else if(fname === 'imagpart') {\r\n                    v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\r\n                }\r\n                else {\r\n                    var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\r\n                    if(symbol.isConversion)\r\n                        v[index] = name + this.brackets(input.join(''), 'parens');\r\n                    else\r\n                        v[index] = name + this.brackets(input.join(','), 'parens');\r\n                }\r\n            }\r\n            else if(symbol.isComposite()) {\r\n                var collected = symbol.collectSymbols().sort(\r\n                        group === CP || previousGroup === CP ?\r\n                        function (a, b) {\r\n                            return b.group - a.group;\r\n                        } :\r\n                        function (a, b) {\r\n                            var x = isSymbol(a.power) ? -1 : a.power;\r\n                            var y = isSymbol(b.power) ? -1 : b.power;\r\n                            return y - x;\r\n                        }\r\n                ),\r\n                        symbols = [],\r\n                        l = collected.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    symbols.push(LaTeX.latex(collected[i], option));\r\n                }\r\n                var value = symbols.join('+');\r\n\r\n                v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\r\n            }\r\n            else if(group === CB || previousGroup === EX || previousGroup === CB) {\r\n                if(group === CB)\r\n                    symbol.distributeExponent();\r\n                // This almost feels a little like cheating but I need to know if I should be wrapping the symbol\r\n                // in brackets or not. We'll do this by checking the value of the numerator and then comparing it\r\n                // to whether the symbol value is \"simple\" or not.\r\n                var denominator = [],\r\n                        numerator = [];\r\n                // Generate a profile\r\n                var den_map = [], num_map = [], num_c = 0, den_c = 0;\r\n                var setBrackets = function (container, map, counter) {\r\n                    if(counter > 1 && map.length > 0) {\r\n                        var l = map.length;\r\n                        for(var i = 0; i < l; i++) {\r\n                            var idx = map[i], item = container[idx];\r\n                            if(!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\r\n                                container[idx] = LaTeX.brackets(item, 'parens');\r\n                            }\r\n                        }\r\n                    }\r\n                    return container;\r\n                };\r\n\r\n                // Generate latex for each of them\r\n                symbol.each(function (x) {\r\n                    var isDenom = isNegative(x.power),\r\n                            laTex;\r\n\r\n                    if(isDenom) {\r\n                        laTex = LaTeX.latex(x.invert(), option);\r\n                        den_c++;\r\n                        if(x.isComposite()) {\r\n                            if(symbol.multiplier.den != 1 && Math.abs(x.power) == 1)\r\n                                laTex = LaTeX.brackets(laTex, 'parens');\r\n                            den_map.push(denominator.length); // make a note of where the composite was found\r\n                        }\r\n\r\n                        denominator.push(laTex);\r\n                    }\r\n                    else {\r\n                        laTex = LaTeX.latex(x, option);\r\n                        num_c++;\r\n                        if(x.isComposite()) {\r\n                            if(symbol.multiplier.num != 1 && Math.abs(x.power) == 1)\r\n                                laTex = LaTeX.brackets(laTex, 'parens');\r\n                            num_map.push(numerator.length);   // make a note of where the composite was found\r\n                        }\r\n                        numerator.push(laTex);\r\n                    }\r\n                });\r\n\r\n                // Apply brackets\r\n                setBrackets(numerator, num_map, num_c);\r\n                v[0] = numerator.join(this.dot); // collapse the numerator into one string\r\n\r\n                setBrackets(denominator, den_map, den_c);\r\n                v[1] = denominator.join(this.dot);\r\n            }\r\n\r\n            return v;\r\n        },\r\n        set: function (m, v, p, combine_power) {\r\n            var isBracketed = function (v) {\r\n                return /^\\\\left\\(.+\\\\right\\)$/.test(v);\r\n            };\r\n            // format the power if it exists\r\n            if(p)\r\n                p = this.formatP(p);\r\n            // group CB will have to be wrapped since the power applies to both it's numerator and denominator\r\n            if(combine_power) {\r\n                // POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something\r\n                // the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\r\n                // of a case where this isn't true\r\n                var tp = p[0];\r\n                p[0] = ''; // temporarily make p blank\r\n            }\r\n\r\n            // merge v and p. Not that v MUST be first since the order matters\r\n            v = this.merge(v, p);\r\n            var mn = m[0], md = m[1], vn = v[0], vd = v[1];\r\n            // filters\r\n            // if the top has a variable but the numerator is one drop it\r\n            if(vn && Number(mn) === 1)\r\n                mn = '';\r\n            // if denominator is 1 drop it always\r\n            if(Number(md) === 1)\r\n                md = '';\r\n            // prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\r\n            var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');\r\n\r\n            // prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\r\n            var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');\r\n            // format the power if it exists\r\n            // make it a fraction if both top and bottom exists\r\n            if(top && bottom) {\r\n                var frac = this.frac(top, bottom);\r\n                if(combine_power && tp)\r\n                    frac = this.brackets(frac) + tp;\r\n                return frac;\r\n            }\r\n            // otherwise only the top exists so return that\r\n            else\r\n                return top;\r\n        },\r\n        merge: function (a, b) {\r\n            var r = [];\r\n            for(var i = 0; i < 2; i++)\r\n                r[i] = a[i] + b[i];\r\n            return r;\r\n        },\r\n        // joins together two strings if both exist\r\n        join: function (n, d, glue) {\r\n            if(!n && !d)\r\n                return '';\r\n            if(n && !d)\r\n                return n;\r\n            if(d && !n)\r\n                return d;\r\n            return n + glue + d;\r\n        },\r\n        /**\r\n         * Places subscripts in braces for proper formatting\r\n         * @param {String} v\r\n         * @returns {String}\r\n         */\r\n        formatSubscripts: function (v) {\r\n            // Split it at the underscore\r\n            var arr = v.toString().split('_');\r\n\r\n            var name = '';\r\n\r\n            // Loop over all entries except the first one\r\n            while(arr.length > 1) {\r\n                // Wrap all in braces except for the last one\r\n                if(arr.length > 0) {\r\n                    name = '_' + this.braces(arr.pop() + name);\r\n                }\r\n            }\r\n\r\n            return arr[0] + name;\r\n        },\r\n        formatP: function (p_array) {\r\n            for(var i = 0; i < 2; i++) {\r\n                var p = p_array[i];\r\n                if(p)\r\n                    p_array[i] = '^' + this.braces(p);\r\n            }\r\n            return p_array;\r\n        },\r\n        /**\r\n         * formats the fractions accordingly.\r\n         * @param {Frac} f\r\n         * @param {bool} is_pow\r\n         */\r\n        formatFrac: function (f, is_pow) {\r\n            var n = f.num.toString(),\r\n                    d = f.den.toString();\r\n            // no need to have x^1\r\n            if(is_pow && n === '1' && d === '1')\r\n                return '';\r\n            // no need to have x/1\r\n            if(d === '1')\r\n                return n;\r\n            return this.frac(n, d);\r\n        },\r\n        frac: function (n, d) {\r\n            return '\\\\frac' + this.braces(n) + this.braces(d);\r\n        },\r\n        braces: function (e) {\r\n            return '{' + e + '}';\r\n        },\r\n        brackets: function (e, typ) {\r\n            typ = typ || 'parens';\r\n            var bracketTypes = {\r\n                parens: ['(', ')'],\r\n                square: ['[', ']'],\r\n                brace: ['{', '}'],\r\n                abs: ['|', '|'],\r\n                angle: ['\\\\langle', '\\\\rangle']\r\n            };\r\n            var bracket = bracketTypes[typ];\r\n            return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\r\n        },\r\n        /**\r\n         * Removes extreneous tokens\r\n         * @param {Tokens[]} tokens\r\n         * @returns {Tokens[]}\r\n         */\r\n        filterTokens: function (tokens) {\r\n            var filtered = [];\r\n\r\n            // Copy over the type of the scope\r\n            if(isArray(tokens)) {\r\n                filtered.type = tokens.type;\r\n            }\r\n\r\n            // the items that need to be disposed\r\n            var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\r\n            for(var i = 0, l = tokens.length; i < l; i++) {\r\n                var token = tokens[i];\r\n                var next_token = tokens[i + 1];\r\n                if(token.value === '\\\\' && next_token.value === '\\\\') {\r\n                    filtered.push(token);\r\n                }\r\n                else if(isArray(token)) {\r\n                    filtered.push(LaTeX.filterTokens(token));\r\n                }\r\n                else if(d.indexOf(token.value) === -1) {\r\n                    filtered.push(token);\r\n                }\r\n            }\r\n            return filtered;\r\n        },\r\n        /*\r\n         * Parses tokens from LaTeX string. Does not do any error checking\r\n         * @param {Tokens[]} rpn\r\n         * @returns {String}\r\n         */\r\n        parse: function (raw_tokens) {\r\n            var i, l;\r\n            var retval = '';\r\n            var tokens = this.filterTokens(raw_tokens);\r\n            var replace = {\r\n                'cdot': '',\r\n                'times': '',\r\n                'infty': 'Infinity'\r\n            };\r\n            // get the next token\r\n            var next = function (n) {\r\n                return tokens[(typeof n === 'undefined' ? ++i : i += n)];\r\n            };\r\n            var parse_next = function () {\r\n                return LaTeX.parse(next());\r\n            };\r\n            var get = function (token) {\r\n                if(token in replace) {\r\n                    return replace[token];\r\n                }\r\n                // A quirk with implicit multiplication forces us to check for *\r\n                if(token === '*' && tokens[i + 1].value === '&') {\r\n                    next(2); // skip this and the &\r\n                    return ',';\r\n                }\r\n\r\n                if(token === '&') {\r\n                    next();\r\n                    return ','; // Skip the *\r\n                }\r\n                // If it's the end of a row, return the row separator\r\n                if(token === '\\\\') {\r\n                    return '],[';\r\n                }\r\n                return token;\r\n            };\r\n\r\n            // start parsing the tokens\r\n            for(i = 0, l = tokens.length; i < l; i++) {\r\n                var token = tokens[i];\r\n                // fractions\r\n                if(token.value === 'frac') {\r\n                    // parse and wrap it in brackets\r\n                    var n = parse_next();\r\n                    var d = parse_next();\r\n                    retval += n + '/' + d;\r\n                }\r\n                else if(token.value in LaTeX.symbols) {\r\n                    if(token.value === SQRT && tokens[i + 1].type === 'vector' && tokens[i + 2].type === 'Set') {\r\n                        var base = parse_next();\r\n                        var expr = parse_next();\r\n                        retval += (expr + '^' + inBrackets('1/' + base));\r\n                    }\r\n                    else {\r\n                        retval += token.value + parse_next();\r\n                    }\r\n                }\r\n                else if(token.value === 'int') {\r\n                    var f = parse_next();\r\n                    // skip the comma\r\n                    i++;\r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    dx = get(dx.substring(1, dx.length));\r\n                    retval += 'integrate' + inBrackets(f + ',' + dx);\r\n                }\r\n                else if(token.value === 'int_') {\r\n                    var l = parse_next(); // lower\r\n                    i++; // skip the ^\r\n                    var u = next().value; // upper\r\n                    // if it is in brackets\r\n                    if (u === undefined) {\r\n                        i--;\r\n                        var u = parse_next();\r\n                    }\r\n                    var f = parse_next(); // function\r\n                    \r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    // skip the comma\r\n                    if (dx === ',') {\r\n                        var dx = next().value;\r\n                    }\r\n                    // if 'd', skip\r\n                    if (dx === 'differentialD') {\r\n                        // skip the *\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    if (dx === 'mathrm') {\r\n                        // skip the mathrm{d}\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\r\n                }\r\n                else if(token.value && token.value.startsWith('int_')) {\r\n                    // var l = parse_next(); // lower\r\n                    var l = token.value.replace('int_', '')\r\n                    console.log('uppernow')\r\n                    i++; // skip the ^\r\n                    var u = next().value; // upper\r\n                    // if it is in brackets\r\n                    if (u === undefined) {\r\n                        i--;\r\n                        var u = parse_next();\r\n                    }\r\n                    var f = parse_next(); // function\r\n                    \r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    // skip the comma\r\n                    if (dx === ',') {\r\n                        var dx = next().value;\r\n                    }\r\n                    // if 'd', skip\r\n                    if (dx === 'differentialD') {\r\n                        // skip the *\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    if (dx === 'mathrm') {\r\n                        // skip the mathrm{d}\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\r\n                }\r\n                else if(token.value === 'mathrm') {\r\n                    var f = tokens[++i][0].value;\r\n                    retval += f + parse_next();\r\n                }\r\n                // sum and product\r\n                else if(token.value === 'sum_' || token.value === 'prod_') {\r\n                    var fn = token.value === 'sum_' ? 'sum' : 'product';\r\n                    var nxt = next();\r\n                    i++; // skip the caret\r\n                    var end = parse_next();\r\n                    var f = parse_next();\r\n                    retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\r\n                }\r\n                else if(token.value === 'lim_') {\r\n                    var nxt = next();\r\n                    retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\r\n                }\r\n                else if(token.value === 'begin') {\r\n                    var nxt = next();\r\n                    if(Array.isArray(nxt)) {\r\n                        var v = nxt[0].value;\r\n                        if(v === 'matrix') {\r\n                            // Start a matrix\r\n                            retval += 'matrix([';\r\n                        }\r\n                    }\r\n                }\r\n                else if(token.value === 'end') {\r\n                    var nxt = next();\r\n                    if(Array.isArray(nxt)) {\r\n                        var v = nxt[0].value;\r\n                        if(v === 'matrix') {\r\n                            // End a matrix\r\n                            retval += '])';\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if(Array.isArray(token)) {\r\n                        retval += get(LaTeX.parse(token));\r\n                    }\r\n                    else {\r\n                        retval += get(token.value.toString());\r\n                    }\r\n                }\r\n            }\r\n\r\n            return inBrackets(retval);\r\n        }\r\n    };\r\n//Vector =======================================================================\r\n    function Vector(v) {\r\n        if(isVector(v))\r\n            this.elements = v.items.slice(0);\r\n        else if(isArray(v))\r\n            this.elements = v.slice(0);\r\n        else\r\n            this.elements = [].slice.call(arguments);\r\n    }\r\n    /*\r\n     * Generates a pre-filled array\r\n     * @param {type} n\r\n     * @param {type} val\r\n     * @returns {unresolved}\r\n     */\r\n    Vector.arrayPrefill = function (n, val) {\r\n        var a = [];\r\n        val = val || 0;\r\n        for(var i = 0; i < n; i++)\r\n            a[i] = val;\r\n        return a;\r\n    };\r\n    /**\r\n     * Generate a vector from and array\r\n     * @param {type} a\r\n     * @returns {unresolved}\r\n     */\r\n    Vector.fromArray = function (a) {\r\n        var v = new Vector();\r\n        v.elements = a;\r\n        return v;\r\n    };\r\n\r\n    /**\r\n     * Convert a Set to a Vector\r\n     * @param {Set} set\r\n     * @returns {Vector}\r\n     */\r\n    Vector.fromSet = function (set) {\r\n        return Vector.fromArray(set.elements);\r\n    };\r\n\r\n    //Ported from Sylvester.js\r\n    Vector.prototype = {\r\n        custom: true,\r\n        // Returns element i of the vector\r\n        e: function (i) {\r\n            return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];\r\n        },\r\n\r\n        set: function (i, val) {\r\n            if(!isSymbol(val))\r\n                val = new Symbol(val);\r\n            this.elements[i] = val;\r\n        },\r\n\r\n        // Returns the number of elements the vector has\r\n        dimensions: function () {\r\n            return this.elements.length;\r\n        },\r\n\r\n        // Returns the modulus ('length') of the vector\r\n        modulus: function () {\r\n            return block('SAFE', function () {\r\n                return _.pow((this.dot(this.clone())), new Symbol(0.5));\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns true iff the vector is equal to the argument\r\n        eql: function (vector) {\r\n            var n = this.elements.length;\r\n            var V = vector.elements || vector;\r\n            if(n !== V.length) {\r\n                return false;\r\n            }\r\n            do {\r\n                if(Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > PRECISION) {\r\n                    return false;\r\n                }\r\n            }\r\n            while(--n);\r\n            return true;\r\n        },\r\n\r\n        // Returns a clone of the vector\r\n        clone: function () {\r\n            var V = new Vector(),\r\n                    l = this.elements.length;\r\n            for(var i = 0; i < l; i++) {\r\n                //Rule: all items within the vector must have a clone method.\r\n                V.elements.push(this.elements[i].clone());\r\n            }\r\n            if(this.getter) {\r\n                V.getter = this.getter.clone();\r\n            }\r\n            return V;\r\n        },\r\n\r\n        // Maps the vector to another vector according to the given function\r\n        map: function (fn) {\r\n            var elements = [];\r\n            this.each(function (x, i) {\r\n                elements.push(fn(x, i));\r\n            });\r\n\r\n            return new Vector(elements);\r\n        },\r\n\r\n        // Calls the iterator for each element of the vector in turn\r\n        each: function (fn) {\r\n            var n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                fn(this.elements[i], i + 1);\r\n            }\r\n            while(--n);\r\n        },\r\n\r\n        // Returns a new vector created by normalizing the receiver\r\n        toUnitVector: function () {\r\n            return block('SAFE', function () {\r\n                var r = this.modulus();\r\n                if(r.valueOf() === 0) {\r\n                    return this.clone();\r\n                }\r\n                return this.map(function (x) {\r\n                    return _.divide(x, r);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the angle between the vector and the argument (also a vector)\r\n        angleFrom: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                var n = this.elements.length;\r\n                if(n !== V.length) {\r\n                    return null;\r\n                }\r\n                var dot = new Symbol(0), mod1 = new Symbol(0), mod2 = new Symbol(0);\r\n                // Work things out in parallel to save time\r\n                this.each(function (x, i) {\r\n                    dot = _.add(dot, _.multiply(x, V[i - 1]));\r\n                    mod1 = _.add(mod1, _.multiply(x, x));// will not conflict in safe block\r\n                    mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1]));// will not conflict in safe block\r\n                });\r\n                mod1 = _.pow(mod1, new Symbol(0.5));\r\n                mod2 = _.pow(mod2, new Symbol(0.5));\r\n                var product = _.multiply(mod1, mod2);\r\n                if(product.valueOf() === 0) {\r\n                    return null;\r\n                }\r\n                var theta = _.divide(dot, product);\r\n                var theta_val = theta.valueOf();\r\n                if(theta_val < -1) {\r\n                    theta = -1;\r\n                }\r\n                if(theta_val > 1) {\r\n                    theta = 1;\r\n                }\r\n                return new Symbol(Math.acos(theta));\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns true iff the vector is parallel to the argument\r\n        isParallelTo: function (vector) {\r\n            var angle = this.angleFrom(vector).valueOf();\r\n            return (angle === null) ? null : (angle <= PRECISION);\r\n        },\r\n\r\n        // Returns true iff the vector is antiparallel to the argument\r\n        isAntiparallelTo: function (vector) {\r\n            var angle = this.angleFrom(vector).valueOf();\r\n            return (angle === null) ? null : (Math.abs(angle - Math.PI) <= PRECISION);\r\n        },\r\n\r\n        // Returns true iff the vector is perpendicular to the argument\r\n        isPerpendicularTo: function (vector) {\r\n            var dot = this.dot(vector);\r\n            return (dot === null) ? null : (Math.abs(dot) <= PRECISION);\r\n        },\r\n\r\n        // Returns the result of adding the argument to the vector\r\n        add: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                if(this.elements.length !== V.length) {\r\n                    return null;\r\n                }\r\n                return this.map(function (x, i) {\r\n                    return _.add(x, V[i - 1]);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the result of subtracting the argument from the vector\r\n        subtract: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                if(this.elements.length !== V.length) {\r\n                    return null;\r\n                }\r\n                return this.map(function (x, i) {\r\n                    return _.subtract(x, V[i - 1]);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the result of multiplying the elements of the vector by the argument\r\n        multiply: function (k) {\r\n            return this.map(function (x) {\r\n                return x.clone() * k.clone();\r\n            });\r\n        },\r\n\r\n        x: function (k) {\r\n            return this.multiply(k);\r\n        },\r\n\r\n        // Returns the scalar product of the vector with the argument\r\n        // Both vectors must have equal dimensionality\r\n        dot: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                var product = new Symbol(0), n = this.elements.length;\r\n                if(n !== V.length) {\r\n                    return null;\r\n                }\r\n                do {\r\n                    product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));\r\n                }\r\n                while(--n);\r\n                return product;\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the vector product of the vector with the argument\r\n        // Both vectors must have dimensionality 3\r\n        cross: function (vector) {\r\n            var B = vector.elements || vector;\r\n            if(this.elements.length !== 3 || B.length !== 3) {\r\n                return null;\r\n            }\r\n            var A = this.elements;\r\n            return block('SAFE', function () {\r\n                return new Vector([\r\n                    _.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])),\r\n                    _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])),\r\n                    _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))\r\n                ]);\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the (absolute) largest element of the vector\r\n        max: function () {\r\n            var m = 0, n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                if(Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {\r\n                    m = this.elements[i];\r\n                }\r\n            }\r\n            while(--n);\r\n            return m;\r\n        },\r\n        magnitude: function () {\r\n            var magnitude = new Symbol(0);\r\n            this.each(function (e) {\r\n                magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));\r\n            });\r\n            return _.sqrt(magnitude);\r\n        },\r\n        // Returns the index of the first match found\r\n        indexOf: function (x) {\r\n            var index = null, n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                if(index === null && this.elements[i].valueOf() === x.valueOf()) {\r\n                    index = i + 1;\r\n                }\r\n            }\r\n            while(--n);\r\n            return index;\r\n        },\r\n        text: function (x) {\r\n            return text(this);\r\n        },\r\n        toString: function () {\r\n            return this.text();\r\n        },\r\n        latex: function (option) {\r\n            var tex = [];\r\n            for(var i = 0; i < this.elements.length; i++) {\r\n                tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));\r\n            }\r\n            return '[' + tex.join(', ') + ']';\r\n        }\r\n    };\r\n\r\n//Matrix =======================================================================\r\n    function Matrix() {\r\n        var m = arguments,\r\n                l = m.length, i, el = [];\r\n        if(isMatrix(m)) { // if it's a matrix then make a clone\r\n            for(i = 0; i < l; i++) {\r\n                el.push(m[i].slice(0));\r\n            }\r\n        }\r\n        else {\r\n            var row, lw, rl;\r\n            for(i = 0; i < l; i++) {\r\n                row = m[i];\r\n                if(isVector(row))\r\n                    row = row.elements;\r\n                if(!isArray(row))\r\n                    row = [row];\r\n                rl = row.length;\r\n                if(lw && lw !== rl)\r\n                    err('Unable to create Matrix. Row dimensions do not match!');\r\n                el.push(row);\r\n                lw = rl;\r\n            }\r\n        }\r\n        this.elements = el;\r\n    }\r\n    Matrix.identity = function (n) {\r\n        var m = new Matrix();\r\n        for(var i = 0; i < n; i++) {\r\n            m.elements.push([]);\r\n            for(var j = 0; j < n; j++) {\r\n                m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));\r\n            }\r\n        }\r\n        return m;\r\n    };\r\n    Matrix.fromArray = function (arr) {\r\n        function F(args) {\r\n            return Matrix.apply(this, args);\r\n        }\r\n        F.prototype = Matrix.prototype;\r\n\r\n        return new F(arr);\r\n    };\r\n    Matrix.zeroMatrix = function (rows, cols) {\r\n        var m = new Matrix();\r\n        for(var i = 0; i < rows; i++) {\r\n            m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));\r\n        }\r\n        return m;\r\n    };\r\n    Matrix.prototype = {\r\n        // needs be true to let the parser know not to try to cast it to a symbol\r\n        custom: true,\r\n        get: function (row, column) {\r\n            if(!this.elements[row])\r\n                return undefined;\r\n            return this.elements[row][column];\r\n        },\r\n        map: function (f, raw_values) {\r\n            var M = new Matrix();\r\n            this.each(function (e, i, j) {\r\n                M.set(i, j, f.call(M, e), raw_values);\r\n            });\r\n            return M;\r\n        },\r\n        set: function (row, column, value, raw) {\r\n            if(!this.elements[row])\r\n                this.elements[row] = [];\r\n            this.elements[row][column] = raw ? value : (isSymbol(value) ? value : new Symbol(value));\r\n        },\r\n        cols: function () {\r\n            return this.elements[0].length;\r\n        },\r\n        rows: function () {\r\n            return this.elements.length;\r\n        },\r\n        row: function (n) {\r\n            if(!n || n > this.cols())\r\n                return [];\r\n            return this.elements[n - 1];\r\n        },\r\n        col: function (n) {\r\n            var nr = this.rows(),\r\n                    col = [];\r\n            if(n > this.cols() || !n)\r\n                return col;\r\n            for(var i = 0; i < nr; i++) {\r\n                col.push(this.elements[i][n - 1]);\r\n            }\r\n            return col;\r\n        },\r\n        eachElement: function (fn) {\r\n            var nr = this.rows(),\r\n                    nc = this.cols(), i, j;\r\n            for(i = 0; i < nr; i++) {\r\n                for(j = 0; j < nc; j++) {\r\n                    fn.call(this, this.elements[i][j], i, j);\r\n                }\r\n            }\r\n        },\r\n        // ported from Sylvester.js\r\n        determinant: function () {\r\n            if(!this.isSquare()) {\r\n                return null;\r\n            }\r\n            var M = this.toRightTriangular();\r\n            var det = M.elements[0][0], n = M.elements.length - 1, k = n, i;\r\n            do {\r\n                i = k - n + 1;\r\n                det = _.multiply(det, M.elements[i][i]);\r\n            }\r\n            while(--n);\r\n            return det;\r\n        },\r\n        isSquare: function () {\r\n            return this.elements.length === this.elements[0].length;\r\n        },\r\n        isSingular: function () {\r\n            return this.isSquare() && this.determinant() === 0;\r\n        },\r\n        augment: function (m) {\r\n            var r = this.rows(), rr = m.rows();\r\n            if(r !== rr)\r\n                err(\"Cannot augment matrix. Rows don't match.\");\r\n            for(var i = 0; i < r; i++) {\r\n                this.elements[i] = this.elements[i].concat(m.elements[i]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            var r = this.rows(), c = this.cols(),\r\n                    m = new Matrix();\r\n            for(var i = 0; i < r; i++) {\r\n                m.elements[i] = [];\r\n                for(var j = 0; j < c; j++) {\r\n                    var symbol = this.elements[i][j];\r\n                    m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;\r\n                }\r\n            }\r\n            return m;\r\n        },\r\n        // ported from Sylvester.js\r\n        invert: function () {\r\n            if(!this.isSquare())\r\n                err('Matrix is not square!');\r\n            return block('SAFE', function () {\r\n                var ni = this.elements.length, ki = ni, i, j;\r\n                var imatrix = Matrix.identity(ni);\r\n                var M = this.augment(imatrix).toRightTriangular();\r\n                var np, kp = M.elements[0].length, p, els, divisor;\r\n                var inverse_elements = [], new_element;\r\n                // Matrix is non-singular so there will be no zeros on the diagonal\r\n                // Cycle through rows from last to first\r\n                do {\r\n                    i = ni - 1;\r\n                    // First, normalise diagonal elements to 1\r\n                    els = [];\r\n                    np = kp;\r\n                    inverse_elements[i] = [];\r\n                    divisor = M.elements[i][i];\r\n                    do {\r\n                        p = kp - np;\r\n                        new_element = _.divide(M.elements[i][p], divisor.clone());\r\n                        els.push(new_element);\r\n                        // Shuffle of the current row of the right hand side into the results\r\n                        // array as it will not be modified by later runs through this loop\r\n                        if(p >= ki) {\r\n                            inverse_elements[i].push(new_element);\r\n                        }\r\n                    }\r\n                    while(--np);\r\n                    M.elements[i] = els;\r\n                    // Then, subtract this row from those above it to\r\n                    // give the identity matrix on the left hand side\r\n                    for(j = 0; j < i; j++) {\r\n                        els = [];\r\n                        np = kp;\r\n                        do {\r\n                            p = kp - np;\r\n                            els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));\r\n                        }\r\n                        while(--np);\r\n                        M.elements[j] = els;\r\n                    }\r\n                }\r\n                while(--ni);\r\n                return Matrix.fromArray(inverse_elements);\r\n            }, undefined, this);\r\n        },\r\n        // ported from Sylvester.js\r\n        toRightTriangular: function () {\r\n            return block('SAFE', function () {\r\n                var M = this.clone(), els, fel, nel,\r\n                        n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;\r\n                do {\r\n                    i = k - n;\r\n                    fel = M.elements[i][i];\r\n                    if(fel.valueOf() === 0) {\r\n                        for(var j = i + 1; j < k; j++) {\r\n                            nel = M.elements[j][i];\r\n                            if(nel && nel.valueOf() !== 0) {\r\n                                els = [];\r\n                                np = kp;\r\n                                do {\r\n                                    p = kp - np;\r\n                                    els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));\r\n                                }\r\n                                while(--np);\r\n                                M.elements[i] = els;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    var fel = M.elements[i][i];\r\n                    if(fel.valueOf() !== 0) {\r\n                        for(j = i + 1; j < k; j++) {\r\n                            var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());\r\n                            els = [];\r\n                            np = kp;\r\n                            do {\r\n                                p = kp - np;\r\n                                // Elements with column numbers up to an including the number\r\n                                // of the row that we're subtracting can safely be set straight to\r\n                                // zero, since that's the point of this routine and it avoids having\r\n                                // to loop over and correct rounding errors later\r\n                                els.push(p <= i ? new Symbol(0) :\r\n                                        _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));\r\n                            }\r\n                            while(--np);\r\n                            M.elements[j] = els;\r\n                        }\r\n                    }\r\n                }\r\n                while(--n);\r\n\r\n                return M;\r\n            }, undefined, this);\r\n        },\r\n        transpose: function () {\r\n            var rows = this.elements.length, cols = this.elements[0].length;\r\n            var M = new Matrix(), ni = cols, i, nj, j;\r\n\r\n            do {\r\n                i = cols - ni;\r\n                M.elements[i] = [];\r\n                nj = rows;\r\n                do {\r\n                    j = rows - nj;\r\n                    M.elements[i][j] = this.elements[j][i].clone();\r\n                }\r\n                while(--nj);\r\n            }\r\n            while(--ni);\r\n            return M;\r\n        },\r\n        // Returns true if the matrix can multiply the argument from the left\r\n        canMultiplyFromLeft: function (matrix) {\r\n            var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;\r\n            // this.columns should equal matrix.rows\r\n            return (this.elements[0].length === l);\r\n        },\r\n        sameSize: function (matrix) {\r\n            return this.rows() === matrix.rows() && this.cols() === matrix.cols();\r\n        },\r\n        multiply: function (matrix) {\r\n            return block('SAFE', function () {\r\n                var M = matrix.elements || matrix;\r\n                if(!this.canMultiplyFromLeft(M)) {\r\n                    if(this.sameSize(matrix)) {\r\n                        var MM = new Matrix();\r\n                        var rows = this.rows();\r\n                        for(var i = 0; i < rows; i++) {\r\n                            var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));\r\n                            MM.elements[i] = e.elements;\r\n                        }\r\n                        return MM;\r\n                    }\r\n                    return null;\r\n                }\r\n                var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;\r\n                var cols = this.elements[0].length, elements = [], sum, nc, c;\r\n                do {\r\n                    i = ki - ni;\r\n                    elements[i] = [];\r\n                    nj = kj;\r\n                    do {\r\n                        j = kj - nj;\r\n                        sum = new Symbol(0);\r\n                        nc = cols;\r\n                        do {\r\n                            c = cols - nc;\r\n                            sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));\r\n                        }\r\n                        while(--nc);\r\n                        elements[i][j] = sum;\r\n                    }\r\n                    while(--nj);\r\n                }\r\n                while(--ni);\r\n                return Matrix.fromArray(elements);\r\n            }, undefined, this);\r\n        },\r\n        add: function (matrix, callback) {\r\n            var M = new Matrix();\r\n            if(this.sameSize(matrix)) {\r\n                this.eachElement(function (e, i, j) {\r\n                    var result = _.add(e.clone(), matrix.elements[i][j].clone());\r\n                    if(callback) {\r\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\r\n                    }\r\n                    M.set(i, j, result);\r\n                });\r\n            }\r\n            return M;\r\n        },\r\n        subtract: function (matrix, callback) {\r\n            var M = new Matrix();\r\n            if(this.sameSize(matrix)) {\r\n                this.eachElement(function (e, i, j) {\r\n                    var result = _.subtract(e.clone(), matrix.elements[i][j].clone());\r\n                    if(callback) {\r\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\r\n                    }\r\n                    M.set(i, j, result);\r\n                });\r\n            }\r\n            return M;\r\n        },\r\n        negate: function () {\r\n            this.each(function (e) {\r\n                return e.negate();\r\n            });\r\n            return this;\r\n        },\r\n        toVector: function () {\r\n            if(this.rows() === 1 || this.cols() === 1) {\r\n                var v = new Vector();\r\n                v.elements = this.elements;\r\n                return v;\r\n            }\r\n            return this;\r\n        },\r\n        toString: function (newline, to_decimal) {\r\n            var l = this.rows(),\r\n                    s = [];\r\n            newline = newline === undefined ? '\\n' : newline;\r\n            for(var i = 0; i < l; i++) {\r\n                s.push('[' + this.elements[i].map(function (x) {\r\n                    var v = to_decimal ? x.multiplier.toDecimal() : x.toString();\r\n                    return x !== undefined ? v : '';\r\n                }).join(',') + ']');\r\n            }\r\n            return 'matrix' + inBrackets(s.join(','));\r\n        },\r\n        text: function () {\r\n            return 'matrix(' + this.elements.toString('') + ')';\r\n        },\r\n        latex: function (option) {\r\n            var cols = this.cols(), elements = this.elements;\r\n            return format('\\\\begin{vmatrix}{0}\\\\end{vmatrix}', function () {\r\n                var tex = [];\r\n                for(var row in elements) {\r\n                    var row_tex = [];\r\n                    for(var i = 0; i < cols; i++) {\r\n                        row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));\r\n                    }\r\n                    tex.push(row_tex.join(' & '));\r\n                }\r\n                return tex.join(' \\\\cr ');\r\n            });\r\n        }\r\n    };\r\n    // aliases\r\n    Matrix.prototype.each = Matrix.prototype.eachElement;\r\n\r\n\r\n    function Set(set) {\r\n        this.elements = [];\r\n        // if the first object isn't an array, convert it to one.\r\n        if(!isVector(set))\r\n            set = Vector.fromArray(arguments);\r\n\r\n        if(set) {\r\n            var elements = set.elements;\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                this.add(elements[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    Set.fromArray = function (arr) {\r\n        function F(args) {\r\n            return Set.apply(this, args);\r\n        }\r\n        F.prototype = Set.prototype;\r\n\r\n        return new F(arr);\r\n    };\r\n\r\n    Set.prototype = {\r\n        add: function (x) {\r\n            if(!this.contains(x))\r\n                this.elements.push(x.clone());\r\n        },\r\n        contains: function (x) {\r\n            for(var i = 0; i < this.elements.length; i++) {\r\n                var e = this.elements[i];\r\n                if(x.equals(e))\r\n                    return true;\r\n            }\r\n            return false;\r\n        },\r\n        each: function (f) {\r\n            var elements = this.elements;\r\n            var set = new Set();\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                var e = elements[i];\r\n                f.call(this, e, set, i);\r\n            }\r\n            return set;\r\n        },\r\n        clone: function () {\r\n            var set = new Set();\r\n            this.each(function (e) {\r\n                set.add(e.clone());\r\n            });\r\n            return set;\r\n        },\r\n        union: function (set) {\r\n            var _union = this.clone();\r\n            set.each(function (e) {\r\n                _union.add(e);\r\n            });\r\n\r\n            return _union;\r\n        },\r\n        difference: function (set) {\r\n            var diff = this.clone();\r\n            set.each(function (e) {\r\n                diff.remove(e);\r\n            });\r\n            return diff;\r\n        },\r\n        remove: function (element) {\r\n            for(var i = 0, l = this.elements.length; i < l; i++) {\r\n                var e = this.elements[i];\r\n                if(e.equals(element)) {\r\n                    remove(this.elements, i);\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        intersection: function (set) {\r\n            var _intersection = new Set();\r\n            var A = this;\r\n            set.each(function (e) {\r\n                if(A.contains(e)) {\r\n                    _intersection.add(e);\r\n                }\r\n                ;\r\n            });\r\n\r\n            return _intersection;\r\n        },\r\n        intersects: function (set) {\r\n            return this.intersection(set).elements.length > 0;\r\n        },\r\n        is_subset: function (set) {\r\n            var elements = set.elements;\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                if(!this.contains(elements[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n        toString: function () {\r\n            return '{' + this.elements.join(',') + '}';\r\n        }\r\n    };\r\n\r\n//build ========================================================================\r\n    var Build = {\r\n        dependencies: {\r\n            _rename: {\r\n                'Math2.factorial': 'factorial'\r\n            },\r\n            factorial: {\r\n                'Math2.gamma': Math2.gamma\r\n            },\r\n            gamma_incomplete: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Li: {\r\n                'Math2.Ei': Math2.Ei,\r\n                'Math2.bigLog': Math2.bigLog,\r\n                'Frac': Frac\r\n            },\r\n            Ci: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Ei: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Si: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Shi: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Chi: {\r\n                'isInt': isInt,\r\n                'nround': nround,\r\n                'Math2.num_integrate': Math2.num_integrate\r\n            },\r\n            factor: {\r\n                'Math2.ifactor': Math2.ifactor,\r\n                'Symbol': Symbol\r\n            },\r\n            num_integrate: {\r\n                'Math2.simpson': Math2.simpson,\r\n                'nround': nround\r\n            },\r\n            fib: {\r\n                'even': even\r\n            }\r\n        },\r\n        /* Some functions need to be made numeric safe. Build checks if there's a\r\n         * reformat option and calls that instead when compiling the function string.\r\n         */\r\n        reformat: {\r\n            // this simply extends the build function\r\n            diff: function (symbol, deps) {\r\n                var v = symbol.args[1].toString();\r\n                var f = 'var f = ' + Build.build(symbol.args[0].toString(), [v]) + ';';\r\n                deps[1] += 'var diff = ' + Math2.diff.toString() + ';';\r\n                deps[1] += f;\r\n\r\n                return ['diff(f)(' + v + ')', deps];\r\n            }\r\n        },\r\n        getProperName: function (f) {\r\n            var map = {\r\n                continued_fraction: 'continuedFraction'\r\n            };\r\n            return map[f] || f;\r\n        },\r\n        // assumes that dependences are at max 2 levels\r\n        compileDependencies: function (f, deps) {\r\n            // grab the predefined dependiences\r\n            var dependencies = Build.dependencies[f];\r\n\r\n            // the dependency string\r\n            var dep_string = deps && deps[1] ? deps[1] : '';\r\n\r\n            // the functions to be replaced\r\n            var replacements = deps && deps[0] ? deps[0] : {};\r\n\r\n            // loop through them and add them to the list\r\n            for(var x in dependencies) {\r\n                if(typeof dependencies[x] === 'object')\r\n                    continue; // skip object\r\n                var components = x.split('.'); //Math.f becomes f\r\n                // if the function isn't part of an object then reference the function itself\r\n                dep_string += 'var ' + (components.length > 1 ? components[1] : components[0]) + '=' + dependencies[x] + ';';\r\n                replacements[x] = components.pop();\r\n            }\r\n\r\n            return [replacements, dep_string];\r\n        },\r\n        getArgsDeps: function (symbol, dependencies) {\r\n            var args = symbol.args;\r\n            for(var i = 0; i < args.length; i++) {\r\n                symbol.args[i].each(function (x) {\r\n                    if(x.group === FN)\r\n                        dependencies = Build.compileDependencies(x.fname, dependencies);\r\n                });\r\n            }\r\n            return dependencies;\r\n        },\r\n        build: function (symbol, arg_array) {\r\n            symbol = block('PARSE2NUMBER', function () {\r\n                return _.parse(symbol);\r\n            }, true);\r\n            var args = variables(symbol);\r\n            var supplements = [];\r\n            var dependencies = [];\r\n            var ftext = function (symbol, xports) {\r\n                //Fix for #545 - Parentheses confuse build.\r\n                if(symbol.fname === '') {\r\n                    symbol = Symbol.unwrapPARENS(symbol);\r\n                }\r\n                xports = xports || [];\r\n                var c = [],\r\n                        group = symbol.group,\r\n                        prefix = '';\r\n\r\n                var ftext_complex = function (group) {\r\n                    var d = group === CB ? '*' : '+',\r\n                            cc = [];\r\n\r\n                    for(var x in symbol.symbols) {\r\n                        var sym = symbol.symbols[x],\r\n                                ft = ftext(sym, xports)[0];\r\n                        // wrap it in brackets if it's group PL or CP\r\n                        if(sym.isComposite())\r\n                            ft = inBrackets(ft);\r\n                        cc.push(ft);\r\n                    }\r\n                    var retval = cc.join(d);\r\n                    retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;\r\n                    return retval;\r\n                },\r\n                        ftext_function = function (bn) {\r\n                            var retval;\r\n                            if(bn in Math)\r\n                                retval = 'Math.' + bn;\r\n                            else {\r\n                                bn = Build.getProperName(bn);\r\n                                if(supplements.indexOf(bn) === -1) { // make sure you're not adding the function twice\r\n                                    //Math2 functions aren't part of the standard javascript\r\n                                    //Math library and must be exported.\r\n                                    xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');\r\n                                    supplements.push(bn);\r\n                                }\r\n                                retval = bn;\r\n                            }\r\n                            retval = retval + inBrackets(symbol.args.map(function (x) {\r\n                                return ftext(x, xports)[0];\r\n                            }).join(','));\r\n\r\n                            return retval;\r\n                        };\r\n\r\n                // the multiplier\r\n                if(group === N)\r\n                    c.push(symbol.multiplier.toDecimal());\r\n                else if(symbol.multiplier.equals(-1))\r\n                    prefix = '-';\r\n                else if(!symbol.multiplier.equals(1))\r\n                    c.push(symbol.multiplier.toDecimal());\r\n                // the value\r\n                var value;\r\n\r\n                if(group === S || group === P)\r\n                    value = symbol.value;\r\n                else if(group === FN) {\r\n                    dependencies = Build.compileDependencies(symbol.fname, dependencies);\r\n                    dependencies = Build.getArgsDeps(symbol, dependencies);\r\n                    if(Build.reformat[symbol.fname]) {\r\n                        var components = Build.reformat[symbol.fname](symbol, dependencies);\r\n                        dependencies = components[1];\r\n                        value = components[0];\r\n                    }\r\n                    else {\r\n                        value = ftext_function(symbol.fname);\r\n                    }\r\n\r\n                }\r\n                else if(group === EX) {\r\n                    var pg = symbol.previousGroup;\r\n                    if(pg === N || pg === S)\r\n                        value = symbol.value;\r\n                    else if(pg === FN) {\r\n                        value = ftext_function(symbol.fname);\r\n                        dependencies = Build.compileDependencies(symbol.fname, dependencies);\r\n                        dependencies = Build.getArgsDeps(symbol, dependencies);\r\n                    }\r\n                    else\r\n                        value = ftext_complex(symbol.previousGroup);\r\n                }\r\n                else {\r\n                    value = ftext_complex(symbol.group);\r\n                }\r\n\r\n                if(symbol.group !== N && !symbol.power.equals(1)) {\r\n                    var pow = ftext(_.parse(symbol.power));\r\n                    xports.push(pow[1]);\r\n                    value = 'Math.pow' + inBrackets(value + ',' + pow[0]);\r\n                }\r\n\r\n                if(value)\r\n                    c.push(prefix + value);\r\n\r\n                return [c.join('*'), xports.join('').replace(/\\n+\\s+/g, ' ')];\r\n            };\r\n            if(arg_array) {\r\n                // Fix for issue #546\r\n                // Disable argument checking since it's a bit presumptuous.\r\n                // Consider f(x) = 5; If I explicitely pass in an argument array contain x \r\n                // this check will fail and complain since the function doesn't contain x.\r\n                /*\r\n                 for (var i = 0; i < args.length; i++) {\r\n                 var arg = args[i];\r\n                 if (arg_array.indexOf(arg) === -1)\r\n                 err(arg + ' not found in argument array');\r\n                 }\r\n                 */\r\n                args = arg_array;\r\n            }\r\n\r\n            var f_array = ftext(symbol);\r\n\r\n            // make all the substitutions;\r\n            for(var x in dependencies[0]) {\r\n                var alias = dependencies[0][x];\r\n                f_array[1] = f_array[1].replace(x, alias);\r\n                dependencies[1] = dependencies[1].replace(x, alias);\r\n            }\r\n\r\n            var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');\r\n\r\n            return f;\r\n        }\r\n    };\r\n\r\n\r\n//finalize =====================================================================\r\n    /* FINALIZE */\r\n    (function () {\r\n        reserveNames(_.CONSTANTS);\r\n        reserveNames(_.functions);\r\n        _.initConstants();\r\n        //bug fix for error but needs to be revisited\r\n        if(!_.error)\r\n            _.error = err;\r\n\r\n        //Store the log and log10 functions\r\n        Settings.LOG_FNS = {\r\n            log: _.functions['log'],\r\n            log10: _.functions['log10']\r\n        };\r\n\r\n    })();\r\n\r\n    /* END FINALIZE */\r\n\r\n//Core =========================================================================\r\n    var Utils = {\r\n        allSame: allSame,\r\n        allNumeric: allNumeric,\r\n        arguments2Array: arguments2Array,\r\n        arrayAddSlices: arrayAddSlices,\r\n        arrayClone: arrayClone,\r\n        arrayMax: arrayMax,\r\n        arrayMin: arrayMin,\r\n        arrayEqual: arrayEqual,\r\n        arrayUnique: arrayUnique,\r\n        arrayGetVariables: arrayGetVariables,\r\n        arraySum: arraySum,\r\n        block: block,\r\n        build: Build.build,\r\n        clearU: clearU,\r\n        comboSort: comboSort,\r\n        compare: compare,\r\n        convertToVector: convertToVector,\r\n        customError: customError,\r\n        customType: customType,\r\n        decompose_fn: decompose_fn,\r\n        each: each,\r\n        evaluate: evaluate,\r\n        even: even,\r\n        evenFraction: evenFraction,\r\n        fillHoles: fillHoles,\r\n        firstObject: firstObject,\r\n        format: format,\r\n        generatePrimes: generatePrimes,\r\n        getCoeffs: getCoeffs,\r\n        getU: getU,\r\n        importFunctions: importFunctions,\r\n        inBrackets: inBrackets,\r\n        isArray: isArray,\r\n        isExpression: isExpression,\r\n        isFraction: isFraction,\r\n        isInt: isInt,\r\n        isMatrix: isMatrix,\r\n        isNegative: isNegative,\r\n        isNumericSymbol: isNumericSymbol,\r\n        isPrime: isPrime,\r\n        isReserved: isReserved,\r\n        isSymbol: isSymbol,\r\n        isVariableSymbol: isVariableSymbol,\r\n        isVector: isVector,\r\n        keys: keys,\r\n        knownVariable: knownVariable,\r\n        nroots: nroots,\r\n        remove: remove,\r\n        reserveNames: reserveNames,\r\n        range: range,\r\n        round: nround,\r\n        sameSign: sameSign,\r\n        scientificToDecimal: scientificToDecimal,\r\n        separate: separate,\r\n        stringReplace: stringReplace,\r\n        text: text,\r\n        validateName: validateName,\r\n        variables: variables,\r\n        warn: warn\r\n    };\r\n\r\n    //This contains all the parts of nerdamer and enables nerdamer's internal functions\r\n    //to be used.\r\n    var C = {\r\n        groups: Groups,\r\n        Symbol: Symbol,\r\n        Expression: Expression,\r\n        Frac: Frac,\r\n        Vector: Vector,\r\n        Matrix: Matrix,\r\n        Parser: Parser,\r\n        Scientific: Scientific,\r\n        Fraction: Fraction,\r\n        Math2: Math2,\r\n        LaTeX: LaTeX,\r\n        Utils: Utils,\r\n        PARSER: _,\r\n        PARENTHESIS: PARENTHESIS,\r\n        Settings: Settings,\r\n        err: err,\r\n        bigInt: bigInt,\r\n        bigDec: bigDec,\r\n        exceptions: exceptions\r\n    };\r\n\r\n//libExports ===================================================================\r\n    /**\r\n     *\r\n     * @param {String} expression the expression to be evaluated\r\n     * @param {Object} subs the object containing the variable values\r\n     * @param {Integer} location a specific location in the equation list to\r\n     * insert the evaluated expression\r\n     * @param {String} option additional options\r\n     * @returns {Expression}\r\n     */\r\n    var libExports = function (expression, subs, option, location) {\r\n        // Initiate the numer flag\r\n        var numer = false;\r\n\r\n        // Is the user declaring a function?\r\n        var fndec = /^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\r\n        if(fndec)\r\n            return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);\r\n\r\n        // var variable, fn, args;\r\n        // Convert any expression passed in to a string\r\n        if(expression instanceof Expression)\r\n            expression = expression.toString();\r\n\r\n        // Convert it to an array for simplicity\r\n        if(!isArray(option)) {\r\n            option = typeof option === 'undefined' ? [] : [option];\r\n        }\r\n\r\n        option.forEach(function (o) {\r\n            // Turn on the numer flag if requested\r\n            if(o === 'numer') {\r\n                numer = true;\r\n                return;\r\n            }\r\n            // Wrap it in a function if requested. This only holds true for\r\n            // functions that take a single argument which is the expression\r\n            var f = _.functions[option];\r\n            // If there's a function and it takes a single argument, then wrap\r\n            // the expression in it\r\n            if(f && f[1] === 1) {\r\n                expression = `${o}(${expression})`;\r\n            }\r\n        });\r\n\r\n        var e = block('PARSE2NUMBER', function () {\r\n            return _.parse(expression, subs);\r\n        }, numer || Settings.PARSE2NUMBER);\r\n\r\n        if(location) {\r\n            EXPRESSIONS[location - 1] = e;\r\n        }\r\n        else {\r\n            EXPRESSIONS.push(e);\r\n        }\r\n\r\n        return new Expression(e);\r\n    };\r\n    /**\r\n     * Converts expression into rpn form\r\n     * @param {String} expression\r\n     * @returns {Token[]}\r\n     */\r\n    libExports.rpn = function (expression) {\r\n        return _.tokenize(_.toRPN(expression));\r\n    };\r\n\r\n    /**\r\n     * Generates LaTeX from expression string\r\n     * @param {String} e\r\n     * @param {object} opt\r\n     * @returns {String}\r\n     */\r\n    libExports.convertToLaTeX = function (e, opt) {\r\n        return _.toTeX(e, opt);\r\n    };\r\n\r\n    /**\r\n     * Converts latex to text - Very very very basic at the moment\r\n     * @param {String} e\r\n     * @returns {String}\r\n     */\r\n    libExports.convertFromLaTeX = function (e) {\r\n        var txt = LaTeX.parse(_.tokenize(e));\r\n        return new Expression(_.parse(txt));\r\n    };\r\n\r\n    /**\r\n     * Get the version of nerdamer or a loaded add-on\r\n     * @param {String} add_on - The add-on being checked\r\n     * @returns {String} returns the version of nerdamer\r\n     */\r\n    libExports.version = function (add_on) {\r\n        if(add_on) {\r\n            try {\r\n                return C[add_on].version;\r\n            }\r\n            catch(e) {\r\n                return \"No module named \" + add_on + \" found!\";\r\n            }\r\n        }\r\n        return version;\r\n    };\r\n\r\n    /**\r\n     * Get nerdamer generated warnings\r\n     * @returns {String[]}\r\n     */\r\n    libExports.getWarnings = function () {\r\n        return WARNINGS;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} constant The name of the constant to be set\r\n     * @param {mixed} value The value of the constant\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.setConstant = function (constant, value) {\r\n        validateName(constant);\r\n        if(!isReserved(constant)) {\r\n            //fix for issue #127\r\n            if(value === 'delete' || value === '') {\r\n                delete _.CONSTANTS[constant];\r\n            }\r\n            else {\r\n                if(isNaN(value))\r\n                    throw new NerdamerTypeError('Constant must be a number!');\r\n                _.CONSTANTS[constant] = value;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the value of a previously set constant\r\n     * @param {type} constant\r\n     * @returns {String}\r\n     */\r\n    libExports.getConstant = function (constant) {\r\n        return String(_.constant[constant]);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} name The name of the function\r\n     * @param {Array} params_array A list containing the parameter name of the functions\r\n     * @param {String} body The body of the function\r\n     * @returns {Boolean} returns true if succeeded and falls on fail\r\n     * @example nerdamer.setFunction('f',['x'], 'x^2+2');\r\n     */\r\n    libExports.setFunction = setFunction;\r\n\r\n    /**\r\n     *\r\n     * @returns {C} Exports the nerdamer core functions and objects\r\n     */\r\n    libExports.getCore = function () {\r\n        return C;\r\n    };\r\n\r\n    libExports.getExpression = libExports.getEquation = Expression.getExpression;\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} asArray The returned names are returned as an array if this is set to true;\r\n     * @returns {String|Array}\r\n     */\r\n    libExports.reserved = function (asArray) {\r\n        if(asArray) {\r\n            return RESERVED;\r\n        }\r\n        return RESERVED.join(', ');\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Integer} equation_number the number of the equation to clear.\r\n     * If 'all' is supplied then all equations are cleared\r\n     * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {\r\n        if(equation_number === 'all') {\r\n            EXPRESSIONS = [];\r\n        }\r\n        else if(equation_number === 'last') {\r\n            EXPRESSIONS.pop();\r\n        }\r\n        else if(equation_number === 'first') {\r\n            EXPRESSIONS.shift();\r\n        }\r\n        else {\r\n            var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\r\n            keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Alias for nerdamer.clear('all')\r\n     */\r\n    libExports.flush = function () {\r\n        this.clear('all');\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} asObject\r\n     * @param {Boolean} asLaTeX\r\n     * @param {String|String[]} option\r\n     * @returns {Array}\r\n     */\r\n    libExports.expressions = function (asObject, asLaTeX, option) {\r\n        var result = asObject ? {} : [];\r\n        for(var i = 0; i < EXPRESSIONS.length; i++) {\r\n            var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);\r\n            asObject ? result[i + 1] = eq : result.push(eq);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    //the method for registering modules\r\n    libExports.register = function (obj) {\r\n        var core = this.getCore();\r\n\r\n        if(isArray(obj)) {\r\n            for(var i = 0; i < obj.length; i++) {\r\n                if(obj)\r\n                    this.register(obj[i]);\r\n            }\r\n        }\r\n        else if(obj && Settings.exclude.indexOf(obj.name) === -1) {\r\n            //make sure all the dependencies are available\r\n            if(obj.dependencies) {\r\n                for(var i = 0; i < obj.dependencies.length; i++)\r\n                    if(!core[obj.dependencies[i]])\r\n                        throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));\r\n            }\r\n            //if no parent object is provided then the function does not have an address and cannot be called directly\r\n            var parent_obj = obj.parent,\r\n                    fn = obj.build.call(core); //call constructor to get function\r\n            if(parent_obj) {\r\n                if(!core[parent_obj])\r\n                    core[obj.parent] = {};\r\n\r\n                var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];\r\n                //attach the function to the core\r\n                ref_obj[obj.name] = fn;\r\n            }\r\n            if(obj.visible)\r\n                _.functions[obj.name] = [fn, obj.numargs]; //make the function available\r\n\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {String} name variable name\r\n     * @returns {boolean} validates if the profided string is a valid variable name\r\n     */\r\n    libExports.validateName = validateName;\r\n\r\n    /**\r\n     * @param {String} varname variable name\r\n     * @returns {boolean} validates if the profided string is a valid variable name\r\n     */\r\n    libExports.validVarName = function (varname) {\r\n        try {\r\n            validateName(varname);\r\n            return RESERVED.indexOf(varname) === -1;\r\n        }\r\n        catch(e) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {Array} Array of functions currently supported by nerdamer\r\n     */\r\n    libExports.supported = function () {\r\n        return keys(_.functions);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {Number} The number equations/expressions currently loaded\r\n     */\r\n    libExports.numEquations = libExports.numExpressions = function () {\r\n        return EXPRESSIONS.length;\r\n    };\r\n    /* END EXPORTS */\r\n\r\n    /**\r\n     *\r\n     * @param {String} v variable to be set\r\n     * @param {String} val value of variable. This can be a variable expression or number\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.setVar = function (v, val) {\r\n        validateName(v);\r\n        //check if it's not already a constant\r\n        if(v in _.CONSTANTS)\r\n            err('Cannot set value for constant ' + v);\r\n        if(val === 'delete' || val === '')\r\n            delete VARS[v];\r\n        else {\r\n            VARS[v] = isSymbol(val) ? val : _.parse(val);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the value of a set variable\r\n     * @param {type} v\r\n     * @returns {varies}\r\n     */\r\n    libExports.getVar = function (v) {\r\n        return VARS[v];\r\n    };\r\n    /**\r\n     * Clear the variables from the VARS object\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.clearVars = function () {\r\n        VARS = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Function} loader\r\n     * @returns {nerdamer}\r\n     */\r\n    libExports.load = function (loader) {\r\n        loader.call(this);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\r\n     * @param {String|String[]} option\r\n     * @returns {Object} Returns an object with the variables\r\n     */\r\n    libExports.getVars = function (output, option) {\r\n        output = output || 'text';\r\n        var variables = {};\r\n        if(output === 'object')\r\n            variables = VARS;\r\n        else {\r\n            for(var v in VARS) {\r\n                if(output === 'latex') {\r\n                    variables[v] = VARS[v].latex(option);\r\n                }\r\n                else if(output === 'text') {\r\n                    variables[v] = VARS[v].text(option);\r\n                }\r\n            }\r\n        }\r\n        return variables;\r\n    };\r\n\r\n    /**\r\n     * Set the value of a setting\r\n     * @param {String} setting The setting to be changed\r\n     * @param {boolean} value\r\n     */\r\n    libExports.set = function (setting, value) {\r\n        //current options:\r\n        //PARSE2NUMBER, suppress_errors\r\n        if(typeof setting === 'object')\r\n            for(var x in setting) {\r\n                libExports.set(x, setting[x]);\r\n            }\r\n\r\n        var disallowed = ['SAFE'];\r\n        if(disallowed.indexOf(setting) !== -1)\r\n            err('Cannot modify setting: ' + setting);\r\n\r\n        if(setting === 'PRECISION') {\r\n            bigDec.set({precision: value});\r\n            Settings.PRECISION = value;\r\n\r\n            // Avoid that nerdamer puts out garbage after 21 decimal place\r\n            if(value > 21) {\r\n                this.set('USE_BIG', true);\r\n            }\r\n        }\r\n        else if(setting === 'USE_LN' && value === true) {\r\n            //set log as LN\r\n            Settings.LOG = 'LN';\r\n            //set log10 as log\r\n            Settings.LOG10 = 'log';\r\n            //point the functions in the right direction\r\n            _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10\r\n            //the log10 function must be explicitly set\r\n            _.functions['log'][0] = function (x) {\r\n                if(x.isConstant())\r\n                    return new Symbol(Math.log10(x));\r\n                return _.symfunction(Settings.LOG10, [x]);\r\n            };\r\n            _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log\r\n\r\n            //remove log10\r\n            delete _.functions['log10'];\r\n        }\r\n        else\r\n            Settings[setting] = value;\r\n    };\r\n\r\n    /**\r\n     * Get the value of a setting\r\n     * @param {type} setting\r\n     * @returns {undefined}\r\n     */\r\n    libExports.get = function (setting) {\r\n        return Settings[setting];\r\n    };\r\n\r\n    /**\r\n     * This functions makes internal functions available externally\r\n     * @param {bool} override Override the functions when calling updateAPI if it exists\r\n     */\r\n    libExports.updateAPI = function (override) {\r\n        //Map internal functions to external ones\r\n        var linker = function (fname) {\r\n            return function () {\r\n                var args = [].slice.call(arguments);\r\n                for(var i = 0; i < args.length; i++)\r\n                    args[i] = _.parse(args[i]);\r\n                return new Expression(block('PARSE2NUMBER', function () {\r\n                    return _.callfunction(fname, args);\r\n                }));\r\n            };\r\n        };\r\n        //perform the mapping\r\n        for(var x in _.functions)\r\n            if(!(x in libExports) || override)\r\n                libExports[x] = linker(x);\r\n    };\r\n\r\n    libExports.replaceFunction = function (name, fn, num_args) {\r\n        var existing = _.functions[name];\r\n        var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\r\n        _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];\r\n    };\r\n\r\n    libExports.setOperator = function (operator, shift) {\r\n        _.setOperator(operator, shift);\r\n    };\r\n\r\n    libExports.getOperator = function (operator) {\r\n        return _.getOperator(operator);\r\n    };\r\n\r\n    libExports.aliasOperator = function (operator, withOperator) {\r\n        _.aliasOperator(operator, withOperator);\r\n    };\r\n\r\n    libExports.tree = function (expression) {\r\n        return _.tree(_.toRPN(_.tokenize(expression)));\r\n    };\r\n\r\n    libExports.htmlTree = function (expression, indent) {\r\n        var tree = this.tree(expression);\r\n\r\n        return '<div class=\"tree\">\\n' +\r\n                '    <ul>\\n' +\r\n                '        <li>\\n' +\r\n                tree.toHTML(3, indent) + '\\n' +\r\n                '        </li>\\n' +\r\n                '    </ul>\\n' +\r\n                '</div>';\r\n    };\r\n\r\n    libExports.addPeeker = function (name, f) {\r\n        if(_.peekers[name])\r\n            _.peekers[name].push(f);\r\n    };\r\n\r\n    libExports.removePeeker = function (name, f) {\r\n        remove(_.peekers[name], f);\r\n    };\r\n\r\n    libExports.parse = function (e) {\r\n        return String(e).split(';').map(function (x) {\r\n            return _.parse(x);\r\n        });\r\n    };\r\n\r\n    libExports.updateAPI();\r\n\r\n    return libExports; //Done\r\n//imports ======================================================================\r\n})({\r\n    //https://github.com/peterolson/BigInteger.js\r\n    bigInt: (function(){\r\n        var bigInt=function(undefined){\"use strict\";var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v===\"undefined\")return Integer[0];if(typeof radix!==\"undefined\")return+radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return-MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return[n];if(n<1e14)return[n%1e7,Math.floor(n/1e7)];return[n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b))}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1}else borrow=0;r[i]=difference}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else{r[i++]=difference;break}r[i]=difference}for(;i<a_l;i++){r[i]=a[i]}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b)}else{value=subtract(b,a);sign=!sign}value=arrayToSmall(value);if(typeof value===\"number\"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference}r=arrayToSmall(r);if(typeof r===\"number\"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function useKaratsuba(l1,l2){return-.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs)}if(useKaratsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];carry=0-a_i*a_i;for(var j=i;j<l;j++){a_j=a[j];product=2*(a_i*a_j)+r[i+j]+carry;carry=Math.floor(product/base);r[i+j]=product-carry*base}r[i+l]=carry}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit)}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1}else{remainder[shift+i]=borrow;borrow=0}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0}else{remainder[shift+i]=carry;carry=1}}borrow+=carry}result[shift]=quotientDigit}remainder=divModSmall(remainder,lambda)[0];return[arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--}while(guess);result.push(guess);part=subtract(part,check)}result.reverse();return[arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0}return[quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error(\"Cannot divide by zero\");if(self.isSmall){if(n.isSmall){return[new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return[Integer[0],self]}if(n.isSmall){if(b===1)return[self,Integer[0]];if(b==-1)return[self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient===\"number\"){if(self.sign!==n.sign)quotient=-quotient;return[new SmallInteger(quotient),new SmallInteger(remainder)]}return[new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs)}var comparison=compareAbs(a,b);if(comparison===-1)return[Integer[0],self];if(comparison===0)return[Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient===\"number\"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient)}else quotient=new BigInteger(quotient,qSign);if(typeof mod===\"number\"){if(mSign)mod=-mod;mod=new SmallInteger(mod)}else mod=new BigInteger(mod,mSign);return[quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return{quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error(\"The exponent \"+n.toString()+\" is too large.\");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b}if(b===0)break;b/=2;x=x.square()}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error(\"Cannot take modPow with modulus 0\");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod)}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return-1};BigInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return(this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return(this.value&1)===0};BigInteger.prototype.isOdd=function(){return(this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return(this.value&1)===1};BigInteger.prototype.isPositive=function(){return!this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(49))return true}function millerRabinTest(n,a){var nPrev=n.prev(),b=nPrev,r=0,d,t,i,x;while(b.isEven())b=b.divide(2),r++;next:for(i=0;i<a.length;i++){if(n.lesser(a[i]))continue;x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(d=r-1;d!=0;d--){x=x.square().mod(n);if(x.isUnit())return false;if(x.equals(nPrev))continue next}return false}return true}BigInteger.prototype.isPrime=function(strict){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var bits=n.bitLength();if(bits<=64)return millerRabinTest(n,[2,325,9375,28178,450775,9780504,1795265022]);var logN=Math.log(2)*bits;var t=Math.ceil(strict===true?2*Math.pow(logN,2):logN);for(var a=[],i=0;i<t;i++){a.push(bigInt(i+2))}return millerRabinTest(n,a)};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var t=iterations===undefined?5:iterations;for(var a=[],i=0;i<t;i++){a.push(bigInt.randBetween(2,n.minus(2)))}return millerRabinTest(n,a)};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR))}if(!r.equals(1))throw new Error(this.toString()+\" and \"+n.toString()+\" are not co-prime\");if(t.compare(0)===-1){t=t.add(n)}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(2*powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return(typeof n===\"number\"||typeof n===\"string\")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;if(result.isZero())return result;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero()||result.isNegative()&&result.isUnit())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xDigit=0,yDigit=0;var xDivMod=null,yDivMod=null;var result=[];while(!xRem.isZero()||!yRem.isZero()){xDivMod=divModAny(xRem,highestPower2);xDigit=xDivMod[1].toJSNumber();if(xSign){xDigit=highestPower2-1-xDigit}yDivMod=divModAny(yRem,highestPower2);yDigit=yDivMod[1].toJSNumber();if(ySign){yDigit=highestPower2-1-yDigit}xRem=xDivMod[0];yRem=yDivMod[0];result.push(fn(xDigit,yDigit))}var sum=fn(xSign?1:0,ySign?1:0)!==0?bigInt(-1):bigInt(0);for(var i=result.length-1;i>=0;i-=1){sum=sum.multiply(highestPower2).add(bigInt(result[i]))}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v===\"number\"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function integerLogarithm(value,base){if(base.compareTo(value)<=0){var tmp=integerLogarithm(value,base.square(base));var p=tmp.p;var e=tmp.e;var t=p.multiply(base);return t.compareTo(value)<=0?{p:t,e:e*2+1}:{p:p,e:e*2}}return{p:bigInt(1),e:0}}BigInteger.prototype.bitLength=function(){var n=this;if(n.compareTo(bigInt(0))<0){n=n.negate().subtract(bigInt(1))}if(n.compareTo(bigInt(0))===0){return bigInt(0)}return bigInt(integerLogarithm(n,bigInt(2)).e).add(bigInt(1))};SmallInteger.prototype.bitLength=BigInteger.prototype.bitLength;function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d)}while(a.isEven()){a=a.divide(roughLOB(a))}do{while(b.isEven()){b=b.divide(roughLOB(b))}if(a.greater(b)){t=b;b=a;a=t}b=b.subtract(a)}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low).add(1);if(range.isSmall)return low.add(Math.floor(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false}result=arrayToSmall(result);return low.add(typeof result===\"number\"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c===\"-\")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c===\"1\"&&absBase===1)continue;throw new Error(c+\" is not a valid digit in base \"+base+\".\")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]===\"-\";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c===\"<\"){var start=i;do{i++}while(text[i]!==\">\");digits.push(parseValue(text.slice(start+1,i)))}else throw new Error(c+\" is not a valid character\")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base)}return isNegative?val.negate():val}function stringify(digit){if(digit<=35){return\"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit)}return\"<\"+digit+\">\"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return{value:[0],isNegative:false};throw new Error(\"Cannot convert nonzero numbers to base 0.\")}if(base.equals(-1)){if(n.isZero())return{value:[0],isNegative:false};if(n.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-n)).map(Array.prototype.valueOf,[1,0])),isNegative:false};var arr=Array.apply(null,Array(+n-1)).map(Array.prototype.valueOf,[0,1]);arr.unshift([1]);return{value:[].concat.apply([],arr),isNegative:false}}var neg=false;if(n.isNegative()&&base.isPositive()){neg=true;n=n.abs()}if(base.equals(1)){if(n.isZero())return{value:[0],isNegative:false};return{value:Array.apply(null,Array(+n)).map(Number.prototype.valueOf,1),isNegative:neg}}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next()}out.push(digit.toJSNumber())}out.push(left.toJSNumber());return{value:out.reverse(),isNegative:neg}}function toBaseString(n,base){var arr=toBase(n,base);return(arr.isNegative?\"-\":\"\")+arr.value.map(stringify).join(\"\")}BigInteger.prototype.toArray=function(radix){return toBase(this,radix)};SmallInteger.prototype.toArray=function(radix){return toBase(this,radix)};BigInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!==10)return toBaseString(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros=\"0000000\",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit}var sign=this.sign?\"-\":\"\";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!=10)return toBaseString(this,radix);return String(this.value)};BigInteger.prototype.toJSON=SmallInteger.prototype.toJSON=function(){return this.toString()};BigInteger.prototype.valueOf=function(){return parseInt(this.toString(),10)};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw new Error(\"Invalid integer: \"+v)}var sign=v[0]===\"-\";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error(\"Invalid integer: \"+split.join(\"e\"));if(split.length===2){var exp=split[1];if(exp[0]===\"+\")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error(\"Invalid integer: \"+exp+\" is not a valid exponent.\");var text=split[0];var decimalPlace=text.indexOf(\".\");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1)}if(exp<0)throw new Error(\"Cannot include negative exponent part for integers\");text+=new Array(exp+1).join(\"0\");v=text}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error(\"Invalid integer: \"+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+\" is not an integer.\");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v===\"number\"){return parseNumberValue(v)}if(typeof v===\"string\"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i)}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if(typeof module!==\"undefined\"&&module.hasOwnProperty(\"exports\")){module.exports=bigInt}if(typeof define===\"function\"&&define.amd){define(\"big-integer\",[],function(){return bigInt})}\r\n        return bigInt;\r\n    })(),\r\n    /*\r\n     *  decimal.js v10.2.1\r\n     *  An arbitrary-precision Decimal type for JavaScript.\r\n     *  https://github.com/MikeMcl/decimal.js\r\n     *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n     *  MIT Licence\r\n     */\r\n    bigDec: function(n){\"use strict\";var e,i,t,r,s=9e15,o=1e9,u=\"0123456789abcdef\",c=\"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",f=\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",a={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-s,maxE:s,crypto:!1},h=!0,d=\"[DecimalError] \",l=d+\"Invalid argument: \",p=d+\"Precision limit exceeded\",g=d+\"crypto unavailable\",m=Math.floor,w=Math.pow,v=/^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,N=/^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,b=/^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,E=/^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,x=1e7,y=7,M=c.length-1,q=f.length-1,O={name:\"[object Decimal]\"};function D(n){var e,i,t,r=n.length-1,s=\"\",o=n[0];if(r>0){for(s+=o,e=1;e<r;e++)t=n[e]+\"\",(i=y-t.length)&&(s+=k(i)),s+=t;o=n[e],(i=y-(t=o+\"\").length)&&(s+=k(i))}else if(0===o)return\"0\";for(;o%10==0;)o/=10;return s+o}function F(n,e,i){if(n!==~~n||n<e||n>i)throw Error(l+n)}function A(n,e,i,t){var r,s,o,u;for(s=n[0];s>=10;s/=10)--e;return--e<0?(e+=y,r=0):(r=Math.ceil((e+1)/y),e%=y),s=w(10,y-e),u=n[r]%s|0,null==t?e<3?(0==e?u=u/100|0:1==e&&(u=u/10|0),o=i<4&&99999==u||i>3&&49999==u||5e4==u||0==u):o=(i<4&&u+1==s||i>3&&u+1==s/2)&&(n[r+1]/s/100|0)==w(10,e-2)-1||(u==s/2||0==u)&&0==(n[r+1]/s/100|0):e<4?(0==e?u=u/1e3|0:1==e?u=u/100|0:2==e&&(u=u/10|0),o=(t||i<4)&&9999==u||!t&&i>3&&4999==u):o=((t||i<4)&&u+1==s||!t&&i>3&&u+1==s/2)&&(n[r+1]/s/1e3|0)==w(10,e-3)-1,o}function S(n,e,i){for(var t,r,s=[0],o=0,c=n.length;o<c;){for(r=s.length;r--;)s[r]*=e;for(s[0]+=u.indexOf(n.charAt(o++)),t=0;t<s.length;t++)s[t]>i-1&&(void 0===s[t+1]&&(s[t+1]=0),s[t+1]+=s[t]/i|0,s[t]%=i)}return s.reverse()}O.absoluteValue=O.abs=function(){var n=new this.constructor(this);return n.s<0&&(n.s=1),P(n)},O.ceil=function(){return P(new this.constructor(this),this.e+1,2)},O.comparedTo=O.cmp=function(n){var e,i,t,r,s=this,o=s.d,u=(n=new s.constructor(n)).d,c=s.s,f=n.s;if(!o||!u)return c&&f?c!==f?c:o===u?0:!o^c<0?1:-1:NaN;if(!o[0]||!u[0])return o[0]?c:u[0]?-f:0;if(c!==f)return c;if(s.e!==n.e)return s.e>n.e^c<0?1:-1;for(e=0,i=(t=o.length)<(r=u.length)?t:r;e<i;++e)if(o[e]!==u[e])return o[e]>u[e]^c<0?1:-1;return t===r?0:t>r^c<0?1:-1},O.cosine=O.cos=function(){var n,e,i=this,t=i.constructor;return i.d?i.d[0]?(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t,r=e.d.length;r<32?(i=Math.ceil(r/3),t=(1/z(4,i)).toString()):(i=16,t=\"2.3283064365386962890625e-10\");n.precision+=i,e=J(n,1,e.times(t),new n(1));for(var s=i;s--;){var o=e.times(e);e=o.times(o).minus(o).times(8).plus(1)}return n.precision-=i,e}(t,G(t,i)),t.precision=n,t.rounding=e,P(2==r||3==r?i.neg():i,n,e,!0)):new t(1):new t(NaN)},O.cubeRoot=O.cbrt=function(){var n,e,i,t,r,s,o,u,c,f,a=this,d=a.constructor;if(!a.isFinite()||a.isZero())return new d(a);for(h=!1,(s=a.s*w(a.s*a,1/3))&&Math.abs(s)!=1/0?t=new d(s.toString()):(i=D(a.d),(s=((n=a.e)-i.length+1)%3)&&(i+=1==s||-2==s?\"0\":\"00\"),s=w(i,1/3),n=m((n+1)/3)-(n%3==(n<0?-1:2)),(t=new d(i=s==1/0?\"5e\"+n:(i=s.toExponential()).slice(0,i.indexOf(\"e\")+1)+n)).s=a.s),o=(n=d.precision)+3;;)if(f=(c=(u=t).times(u).times(u)).plus(a),t=Z(f.plus(a).times(u),f.plus(c),o+2,1),D(u.d).slice(0,o)===(i=D(t.d)).slice(0,o)){if(\"9999\"!=(i=i.slice(o-3,o+1))&&(r||\"4999\"!=i)){+i&&(+i.slice(1)||\"5\"!=i.charAt(0))||(P(t,n+1,1),e=!t.times(t).times(t).eq(a));break}if(!r&&(P(u,n+1,0),u.times(u).times(u).eq(a))){t=u;break}o+=4,r=1}return h=!0,P(t,n,d.rounding,e)},O.decimalPlaces=O.dp=function(){var n,e=this.d,i=NaN;if(e){if(i=((n=e.length-1)-m(this.e/y))*y,n=e[n])for(;n%10==0;n/=10)i--;i<0&&(i=0)}return i},O.dividedBy=O.div=function(n){return Z(this,new this.constructor(n))},O.dividedToIntegerBy=O.divToInt=function(n){var e=this.constructor;return P(Z(this,new e(n),0,1,1),e.precision,e.rounding)},O.equals=O.eq=function(n){return 0===this.cmp(n)},O.floor=function(){return P(new this.constructor(this),this.e+1,3)},O.greaterThan=O.gt=function(n){return this.cmp(n)>0},O.greaterThanOrEqualTo=O.gte=function(n){var e=this.cmp(n);return 1==e||0===e},O.hyperbolicCosine=O.cosh=function(){var n,e,i,t,r,s=this,o=s.constructor,u=new o(1);if(!s.isFinite())return new o(s.s?1/0:NaN);if(s.isZero())return u;i=o.precision,t=o.rounding,o.precision=i+Math.max(s.e,s.sd())+4,o.rounding=1,(r=s.d.length)<32?e=(1/z(4,n=Math.ceil(r/3))).toString():(n=16,e=\"2.3283064365386962890625e-10\"),s=J(o,1,s.times(e),new o(1),!0);for(var c,f=n,a=new o(8);f--;)c=s.times(s),s=u.minus(c.times(a.minus(c.times(a))));return P(s,o.precision=i,o.rounding=t,!0)},O.hyperbolicSine=O.sinh=function(){var n,e,i,t,r=this,s=r.constructor;if(!r.isFinite()||r.isZero())return new s(r);if(e=s.precision,i=s.rounding,s.precision=e+Math.max(r.e,r.sd())+4,s.rounding=1,(t=r.d.length)<3)r=J(s,2,r,r,!0);else{n=(n=1.4*Math.sqrt(t))>16?16:0|n,r=J(s,2,r=r.times(1/z(5,n)),r,!0);for(var o,u=new s(5),c=new s(16),f=new s(20);n--;)o=r.times(r),r=r.times(u.plus(o.times(c.times(o).plus(f))))}return s.precision=e,s.rounding=i,P(r,e,i,!0)},O.hyperbolicTangent=O.tanh=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+7,t.rounding=1,Z(i.sinh(),i.cosh(),t.precision=n,t.rounding=e)):new t(i.s)},O.inverseCosine=O.acos=function(){var n,e=this,i=e.constructor,t=e.abs().cmp(1),r=i.precision,s=i.rounding;return-1!==t?0===t?e.isNeg()?U(i,r,s):new i(0):new i(NaN):e.isZero()?U(i,r+4,s).times(.5):(i.precision=r+6,i.rounding=1,e=e.asin(),n=U(i,r+4,s).times(.5),i.precision=r,i.rounding=s,n.minus(e))},O.inverseHyperbolicCosine=O.acosh=function(){var n,e,i=this,t=i.constructor;return i.lte(1)?new t(i.eq(1)?0:NaN):i.isFinite()?(n=t.precision,e=t.rounding,t.precision=n+Math.max(Math.abs(i.e),i.sd())+4,t.rounding=1,h=!1,i=i.times(i).minus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln()):new t(i)},O.inverseHyperbolicSine=O.asinh=function(){var n,e,i=this,t=i.constructor;return!i.isFinite()||i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+2*Math.max(Math.abs(i.e),i.sd())+6,t.rounding=1,h=!1,i=i.times(i).plus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln())},O.inverseHyperbolicTangent=O.atanh=function(){var n,e,i,t,r=this,s=r.constructor;return r.isFinite()?r.e>=0?new s(r.abs().eq(1)?r.s/0:r.isZero()?r:NaN):(n=s.precision,e=s.rounding,t=r.sd(),Math.max(t,n)<2*-r.e-1?P(new s(r),n,e,!0):(s.precision=i=t-r.e,r=Z(r.plus(1),new s(1).minus(r),i+n,1),s.precision=n+4,s.rounding=1,r=r.ln(),s.precision=n,s.rounding=e,r.times(.5))):new s(NaN)},O.inverseSine=O.asin=function(){var n,e,i,t,r=this,s=r.constructor;return r.isZero()?new s(r):(e=r.abs().cmp(1),i=s.precision,t=s.rounding,-1!==e?0===e?((n=U(s,i+4,t).times(.5)).s=r.s,n):new s(NaN):(s.precision=i+6,s.rounding=1,r=r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(),s.precision=i,s.rounding=t,r.times(2)))},O.inverseTangent=O.atan=function(){var n,e,i,t,r,s,o,u,c,f=this,a=f.constructor,d=a.precision,l=a.rounding;if(f.isFinite()){if(f.isZero())return new a(f);if(f.abs().eq(1)&&d+4<=q)return(o=U(a,d+4,l).times(.25)).s=f.s,o}else{if(!f.s)return new a(NaN);if(d+4<=q)return(o=U(a,d+4,l).times(.5)).s=f.s,o}for(a.precision=u=d+10,a.rounding=1,n=i=Math.min(28,u/y+2|0);n;--n)f=f.div(f.times(f).plus(1).sqrt().plus(1));for(h=!1,e=Math.ceil(u/y),t=1,c=f.times(f),o=new a(f),r=f;-1!==n;)if(r=r.times(c),s=o.minus(r.div(t+=2)),r=r.times(c),void 0!==(o=s.plus(r.div(t+=2))).d[e])for(n=e;o.d[n]===s.d[n]&&n--;);return i&&(o=o.times(2<<i-1)),h=!0,P(o,a.precision=d,a.rounding=l,!0)},O.isFinite=function(){return!!this.d},O.isInteger=O.isInt=function(){return!!this.d&&m(this.e/y)>this.d.length-2},O.isNaN=function(){return!this.s},O.isNegative=O.isNeg=function(){return this.s<0},O.isPositive=O.isPos=function(){return this.s>0},O.isZero=function(){return!!this.d&&0===this.d[0]},O.lessThan=O.lt=function(n){return this.cmp(n)<0},O.lessThanOrEqualTo=O.lte=function(n){return this.cmp(n)<1},O.logarithm=O.log=function(n){var e,i,t,r,s,o,u,c,f=this.constructor,a=f.precision,d=f.rounding;if(null==n)n=new f(10),e=!0;else{if(i=(n=new f(n)).d,n.s<0||!i||!i[0]||n.eq(1))return new f(NaN);e=n.eq(10)}if(i=this.d,this.s<0||!i||!i[0]||this.eq(1))return new f(i&&!i[0]?-1/0:1!=this.s?NaN:i?0:1/0);if(e)if(i.length>1)s=!0;else{for(r=i[0];r%10==0;)r/=10;s=1!==r}if(h=!1,o=V(this,u=a+5),t=e?T(f,u+10):V(n,u),A((c=Z(o,t,u,1)).d,r=a,d))do{if(o=V(this,u+=10),t=e?T(f,u+10):V(n,u),c=Z(o,t,u,1),!s){+D(c.d).slice(r+1,r+15)+1==1e14&&(c=P(c,a+1,0));break}}while(A(c.d,r+=10,d));return h=!0,P(c,a,d)},O.minus=O.sub=function(n){var e,i,t,r,s,o,u,c,f,a,d,l,p=this,g=p.constructor;if(n=new g(n),!p.d||!n.d)return p.s&&n.s?p.d?n.s=-n.s:n=new g(n.d||p.s!==n.s?p:NaN):n=new g(NaN),n;if(p.s!=n.s)return n.s=-n.s,p.plus(n);if(f=p.d,l=n.d,u=g.precision,c=g.rounding,!f[0]||!l[0]){if(l[0])n.s=-n.s;else{if(!f[0])return new g(3===c?-0:0);n=new g(p)}return h?P(n,u,c):n}if(i=m(n.e/y),a=m(p.e/y),f=f.slice(),s=a-i){for((d=s<0)?(e=f,s=-s,o=l.length):(e=l,i=a,o=f.length),s>(t=Math.max(Math.ceil(u/y),o)+2)&&(s=t,e.length=1),e.reverse(),t=s;t--;)e.push(0);e.reverse()}else{for((d=(t=f.length)<(o=l.length))&&(o=t),t=0;t<o;t++)if(f[t]!=l[t]){d=f[t]<l[t];break}s=0}for(d&&(e=f,f=l,l=e,n.s=-n.s),o=f.length,t=l.length-o;t>0;--t)f[o++]=0;for(t=l.length;t>s;){if(f[--t]<l[t]){for(r=t;r&&0===f[--r];)f[r]=x-1;--f[r],f[t]+=x}f[t]-=l[t]}for(;0===f[--o];)f.pop();for(;0===f[0];f.shift())--i;return f[0]?(n.d=f,n.e=L(f,i),h?P(n,u,c):n):new g(3===c?-0:0)},O.modulo=O.mod=function(n){var e,i=this,t=i.constructor;return n=new t(n),!i.d||!n.s||n.d&&!n.d[0]?new t(NaN):!n.d||i.d&&!i.d[0]?P(new t(i),t.precision,t.rounding):(h=!1,9==t.modulo?(e=Z(i,n.abs(),0,3,1)).s*=n.s:e=Z(i,n,0,t.modulo,1),e=e.times(n),h=!0,i.minus(e))},O.naturalExponential=O.exp=function(){return B(this)},O.naturalLogarithm=O.ln=function(){return V(this)},O.negated=O.neg=function(){var n=new this.constructor(this);return n.s=-n.s,P(n)},O.plus=O.add=function(n){var e,i,t,r,s,o,u,c,f,a,d=this,l=d.constructor;if(n=new l(n),!d.d||!n.d)return d.s&&n.s?d.d||(n=new l(n.d||d.s===n.s?d:NaN)):n=new l(NaN),n;if(d.s!=n.s)return n.s=-n.s,d.minus(n);if(f=d.d,a=n.d,u=l.precision,c=l.rounding,!f[0]||!a[0])return a[0]||(n=new l(d)),h?P(n,u,c):n;if(s=m(d.e/y),t=m(n.e/y),f=f.slice(),r=s-t){for(r<0?(i=f,r=-r,o=a.length):(i=a,t=s,o=f.length),r>(o=(s=Math.ceil(u/y))>o?s+1:o+1)&&(r=o,i.length=1),i.reverse();r--;)i.push(0);i.reverse()}for((o=f.length)-(r=a.length)<0&&(r=o,i=a,a=f,f=i),e=0;r;)e=(f[--r]=f[r]+a[r]+e)/x|0,f[r]%=x;for(e&&(f.unshift(e),++t),o=f.length;0==f[--o];)f.pop();return n.d=f,n.e=L(f,t),h?P(n,u,c):n},O.precision=O.sd=function(n){var e,i=this;if(void 0!==n&&n!==!!n&&1!==n&&0!==n)throw Error(l+n);return i.d?(e=_(i.d),n&&i.e+1>e&&(e=i.e+1)):e=NaN,e},O.round=function(){var n=this,e=n.constructor;return P(new e(n),n.e+1,e.rounding)},O.sine=O.sin=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t=e.d.length;if(t<3)return J(n,2,e,e);i=(i=1.4*Math.sqrt(t))>16?16:0|i,e=e.times(1/z(5,i)),e=J(n,2,e,e);for(var r,s=new n(5),o=new n(16),u=new n(20);i--;)r=e.times(e),e=e.times(s.plus(r.times(o.times(r).minus(u))));return e}(t,G(t,i)),t.precision=n,t.rounding=e,P(r>2?i.neg():i,n,e,!0)):new t(NaN)},O.squareRoot=O.sqrt=function(){var n,e,i,t,r,s,o=this,u=o.d,c=o.e,f=o.s,a=o.constructor;if(1!==f||!u||!u[0])return new a(!f||f<0&&(!u||u[0])?NaN:u?o:1/0);for(h=!1,0==(f=Math.sqrt(+o))||f==1/0?(((e=D(u)).length+c)%2==0&&(e+=\"0\"),f=Math.sqrt(e),c=m((c+1)/2)-(c<0||c%2),t=new a(e=f==1/0?\"5e\"+c:(e=f.toExponential()).slice(0,e.indexOf(\"e\")+1)+c)):t=new a(f.toString()),i=(c=a.precision)+3;;)if(t=(s=t).plus(Z(o,s,i+2,1)).times(.5),D(s.d).slice(0,i)===(e=D(t.d)).slice(0,i)){if(\"9999\"!=(e=e.slice(i-3,i+1))&&(r||\"4999\"!=e)){+e&&(+e.slice(1)||\"5\"!=e.charAt(0))||(P(t,c+1,1),n=!t.times(t).eq(o));break}if(!r&&(P(s,c+1,0),s.times(s).eq(o))){t=s;break}i+=4,r=1}return h=!0,P(t,c,a.rounding,n)},O.tangent=O.tan=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+10,t.rounding=1,(i=i.sin()).s=1,i=Z(i,new t(1).minus(i.times(i)).sqrt(),n+10,0),t.precision=n,t.rounding=e,P(2==r||4==r?i.neg():i,n,e,!0)):new t(NaN)},O.times=O.mul=function(n){var e,i,t,r,s,o,u,c,f,a=this,d=a.constructor,l=a.d,p=(n=new d(n)).d;if(n.s*=a.s,!(l&&l[0]&&p&&p[0]))return new d(!n.s||l&&!l[0]&&!p||p&&!p[0]&&!l?NaN:l&&p?0*n.s:n.s/0);for(i=m(a.e/y)+m(n.e/y),(c=l.length)<(f=p.length)&&(s=l,l=p,p=s,o=c,c=f,f=o),s=[],t=o=c+f;t--;)s.push(0);for(t=f;--t>=0;){for(e=0,r=c+t;r>t;)u=s[r]+p[t]*l[r-t-1]+e,s[r--]=u%x|0,e=u/x|0;s[r]=(s[r]+e)%x|0}for(;!s[--o];)s.pop();return e?++i:s.shift(),n.d=s,n.e=L(s,i),h?P(n,d.precision,d.rounding):n},O.toBinary=function(n,e){return K(this,2,n,e)},O.toDecimalPlaces=O.toDP=function(n,e){var i=this,t=i.constructor;return i=new t(i),void 0===n?i:(F(n,0,o),void 0===e?e=t.rounding:F(e,0,8),P(i,n+i.e+1,e))},O.toExponential=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,!0):(F(n,0,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n+1,e),!0,n+1)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toFixed=function(n,e){var i,t,r=this,s=r.constructor;return void 0===n?i=R(r):(F(n,0,o),void 0===e?e=s.rounding:F(e,0,8),i=R(t=P(new s(r),n+r.e+1,e),!1,n+t.e+1)),r.isNeg()&&!r.isZero()?\"-\"+i:i},O.toFraction=function(n){var e,i,t,r,s,o,u,c,f,a,d,p,g=this,m=g.d,v=g.constructor;if(!m)return new v(g);if(f=i=new v(1),t=c=new v(0),o=(s=(e=new v(t)).e=_(m)-g.e-1)%y,e.d[0]=w(10,o<0?y+o:o),null==n)n=s>0?e:f;else{if(!(u=new v(n)).isInt()||u.lt(f))throw Error(l+u);n=u.gt(e)?s>0?e:f:u}for(h=!1,u=new v(D(m)),a=v.precision,v.precision=s=m.length*y*2;d=Z(u,e,0,1,1),1!=(r=i.plus(d.times(t))).cmp(n);)i=t,t=r,r=f,f=c.plus(d.times(r)),c=r,r=e,e=u.minus(d.times(r)),u=r;return r=Z(n.minus(i),t,0,1,1),c=c.plus(r.times(f)),i=i.plus(r.times(t)),c.s=f.s=g.s,p=Z(f,t,s,1).minus(g).abs().cmp(Z(c,i,s,1).minus(g).abs())<1?[f,t]:[c,i],v.precision=a,h=!0,p},O.toHexadecimal=O.toHex=function(n,e){return K(this,16,n,e)},O.toNearest=function(n,e){var i=this,t=i.constructor;if(i=new t(i),null==n){if(!i.d)return i;n=new t(1),e=t.rounding}else{if(n=new t(n),void 0===e?e=t.rounding:F(e,0,8),!i.d)return n.s?i:n;if(!n.d)return n.s&&(n.s=i.s),n}return n.d[0]?(h=!1,i=Z(i,n,0,e,1).times(n),h=!0,P(i)):(n.s=i.s,i=n),i},O.toNumber=function(){return+this},O.toOctal=function(n,e){return K(this,8,n,e)},O.toPower=O.pow=function(n){var e,i,t,r,s,o,u=this,c=u.constructor,f=+(n=new c(n));if(!(u.d&&n.d&&u.d[0]&&n.d[0]))return new c(w(+u,f));if((u=new c(u)).eq(1))return u;if(t=c.precision,s=c.rounding,n.eq(1))return P(u,t,s);if((e=m(n.e/y))>=n.d.length-1&&(i=f<0?-f:f)<=9007199254740991)return r=C(c,u,i,t),n.s<0?new c(1).div(r):P(r,t,s);if((o=u.s)<0){if(e<n.d.length-1)return new c(NaN);if(0==(1&n.d[e])&&(o=1),0==u.e&&1==u.d[0]&&1==u.d.length)return u.s=o,u}return(e=0!=(i=w(+u,f))&&isFinite(i)?new c(i+\"\").e:m(f*(Math.log(\"0.\"+D(u.d))/Math.LN10+u.e+1)))>c.maxE+1||e<c.minE-1?new c(e>0?o/0:0):(h=!1,c.rounding=u.s=1,i=Math.min(12,(e+\"\").length),(r=B(n.times(V(u,t+i)),t)).d&&A((r=P(r,t+5,1)).d,t,s)&&(e=t+10,+D((r=P(B(n.times(V(u,e+i)),e),e+5,1)).d).slice(t+1,t+15)+1==1e14&&(r=P(r,t+1,0))),r.s=o,h=!0,c.rounding=s,P(r,t,s))},O.toPrecision=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,t.e<=r.toExpNeg||t.e>=r.toExpPos):(F(n,1,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n,e),n<=t.e||t.e<=r.toExpNeg,n)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toSignificantDigits=O.toSD=function(n,e){var i=this.constructor;return void 0===n?(n=i.precision,e=i.rounding):(F(n,1,o),void 0===e?e=i.rounding:F(e,0,8)),P(new i(this),n,e)},O.toString=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()&&!n.isZero()?\"-\"+i:i},O.truncated=O.trunc=function(){return P(new this.constructor(this),this.e+1,1)},O.valueOf=O.toJSON=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()?\"-\"+i:i};var Z=function(){function n(n,e,i){var t,r=0,s=n.length;for(n=n.slice();s--;)t=n[s]*e+r,n[s]=t%i|0,r=t/i|0;return r&&n.unshift(r),n}function e(n,e,i,t){var r,s;if(i!=t)s=i>t?1:-1;else for(r=s=0;r<i;r++)if(n[r]!=e[r]){s=n[r]>e[r]?1:-1;break}return s}function t(n,e,i,t){for(var r=0;i--;)n[i]-=r,r=n[i]<e[i]?1:0,n[i]=r*t+n[i]-e[i];for(;!n[0]&&n.length>1;)n.shift()}return function(r,s,o,u,c,f){var a,h,d,l,p,g,w,v,N,b,E,M,q,O,D,F,A,S,Z,R,L=r.constructor,T=r.s==s.s?1:-1,U=r.d,_=s.d;if(!(U&&U[0]&&_&&_[0]))return new L(r.s&&s.s&&(U?!_||U[0]!=_[0]:_)?U&&0==U[0]||!_?0*T:T/0:NaN);for(f?(p=1,h=r.e-s.e):(f=x,p=y,h=m(r.e/p)-m(s.e/p)),Z=_.length,A=U.length,b=(N=new L(T)).d=[],d=0;_[d]==(U[d]||0);d++);if(_[d]>(U[d]||0)&&h--,null==o?(O=o=L.precision,u=L.rounding):O=c?o+(r.e-s.e)+1:o,O<0)b.push(1),g=!0;else{if(O=O/p+2|0,d=0,1==Z){for(l=0,_=_[0],O++;(d<A||l)&&O--;d++)D=l*f+(U[d]||0),b[d]=D/_|0,l=D%_|0;g=l||d<A}else{for((l=f/(_[0]+1)|0)>1&&(_=n(_,l,f),U=n(U,l,f),Z=_.length,A=U.length),F=Z,M=(E=U.slice(0,Z)).length;M<Z;)E[M++]=0;(R=_.slice()).unshift(0),S=_[0],_[1]>=f/2&&++S;do{l=0,(a=e(_,E,Z,M))<0?(q=E[0],Z!=M&&(q=q*f+(E[1]||0)),(l=q/S|0)>1?(l>=f&&(l=f-1),1==(a=e(w=n(_,l,f),E,v=w.length,M=E.length))&&(l--,t(w,Z<v?R:_,v,f))):(0==l&&(a=l=1),w=_.slice()),(v=w.length)<M&&w.unshift(0),t(E,w,M,f),-1==a&&(a=e(_,E,Z,M=E.length))<1&&(l++,t(E,Z<M?R:_,M,f)),M=E.length):0===a&&(l++,E=[0]),b[d++]=l,a&&E[0]?E[M++]=U[F]||0:(E=[U[F]],M=1)}while((F++<A||void 0!==E[0])&&O--);g=void 0!==E[0]}b[0]||b.shift()}if(1==p)N.e=h,i=g;else{for(d=1,l=b[0];l>=10;l/=10)d++;N.e=d+h*p-1,P(N,c?o+N.e+1:o,u,g)}return N}}();function P(n,e,i,t){var r,s,o,u,c,f,a,d,l,p=n.constructor;n:if(null!=e){if(!(d=n.d))return n;for(r=1,u=d[0];u>=10;u/=10)r++;if((s=e-r)<0)s+=y,o=e,c=(a=d[l=0])/w(10,r-o-1)%10|0;else if((l=Math.ceil((s+1)/y))>=(u=d.length)){if(!t)break n;for(;u++<=l;)d.push(0);a=c=0,r=1,o=(s%=y)-y+1}else{for(a=u=d[l],r=1;u>=10;u/=10)r++;c=(o=(s%=y)-y+r)<0?0:a/w(10,r-o-1)%10|0}if(t=t||e<0||void 0!==d[l+1]||(o<0?a:a%w(10,r-o-1)),f=i<4?(c||t)&&(0==i||i==(n.s<0?3:2)):c>5||5==c&&(4==i||t||6==i&&(s>0?o>0?a/w(10,r-o):0:d[l-1])%10&1||i==(n.s<0?8:7)),e<1||!d[0])return d.length=0,f?(e-=n.e+1,d[0]=w(10,(y-e%y)%y),n.e=-e||0):d[0]=n.e=0,n;if(0==s?(d.length=l,u=1,l--):(d.length=l+1,u=w(10,y-s),d[l]=o>0?(a/w(10,r-o)%w(10,o)|0)*u:0),f)for(;;){if(0==l){for(s=1,o=d[0];o>=10;o/=10)s++;for(o=d[0]+=u,u=1;o>=10;o/=10)u++;s!=u&&(n.e++,d[0]==x&&(d[0]=1));break}if(d[l]+=u,d[l]!=x)break;d[l--]=0,u=1}for(s=d.length;0===d[--s];)d.pop()}return h&&(n.e>p.maxE?(n.d=null,n.e=NaN):n.e<p.minE&&(n.e=0,n.d=[0])),n}function R(n,e,i){if(!n.isFinite())return j(n);var t,r=n.e,s=D(n.d),o=s.length;return e?(i&&(t=i-o)>0?s=s.charAt(0)+\".\"+s.slice(1)+k(t):o>1&&(s=s.charAt(0)+\".\"+s.slice(1)),s=s+(n.e<0?\"e\":\"e+\")+n.e):r<0?(s=\"0.\"+k(-r-1)+s,i&&(t=i-o)>0&&(s+=k(t))):r>=o?(s+=k(r+1-o),i&&(t=i-r-1)>0&&(s=s+\".\"+k(t))):((t=r+1)<o&&(s=s.slice(0,t)+\".\"+s.slice(t)),i&&(t=i-o)>0&&(r+1===o&&(s+=\".\"),s+=k(t))),s}function L(n,e){var i=n[0];for(e*=y;i>=10;i/=10)e++;return e}function T(n,e,i){if(e>M)throw h=!0,i&&(n.precision=i),Error(p);return P(new n(c),e,1,!0)}function U(n,e,i){if(e>q)throw Error(p);return P(new n(f),e,i,!0)}function _(n){var e=n.length-1,i=e*y+1;if(e=n[e]){for(;e%10==0;e/=10)i--;for(e=n[0];e>=10;e/=10)i++}return i}function k(n){for(var e=\"\";n--;)e+=\"0\";return e}function C(n,e,i,t){var r,s=new n(1),o=Math.ceil(t/y+4);for(h=!1;;){if(i%2&&Q((s=s.times(e)).d,o)&&(r=!0),0===(i=m(i/2))){i=s.d.length-1,r&&0===s.d[i]&&++s.d[i];break}Q((e=e.times(e)).d,o)}return h=!0,s}function I(n){return 1&n.d[n.d.length-1]}function H(n,e,i){for(var t,r=new n(e[0]),s=0;++s<e.length;){if(!(t=new n(e[s])).s){r=t;break}r[i](t)&&(r=t)}return r}function B(n,e){var i,t,r,s,o,u,c,f=0,a=0,d=0,l=n.constructor,p=l.rounding,g=l.precision;if(!n.d||!n.d[0]||n.e>17)return new l(n.d?n.d[0]?n.s<0?0:1/0:1:n.s?n.s<0?0:n:NaN);for(null==e?(h=!1,c=g):c=e,u=new l(.03125);n.e>-2;)n=n.times(u),d+=5;for(c+=t=Math.log(w(2,d))/Math.LN10*2+5|0,i=s=o=new l(1),l.precision=c;;){if(s=P(s.times(n),c,1),i=i.times(++a),D((u=o.plus(Z(s,i,c,1))).d).slice(0,c)===D(o.d).slice(0,c)){for(r=d;r--;)o=P(o.times(o),c,1);if(null!=e)return l.precision=g,o;if(!(f<3&&A(o.d,c-t,p,f)))return P(o,l.precision=g,p,h=!0);l.precision=c+=10,i=s=u=new l(1),a=0,f++}o=u}}function V(n,e){var i,t,r,s,o,u,c,f,a,d,l,p=1,g=n,m=g.d,w=g.constructor,v=w.rounding,N=w.precision;if(g.s<0||!m||!m[0]||!g.e&&1==m[0]&&1==m.length)return new w(m&&!m[0]?-1/0:1!=g.s?NaN:m?0:g);if(null==e?(h=!1,a=N):a=e,w.precision=a+=10,t=(i=D(m)).charAt(0),!(Math.abs(s=g.e)<15e14))return f=T(w,a+2,N).times(s+\"\"),g=V(new w(t+\".\"+i.slice(1)),a-10).plus(f),w.precision=N,null==e?P(g,N,v,h=!0):g;for(;t<7&&1!=t||1==t&&i.charAt(1)>3;)t=(i=D((g=g.times(n)).d)).charAt(0),p++;for(s=g.e,t>1?(g=new w(\"0.\"+i),s++):g=new w(t+\".\"+i.slice(1)),d=g,c=o=g=Z(g.minus(1),g.plus(1),a,1),l=P(g.times(g),a,1),r=3;;){if(o=P(o.times(l),a,1),D((f=c.plus(Z(o,new w(r),a,1))).d).slice(0,a)===D(c.d).slice(0,a)){if(c=c.times(2),0!==s&&(c=c.plus(T(w,a+2,N).times(s+\"\"))),c=Z(c,new w(p),a,1),null!=e)return w.precision=N,c;if(!A(c.d,a-10,v,u))return P(c,w.precision=N,v,h=!0);w.precision=a+=10,f=o=g=Z(d.minus(1),d.plus(1),a,1),l=P(g.times(g),a,1),r=u=1}c=f,r+=2}}function j(n){return String(n.s*n.s/0)}function $(n,e){var i,t,r;for((i=e.indexOf(\".\"))>-1&&(e=e.replace(\".\",\"\")),(t=e.search(/e/i))>0?(i<0&&(i=t),i+=+e.slice(t+1),e=e.substring(0,t)):i<0&&(i=e.length),t=0;48===e.charCodeAt(t);t++);for(r=e.length;48===e.charCodeAt(r-1);--r);if(e=e.slice(t,r)){if(r-=t,n.e=i=i-t-1,n.d=[],t=(i+1)%y,i<0&&(t+=y),t<r){for(t&&n.d.push(+e.slice(0,t)),r-=y;t<r;)n.d.push(+e.slice(t,t+=y));e=e.slice(t),t=y-e.length}else t-=r;for(;t--;)e+=\"0\";n.d.push(+e),h&&(n.e>n.constructor.maxE?(n.d=null,n.e=NaN):n.e<n.constructor.minE&&(n.e=0,n.d=[0]))}else n.e=0,n.d=[0];return n}function W(n,i){var t,r,s,o,u,c,f,a,d;if(\"Infinity\"===i||\"NaN\"===i)return+i||(n.s=NaN),n.e=NaN,n.d=null,n;if(N.test(i))t=16,i=i.toLowerCase();else if(v.test(i))t=2;else{if(!b.test(i))throw Error(l+i);t=8}for((o=i.search(/p/i))>0?(f=+i.slice(o+1),i=i.substring(2,o)):i=i.slice(2),u=(o=i.indexOf(\".\"))>=0,r=n.constructor,u&&(o=(c=(i=i.replace(\".\",\"\")).length)-o,s=C(r,new r(t),o,2*o)),o=d=(a=S(i,t,x)).length-1;0===a[o];--o)a.pop();return o<0?new r(0*n.s):(n.e=L(a,d),n.d=a,h=!1,u&&(n=Z(n,s,4*c)),f&&(n=n.times(Math.abs(f)<54?w(2,f):e.pow(2,f))),h=!0,n)}function J(n,e,i,t,r){var s,o,u,c,f=n.precision,a=Math.ceil(f/y);for(h=!1,c=i.times(i),u=new n(t);;){if(o=Z(u.times(c),new n(e++*e++),f,1),u=r?t.plus(o):t.minus(o),t=Z(o.times(c),new n(e++*e++),f,1),void 0!==(o=u.plus(t)).d[a]){for(s=a;o.d[s]===u.d[s]&&s--;);if(-1==s)break}s=u,u=t,t=o,o=s,0}return h=!0,o.d.length=a+1,o}function z(n,e){for(var i=n;--e;)i*=n;return i}function G(n,e){var i,t=e.s<0,s=U(n,n.precision,1),o=s.times(.5);if((e=e.abs()).lte(o))return r=t?4:1,e;if((i=e.divToInt(s)).isZero())r=t?3:2;else{if((e=e.minus(i.times(s))).lte(o))return r=I(i)?t?2:3:t?4:1,e;r=I(i)?t?1:4:t?3:2}return e.minus(s).abs()}function K(n,e,t,r){var s,c,f,a,h,d,l,p,g,m=n.constructor,w=void 0!==t;if(w?(F(t,1,o),void 0===r?r=m.rounding:F(r,0,8)):(t=m.precision,r=m.rounding),n.isFinite()){for(w?(s=2,16==e?t=4*t-3:8==e&&(t=3*t-2)):s=e,(f=(l=R(n)).indexOf(\".\"))>=0&&(l=l.replace(\".\",\"\"),(g=new m(1)).e=l.length-f,g.d=S(R(g),10,s),g.e=g.d.length),c=h=(p=S(l,10,s)).length;0==p[--h];)p.pop();if(p[0]){if(f<0?c--:((n=new m(n)).d=p,n.e=c,p=(n=Z(n,g,t,r,0,s)).d,c=n.e,d=i),f=p[t],a=s/2,d=d||void 0!==p[t+1],d=r<4?(void 0!==f||d)&&(0===r||r===(n.s<0?3:2)):f>a||f===a&&(4===r||d||6===r&&1&p[t-1]||r===(n.s<0?8:7)),p.length=t,d)for(;++p[--t]>s-1;)p[t]=0,t||(++c,p.unshift(1));for(h=p.length;!p[h-1];--h);for(f=0,l=\"\";f<h;f++)l+=u.charAt(p[f]);if(w){if(h>1)if(16==e||8==e){for(f=16==e?4:3,--h;h%f;h++)l+=\"0\";for(h=(p=S(l,s,e)).length;!p[h-1];--h);for(f=1,l=\"1.\";f<h;f++)l+=u.charAt(p[f])}else l=l.charAt(0)+\".\"+l.slice(1);l=l+(c<0?\"p\":\"p+\")+c}else if(c<0){for(;++c;)l=\"0\"+l;l=\"0.\"+l}else if(++c>h)for(c-=h;c--;)l+=\"0\";else c<h&&(l=l.slice(0,c)+\".\"+l.slice(c))}else l=w?\"0p+0\":\"0\";l=(16==e?\"0x\":2==e?\"0b\":8==e?\"0o\":\"\")+l}else l=j(n);return n.s<0?\"-\"+l:l}function Q(n,e){if(n.length>e)return n.length=e,!0}function X(n){return new this(n).abs()}function Y(n){return new this(n).acos()}function nn(n){return new this(n).acosh()}function en(n,e){return new this(n).plus(e)}function tn(n){return new this(n).asin()}function rn(n){return new this(n).asinh()}function sn(n){return new this(n).atan()}function on(n){return new this(n).atanh()}function un(n,e){n=new this(n),e=new this(e);var i,t=this.precision,r=this.rounding,s=t+4;return n.s&&e.s?n.d||e.d?!e.d||n.isZero()?(i=e.s<0?U(this,t,r):new this(0)).s=n.s:!n.d||e.isZero()?(i=U(this,s,1).times(.5)).s=n.s:e.s<0?(this.precision=s,this.rounding=1,i=this.atan(Z(n,e,s,1)),e=U(this,s,1),this.precision=t,this.rounding=r,i=n.s<0?i.minus(e):i.plus(e)):i=this.atan(Z(n,e,s,1)):(i=U(this,s,1).times(e.s>0?.25:.75)).s=n.s:i=new this(NaN),i}function cn(n){return new this(n).cbrt()}function fn(n){return P(n=new this(n),n.e+1,2)}function an(n){if(!n||\"object\"!=typeof n)throw Error(d+\"Object expected\");var e,i,t,r=!0===n.defaults,u=[\"precision\",1,o,\"rounding\",0,8,\"toExpNeg\",-s,0,\"toExpPos\",0,s,\"maxE\",0,s,\"minE\",-s,0,\"modulo\",0,9];for(e=0;e<u.length;e+=3)if(i=u[e],r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!(m(t)===t&&t>=u[e+1]&&t<=u[e+2]))throw Error(l+i+\": \"+t);this[i]=t}if(i=\"crypto\",r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!0!==t&&!1!==t&&0!==t&&1!==t)throw Error(l+i+\": \"+t);if(t){if(\"undefined\"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(g);this[i]=!0}else this[i]=!1}return this}function hn(n){return new this(n).cos()}function dn(n){return new this(n).cosh()}function ln(n,e){return new this(n).div(e)}function pn(n){return new this(n).exp()}function gn(n){return P(n=new this(n),n.e+1,3)}function mn(){var n,e,i=new this(0);for(h=!1,n=0;n<arguments.length;)if((e=new this(arguments[n++])).d)i.d&&(i=i.plus(e.times(e)));else{if(e.s)return h=!0,new this(1/0);i=e}return h=!0,i.sqrt()}function wn(n){return n instanceof e||n&&\"[object Decimal]\"===n.name||!1}function vn(n){return new this(n).ln()}function Nn(n,e){return new this(n).log(e)}function bn(n){return new this(n).log(2)}function En(n){return new this(n).log(10)}function xn(){return H(this,arguments,\"lt\")}function yn(){return H(this,arguments,\"gt\")}function Mn(n,e){return new this(n).mod(e)}function qn(n,e){return new this(n).mul(e)}function On(n,e){return new this(n).pow(e)}function Dn(n){var e,i,t,r,s=0,u=new this(1),c=[];if(void 0===n?n=this.precision:F(n,1,o),t=Math.ceil(n/y),this.crypto)if(crypto.getRandomValues)for(e=crypto.getRandomValues(new Uint32Array(t));s<t;)(r=e[s])>=429e7?e[s]=crypto.getRandomValues(new Uint32Array(1))[0]:c[s++]=r%1e7;else{if(!crypto.randomBytes)throw Error(g);for(e=crypto.randomBytes(t*=4);s<t;)(r=e[s]+(e[s+1]<<8)+(e[s+2]<<16)+((127&e[s+3])<<24))>=214e7?crypto.randomBytes(4).copy(e,s):(c.push(r%1e7),s+=4);s=t/4}else for(;s<t;)c[s++]=1e7*Math.random()|0;for(t=c[--s],n%=y,t&&n&&(r=w(10,y-n),c[s]=(t/r|0)*r);0===c[s];s--)c.pop();if(s<0)i=0,c=[0];else{for(i=-1;0===c[0];i-=y)c.shift();for(t=1,r=c[0];r>=10;r/=10)t++;t<y&&(i-=y-t)}return u.e=i,u.d=c,u}function Fn(n){return P(n=new this(n),n.e+1,this.rounding)}function An(n){return(n=new this(n)).d?n.d[0]?n.s:0*n.s:n.s||NaN}function Sn(n){return new this(n).sin()}function Zn(n){return new this(n).sinh()}function Pn(n){return new this(n).sqrt()}function Rn(n,e){return new this(n).sub(e)}function Ln(n){return new this(n).tan()}function Tn(n){return new this(n).tanh()}function Un(n){return P(n=new this(n),n.e+1,1)}return(e=function n(e){var i,t,r;function s(n){var e,i,t,r=this;if(!(r instanceof s))return new s(n);if(r.constructor=s,n instanceof s)return r.s=n.s,void(h?!n.d||n.e>s.maxE?(r.e=NaN,r.d=null):n.e<s.minE?(r.e=0,r.d=[0]):(r.e=n.e,r.d=n.d.slice()):(r.e=n.e,r.d=n.d?n.d.slice():n.d));if(\"number\"==(t=typeof n)){if(0===n)return r.s=1/n<0?-1:1,r.e=0,void(r.d=[0]);if(n<0?(n=-n,r.s=-1):r.s=1,n===~~n&&n<1e7){for(e=0,i=n;i>=10;i/=10)e++;return void(h?e>s.maxE?(r.e=NaN,r.d=null):e<s.minE?(r.e=0,r.d=[0]):(r.e=e,r.d=[n]):(r.e=e,r.d=[n]))}return 0*n!=0?(n||(r.s=NaN),r.e=NaN,void(r.d=null)):$(r,n.toString())}if(\"string\"!==t)throw Error(l+n);return 45===(i=n.charCodeAt(0))?(n=n.slice(1),r.s=-1):(43===i&&(n=n.slice(1)),r.s=1),E.test(n)?$(r,n):W(r,n)}if(s.prototype=O,s.ROUND_UP=0,s.ROUND_DOWN=1,s.ROUND_CEIL=2,s.ROUND_FLOOR=3,s.ROUND_HALF_UP=4,s.ROUND_HALF_DOWN=5,s.ROUND_HALF_EVEN=6,s.ROUND_HALF_CEIL=7,s.ROUND_HALF_FLOOR=8,s.EUCLID=9,s.config=s.set=an,s.clone=n,s.isDecimal=wn,s.abs=X,s.acos=Y,s.acosh=nn,s.add=en,s.asin=tn,s.asinh=rn,s.atan=sn,s.atanh=on,s.atan2=un,s.cbrt=cn,s.ceil=fn,s.cos=hn,s.cosh=dn,s.div=ln,s.exp=pn,s.floor=gn,s.hypot=mn,s.ln=vn,s.log=Nn,s.log10=En,s.log2=bn,s.max=xn,s.min=yn,s.mod=Mn,s.mul=qn,s.pow=On,s.random=Dn,s.round=Fn,s.sign=An,s.sin=Sn,s.sinh=Zn,s.sqrt=Pn,s.sub=Rn,s.tan=Ln,s.tanh=Tn,s.trunc=Un,void 0===e&&(e={}),e&&!0!==e.defaults)for(r=[\"precision\",\"rounding\",\"toExpNeg\",\"toExpPos\",\"maxE\",\"minE\",\"modulo\",\"crypto\"],i=0;i<r.length;)e.hasOwnProperty(t=r[i++])||(e[t]=this[t]);return s.config(e),s}(a)).default=e.Decimal=e,c=new e(c),f=new e(f),\"function\"==typeof define&&define.amd?define(function(){return e}):\"undefined\"!=typeof module&&module.exports?(\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator&&(O[Symbol.for(\"nodejs.util.inspect.custom\")]=O.toString,O[Symbol.toStringTag]=\"Decimal\"),module.exports=e):(n||(n=\"undefined\"!=typeof self&&self&&self.self==self?self:window),t=n.Decimal,e.noConflict=function(){return n.Decimal=t,e},n.Decimal=e),e}(this)\r\n//    bigDec: require('decimal.js')\r\n});\r\n\r\nif((typeof module) !== 'undefined') {\r\n    module.exports = nerdamer;\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,QAAQ,GAAI,UAAUC,OAAO,EAAE;EAC/B,YAAY;;EAEhB;EACI,IAAIC,OAAO,GAAG,QAAQ;;EAE1B;EACI,IAAIC,CAAC,GAAG,IAAIC,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEtB;EACA,IAAIC,MAAM,GAAGJ,OAAO,CAACI,MAAM;EAC3B,IAAIC,MAAM,GAAGL,OAAO,CAACK,MAAM;;EAE3B;EACAA,MAAM,CAACC,GAAG,CAAC;IACPC,SAAS,EAAE;EACf,CAAC,CAAC;EAEF,IAAIC,MAAM,GAAG,CAAC,CAAC;;EAEf;EACA,IAAIC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACvH,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAChI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACtH,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACtH,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACtH,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACtH,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtH,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtH,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}