{"ast":null,"code":"import { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isObjectNode, isOperatorNode } from '../../utils/is.js';\nimport { getOperator } from '../../expression/operators.js';\nimport { createUtil } from './simplify/util.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'simplifyCore';\nvar dependencies = ['typed', 'parse', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplifyCore = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse,\n    equal,\n    isZero,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var node0 = new ConstantNode(0);\n  var node1 = new ConstantNode(1);\n  var nodeT = new ConstantNode(true);\n  var nodeF = new ConstantNode(false);\n  // test if a node will always have a boolean value (true/false)\n  // not sure if this list is complete\n  function isAlwaysBoolean(node) {\n    return isOperatorNode(node) && ['and', 'not', 'or'].includes(node.op);\n  }\n  var {\n    hasProperty,\n    isCommutative\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\r\n   * simplifyCore() performs single pass simplification suitable for\r\n   * applications requiring ultimate performance. To roughly summarize,\r\n   * it handles cases along the lines of simplifyConstant() but where\r\n   * knowledge of a single argument is sufficient to determine the value.\r\n   * In contrast, simplify() extends simplifyCore() with additional passes\r\n   * to provide deeper simplification (such as gathering like terms).\r\n   *\r\n   * Specifically, simplifyCore:\r\n   *\r\n   * * Converts all function calls with operator equivalents to their\r\n   *   operator forms.\r\n   * * Removes operators or function calls that are guaranteed to have no\r\n   *   effect (such as unary '+').\r\n   * * Removes double unary '-', '~', and 'not'\r\n   * * Eliminates addition/subtraction of 0 and multiplication/division/powers\r\n   *   by 1 or 0.\r\n   * * Converts addition of a negation into subtraction.\r\n   * * Eliminates logical operations with constant true or false leading\r\n   *   arguments.\r\n   * * Puts constants on the left of a product, if multiplication is\r\n   *   considered commutative by the options (which is the default)\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.simplifyCore(expr)\r\n   *     math.simplifyCore(expr, options)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     const f = math.parse('2 * 1 * x ^ (1 - 0)')\r\n   *     math.simplifyCore(f)                          // Node \"2 * x\"\r\n   *     math.simplify('2 * 1 * x ^ (1 - 0)', [math.simplifyCore]) // Node \"2 * x\"\r\n   *\r\n   * See also:\r\n   *\r\n   *     simplify, simplifyConstant, resolve, derivative\r\n   *\r\n   * @param {Node | string} node\r\n   *     The expression to be simplified\r\n   * @param {Object} options\r\n   *     Simplification options, as per simplify()\r\n   * @return {Node} Returns expression with basic simplifications applied\r\n   */\n  function _simplifyCore(nodeToSimplify) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var context = options ? options.context : undefined;\n    if (hasProperty(nodeToSimplify, 'trivial', context)) {\n      // This node does nothing if it has only one argument, so if so,\n      // return that argument simplified\n      if (isFunctionNode(nodeToSimplify) && nodeToSimplify.args.length === 1) {\n        return _simplifyCore(nodeToSimplify.args[0], options);\n      }\n      // For other node types, we try the generic methods\n      var simpChild = false;\n      var childCount = 0;\n      nodeToSimplify.forEach(c => {\n        ++childCount;\n        if (childCount === 1) {\n          simpChild = _simplifyCore(c, options);\n        }\n      });\n      if (childCount === 1) {\n        return simpChild;\n      }\n    }\n    var node = nodeToSimplify;\n    if (isFunctionNode(node)) {\n      var op = getOperator(node.name);\n      if (op) {\n        // Replace FunctionNode with a new OperatorNode\n        if (node.args.length > 2 && hasProperty(node, 'associative', context)) {\n          // unflatten into binary operations since that's what simplifyCore handles\n          while (node.args.length > 2) {\n            var last = node.args.pop();\n            var seclast = node.args.pop();\n            node.args.push(new OperatorNode(op, node.name, [last, seclast]));\n          }\n        }\n        node = new OperatorNode(op, node.name, node.args);\n      } else {\n        return new FunctionNode(_simplifyCore(node.fn), node.args.map(n => _simplifyCore(n, options)));\n      }\n    }\n    if (isOperatorNode(node) && node.isUnary()) {\n      var a0 = _simplifyCore(node.args[0], options);\n      if (node.op === '~') {\n        // bitwise not\n        if (isOperatorNode(a0) && a0.isUnary() && a0.op === '~') {\n          return a0.args[0];\n        }\n      }\n      if (node.op === 'not') {\n        // logical not\n        if (isOperatorNode(a0) && a0.isUnary() && a0.op === 'not') {\n          // Has the effect of turning the argument into a boolean\n          // So can only eliminate the double negation if\n          // the inside is already boolean\n          if (isAlwaysBoolean(a0.args[0])) {\n            return a0.args[0];\n          }\n        }\n      }\n      var finish = true;\n      if (node.op === '-') {\n        // unary minus\n        if (isOperatorNode(a0)) {\n          if (a0.isBinary() && a0.fn === 'subtract') {\n            node = new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);\n            finish = false; // continue to process the new binary node\n          }\n          if (a0.isUnary() && a0.op === '-') {\n            return a0.args[0];\n          }\n        }\n      }\n      if (finish) return new OperatorNode(node.op, node.fn, [a0]);\n    }\n    if (isOperatorNode(node) && node.isBinary()) {\n      var _a = _simplifyCore(node.args[0], options);\n      var a1 = _simplifyCore(node.args[1], options);\n      if (node.op === '+') {\n        if (isConstantNode(_a) && isZero(_a.value)) {\n          return a1;\n        }\n        if (isConstantNode(a1) && isZero(a1.value)) {\n          return _a;\n        }\n        if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {\n          a1 = a1.args[0];\n          node = new OperatorNode('-', 'subtract', [_a, a1]);\n        }\n      }\n      if (node.op === '-') {\n        if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {\n          return _simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]), options);\n        }\n        if (isConstantNode(_a) && isZero(_a.value)) {\n          return _simplifyCore(new OperatorNode('-', 'unaryMinus', [a1]));\n        }\n        if (isConstantNode(a1) && isZero(a1.value)) {\n          return _a;\n        }\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\n      }\n      if (node.op === '*') {\n        if (isConstantNode(_a)) {\n          if (isZero(_a.value)) {\n            return node0;\n          } else if (equal(_a.value, 1)) {\n            return a1;\n          }\n        }\n        if (isConstantNode(a1)) {\n          if (isZero(a1.value)) {\n            return node0;\n          } else if (equal(a1.value, 1)) {\n            return _a;\n          }\n          if (isCommutative(node, context)) {\n            return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left\n          }\n        }\n        return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);\n      }\n      if (node.op === '/') {\n        if (isConstantNode(_a) && isZero(_a.value)) {\n          return node0;\n        }\n        if (isConstantNode(a1) && equal(a1.value, 1)) {\n          return _a;\n        }\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\n      }\n      if (node.op === '^') {\n        if (isConstantNode(a1)) {\n          if (isZero(a1.value)) {\n            return node1;\n          } else if (equal(a1.value, 1)) {\n            return _a;\n          }\n        }\n      }\n      if (node.op === 'and') {\n        if (isConstantNode(_a)) {\n          if (_a.value) {\n            if (isAlwaysBoolean(a1)) return a1;\n            if (isConstantNode(a1)) {\n              return a1.value ? nodeT : nodeF;\n            }\n          } else {\n            return nodeF;\n          }\n        }\n        if (isConstantNode(a1)) {\n          if (a1.value) {\n            if (isAlwaysBoolean(_a)) return _a;\n          } else {\n            return nodeF;\n          }\n        }\n      }\n      if (node.op === 'or') {\n        if (isConstantNode(_a)) {\n          if (_a.value) {\n            return nodeT;\n          } else {\n            if (isAlwaysBoolean(a1)) return a1;\n          }\n        }\n        if (isConstantNode(a1)) {\n          if (a1.value) {\n            return nodeT;\n          } else {\n            if (isAlwaysBoolean(_a)) return _a;\n          }\n        }\n      }\n      return new OperatorNode(node.op, node.fn, [_a, a1]);\n    }\n    if (isOperatorNode(node)) {\n      return new OperatorNode(node.op, node.fn, node.args.map(a => _simplifyCore(a, options)));\n    }\n    if (isArrayNode(node)) {\n      return new ArrayNode(node.items.map(n => _simplifyCore(n, options)));\n    }\n    if (isAccessorNode(node)) {\n      return new AccessorNode(_simplifyCore(node.object, options), _simplifyCore(node.index, options));\n    }\n    if (isIndexNode(node)) {\n      return new IndexNode(node.dimensions.map(n => _simplifyCore(n, options)));\n    }\n    if (isObjectNode(node)) {\n      var newProps = {};\n      for (var prop in node.properties) {\n        newProps[prop] = _simplifyCore(node.properties[prop], options);\n      }\n      return new ObjectNode(newProps);\n    }\n    // cannot simplify\n    return node;\n  }\n  return typed(name, {\n    Node: _simplifyCore,\n    'Node,Object': _simplifyCore\n  });\n});","map":{"version":3,"names":["isAccessorNode","isArrayNode","isConstantNode","isFunctionNode","isIndexNode","isObjectNode","isOperatorNode","getOperator","createUtil","factory","name","dependencies","createSimplifyCore","_ref","typed","parse","equal","isZero","add","subtract","multiply","divide","pow","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","ParenthesisNode","SymbolNode","node0","node1","nodeT","nodeF","isAlwaysBoolean","node","includes","op","hasProperty","isCommutative","_simplifyCore","nodeToSimplify","options","arguments","length","undefined","context","args","simpChild","childCount","forEach","c","last","pop","seclast","push","fn","map","n","isUnary","a0","finish","isBinary","_a","a1","value","implicit","a","items","object","index","dimensions","newProps","prop","properties","Node"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/algebra/simplifyCore.js"],"sourcesContent":["import { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isObjectNode, isOperatorNode } from '../../utils/is.js';\r\nimport { getOperator } from '../../expression/operators.js';\r\nimport { createUtil } from './simplify/util.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'simplifyCore';\r\nvar dependencies = ['typed', 'parse', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\r\nexport var createSimplifyCore = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    parse,\r\n    equal,\r\n    isZero,\r\n    add,\r\n    subtract,\r\n    multiply,\r\n    divide,\r\n    pow,\r\n    AccessorNode,\r\n    ArrayNode,\r\n    ConstantNode,\r\n    FunctionNode,\r\n    IndexNode,\r\n    ObjectNode,\r\n    OperatorNode,\r\n    ParenthesisNode,\r\n    SymbolNode\r\n  } = _ref;\r\n  var node0 = new ConstantNode(0);\r\n  var node1 = new ConstantNode(1);\r\n  var nodeT = new ConstantNode(true);\r\n  var nodeF = new ConstantNode(false);\r\n  // test if a node will always have a boolean value (true/false)\r\n  // not sure if this list is complete\r\n  function isAlwaysBoolean(node) {\r\n    return isOperatorNode(node) && ['and', 'not', 'or'].includes(node.op);\r\n  }\r\n  var {\r\n    hasProperty,\r\n    isCommutative\r\n  } = createUtil({\r\n    FunctionNode,\r\n    OperatorNode,\r\n    SymbolNode\r\n  });\r\n  /**\r\n   * simplifyCore() performs single pass simplification suitable for\r\n   * applications requiring ultimate performance. To roughly summarize,\r\n   * it handles cases along the lines of simplifyConstant() but where\r\n   * knowledge of a single argument is sufficient to determine the value.\r\n   * In contrast, simplify() extends simplifyCore() with additional passes\r\n   * to provide deeper simplification (such as gathering like terms).\r\n   *\r\n   * Specifically, simplifyCore:\r\n   *\r\n   * * Converts all function calls with operator equivalents to their\r\n   *   operator forms.\r\n   * * Removes operators or function calls that are guaranteed to have no\r\n   *   effect (such as unary '+').\r\n   * * Removes double unary '-', '~', and 'not'\r\n   * * Eliminates addition/subtraction of 0 and multiplication/division/powers\r\n   *   by 1 or 0.\r\n   * * Converts addition of a negation into subtraction.\r\n   * * Eliminates logical operations with constant true or false leading\r\n   *   arguments.\r\n   * * Puts constants on the left of a product, if multiplication is\r\n   *   considered commutative by the options (which is the default)\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.simplifyCore(expr)\r\n   *     math.simplifyCore(expr, options)\r\n   *\r\n   * Examples:\r\n   *\r\n   *     const f = math.parse('2 * 1 * x ^ (1 - 0)')\r\n   *     math.simplifyCore(f)                          // Node \"2 * x\"\r\n   *     math.simplify('2 * 1 * x ^ (1 - 0)', [math.simplifyCore]) // Node \"2 * x\"\r\n   *\r\n   * See also:\r\n   *\r\n   *     simplify, simplifyConstant, resolve, derivative\r\n   *\r\n   * @param {Node | string} node\r\n   *     The expression to be simplified\r\n   * @param {Object} options\r\n   *     Simplification options, as per simplify()\r\n   * @return {Node} Returns expression with basic simplifications applied\r\n   */\r\n  function _simplifyCore(nodeToSimplify) {\r\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n    var context = options ? options.context : undefined;\r\n    if (hasProperty(nodeToSimplify, 'trivial', context)) {\r\n      // This node does nothing if it has only one argument, so if so,\r\n      // return that argument simplified\r\n      if (isFunctionNode(nodeToSimplify) && nodeToSimplify.args.length === 1) {\r\n        return _simplifyCore(nodeToSimplify.args[0], options);\r\n      }\r\n      // For other node types, we try the generic methods\r\n      var simpChild = false;\r\n      var childCount = 0;\r\n      nodeToSimplify.forEach(c => {\r\n        ++childCount;\r\n        if (childCount === 1) {\r\n          simpChild = _simplifyCore(c, options);\r\n        }\r\n      });\r\n      if (childCount === 1) {\r\n        return simpChild;\r\n      }\r\n    }\r\n    var node = nodeToSimplify;\r\n    if (isFunctionNode(node)) {\r\n      var op = getOperator(node.name);\r\n      if (op) {\r\n        // Replace FunctionNode with a new OperatorNode\r\n        if (node.args.length > 2 && hasProperty(node, 'associative', context)) {\r\n          // unflatten into binary operations since that's what simplifyCore handles\r\n          while (node.args.length > 2) {\r\n            var last = node.args.pop();\r\n            var seclast = node.args.pop();\r\n            node.args.push(new OperatorNode(op, node.name, [last, seclast]));\r\n          }\r\n        }\r\n        node = new OperatorNode(op, node.name, node.args);\r\n      } else {\r\n        return new FunctionNode(_simplifyCore(node.fn), node.args.map(n => _simplifyCore(n, options)));\r\n      }\r\n    }\r\n    if (isOperatorNode(node) && node.isUnary()) {\r\n      var a0 = _simplifyCore(node.args[0], options);\r\n      if (node.op === '~') {\r\n        // bitwise not\r\n        if (isOperatorNode(a0) && a0.isUnary() && a0.op === '~') {\r\n          return a0.args[0];\r\n        }\r\n      }\r\n      if (node.op === 'not') {\r\n        // logical not\r\n        if (isOperatorNode(a0) && a0.isUnary() && a0.op === 'not') {\r\n          // Has the effect of turning the argument into a boolean\r\n          // So can only eliminate the double negation if\r\n          // the inside is already boolean\r\n          if (isAlwaysBoolean(a0.args[0])) {\r\n            return a0.args[0];\r\n          }\r\n        }\r\n      }\r\n      var finish = true;\r\n      if (node.op === '-') {\r\n        // unary minus\r\n        if (isOperatorNode(a0)) {\r\n          if (a0.isBinary() && a0.fn === 'subtract') {\r\n            node = new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);\r\n            finish = false; // continue to process the new binary node\r\n          }\r\n          if (a0.isUnary() && a0.op === '-') {\r\n            return a0.args[0];\r\n          }\r\n        }\r\n      }\r\n      if (finish) return new OperatorNode(node.op, node.fn, [a0]);\r\n    }\r\n    if (isOperatorNode(node) && node.isBinary()) {\r\n      var _a = _simplifyCore(node.args[0], options);\r\n      var a1 = _simplifyCore(node.args[1], options);\r\n      if (node.op === '+') {\r\n        if (isConstantNode(_a) && isZero(_a.value)) {\r\n          return a1;\r\n        }\r\n        if (isConstantNode(a1) && isZero(a1.value)) {\r\n          return _a;\r\n        }\r\n        if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {\r\n          a1 = a1.args[0];\r\n          node = new OperatorNode('-', 'subtract', [_a, a1]);\r\n        }\r\n      }\r\n      if (node.op === '-') {\r\n        if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {\r\n          return _simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]), options);\r\n        }\r\n        if (isConstantNode(_a) && isZero(_a.value)) {\r\n          return _simplifyCore(new OperatorNode('-', 'unaryMinus', [a1]));\r\n        }\r\n        if (isConstantNode(a1) && isZero(a1.value)) {\r\n          return _a;\r\n        }\r\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\r\n      }\r\n      if (node.op === '*') {\r\n        if (isConstantNode(_a)) {\r\n          if (isZero(_a.value)) {\r\n            return node0;\r\n          } else if (equal(_a.value, 1)) {\r\n            return a1;\r\n          }\r\n        }\r\n        if (isConstantNode(a1)) {\r\n          if (isZero(a1.value)) {\r\n            return node0;\r\n          } else if (equal(a1.value, 1)) {\r\n            return _a;\r\n          }\r\n          if (isCommutative(node, context)) {\r\n            return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left\r\n          }\r\n        }\r\n        return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);\r\n      }\r\n      if (node.op === '/') {\r\n        if (isConstantNode(_a) && isZero(_a.value)) {\r\n          return node0;\r\n        }\r\n        if (isConstantNode(a1) && equal(a1.value, 1)) {\r\n          return _a;\r\n        }\r\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\r\n      }\r\n      if (node.op === '^') {\r\n        if (isConstantNode(a1)) {\r\n          if (isZero(a1.value)) {\r\n            return node1;\r\n          } else if (equal(a1.value, 1)) {\r\n            return _a;\r\n          }\r\n        }\r\n      }\r\n      if (node.op === 'and') {\r\n        if (isConstantNode(_a)) {\r\n          if (_a.value) {\r\n            if (isAlwaysBoolean(a1)) return a1;\r\n            if (isConstantNode(a1)) {\r\n              return a1.value ? nodeT : nodeF;\r\n            }\r\n          } else {\r\n            return nodeF;\r\n          }\r\n        }\r\n        if (isConstantNode(a1)) {\r\n          if (a1.value) {\r\n            if (isAlwaysBoolean(_a)) return _a;\r\n          } else {\r\n            return nodeF;\r\n          }\r\n        }\r\n      }\r\n      if (node.op === 'or') {\r\n        if (isConstantNode(_a)) {\r\n          if (_a.value) {\r\n            return nodeT;\r\n          } else {\r\n            if (isAlwaysBoolean(a1)) return a1;\r\n          }\r\n        }\r\n        if (isConstantNode(a1)) {\r\n          if (a1.value) {\r\n            return nodeT;\r\n          } else {\r\n            if (isAlwaysBoolean(_a)) return _a;\r\n          }\r\n        }\r\n      }\r\n      return new OperatorNode(node.op, node.fn, [_a, a1]);\r\n    }\r\n    if (isOperatorNode(node)) {\r\n      return new OperatorNode(node.op, node.fn, node.args.map(a => _simplifyCore(a, options)));\r\n    }\r\n    if (isArrayNode(node)) {\r\n      return new ArrayNode(node.items.map(n => _simplifyCore(n, options)));\r\n    }\r\n    if (isAccessorNode(node)) {\r\n      return new AccessorNode(_simplifyCore(node.object, options), _simplifyCore(node.index, options));\r\n    }\r\n    if (isIndexNode(node)) {\r\n      return new IndexNode(node.dimensions.map(n => _simplifyCore(n, options)));\r\n    }\r\n    if (isObjectNode(node)) {\r\n      var newProps = {};\r\n      for (var prop in node.properties) {\r\n        newProps[prop] = _simplifyCore(node.properties[prop], options);\r\n      }\r\n      return new ObjectNode(newProps);\r\n    }\r\n    // cannot simplify\r\n    return node;\r\n  }\r\n  return typed(name, {\r\n    Node: _simplifyCore,\r\n    'Node,Object': _simplifyCore\r\n  });\r\n});"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,EAAEC,cAAc,EAAEC,cAAc,EAAEC,WAAW,EAAEC,YAAY,EAAEC,cAAc,QAAQ,mBAAmB;AAC1I,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,cAAc;AACzB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,WAAW,EAAE,cAAc,EAAE,cAAc,EAAE,WAAW,EAAE,YAAY,EAAE,cAAc,EAAE,iBAAiB,EAAE,YAAY,CAAC;AACjP,OAAO,IAAIC,kBAAkB,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACjF,IAAI;IACFC,KAAK;IACLC,KAAK;IACLC,KAAK;IACLC,MAAM;IACNC,GAAG;IACHC,QAAQ;IACRC,QAAQ;IACRC,MAAM;IACNC,GAAG;IACHC,YAAY;IACZC,SAAS;IACTC,YAAY;IACZC,YAAY;IACZC,SAAS;IACTC,UAAU;IACVC,YAAY;IACZC,eAAe;IACfC;EACF,CAAC,GAAGlB,IAAI;EACR,IAAImB,KAAK,GAAG,IAAIP,YAAY,CAAC,CAAC,CAAC;EAC/B,IAAIQ,KAAK,GAAG,IAAIR,YAAY,CAAC,CAAC,CAAC;EAC/B,IAAIS,KAAK,GAAG,IAAIT,YAAY,CAAC,IAAI,CAAC;EAClC,IAAIU,KAAK,GAAG,IAAIV,YAAY,CAAC,KAAK,CAAC;EACnC;EACA;EACA,SAASW,eAAeA,CAACC,IAAI,EAAE;IAC7B,OAAO/B,cAAc,CAAC+B,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAACC,QAAQ,CAACD,IAAI,CAACE,EAAE,CAAC;EACvE;EACA,IAAI;IACFC,WAAW;IACXC;EACF,CAAC,GAAGjC,UAAU,CAAC;IACbkB,YAAY;IACZG,YAAY;IACZE;EACF,CAAC,CAAC;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASW,aAAaA,CAACC,cAAc,EAAE;IACrC,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACpF,IAAIG,OAAO,GAAGJ,OAAO,GAAGA,OAAO,CAACI,OAAO,GAAGD,SAAS;IACnD,IAAIP,WAAW,CAACG,cAAc,EAAE,SAAS,EAAEK,OAAO,CAAC,EAAE;MACnD;MACA;MACA,IAAI7C,cAAc,CAACwC,cAAc,CAAC,IAAIA,cAAc,CAACM,IAAI,CAACH,MAAM,KAAK,CAAC,EAAE;QACtE,OAAOJ,aAAa,CAACC,cAAc,CAACM,IAAI,CAAC,CAAC,CAAC,EAAEL,OAAO,CAAC;MACvD;MACA;MACA,IAAIM,SAAS,GAAG,KAAK;MACrB,IAAIC,UAAU,GAAG,CAAC;MAClBR,cAAc,CAACS,OAAO,CAACC,CAAC,IAAI;QAC1B,EAAEF,UAAU;QACZ,IAAIA,UAAU,KAAK,CAAC,EAAE;UACpBD,SAAS,GAAGR,aAAa,CAACW,CAAC,EAAET,OAAO,CAAC;QACvC;MACF,CAAC,CAAC;MACF,IAAIO,UAAU,KAAK,CAAC,EAAE;QACpB,OAAOD,SAAS;MAClB;IACF;IACA,IAAIb,IAAI,GAAGM,cAAc;IACzB,IAAIxC,cAAc,CAACkC,IAAI,CAAC,EAAE;MACxB,IAAIE,EAAE,GAAGhC,WAAW,CAAC8B,IAAI,CAAC3B,IAAI,CAAC;MAC/B,IAAI6B,EAAE,EAAE;QACN;QACA,IAAIF,IAAI,CAACY,IAAI,CAACH,MAAM,GAAG,CAAC,IAAIN,WAAW,CAACH,IAAI,EAAE,aAAa,EAAEW,OAAO,CAAC,EAAE;UACrE;UACA,OAAOX,IAAI,CAACY,IAAI,CAACH,MAAM,GAAG,CAAC,EAAE;YAC3B,IAAIQ,IAAI,GAAGjB,IAAI,CAACY,IAAI,CAACM,GAAG,CAAC,CAAC;YAC1B,IAAIC,OAAO,GAAGnB,IAAI,CAACY,IAAI,CAACM,GAAG,CAAC,CAAC;YAC7BlB,IAAI,CAACY,IAAI,CAACQ,IAAI,CAAC,IAAI5B,YAAY,CAACU,EAAE,EAAEF,IAAI,CAAC3B,IAAI,EAAE,CAAC4C,IAAI,EAAEE,OAAO,CAAC,CAAC,CAAC;UAClE;QACF;QACAnB,IAAI,GAAG,IAAIR,YAAY,CAACU,EAAE,EAAEF,IAAI,CAAC3B,IAAI,EAAE2B,IAAI,CAACY,IAAI,CAAC;MACnD,CAAC,MAAM;QACL,OAAO,IAAIvB,YAAY,CAACgB,aAAa,CAACL,IAAI,CAACqB,EAAE,CAAC,EAAErB,IAAI,CAACY,IAAI,CAACU,GAAG,CAACC,CAAC,IAAIlB,aAAa,CAACkB,CAAC,EAAEhB,OAAO,CAAC,CAAC,CAAC;MAChG;IACF;IACA,IAAItC,cAAc,CAAC+B,IAAI,CAAC,IAAIA,IAAI,CAACwB,OAAO,CAAC,CAAC,EAAE;MAC1C,IAAIC,EAAE,GAAGpB,aAAa,CAACL,IAAI,CAACY,IAAI,CAAC,CAAC,CAAC,EAAEL,OAAO,CAAC;MAC7C,IAAIP,IAAI,CAACE,EAAE,KAAK,GAAG,EAAE;QACnB;QACA,IAAIjC,cAAc,CAACwD,EAAE,CAAC,IAAIA,EAAE,CAACD,OAAO,CAAC,CAAC,IAAIC,EAAE,CAACvB,EAAE,KAAK,GAAG,EAAE;UACvD,OAAOuB,EAAE,CAACb,IAAI,CAAC,CAAC,CAAC;QACnB;MACF;MACA,IAAIZ,IAAI,CAACE,EAAE,KAAK,KAAK,EAAE;QACrB;QACA,IAAIjC,cAAc,CAACwD,EAAE,CAAC,IAAIA,EAAE,CAACD,OAAO,CAAC,CAAC,IAAIC,EAAE,CAACvB,EAAE,KAAK,KAAK,EAAE;UACzD;UACA;UACA;UACA,IAAIH,eAAe,CAAC0B,EAAE,CAACb,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;YAC/B,OAAOa,EAAE,CAACb,IAAI,CAAC,CAAC,CAAC;UACnB;QACF;MACF;MACA,IAAIc,MAAM,GAAG,IAAI;MACjB,IAAI1B,IAAI,CAACE,EAAE,KAAK,GAAG,EAAE;QACnB;QACA,IAAIjC,cAAc,CAACwD,EAAE,CAAC,EAAE;UACtB,IAAIA,EAAE,CAACE,QAAQ,CAAC,CAAC,IAAIF,EAAE,CAACJ,EAAE,KAAK,UAAU,EAAE;YACzCrB,IAAI,GAAG,IAAIR,YAAY,CAAC,GAAG,EAAE,UAAU,EAAE,CAACiC,EAAE,CAACb,IAAI,CAAC,CAAC,CAAC,EAAEa,EAAE,CAACb,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAClEc,MAAM,GAAG,KAAK,CAAC,CAAC;UAClB;UACA,IAAID,EAAE,CAACD,OAAO,CAAC,CAAC,IAAIC,EAAE,CAACvB,EAAE,KAAK,GAAG,EAAE;YACjC,OAAOuB,EAAE,CAACb,IAAI,CAAC,CAAC,CAAC;UACnB;QACF;MACF;MACA,IAAIc,MAAM,EAAE,OAAO,IAAIlC,YAAY,CAACQ,IAAI,CAACE,EAAE,EAAEF,IAAI,CAACqB,EAAE,EAAE,CAACI,EAAE,CAAC,CAAC;IAC7D;IACA,IAAIxD,cAAc,CAAC+B,IAAI,CAAC,IAAIA,IAAI,CAAC2B,QAAQ,CAAC,CAAC,EAAE;MAC3C,IAAIC,EAAE,GAAGvB,aAAa,CAACL,IAAI,CAACY,IAAI,CAAC,CAAC,CAAC,EAAEL,OAAO,CAAC;MAC7C,IAAIsB,EAAE,GAAGxB,aAAa,CAACL,IAAI,CAACY,IAAI,CAAC,CAAC,CAAC,EAAEL,OAAO,CAAC;MAC7C,IAAIP,IAAI,CAACE,EAAE,KAAK,GAAG,EAAE;QACnB,IAAIrC,cAAc,CAAC+D,EAAE,CAAC,IAAIhD,MAAM,CAACgD,EAAE,CAACE,KAAK,CAAC,EAAE;UAC1C,OAAOD,EAAE;QACX;QACA,IAAIhE,cAAc,CAACgE,EAAE,CAAC,IAAIjD,MAAM,CAACiD,EAAE,CAACC,KAAK,CAAC,EAAE;UAC1C,OAAOF,EAAE;QACX;QACA,IAAI3D,cAAc,CAAC4D,EAAE,CAAC,IAAIA,EAAE,CAACL,OAAO,CAAC,CAAC,IAAIK,EAAE,CAAC3B,EAAE,KAAK,GAAG,EAAE;UACvD2B,EAAE,GAAGA,EAAE,CAACjB,IAAI,CAAC,CAAC,CAAC;UACfZ,IAAI,GAAG,IAAIR,YAAY,CAAC,GAAG,EAAE,UAAU,EAAE,CAACoC,EAAE,EAAEC,EAAE,CAAC,CAAC;QACpD;MACF;MACA,IAAI7B,IAAI,CAACE,EAAE,KAAK,GAAG,EAAE;QACnB,IAAIjC,cAAc,CAAC4D,EAAE,CAAC,IAAIA,EAAE,CAACL,OAAO,CAAC,CAAC,IAAIK,EAAE,CAAC3B,EAAE,KAAK,GAAG,EAAE;UACvD,OAAOG,aAAa,CAAC,IAAIb,YAAY,CAAC,GAAG,EAAE,KAAK,EAAE,CAACoC,EAAE,EAAEC,EAAE,CAACjB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEL,OAAO,CAAC;QAC/E;QACA,IAAI1C,cAAc,CAAC+D,EAAE,CAAC,IAAIhD,MAAM,CAACgD,EAAE,CAACE,KAAK,CAAC,EAAE;UAC1C,OAAOzB,aAAa,CAAC,IAAIb,YAAY,CAAC,GAAG,EAAE,YAAY,EAAE,CAACqC,EAAE,CAAC,CAAC,CAAC;QACjE;QACA,IAAIhE,cAAc,CAACgE,EAAE,CAAC,IAAIjD,MAAM,CAACiD,EAAE,CAACC,KAAK,CAAC,EAAE;UAC1C,OAAOF,EAAE;QACX;QACA,OAAO,IAAIpC,YAAY,CAACQ,IAAI,CAACE,EAAE,EAAEF,IAAI,CAACqB,EAAE,EAAE,CAACO,EAAE,EAAEC,EAAE,CAAC,CAAC;MACrD;MACA,IAAI7B,IAAI,CAACE,EAAE,KAAK,GAAG,EAAE;QACnB,IAAIrC,cAAc,CAAC+D,EAAE,CAAC,EAAE;UACtB,IAAIhD,MAAM,CAACgD,EAAE,CAACE,KAAK,CAAC,EAAE;YACpB,OAAOnC,KAAK;UACd,CAAC,MAAM,IAAIhB,KAAK,CAACiD,EAAE,CAACE,KAAK,EAAE,CAAC,CAAC,EAAE;YAC7B,OAAOD,EAAE;UACX;QACF;QACA,IAAIhE,cAAc,CAACgE,EAAE,CAAC,EAAE;UACtB,IAAIjD,MAAM,CAACiD,EAAE,CAACC,KAAK,CAAC,EAAE;YACpB,OAAOnC,KAAK;UACd,CAAC,MAAM,IAAIhB,KAAK,CAACkD,EAAE,CAACC,KAAK,EAAE,CAAC,CAAC,EAAE;YAC7B,OAAOF,EAAE;UACX;UACA,IAAIxB,aAAa,CAACJ,IAAI,EAAEW,OAAO,CAAC,EAAE;YAChC,OAAO,IAAInB,YAAY,CAACQ,IAAI,CAACE,EAAE,EAAEF,IAAI,CAACqB,EAAE,EAAE,CAACQ,EAAE,EAAED,EAAE,CAAC,EAAE5B,IAAI,CAAC+B,QAAQ,CAAC,CAAC,CAAC;UACtE;QACF;QACA,OAAO,IAAIvC,YAAY,CAACQ,IAAI,CAACE,EAAE,EAAEF,IAAI,CAACqB,EAAE,EAAE,CAACO,EAAE,EAAEC,EAAE,CAAC,EAAE7B,IAAI,CAAC+B,QAAQ,CAAC;MACpE;MACA,IAAI/B,IAAI,CAACE,EAAE,KAAK,GAAG,EAAE;QACnB,IAAIrC,cAAc,CAAC+D,EAAE,CAAC,IAAIhD,MAAM,CAACgD,EAAE,CAACE,KAAK,CAAC,EAAE;UAC1C,OAAOnC,KAAK;QACd;QACA,IAAI9B,cAAc,CAACgE,EAAE,CAAC,IAAIlD,KAAK,CAACkD,EAAE,CAACC,KAAK,EAAE,CAAC,CAAC,EAAE;UAC5C,OAAOF,EAAE;QACX;QACA,OAAO,IAAIpC,YAAY,CAACQ,IAAI,CAACE,EAAE,EAAEF,IAAI,CAACqB,EAAE,EAAE,CAACO,EAAE,EAAEC,EAAE,CAAC,CAAC;MACrD;MACA,IAAI7B,IAAI,CAACE,EAAE,KAAK,GAAG,EAAE;QACnB,IAAIrC,cAAc,CAACgE,EAAE,CAAC,EAAE;UACtB,IAAIjD,MAAM,CAACiD,EAAE,CAACC,KAAK,CAAC,EAAE;YACpB,OAAOlC,KAAK;UACd,CAAC,MAAM,IAAIjB,KAAK,CAACkD,EAAE,CAACC,KAAK,EAAE,CAAC,CAAC,EAAE;YAC7B,OAAOF,EAAE;UACX;QACF;MACF;MACA,IAAI5B,IAAI,CAACE,EAAE,KAAK,KAAK,EAAE;QACrB,IAAIrC,cAAc,CAAC+D,EAAE,CAAC,EAAE;UACtB,IAAIA,EAAE,CAACE,KAAK,EAAE;YACZ,IAAI/B,eAAe,CAAC8B,EAAE,CAAC,EAAE,OAAOA,EAAE;YAClC,IAAIhE,cAAc,CAACgE,EAAE,CAAC,EAAE;cACtB,OAAOA,EAAE,CAACC,KAAK,GAAGjC,KAAK,GAAGC,KAAK;YACjC;UACF,CAAC,MAAM;YACL,OAAOA,KAAK;UACd;QACF;QACA,IAAIjC,cAAc,CAACgE,EAAE,CAAC,EAAE;UACtB,IAAIA,EAAE,CAACC,KAAK,EAAE;YACZ,IAAI/B,eAAe,CAAC6B,EAAE,CAAC,EAAE,OAAOA,EAAE;UACpC,CAAC,MAAM;YACL,OAAO9B,KAAK;UACd;QACF;MACF;MACA,IAAIE,IAAI,CAACE,EAAE,KAAK,IAAI,EAAE;QACpB,IAAIrC,cAAc,CAAC+D,EAAE,CAAC,EAAE;UACtB,IAAIA,EAAE,CAACE,KAAK,EAAE;YACZ,OAAOjC,KAAK;UACd,CAAC,MAAM;YACL,IAAIE,eAAe,CAAC8B,EAAE,CAAC,EAAE,OAAOA,EAAE;UACpC;QACF;QACA,IAAIhE,cAAc,CAACgE,EAAE,CAAC,EAAE;UACtB,IAAIA,EAAE,CAACC,KAAK,EAAE;YACZ,OAAOjC,KAAK;UACd,CAAC,MAAM;YACL,IAAIE,eAAe,CAAC6B,EAAE,CAAC,EAAE,OAAOA,EAAE;UACpC;QACF;MACF;MACA,OAAO,IAAIpC,YAAY,CAACQ,IAAI,CAACE,EAAE,EAAEF,IAAI,CAACqB,EAAE,EAAE,CAACO,EAAE,EAAEC,EAAE,CAAC,CAAC;IACrD;IACA,IAAI5D,cAAc,CAAC+B,IAAI,CAAC,EAAE;MACxB,OAAO,IAAIR,YAAY,CAACQ,IAAI,CAACE,EAAE,EAAEF,IAAI,CAACqB,EAAE,EAAErB,IAAI,CAACY,IAAI,CAACU,GAAG,CAACU,CAAC,IAAI3B,aAAa,CAAC2B,CAAC,EAAEzB,OAAO,CAAC,CAAC,CAAC;IAC1F;IACA,IAAI3C,WAAW,CAACoC,IAAI,CAAC,EAAE;MACrB,OAAO,IAAIb,SAAS,CAACa,IAAI,CAACiC,KAAK,CAACX,GAAG,CAACC,CAAC,IAAIlB,aAAa,CAACkB,CAAC,EAAEhB,OAAO,CAAC,CAAC,CAAC;IACtE;IACA,IAAI5C,cAAc,CAACqC,IAAI,CAAC,EAAE;MACxB,OAAO,IAAId,YAAY,CAACmB,aAAa,CAACL,IAAI,CAACkC,MAAM,EAAE3B,OAAO,CAAC,EAAEF,aAAa,CAACL,IAAI,CAACmC,KAAK,EAAE5B,OAAO,CAAC,CAAC;IAClG;IACA,IAAIxC,WAAW,CAACiC,IAAI,CAAC,EAAE;MACrB,OAAO,IAAIV,SAAS,CAACU,IAAI,CAACoC,UAAU,CAACd,GAAG,CAACC,CAAC,IAAIlB,aAAa,CAACkB,CAAC,EAAEhB,OAAO,CAAC,CAAC,CAAC;IAC3E;IACA,IAAIvC,YAAY,CAACgC,IAAI,CAAC,EAAE;MACtB,IAAIqC,QAAQ,GAAG,CAAC,CAAC;MACjB,KAAK,IAAIC,IAAI,IAAItC,IAAI,CAACuC,UAAU,EAAE;QAChCF,QAAQ,CAACC,IAAI,CAAC,GAAGjC,aAAa,CAACL,IAAI,CAACuC,UAAU,CAACD,IAAI,CAAC,EAAE/B,OAAO,CAAC;MAChE;MACA,OAAO,IAAIhB,UAAU,CAAC8C,QAAQ,CAAC;IACjC;IACA;IACA,OAAOrC,IAAI;EACb;EACA,OAAOvB,KAAK,CAACJ,IAAI,EAAE;IACjBmE,IAAI,EAAEnC,aAAa;IACnB,aAAa,EAAEA;EACjB,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}