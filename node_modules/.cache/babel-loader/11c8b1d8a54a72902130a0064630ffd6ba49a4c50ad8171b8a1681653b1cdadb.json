{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ParenthesisNode';\nvar dependencies = ['Node'];\nexport var createParenthesisNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  class ParenthesisNode extends Node {\n    /**\r\n     * @constructor ParenthesisNode\r\n     * @extends {Node}\r\n     * A parenthesis node describes manual parenthesis from the user input\r\n     * @param {Node} content\r\n     * @extends {Node}\r\n     */\n    constructor(content) {\n      super();\n      // validate input\n      if (!isNode(content)) {\n        throw new TypeError('Node expected for parameter \"content\"');\n      }\n      this.content = content;\n    }\n    get type() {\n      return name;\n    }\n    get isParenthesisNode() {\n      return true;\n    }\n\n    /**\r\n     * Compile a node into a JavaScript function.\r\n     * This basically pre-calculates as much as possible and only leaves open\r\n     * calculations which depend on a dynamic scope with variables.\r\n     * @param {Object} math     Math.js namespace with functions and constants.\r\n     * @param {Object} argNames An object with argument names as key and `true`\r\n     *                          as value. Used in the SymbolNode to optimize\r\n     *                          for arguments from user assigned functions\r\n     *                          (see FunctionAssignmentNode) or special symbols\r\n     *                          like `end` (see IndexNode).\r\n     * @return {function} Returns a function which can be called like:\r\n     *                        evalNode(scope: Object, args: Object, context: *)\r\n     */\n    _compile(math, argNames) {\n      return this.content._compile(math, argNames);\n    }\n\n    /**\r\n     * Get the content of the current Node.\r\n     * @return {Node} content\r\n     * @override\r\n     **/\n    getContent() {\n      return this.content.getContent();\n    }\n\n    /**\r\n     * Execute a callback for each of the child nodes of this node\r\n     * @param {function(child: Node, path: string, parent: Node)} callback\r\n     */\n    forEach(callback) {\n      callback(this.content, 'content', this);\n    }\n\n    /**\r\n     * Create a new ParenthesisNode whose child is the result of calling\r\n     * the provided callback function on the child of this node.\r\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\r\n     * @returns {ParenthesisNode} Returns a clone of the node\r\n     */\n    map(callback) {\n      var content = callback(this.content, 'content', this);\n      return new ParenthesisNode(content);\n    }\n\n    /**\r\n     * Create a clone of this node, a shallow copy\r\n     * @return {ParenthesisNode}\r\n     */\n    clone() {\n      return new ParenthesisNode(this.content);\n    }\n\n    /**\r\n     * Get string representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\n    _toString(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return '(' + this.content.toString(options) + ')';\n      }\n      return this.content.toString(options);\n    }\n\n    /**\r\n     * Get a JSON representation of the node\r\n     * @returns {Object}\r\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        content: this.content\n      };\n    }\n\n    /**\r\n     * Instantiate an ParenthesisNode from its JSON representation\r\n     * @param {Object} json  An object structured like\r\n     *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\r\n     *                       where mathjs is optional\r\n     * @returns {ParenthesisNode}\r\n     */\n    static fromJSON(json) {\n      return new ParenthesisNode(json.content);\n    }\n\n    /**\r\n     * Get HTML representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\n    _toHTML(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n      return this.content.toHTML(options);\n    }\n\n    /**\r\n     * Get LaTeX representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\n    _toTex(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n      }\n      return this.content.toTex(options);\n    }\n  }\n  _defineProperty(ParenthesisNode, \"name\", name);\n  return ParenthesisNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isNode","factory","name","dependencies","createParenthesisNode","_ref","Node","ParenthesisNode","constructor","content","TypeError","type","isParenthesisNode","_compile","math","argNames","getContent","forEach","callback","map","clone","_toString","options","parenthesis","toString","toJSON","mathjs","fromJSON","json","_toHTML","toHTML","_toTex","concat","toTex","isClass"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/expression/node/ParenthesisNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\r\nimport { isNode } from '../../utils/is.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'ParenthesisNode';\r\nvar dependencies = ['Node'];\r\nexport var createParenthesisNode = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    Node\r\n  } = _ref;\r\n  class ParenthesisNode extends Node {\r\n    /**\r\n     * @constructor ParenthesisNode\r\n     * @extends {Node}\r\n     * A parenthesis node describes manual parenthesis from the user input\r\n     * @param {Node} content\r\n     * @extends {Node}\r\n     */\r\n    constructor(content) {\r\n      super();\r\n      // validate input\r\n      if (!isNode(content)) {\r\n        throw new TypeError('Node expected for parameter \"content\"');\r\n      }\r\n      this.content = content;\r\n    }\r\n    get type() {\r\n      return name;\r\n    }\r\n    get isParenthesisNode() {\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Compile a node into a JavaScript function.\r\n     * This basically pre-calculates as much as possible and only leaves open\r\n     * calculations which depend on a dynamic scope with variables.\r\n     * @param {Object} math     Math.js namespace with functions and constants.\r\n     * @param {Object} argNames An object with argument names as key and `true`\r\n     *                          as value. Used in the SymbolNode to optimize\r\n     *                          for arguments from user assigned functions\r\n     *                          (see FunctionAssignmentNode) or special symbols\r\n     *                          like `end` (see IndexNode).\r\n     * @return {function} Returns a function which can be called like:\r\n     *                        evalNode(scope: Object, args: Object, context: *)\r\n     */\r\n    _compile(math, argNames) {\r\n      return this.content._compile(math, argNames);\r\n    }\r\n\r\n    /**\r\n     * Get the content of the current Node.\r\n     * @return {Node} content\r\n     * @override\r\n     **/\r\n    getContent() {\r\n      return this.content.getContent();\r\n    }\r\n\r\n    /**\r\n     * Execute a callback for each of the child nodes of this node\r\n     * @param {function(child: Node, path: string, parent: Node)} callback\r\n     */\r\n    forEach(callback) {\r\n      callback(this.content, 'content', this);\r\n    }\r\n\r\n    /**\r\n     * Create a new ParenthesisNode whose child is the result of calling\r\n     * the provided callback function on the child of this node.\r\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\r\n     * @returns {ParenthesisNode} Returns a clone of the node\r\n     */\r\n    map(callback) {\r\n      var content = callback(this.content, 'content', this);\r\n      return new ParenthesisNode(content);\r\n    }\r\n\r\n    /**\r\n     * Create a clone of this node, a shallow copy\r\n     * @return {ParenthesisNode}\r\n     */\r\n    clone() {\r\n      return new ParenthesisNode(this.content);\r\n    }\r\n\r\n    /**\r\n     * Get string representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\r\n    _toString(options) {\r\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\r\n        return '(' + this.content.toString(options) + ')';\r\n      }\r\n      return this.content.toString(options);\r\n    }\r\n\r\n    /**\r\n     * Get a JSON representation of the node\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n      return {\r\n        mathjs: name,\r\n        content: this.content\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Instantiate an ParenthesisNode from its JSON representation\r\n     * @param {Object} json  An object structured like\r\n     *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\r\n     *                       where mathjs is optional\r\n     * @returns {ParenthesisNode}\r\n     */\r\n    static fromJSON(json) {\r\n      return new ParenthesisNode(json.content);\r\n    }\r\n\r\n    /**\r\n     * Get HTML representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\r\n    _toHTML(options) {\r\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\r\n        return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\r\n      }\r\n      return this.content.toHTML(options);\r\n    }\r\n\r\n    /**\r\n     * Get LaTeX representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\r\n    _toTex(options) {\r\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\r\n        return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\r\n      }\r\n      return this.content.toTex(options);\r\n    }\r\n  }\r\n  _defineProperty(ParenthesisNode, \"name\", name);\r\n  return ParenthesisNode;\r\n}, {\r\n  isClass: true,\r\n  isNode: true\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}