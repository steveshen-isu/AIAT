{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'complex';\nvar dependencies = ['typed', 'Complex'];\nexport var createComplex = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Complex\n  } = _ref;\n  /**\r\n   * Create a complex value or convert a value to a complex value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.complex()                           // creates a complex value with zero\r\n   *                                              // as real and imaginary part.\r\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\r\n   *                                              // values for real and imaginary part.\r\n   *     math.complex(re : number)                // creates a complex value with provided\r\n   *                                              // real value and zero imaginary part.\r\n   *     math.complex(complex : Complex)          // clones the provided complex value.\r\n   *     math.complex(arg : string)               // parses a string into a complex value.\r\n   *     math.complex(array : Array)              // converts the elements of the array\r\n   *                                              // or matrix element wise into a\r\n   *                                              // complex value.\r\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\r\n   *                                              // values for real an imaginary part.\r\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\r\n   *                                              // polar coordinates\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i\r\n   *    a.re = 5                          // a = Complex 5 - 4i\r\n   *    const i = a.im                    // Number -4\r\n   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i\r\n   *    const c = math.complex()          // Complex 0 + 0i\r\n   *    const d = math.add(a, b)          // Complex 5 + 2i\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, index, matrix, number, string, unit\r\n   *\r\n   * @param {* | Array | Matrix} [args]\r\n   *            Arguments specifying the real and imaginary part of the complex number\r\n   * @return {Complex | Array | Matrix} Returns a complex value\r\n   */\n  return typed('complex', {\n    '': function _() {\n      return Complex.ZERO;\n    },\n    number: function number(x) {\n      return new Complex(x, 0);\n    },\n    'number, number': function number_number(re, im) {\n      return new Complex(re, im);\n    },\n    // TODO: this signature should be redundant\n    'BigNumber, BigNumber': function BigNumber_BigNumber(re, im) {\n      return new Complex(re.toNumber(), im.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return new Complex(x.valueOf(), 0);\n    },\n    Complex: function Complex(x) {\n      return x.clone();\n    },\n    string: function string(x) {\n      return Complex(x); // for example '2 + 3i'\n    },\n    null: function _null(x) {\n      return Complex(0);\n    },\n    Object: function Object(x) {\n      if ('re' in x && 'im' in x) {\n        return new Complex(x.re, x.im);\n      }\n      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {\n        return new Complex(x);\n      }\n      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createComplex","_ref","typed","Complex","_","ZERO","number","x","number_number","re","im","BigNumber_BigNumber","toNumber","Fraction","valueOf","clone","string","null","_null","Object","Error","referToSelf","self"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/type/complex/function/complex.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\r\nimport { deepMap } from '../../../utils/collection.js';\r\nvar name = 'complex';\r\nvar dependencies = ['typed', 'Complex'];\r\nexport var createComplex = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    Complex\r\n  } = _ref;\r\n  /**\r\n   * Create a complex value or convert a value to a complex value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.complex()                           // creates a complex value with zero\r\n   *                                              // as real and imaginary part.\r\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\r\n   *                                              // values for real and imaginary part.\r\n   *     math.complex(re : number)                // creates a complex value with provided\r\n   *                                              // real value and zero imaginary part.\r\n   *     math.complex(complex : Complex)          // clones the provided complex value.\r\n   *     math.complex(arg : string)               // parses a string into a complex value.\r\n   *     math.complex(array : Array)              // converts the elements of the array\r\n   *                                              // or matrix element wise into a\r\n   *                                              // complex value.\r\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\r\n   *                                              // values for real an imaginary part.\r\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\r\n   *                                              // polar coordinates\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i\r\n   *    a.re = 5                          // a = Complex 5 - 4i\r\n   *    const i = a.im                    // Number -4\r\n   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i\r\n   *    const c = math.complex()          // Complex 0 + 0i\r\n   *    const d = math.add(a, b)          // Complex 5 + 2i\r\n   *\r\n   * See also:\r\n   *\r\n   *    bignumber, boolean, index, matrix, number, string, unit\r\n   *\r\n   * @param {* | Array | Matrix} [args]\r\n   *            Arguments specifying the real and imaginary part of the complex number\r\n   * @return {Complex | Array | Matrix} Returns a complex value\r\n   */\r\n  return typed('complex', {\r\n    '': function _() {\r\n      return Complex.ZERO;\r\n    },\r\n    number: function number(x) {\r\n      return new Complex(x, 0);\r\n    },\r\n    'number, number': function number_number(re, im) {\r\n      return new Complex(re, im);\r\n    },\r\n    // TODO: this signature should be redundant\r\n    'BigNumber, BigNumber': function BigNumber_BigNumber(re, im) {\r\n      return new Complex(re.toNumber(), im.toNumber());\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return new Complex(x.valueOf(), 0);\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.clone();\r\n    },\r\n    string: function string(x) {\r\n      return Complex(x); // for example '2 + 3i'\r\n    },\r\n    null: function _null(x) {\r\n      return Complex(0);\r\n    },\r\n    Object: function Object(x) {\r\n      if ('re' in x && 'im' in x) {\r\n        return new Complex(x.re, x.im);\r\n      }\r\n      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {\r\n        return new Complex(x);\r\n      }\r\n      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');\r\n    },\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,8BAA8B;AACtD,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC;AACvC,OAAO,IAAIC,aAAa,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC5E,IAAI;IACFC,KAAK;IACLC;EACF,CAAC,GAAGF,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAAC,SAAS,EAAE;IACtB,EAAE,EAAE,SAASE,CAACA,CAAA,EAAG;MACf,OAAOD,OAAO,CAACE,IAAI;IACrB,CAAC;IACDC,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB,OAAO,IAAIJ,OAAO,CAACI,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IACD,gBAAgB,EAAE,SAASC,aAAaA,CAACC,EAAE,EAAEC,EAAE,EAAE;MAC/C,OAAO,IAAIP,OAAO,CAACM,EAAE,EAAEC,EAAE,CAAC;IAC5B,CAAC;IACD;IACA,sBAAsB,EAAE,SAASC,mBAAmBA,CAACF,EAAE,EAAEC,EAAE,EAAE;MAC3D,OAAO,IAAIP,OAAO,CAACM,EAAE,CAACG,QAAQ,CAAC,CAAC,EAAEF,EAAE,CAACE,QAAQ,CAAC,CAAC,CAAC;IAClD,CAAC;IACDC,QAAQ,EAAE,SAASA,QAAQA,CAACN,CAAC,EAAE;MAC7B,OAAO,IAAIJ,OAAO,CAACI,CAAC,CAACO,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC;IACDX,OAAO,EAAE,SAASA,OAAOA,CAACI,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACQ,KAAK,CAAC,CAAC;IAClB,CAAC;IACDC,MAAM,EAAE,SAASA,MAAMA,CAACT,CAAC,EAAE;MACzB,OAAOJ,OAAO,CAACI,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACDU,IAAI,EAAE,SAASC,KAAKA,CAACX,CAAC,EAAE;MACtB,OAAOJ,OAAO,CAAC,CAAC,CAAC;IACnB,CAAC;IACDgB,MAAM,EAAE,SAASA,MAAMA,CAACZ,CAAC,EAAE;MACzB,IAAI,IAAI,IAAIA,CAAC,IAAI,IAAI,IAAIA,CAAC,EAAE;QAC1B,OAAO,IAAIJ,OAAO,CAACI,CAAC,CAACE,EAAE,EAAEF,CAAC,CAACG,EAAE,CAAC;MAChC;MACA,IAAI,GAAG,IAAIH,CAAC,IAAI,KAAK,IAAIA,CAAC,IAAI,KAAK,IAAIA,CAAC,IAAI,KAAK,IAAIA,CAAC,EAAE;QACtD,OAAO,IAAIJ,OAAO,CAACI,CAAC,CAAC;MACvB;MACA,MAAM,IAAIa,KAAK,CAAC,6EAA6E,CAAC;IAChG,CAAC;IACD,gBAAgB,EAAElB,KAAK,CAACmB,WAAW,CAACC,IAAI,IAAIf,CAAC,IAAIV,OAAO,CAACU,CAAC,EAAEe,IAAI,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}