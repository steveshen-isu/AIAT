{"ast":null,"code":"import { format as formatString } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'format';\nvar dependencies = ['typed'];\nexport var createFormat = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Format a value of any type into a string.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.format(value)\r\n   *    math.format(value, options)\r\n   *    math.format(value, precision)\r\n   *    math.format(value, callback)\r\n   *\r\n   * Where:\r\n   *\r\n   *  - `value: *`\r\n   *    The value to be formatted\r\n   *  - `options: Object`\r\n   *    An object with formatting options. Available options:\r\n   *    - `notation: string`\r\n   *      Number notation. Choose from:\r\n   *      - `'fixed'`\r\n   *        Always use regular number notation.\r\n   *        For example `'123.40'` and `'14000000'`\r\n   *      - `'exponential'`\r\n   *        Always use exponential notation.\r\n   *        For example `'1.234e+2'` and `'1.4e+7'`\r\n   *      - `'engineering'`\r\n   *        Always use engineering notation: always have exponential notation,\r\n   *        and select the exponent to be a multiple of `3`.\r\n   *        For example `'123.4e+0'` and `'14.0e+6'`\r\n   *      - `'auto'` (default)\r\n   *        Regular number notation for numbers having an absolute value between\r\n   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.\r\n   *        Lower bound is included, upper bound is excluded.\r\n   *        For example `'123.4'` and `'1.4e7'`.\r\n   *      - `'bin'`, `'oct'`, or `'hex'`\r\n   *        Format the number using binary, octal, or hexadecimal notation.\r\n   *        For example `'0b1101'` and `'0x10fe'`.\r\n   *    - `wordSize: number | BigNumber`\r\n   *      The word size in bits to use for formatting in binary, octal, or\r\n   *      hexadecimal notation. To be used only with `'bin'`, `'oct'`, or `'hex'`\r\n   *      values for `notation` option. When this option is defined the value\r\n   *      is formatted as a signed twos complement integer of the given word\r\n   *      size and the size suffix is appended to the output.\r\n   *      For example `format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'`.\r\n   *      Default value is undefined.\r\n   *    - `precision: number | BigNumber`\r\n   *      Limit the number of digits of the formatted value.\r\n   *      For regular numbers, must be a number between `0` and `16`.\r\n   *      For bignumbers, the maximum depends on the configured precision,\r\n   *      see function `config()`.\r\n   *      In case of notations `'exponential'`, `'engineering'`, and `'auto'`,\r\n   *      `precision` defines the total number of significant digits returned.\r\n   *      In case of notation `'fixed'`, `precision` defines the number of\r\n   *      significant digits after the decimal point.\r\n   *      `precision` is undefined by default.\r\n   *    - `lowerExp: number`\r\n   *      Exponent determining the lower boundary for formatting a value with\r\n   *      an exponent when `notation='auto'`. Default value is `-3`.\r\n   *    - `upperExp: number`\r\n   *      Exponent determining the upper boundary for formatting a value with\r\n   *      an exponent when `notation='auto'`. Default value is `5`.\r\n   *    - `fraction: string`. Available values: `'ratio'` (default) or `'decimal'`.\r\n   *      For example `format(fraction(1, 3))` will output `'1/3'` when `'ratio'`\r\n   *      is configured, and will output `'0.(3)'` when `'decimal'` is configured.\r\n   *    - `truncate: number`. Specifies the maximum allowed length of the\r\n   *      returned string. If it had been longer, the excess characters\r\n   *      are deleted and replaced with `'...'`.\r\n   * - `callback: function`\r\n   *   A custom formatting function, invoked for all numeric elements in `value`,\r\n   *   for example all elements of a matrix, or the real and imaginary\r\n   *   parts of a complex number. This callback can be used to override the\r\n   *   built-in numeric notation with any type of formatting. Function `callback`\r\n   *   is called with `value` as parameter and must return a string.\r\n   *\r\n   * When `value` is an Object:\r\n   *\r\n   * - When the object contains a property `format` being a function, this function\r\n   *   is invoked as `value.format(options)` and the result is returned.\r\n   * - When the object has its own `toString` method, this method is invoked\r\n   *   and the result is returned.\r\n   * - In other cases the function will loop over all object properties and\r\n   *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\r\n   *\r\n   * When value is a function:\r\n   *\r\n   * - When the function has a property `syntax`, it returns this\r\n   *   syntax description.\r\n   * - In other cases, a string `'function'` is returned.\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.format(6.4)                                        // returns '6.4'\r\n   *    math.format(1240000)                                    // returns '1.24e+6'\r\n   *    math.format(1/3)                                        // returns '0.3333333333333333'\r\n   *    math.format(1/3, 3)                                     // returns '0.333'\r\n   *    math.format(21385, 2)                                   // returns '21000'\r\n   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'\r\n   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'\r\n   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'\r\n   *    math.format(12400, {notation: 'engineering'})           // returns '12.4e+3'\r\n   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'\r\n   *\r\n   *    function formatCurrency(value) {\r\n   *      // return currency notation with two digits:\r\n   *      return '$' + value.toFixed(2)\r\n   *\r\n   *      // you could also use math.format inside the callback:\r\n   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})\r\n   *    }\r\n   *    math.format([2.1, 3, 0.016], formatCurrency)            // returns '[$2.10, $3.00, $0.02]'\r\n   *\r\n   * See also:\r\n   *\r\n   *    print\r\n   *\r\n   * @param {*} value                               Value to be stringified\r\n   * @param {Object | Function | number} [options]  Formatting options\r\n   * @return {string} The formatted value\r\n   */\n  return typed(name, {\n    any: formatString,\n    'any, Object | function | number | BigNumber': formatString\n  });\n});","map":{"version":3,"names":["format","formatString","factory","name","dependencies","createFormat","_ref","typed","any"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/string/format.js"],"sourcesContent":["import { format as formatString } from '../../utils/string.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'format';\r\nvar dependencies = ['typed'];\r\nexport var createFormat = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Format a value of any type into a string.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.format(value)\r\n   *    math.format(value, options)\r\n   *    math.format(value, precision)\r\n   *    math.format(value, callback)\r\n   *\r\n   * Where:\r\n   *\r\n   *  - `value: *`\r\n   *    The value to be formatted\r\n   *  - `options: Object`\r\n   *    An object with formatting options. Available options:\r\n   *    - `notation: string`\r\n   *      Number notation. Choose from:\r\n   *      - `'fixed'`\r\n   *        Always use regular number notation.\r\n   *        For example `'123.40'` and `'14000000'`\r\n   *      - `'exponential'`\r\n   *        Always use exponential notation.\r\n   *        For example `'1.234e+2'` and `'1.4e+7'`\r\n   *      - `'engineering'`\r\n   *        Always use engineering notation: always have exponential notation,\r\n   *        and select the exponent to be a multiple of `3`.\r\n   *        For example `'123.4e+0'` and `'14.0e+6'`\r\n   *      - `'auto'` (default)\r\n   *        Regular number notation for numbers having an absolute value between\r\n   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.\r\n   *        Lower bound is included, upper bound is excluded.\r\n   *        For example `'123.4'` and `'1.4e7'`.\r\n   *      - `'bin'`, `'oct'`, or `'hex'`\r\n   *        Format the number using binary, octal, or hexadecimal notation.\r\n   *        For example `'0b1101'` and `'0x10fe'`.\r\n   *    - `wordSize: number | BigNumber`\r\n   *      The word size in bits to use for formatting in binary, octal, or\r\n   *      hexadecimal notation. To be used only with `'bin'`, `'oct'`, or `'hex'`\r\n   *      values for `notation` option. When this option is defined the value\r\n   *      is formatted as a signed twos complement integer of the given word\r\n   *      size and the size suffix is appended to the output.\r\n   *      For example `format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'`.\r\n   *      Default value is undefined.\r\n   *    - `precision: number | BigNumber`\r\n   *      Limit the number of digits of the formatted value.\r\n   *      For regular numbers, must be a number between `0` and `16`.\r\n   *      For bignumbers, the maximum depends on the configured precision,\r\n   *      see function `config()`.\r\n   *      In case of notations `'exponential'`, `'engineering'`, and `'auto'`,\r\n   *      `precision` defines the total number of significant digits returned.\r\n   *      In case of notation `'fixed'`, `precision` defines the number of\r\n   *      significant digits after the decimal point.\r\n   *      `precision` is undefined by default.\r\n   *    - `lowerExp: number`\r\n   *      Exponent determining the lower boundary for formatting a value with\r\n   *      an exponent when `notation='auto'`. Default value is `-3`.\r\n   *    - `upperExp: number`\r\n   *      Exponent determining the upper boundary for formatting a value with\r\n   *      an exponent when `notation='auto'`. Default value is `5`.\r\n   *    - `fraction: string`. Available values: `'ratio'` (default) or `'decimal'`.\r\n   *      For example `format(fraction(1, 3))` will output `'1/3'` when `'ratio'`\r\n   *      is configured, and will output `'0.(3)'` when `'decimal'` is configured.\r\n   *    - `truncate: number`. Specifies the maximum allowed length of the\r\n   *      returned string. If it had been longer, the excess characters\r\n   *      are deleted and replaced with `'...'`.\r\n   * - `callback: function`\r\n   *   A custom formatting function, invoked for all numeric elements in `value`,\r\n   *   for example all elements of a matrix, or the real and imaginary\r\n   *   parts of a complex number. This callback can be used to override the\r\n   *   built-in numeric notation with any type of formatting. Function `callback`\r\n   *   is called with `value` as parameter and must return a string.\r\n   *\r\n   * When `value` is an Object:\r\n   *\r\n   * - When the object contains a property `format` being a function, this function\r\n   *   is invoked as `value.format(options)` and the result is returned.\r\n   * - When the object has its own `toString` method, this method is invoked\r\n   *   and the result is returned.\r\n   * - In other cases the function will loop over all object properties and\r\n   *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\r\n   *\r\n   * When value is a function:\r\n   *\r\n   * - When the function has a property `syntax`, it returns this\r\n   *   syntax description.\r\n   * - In other cases, a string `'function'` is returned.\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.format(6.4)                                        // returns '6.4'\r\n   *    math.format(1240000)                                    // returns '1.24e+6'\r\n   *    math.format(1/3)                                        // returns '0.3333333333333333'\r\n   *    math.format(1/3, 3)                                     // returns '0.333'\r\n   *    math.format(21385, 2)                                   // returns '21000'\r\n   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'\r\n   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'\r\n   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'\r\n   *    math.format(12400, {notation: 'engineering'})           // returns '12.4e+3'\r\n   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'\r\n   *\r\n   *    function formatCurrency(value) {\r\n   *      // return currency notation with two digits:\r\n   *      return '$' + value.toFixed(2)\r\n   *\r\n   *      // you could also use math.format inside the callback:\r\n   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})\r\n   *    }\r\n   *    math.format([2.1, 3, 0.016], formatCurrency)            // returns '[$2.10, $3.00, $0.02]'\r\n   *\r\n   * See also:\r\n   *\r\n   *    print\r\n   *\r\n   * @param {*} value                               Value to be stringified\r\n   * @param {Object | Function | number} [options]  Formatting options\r\n   * @return {string} The formatted value\r\n   */\r\n  return typed(name, {\r\n    any: formatString,\r\n    'any, Object | function | number | BigNumber': formatString\r\n  });\r\n});"],"mappings":"AAAA,SAASA,MAAM,IAAIC,YAAY,QAAQ,uBAAuB;AAC9D,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,YAAY,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC3E,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBK,GAAG,EAAEP,YAAY;IACjB,6CAA6C,EAAEA;EACjD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}