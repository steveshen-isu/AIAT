{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { expm1Number } from '../../plain/number/index.js';\nvar name = 'expm1';\nvar dependencies = ['typed', 'Complex'];\nexport var createExpm1 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Complex: _Complex\n  } = _ref;\n  /**\r\n   * Calculate the value of subtracting 1 from the exponential value.\r\n   * This function is more accurate than `math.exp(x)-1` when `x` is near 0\r\n   * To avoid ambiguity with the matrix exponential `expm`, this function\r\n   * does not operate on matrices; if you wish to apply it elementwise, see\r\n   * the examples.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.expm1(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.expm1(2)                      // returns number 6.38905609893065\r\n   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495\r\n   *    math.expm1(1e-8)                   // returns number 1.0000000050000001e-8\r\n   *    math.exp(1e-8) - 1                 // returns number 9.9999999392253e-9\r\n   *    math.log(math.expm1(2) + 1)        // returns number 2\r\n   *\r\n   *    math.map([1, 2, 3], math.expm1)\r\n   *    // returns Array [\r\n   *    //   1.718281828459045,\r\n   *    //   6.3890560989306495,\r\n   *    //   19.085536923187668\r\n   *    // ]\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, expm, log, pow\r\n   *\r\n   * @param {number | BigNumber | Complex} x  The number to exponentiate\r\n   * @return {number | BigNumber | Complex} Exponential of `x`, minus one\r\n   */\n  return typed(name, {\n    number: expm1Number,\n    Complex: function Complex(x) {\n      var r = Math.exp(x.re);\n      return new _Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));\n    },\n    BigNumber: function BigNumber(x) {\n      return x.exp().minus(1);\n    }\n  });\n});","map":{"version":3,"names":["factory","expm1Number","name","dependencies","createExpm1","_ref","typed","Complex","_Complex","number","x","r","Math","exp","re","cos","im","sin","BigNumber","minus"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/expm1.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { expm1Number } from '../../plain/number/index.js';\r\nvar name = 'expm1';\r\nvar dependencies = ['typed', 'Complex'];\r\nexport var createExpm1 = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    Complex: _Complex\r\n  } = _ref;\r\n  /**\r\n   * Calculate the value of subtracting 1 from the exponential value.\r\n   * This function is more accurate than `math.exp(x)-1` when `x` is near 0\r\n   * To avoid ambiguity with the matrix exponential `expm`, this function\r\n   * does not operate on matrices; if you wish to apply it elementwise, see\r\n   * the examples.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.expm1(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.expm1(2)                      // returns number 6.38905609893065\r\n   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495\r\n   *    math.expm1(1e-8)                   // returns number 1.0000000050000001e-8\r\n   *    math.exp(1e-8) - 1                 // returns number 9.9999999392253e-9\r\n   *    math.log(math.expm1(2) + 1)        // returns number 2\r\n   *\r\n   *    math.map([1, 2, 3], math.expm1)\r\n   *    // returns Array [\r\n   *    //   1.718281828459045,\r\n   *    //   6.3890560989306495,\r\n   *    //   19.085536923187668\r\n   *    // ]\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, expm, log, pow\r\n   *\r\n   * @param {number | BigNumber | Complex} x  The number to exponentiate\r\n   * @return {number | BigNumber | Complex} Exponential of `x`, minus one\r\n   */\r\n  return typed(name, {\r\n    number: expm1Number,\r\n    Complex: function Complex(x) {\r\n      var r = Math.exp(x.re);\r\n      return new _Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.exp().minus(1);\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC;AACvC,OAAO,IAAIC,WAAW,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC1E,IAAI;IACFC,KAAK;IACLC,OAAO,EAAEC;EACX,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBO,MAAM,EAAER,WAAW;IACnBM,OAAO,EAAE,SAASA,OAAOA,CAACG,CAAC,EAAE;MAC3B,IAAIC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACH,CAAC,CAACI,EAAE,CAAC;MACtB,OAAO,IAAIN,QAAQ,CAACG,CAAC,GAAGC,IAAI,CAACG,GAAG,CAACL,CAAC,CAACM,EAAE,CAAC,GAAG,CAAC,EAAEL,CAAC,GAAGC,IAAI,CAACK,GAAG,CAACP,CAAC,CAACM,EAAE,CAAC,CAAC;IACjE,CAAC;IACDE,SAAS,EAAE,SAASA,SAASA,CAACR,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACG,GAAG,CAAC,CAAC,CAACM,KAAK,CAAC,CAAC,CAAC;IACzB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}