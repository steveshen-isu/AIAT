{"ast":null,"code":"import { arraySize as size } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'sort';\nvar dependencies = ['typed', 'matrix', 'compare', 'compareNatural'];\nexport var createSort = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    compare,\n    compareNatural\n  } = _ref;\n  var compareAsc = compare;\n  var compareDesc = (a, b) => -compare(a, b);\n\n  /**\r\n   * Sort the items in a matrix.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sort(x)\r\n   *    math.sort(x, compare)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sort([5, 10, 1]) // returns [1, 5, 10]\r\n   *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)\r\n   *    // returns ['A', 'B', 'C', 'D']\r\n   *\r\n   *    function sortByLength (a, b) {\r\n   *      return a.length - b.length\r\n   *    }\r\n   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)\r\n   *    // returns ['Tom', 'Sara', 'Langdon']\r\n   *\r\n   * See also:\r\n   *\r\n   *    filter, forEach, map, compare, compareNatural\r\n   *\r\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\r\n   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']\r\n   *        An optional _comparator function or name. The function is called as\r\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\r\n   *        and 0 when a == b.\r\n   * @return {Matrix | Array} Returns the sorted matrix.\r\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      _arrayIsVector(x);\n      return x.sort(compareAsc);\n    },\n    Matrix: function Matrix(x) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(compareAsc), x.storage());\n    },\n    'Array, function': function Array_function(x, _comparator) {\n      _arrayIsVector(x);\n      return x.sort(_comparator);\n    },\n    'Matrix, function': function Matrix_function(x, _comparator) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(_comparator), x.storage());\n    },\n    'Array, string': function Array_string(x, order) {\n      _arrayIsVector(x);\n      return x.sort(_comparator(order));\n    },\n    'Matrix, string': function Matrix_string(x, order) {\n      _matrixIsVector(x);\n      return matrix(x.toArray().sort(_comparator(order)), x.storage());\n    }\n  });\n\n  /**\r\n   * Get the comparator for given order ('asc', 'desc', 'natural')\r\n   * @param {'asc' | 'desc' | 'natural'} order\r\n   * @return {Function} Returns a _comparator function\r\n   */\n  function _comparator(order) {\n    if (order === 'asc') {\n      return compareAsc;\n    } else if (order === 'desc') {\n      return compareDesc;\n    } else if (order === 'natural') {\n      return compareNatural;\n    } else {\n      throw new Error('String \"asc\", \"desc\", or \"natural\" expected');\n    }\n  }\n\n  /**\r\n   * Validate whether an array is one dimensional\r\n   * Throws an error when this is not the case\r\n   * @param {Array} array\r\n   * @private\r\n   */\n  function _arrayIsVector(array) {\n    if (size(array).length !== 1) {\n      throw new Error('One dimensional array expected');\n    }\n  }\n\n  /**\r\n   * Validate whether a matrix is one dimensional\r\n   * Throws an error when this is not the case\r\n   * @param {Matrix} matrix\r\n   * @private\r\n   */\n  function _matrixIsVector(matrix) {\n    if (matrix.size().length !== 1) {\n      throw new Error('One dimensional matrix expected');\n    }\n  }\n});","map":{"version":3,"names":["arraySize","size","factory","name","dependencies","createSort","_ref","typed","matrix","compare","compareNatural","compareAsc","compareDesc","a","b","Array","x","_arrayIsVector","sort","Matrix","_matrixIsVector","toArray","storage","Array_function","_comparator","Matrix_function","Array_string","order","Matrix_string","Error","array","length"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/matrix/sort.js"],"sourcesContent":["import { arraySize as size } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'sort';\r\nvar dependencies = ['typed', 'matrix', 'compare', 'compareNatural'];\r\nexport var createSort = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    compare,\r\n    compareNatural\r\n  } = _ref;\r\n  var compareAsc = compare;\r\n  var compareDesc = (a, b) => -compare(a, b);\r\n\r\n  /**\r\n   * Sort the items in a matrix.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sort(x)\r\n   *    math.sort(x, compare)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sort([5, 10, 1]) // returns [1, 5, 10]\r\n   *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)\r\n   *    // returns ['A', 'B', 'C', 'D']\r\n   *\r\n   *    function sortByLength (a, b) {\r\n   *      return a.length - b.length\r\n   *    }\r\n   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)\r\n   *    // returns ['Tom', 'Sara', 'Langdon']\r\n   *\r\n   * See also:\r\n   *\r\n   *    filter, forEach, map, compare, compareNatural\r\n   *\r\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\r\n   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']\r\n   *        An optional _comparator function or name. The function is called as\r\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\r\n   *        and 0 when a == b.\r\n   * @return {Matrix | Array} Returns the sorted matrix.\r\n   */\r\n  return typed(name, {\r\n    Array: function Array(x) {\r\n      _arrayIsVector(x);\r\n      return x.sort(compareAsc);\r\n    },\r\n    Matrix: function Matrix(x) {\r\n      _matrixIsVector(x);\r\n      return matrix(x.toArray().sort(compareAsc), x.storage());\r\n    },\r\n    'Array, function': function Array_function(x, _comparator) {\r\n      _arrayIsVector(x);\r\n      return x.sort(_comparator);\r\n    },\r\n    'Matrix, function': function Matrix_function(x, _comparator) {\r\n      _matrixIsVector(x);\r\n      return matrix(x.toArray().sort(_comparator), x.storage());\r\n    },\r\n    'Array, string': function Array_string(x, order) {\r\n      _arrayIsVector(x);\r\n      return x.sort(_comparator(order));\r\n    },\r\n    'Matrix, string': function Matrix_string(x, order) {\r\n      _matrixIsVector(x);\r\n      return matrix(x.toArray().sort(_comparator(order)), x.storage());\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get the comparator for given order ('asc', 'desc', 'natural')\r\n   * @param {'asc' | 'desc' | 'natural'} order\r\n   * @return {Function} Returns a _comparator function\r\n   */\r\n  function _comparator(order) {\r\n    if (order === 'asc') {\r\n      return compareAsc;\r\n    } else if (order === 'desc') {\r\n      return compareDesc;\r\n    } else if (order === 'natural') {\r\n      return compareNatural;\r\n    } else {\r\n      throw new Error('String \"asc\", \"desc\", or \"natural\" expected');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate whether an array is one dimensional\r\n   * Throws an error when this is not the case\r\n   * @param {Array} array\r\n   * @private\r\n   */\r\n  function _arrayIsVector(array) {\r\n    if (size(array).length !== 1) {\r\n      throw new Error('One dimensional array expected');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate whether a matrix is one dimensional\r\n   * Throws an error when this is not the case\r\n   * @param {Matrix} matrix\r\n   * @private\r\n   */\r\n  function _matrixIsVector(matrix) {\r\n    if (matrix.size().length !== 1) {\r\n      throw new Error('One dimensional matrix expected');\r\n    }\r\n  }\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}