{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { createRng } from './util/seededRNG.js';\nimport { randomMatrix } from './util/randomMatrix.js';\nvar name = 'random';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandom = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    on\n  } = _ref;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  /**\r\n   * Return a random number larger or equal to `min` and smaller than `max`\r\n   * using a uniform distribution.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.random()                // generate a random number between 0 and 1\r\n   *     math.random(max)             // generate a random number between 0 and max\r\n   *     math.random(min, max)        // generate a random number between min and max\r\n   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\r\n   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\r\n   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.random()       // returns a random number between 0 and 1\r\n   *     math.random(100)    // returns a random number between 0 and 100\r\n   *     math.random(30, 40) // returns a random number between 30 and 40\r\n   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1\r\n   *\r\n   * See also:\r\n   *\r\n   *     randomInt, pickRandom\r\n   *\r\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\r\n   *                                size and filled with random values is returned\r\n   * @param {number} [min]  Minimum boundary for the random value, included\r\n   * @param {number} [max]  Maximum boundary for the random value, excluded\r\n   * @return {number | Array | Matrix} A random number\r\n   */\n  return typed(name, {\n    '': () => _random(0, 1),\n    number: max => _random(0, max),\n    'number, number': (min, max) => _random(min, max),\n    'Array | Matrix': size => _randomMatrix(size, 0, 1),\n    'Array | Matrix, number': (size, max) => _randomMatrix(size, 0, max),\n    'Array | Matrix, number, number': (size, min, max) => _randomMatrix(size, min, max)\n  });\n  function _randomMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), () => _random(min, max));\n    return isMatrix(size) ? size.create(res, 'number') : res;\n  }\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n});\n\n// number only implementation of random, no matrix support\n// TODO: there is quite some duplicate code in both createRandom and createRandomNumber, can we improve that?\nexport var createRandomNumber = /* #__PURE__ */factory(name, ['typed', 'config', '?on'], _ref2 => {\n  var {\n    typed,\n    config,\n    on,\n    matrix\n  } = _ref2;\n  // seeded pseudo random number generator1\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  return typed(name, {\n    '': () => _random(0, 1),\n    number: max => _random(0, max),\n    'number, number': (min, max) => _random(min, max)\n  });\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n});","map":{"version":3,"names":["factory","isMatrix","createRng","randomMatrix","name","dependencies","createRandom","_ref","typed","config","on","rng","randomSeed","curr","prev","_random","number","max","number, number","min","size","_randomMatrix","Array | Matrix, number","Array | Matrix, number, number","res","valueOf","create","createRandomNumber","_ref2","matrix"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/probability/random.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { isMatrix } from '../../utils/is.js';\r\nimport { createRng } from './util/seededRNG.js';\r\nimport { randomMatrix } from './util/randomMatrix.js';\r\nvar name = 'random';\r\nvar dependencies = ['typed', 'config', '?on'];\r\nexport var createRandom = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    on\r\n  } = _ref;\r\n  // seeded pseudo random number generator\r\n  var rng = createRng(config.randomSeed);\r\n  if (on) {\r\n    on('config', function (curr, prev) {\r\n      if (curr.randomSeed !== prev.randomSeed) {\r\n        rng = createRng(curr.randomSeed);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return a random number larger or equal to `min` and smaller than `max`\r\n   * using a uniform distribution.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.random()                // generate a random number between 0 and 1\r\n   *     math.random(max)             // generate a random number between 0 and max\r\n   *     math.random(min, max)        // generate a random number between min and max\r\n   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\r\n   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\r\n   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\r\n   *\r\n   * Examples:\r\n   *\r\n   *     math.random()       // returns a random number between 0 and 1\r\n   *     math.random(100)    // returns a random number between 0 and 100\r\n   *     math.random(30, 40) // returns a random number between 30 and 40\r\n   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1\r\n   *\r\n   * See also:\r\n   *\r\n   *     randomInt, pickRandom\r\n   *\r\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\r\n   *                                size and filled with random values is returned\r\n   * @param {number} [min]  Minimum boundary for the random value, included\r\n   * @param {number} [max]  Maximum boundary for the random value, excluded\r\n   * @return {number | Array | Matrix} A random number\r\n   */\r\n  return typed(name, {\r\n    '': () => _random(0, 1),\r\n    number: max => _random(0, max),\r\n    'number, number': (min, max) => _random(min, max),\r\n    'Array | Matrix': size => _randomMatrix(size, 0, 1),\r\n    'Array | Matrix, number': (size, max) => _randomMatrix(size, 0, max),\r\n    'Array | Matrix, number, number': (size, min, max) => _randomMatrix(size, min, max)\r\n  });\r\n  function _randomMatrix(size, min, max) {\r\n    var res = randomMatrix(size.valueOf(), () => _random(min, max));\r\n    return isMatrix(size) ? size.create(res, 'number') : res;\r\n  }\r\n  function _random(min, max) {\r\n    return min + rng() * (max - min);\r\n  }\r\n});\r\n\r\n// number only implementation of random, no matrix support\r\n// TODO: there is quite some duplicate code in both createRandom and createRandomNumber, can we improve that?\r\nexport var createRandomNumber = /* #__PURE__ */factory(name, ['typed', 'config', '?on'], _ref2 => {\r\n  var {\r\n    typed,\r\n    config,\r\n    on,\r\n    matrix\r\n  } = _ref2;\r\n  // seeded pseudo random number generator1\r\n  var rng = createRng(config.randomSeed);\r\n  if (on) {\r\n    on('config', function (curr, prev) {\r\n      if (curr.randomSeed !== prev.randomSeed) {\r\n        rng = createRng(curr.randomSeed);\r\n      }\r\n    });\r\n  }\r\n  return typed(name, {\r\n    '': () => _random(0, 1),\r\n    number: max => _random(0, max),\r\n    'number, number': (min, max) => _random(min, max)\r\n  });\r\n  function _random(min, max) {\r\n    return min + rng() * (max - min);\r\n  }\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}