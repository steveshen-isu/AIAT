{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ROG\\\\ai-solver\\\\src\\\\components\\\\TypeWriterResponse.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, memo } from 'react';\nimport 'C:/Users/ROG/node_modules/katex/dist/katex.min.css';\nimport katex from 'katex';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst typewriterEffectResponse = async (content, setDisplayContent) => {\n  let isMounted = true;\n  content = content.replace(/\\\\\\[\\s*/g, '\\\\['); // Replace \\[ with \\( and remove leading spaces\n  content = content.replace(/\\s*\\\\\\]/g, '\\\\]'); // Replace \\] with \\) and remove trailing spaces\n  content = content.replace(/\\*\\*(.*?)\\*\\*/g, '\\\\text{$1}');\n  console.log(content);\n  const regex = /(\\\\\\(.*?\\\\\\))|(\\\\\\[[\\s\\S]*?\\\\\\])|(\\\\begin\\{array\\}[\\s\\S]*?\\\\end\\{array\\})|(\\\\textit\\{.*?\\})|(\\\\textbf\\{.*?\\})/g;\n  const parts = content.split(regex).filter(part => part !== null && part !== undefined && part !== '');\n  let displayContent = '';\n  console.log(parts);\n  for (const part of parts) {\n    if (part.startsWith('\\\\(') || part.startsWith('\\\\[') || part.startsWith('\\\\begin') || part.startsWith('\\\\textit') || part.startsWith('\\\\textbf')) {\n      // Process LaTeX content\n\n      try {\n        const isDisplayMode = part.startsWith('\\\\[');\n        const mathContent = part.replace(/\\\\[\\(\\[\\)\\]]/g, ''); // Strip the delimiters\n        const renderedMath = katex.renderToString(mathContent, {\n          throwOnError: false,\n          displayMode: isDisplayMode\n        });\n\n        // Simulate typing the LaTeX\n        for (let i = 0; i < renderedMath.length; i++) {\n          displayContent += renderedMath[i];\n          if (isMounted) setDisplayContent(displayContent);\n          /*                     await delayRandomTime(); \r\n           */\n        }\n      } catch (e) {\n        console.error('Error rendering LaTeX:', e);\n        displayContent += `<span class=\"error\">Failed to render LaTeX: ${part}</span>`;\n        if (isMounted) setDisplayContent(displayContent);\n      }\n    } else {\n      // Process plain text content\n      for (let i = 0; i < part.length; i++) {\n        displayContent += part[i] === '\\n' ? '<br />' : part[i];\n        if (isMounted) setDisplayContent(displayContent);\n        await textdelayRandomTime();\n      }\n    }\n  }\n};\nconst textdelayRandomTime = () => {\n  return new Promise(resolve => {\n    const randomDelay = Math.floor(Math.random() * 20) + 5; // Delay between 50ms to 250ms\n    setTimeout(resolve, randomDelay);\n  });\n};\n\n// Main component to handle the content rendering\n\nconst TypewriterRendererResponse = /*#__PURE__*/_s( /*#__PURE__*/memo(_c = _s(({\n  content\n}) => {\n  _s();\n  const [displayContent, setDisplayContent] = useState('');\n  useEffect(() => {\n    let isMounted = true;\n    // Start the typewriter effect when the component loads\n\n    setDisplayContent(''); // Reset before running\n    typewriterEffectResponse(content, setDisplayContent);\n    return () => {\n      isMounted = false;\n    };\n  }, [content]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'left',\n        // Align text to the left\n        width: '60vw',\n        margin: '0 auto',\n        // Center the div horizontally\n        padding: '10px',\n        // Add padding\n        maxWidth: '1300px',\n        // Set a max width for the container\n        marginLeft: '1vw',\n        // Add some space from the left\n        border: '0px solid gray',\n        // Gray border\n        backgroundColor: 'black',\n        // Black background\n        color: 'white',\n        // White text color for contrast\n        fontFamily: 'Segoe UI, sans-serif',\n        // Font family\n        fontSize: '18px',\n        // Font size\n        fontWeight: 'lighter',\n        // Bold text\n        fontStyle: 'normal',\n        // Italic text\n        lineHeight: '1.6',\n        // Line height for readability\n        letterSpacing: '1px' // Space between letters\n      },\n      dangerouslySetInnerHTML: {\n        __html: displayContent\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 13\n  }, this);\n}, \"CWF/jOCr/6dzKRDifOVVHM2M7Es=\")), \"CWF/jOCr/6dzKRDifOVVHM2M7Es=\");\n_c2 = TypewriterRendererResponse;\nexport default TypewriterRendererResponse;\nvar _c, _c2;\n$RefreshReg$(_c, \"TypewriterRendererResponse$memo\");\n$RefreshReg$(_c2, \"TypewriterRendererResponse\");","map":{"version":3,"names":["React","useState","useEffect","memo","katex","jsxDEV","_jsxDEV","typewriterEffectResponse","content","setDisplayContent","isMounted","replace","console","log","regex","parts","split","filter","part","undefined","displayContent","startsWith","isDisplayMode","mathContent","renderedMath","renderToString","throwOnError","displayMode","i","length","e","error","textdelayRandomTime","Promise","resolve","randomDelay","Math","floor","random","setTimeout","TypewriterRendererResponse","_s","_c","children","style","textAlign","width","margin","padding","maxWidth","marginLeft","border","backgroundColor","color","fontFamily","fontSize","fontWeight","fontStyle","lineHeight","letterSpacing","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/ROG/ai-solver/src/components/TypeWriterResponse.js"],"sourcesContent":["import React, { useState, useEffect, memo } from 'react';\r\nimport 'C:/Users/ROG/node_modules/katex/dist/katex.min.css';\r\nimport katex from 'katex';\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    \r\n    const typewriterEffectResponse = async (content, setDisplayContent) => {\r\n        let isMounted = true;\r\n        content = content.replace(/\\\\\\[\\s*/g, '\\\\[');  // Replace \\[ with \\( and remove leading spaces\r\n        content = content.replace(/\\s*\\\\\\]/g, '\\\\]');  // Replace \\] with \\) and remove trailing spaces\r\n        content = content.replace(/\\*\\*(.*?)\\*\\*/g, '\\\\text{$1}');\r\n\r\n        console.log(content);\r\n        const regex = /(\\\\\\(.*?\\\\\\))|(\\\\\\[[\\s\\S]*?\\\\\\])|(\\\\begin\\{array\\}[\\s\\S]*?\\\\end\\{array\\})|(\\\\textit\\{.*?\\})|(\\\\textbf\\{.*?\\})/g;\r\n        const parts = content.split(regex).filter(part => part !== null && part !== undefined && part !== '');\r\n        let displayContent = '';\r\n        console.log(parts);\r\n        for (const part of parts) {\r\n            if (part.startsWith('\\\\(') || part.startsWith('\\\\[') || part.startsWith('\\\\begin') || part.startsWith('\\\\textit') || part.startsWith('\\\\textbf')) {\r\n                // Process LaTeX content\r\n\r\n                try {\r\n                    const isDisplayMode = part.startsWith('\\\\[');\r\n                    const mathContent = part.replace(/\\\\[\\(\\[\\)\\]]/g, '');  // Strip the delimiters\r\n                    const renderedMath = katex.renderToString(mathContent, { throwOnError: false, displayMode: isDisplayMode });\r\n\r\n                    // Simulate typing the LaTeX\r\n                    for (let i = 0; i < renderedMath.length; i++) {\r\n                        displayContent += renderedMath[i];\r\n\r\n\r\n                        if (isMounted) setDisplayContent(displayContent);\r\n/*                     await delayRandomTime(); \r\n */                }\r\n                } catch (e) {\r\n                    console.error('Error rendering LaTeX:', e);\r\n                    displayContent += `<span class=\"error\">Failed to render LaTeX: ${part}</span>`;\r\n                    if (isMounted) setDisplayContent(displayContent);\r\n                }\r\n            } else {\r\n                // Process plain text content\r\n                for (let i = 0; i < part.length; i++) {\r\n                    displayContent += part[i] === '\\n' ? '<br />' : part[i];\r\n                    if (isMounted) setDisplayContent(displayContent);\r\n                    await textdelayRandomTime();\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    const textdelayRandomTime = () => {\r\n        return new Promise(resolve => {\r\n            const randomDelay = Math.floor(Math.random() * 20) + 5; // Delay between 50ms to 250ms\r\n            setTimeout(resolve, randomDelay);\r\n        });\r\n    };\r\n\r\n    // Main component to handle the content rendering\r\n\r\n\r\n\r\n    const TypewriterRendererResponse = memo(({ content }) => {\r\n        const [displayContent, setDisplayContent] = useState('');\r\n\r\n        useEffect(() => {\r\n            let isMounted = true;\r\n            // Start the typewriter effect when the component loads\r\n\r\n            setDisplayContent(''); // Reset before running\r\n            typewriterEffectResponse(content, setDisplayContent);\r\n            return () => {\r\n                isMounted = false;\r\n            }\r\n        }, [content]);\r\n\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                        textAlign: 'left',         // Align text to the left\r\n                        width: '60vw',\r\n                        margin: '0 auto',          // Center the div horizontally\r\n                        padding: '10px',           // Add padding\r\n                        maxWidth: '1300px',         // Set a max width for the container\r\n                        marginLeft: '1vw',        // Add some space from the left\r\n                        border: '0px solid gray',  // Gray border\r\n                        backgroundColor: 'black',  // Black background\r\n                        color: 'white',            // White text color for contrast\r\n                        fontFamily: 'Segoe UI, sans-serif',  // Font family\r\n                        fontSize: '18px',          // Font size\r\n                        fontWeight: 'lighter',        // Bold text\r\n                        fontStyle: 'normal',       // Italic text\r\n                        lineHeight: '1.6',         // Line height for readability\r\n                        letterSpacing: '1px'       // Space between letters\r\n                    }}\r\n                    dangerouslySetInnerHTML={{ __html: displayContent }}\r\n                />\r\n            </div>\r\n        );\r\n    });\r\n    export default TypewriterRendererResponse;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}