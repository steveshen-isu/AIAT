{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { atanhNumber } from '../../plain/number/index.js';\nvar name = 'atanh';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createAtanh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    Complex\n  } = _ref;\n  /**\r\n   * Calculate the hyperbolic arctangent of a value,\r\n   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic arctangent, this function\r\n   * does not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.atanh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.atanh(0.5)       // returns 0.5493061443340549\r\n   *\r\n   * See also:\r\n   *\r\n   *    acosh, asinh\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic arctangent of x\r\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        return atanhNumber(x);\n      }\n      return new Complex(x, 0).atanh();\n    },\n    Complex: function Complex(x) {\n      return x.atanh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.atanh();\n    }\n  });\n});","map":{"version":3,"names":["factory","atanhNumber","name","dependencies","createAtanh","_ref","typed","config","Complex","number","x","predictable","atanh","BigNumber"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/trigonometry/atanh.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { atanhNumber } from '../../plain/number/index.js';\r\nvar name = 'atanh';\r\nvar dependencies = ['typed', 'config', 'Complex'];\r\nexport var createAtanh = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    Complex\r\n  } = _ref;\r\n  /**\r\n   * Calculate the hyperbolic arctangent of a value,\r\n   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic arctangent, this function\r\n   * does not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.atanh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.atanh(0.5)       // returns 0.5493061443340549\r\n   *\r\n   * See also:\r\n   *\r\n   *    acosh, asinh\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic arctangent of x\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      if (x <= 1 && x >= -1 || config.predictable) {\r\n        return atanhNumber(x);\r\n      }\r\n      return new Complex(x, 0).atanh();\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.atanh();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.atanh();\r\n    }\r\n  });\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;AACjD,OAAO,IAAIC,WAAW,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC1E,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjBO,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,IAAI,CAAC,IAAIA,CAAC,IAAI,CAAC,CAAC,IAAIH,MAAM,CAACI,WAAW,EAAE;QAC3C,OAAOV,WAAW,CAACS,CAAC,CAAC;MACvB;MACA,OAAO,IAAIF,OAAO,CAACE,CAAC,EAAE,CAAC,CAAC,CAACE,KAAK,CAAC,CAAC;IAClC,CAAC;IACDJ,OAAO,EAAE,SAASA,OAAOA,CAACE,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACE,KAAK,CAAC,CAAC;IAClB,CAAC;IACDC,SAAS,EAAE,SAASA,SAASA,CAACH,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACE,KAAK,CAAC,CAAC;IAClB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}