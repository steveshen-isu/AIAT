{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createFloor } from './floor.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'mod';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix', 'concat'];\nexport var createMod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var floor = createFloor({\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\r\n   * Calculates the modulus, the remainder of an integer division.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * The modulus is defined as:\r\n   *\r\n   *     x - y * floor(x / y)\r\n   *\r\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.mod(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.mod(8, 3)                // returns 2\r\n   *    math.mod(11, 2)               // returns 1\r\n   *\r\n   *    function isOdd(x) {\r\n   *      return math.mod(x, 2) != 0\r\n   *    }\r\n   *\r\n   *    isOdd(2)                      // returns false\r\n   *    isOdd(3)                      // returns true\r\n   *\r\n   * See also:\r\n   *\r\n   *    divide\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | Array | Matrix} x Dividend\r\n   * @param  {number | BigNumber | bigint | Fraction | Array | Matrix} y Divisor\r\n   * @return {number | BigNumber | bigint | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\r\n   */\n  return typed(name, {\n    'number, number': _modNumber,\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\n      return y.isZero() ? x : x.sub(y.mul(floor(x.div(y))));\n    },\n    'bigint, bigint': function bigint_bigint(x, y) {\n      if (y === 0n) {\n        return x;\n      }\n      if (x < 0) {\n        var m = x % y;\n        return m === 0n ? m : m + y;\n      }\n      return x % y;\n    },\n    'Fraction, Fraction': function Fraction_Fraction(x, y) {\n      return y.equals(0) ? x : x.sub(y.mul(floor(x.div(y))));\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n\n  /**\r\n  * Calculate the modulus of two numbers\r\n  * @param {number} x\r\n  * @param {number} y\r\n  * @returns {number} res\r\n  * @private\r\n  */\n  function _modNumber(x, y) {\n    // We don't use JavaScript's % operator here as this doesn't work\n    // correctly for x < 0 and x === 0\n    // see https://en.wikipedia.org/wiki/Modulo_operation\n\n    // We use mathjs floor to handle errors associated with\n    // precision float approximation\n    return y === 0 ? x : x - y * floor(x / y);\n  }\n});","map":{"version":3,"names":["factory","createFloor","createMatAlgo02xDS0","createMatAlgo03xDSf","createMatAlgo05xSfSf","createMatAlgo11xS0s","createMatAlgo12xSfs","createMatrixAlgorithmSuite","name","dependencies","createMod","_ref","typed","config","round","matrix","equalScalar","zeros","DenseMatrix","concat","floor","matAlgo02xDS0","matAlgo03xDSf","matAlgo05xSfSf","matAlgo11xS0s","matAlgo12xSfs","matrixAlgorithmSuite","_modNumber","BigNumber_BigNumber","x","y","isZero","sub","mul","div","bigint_bigint","m","Fraction_Fraction","equals","SS","DS","SD","Ss","sS"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/arithmetic/mod.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createFloor } from './floor.js';\r\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\r\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\r\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\r\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'mod';\r\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix', 'concat'];\r\nexport var createMod = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    round,\r\n    matrix,\r\n    equalScalar,\r\n    zeros,\r\n    DenseMatrix,\r\n    concat\r\n  } = _ref;\r\n  var floor = createFloor({\r\n    typed,\r\n    config,\r\n    round,\r\n    matrix,\r\n    equalScalar,\r\n    zeros,\r\n    DenseMatrix\r\n  });\r\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo03xDSf = createMatAlgo03xDSf({\r\n    typed\r\n  });\r\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo11xS0s = createMatAlgo11xS0s({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n\r\n  /**\r\n   * Calculates the modulus, the remainder of an integer division.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * The modulus is defined as:\r\n   *\r\n   *     x - y * floor(x / y)\r\n   *\r\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.mod(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.mod(8, 3)                // returns 2\r\n   *    math.mod(11, 2)               // returns 1\r\n   *\r\n   *    function isOdd(x) {\r\n   *      return math.mod(x, 2) != 0\r\n   *    }\r\n   *\r\n   *    isOdd(2)                      // returns false\r\n   *    isOdd(3)                      // returns true\r\n   *\r\n   * See also:\r\n   *\r\n   *    divide\r\n   *\r\n   * @param  {number | BigNumber | bigint | Fraction | Array | Matrix} x Dividend\r\n   * @param  {number | BigNumber | bigint | Fraction | Array | Matrix} y Divisor\r\n   * @return {number | BigNumber | bigint | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\r\n   */\r\n  return typed(name, {\r\n    'number, number': _modNumber,\r\n    'BigNumber, BigNumber': function BigNumber_BigNumber(x, y) {\r\n      return y.isZero() ? x : x.sub(y.mul(floor(x.div(y))));\r\n    },\r\n    'bigint, bigint': function bigint_bigint(x, y) {\r\n      if (y === 0n) {\r\n        return x;\r\n      }\r\n      if (x < 0) {\r\n        var m = x % y;\r\n        return m === 0n ? m : m + y;\r\n      }\r\n      return x % y;\r\n    },\r\n    'Fraction, Fraction': function Fraction_Fraction(x, y) {\r\n      return y.equals(0) ? x : x.sub(y.mul(floor(x.div(y))));\r\n    }\r\n  }, matrixAlgorithmSuite({\r\n    SS: matAlgo05xSfSf,\r\n    DS: matAlgo03xDSf,\r\n    SD: matAlgo02xDS0,\r\n    Ss: matAlgo11xS0s,\r\n    sS: matAlgo12xSfs\r\n  }));\r\n\r\n  /**\r\n  * Calculate the modulus of two numbers\r\n  * @param {number} x\r\n  * @param {number} y\r\n  * @returns {number} res\r\n  * @private\r\n  */\r\n  function _modNumber(x, y) {\r\n    // We don't use JavaScript's % operator here as this doesn't work\r\n    // correctly for x < 0 and x === 0\r\n    // see https://en.wikipedia.org/wiki/Modulo_operation\r\n\r\n    // We use mathjs floor to handle errors associated with\r\n    // precision float approximation\r\n    return y === 0 ? x : x - y * floor(x / y);\r\n  }\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}