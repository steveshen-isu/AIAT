{"ast":null,"code":"import { arraySize as size } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'kron';\nvar dependencies = ['typed', 'matrix', 'multiplyScalar'];\nexport var createKron = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    multiplyScalar\n  } = _ref;\n  /**\r\n     * Calculates the Kronecker product of 2 matrices or vectors.\r\n     *\r\n     * NOTE: If a one dimensional vector / matrix is given, it will be\r\n     * wrapped so its two dimensions.\r\n     * See the examples.\r\n     *\r\n     * Syntax:\r\n     *\r\n     *    math.kron(x, y)\r\n     *\r\n     * Examples:\r\n     *\r\n     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])\r\n     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]\r\n     *\r\n     *    math.kron([1,1], [2,3,4])\r\n     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]\r\n     *\r\n     * See also:\r\n     *\r\n     *    multiply, dot, cross\r\n     *\r\n     * @param  {Array | Matrix} x     First vector\r\n     * @param  {Array | Matrix} y     Second vector\r\n     * @return {Array | Matrix}       Returns the Kronecker product of `x` and `y`\r\n     */\n  return typed(name, {\n    'Matrix, Matrix': function Matrix_Matrix(x, y) {\n      return matrix(_kron(x.toArray(), y.toArray()));\n    },\n    'Matrix, Array': function Matrix_Array(x, y) {\n      return matrix(_kron(x.toArray(), y));\n    },\n    'Array, Matrix': function Array_Matrix(x, y) {\n      return matrix(_kron(x, y.toArray()));\n    },\n    'Array, Array': _kron\n  });\n\n  /**\r\n     * Calculate the Kronecker product of two matrices / vectors\r\n     * @param {Array} a  First vector\r\n     * @param {Array} b  Second vector\r\n     * @returns {Array} Returns the Kronecker product of x and y\r\n     * @private\r\n     */\n  function _kron(a, b) {\n    // Deal with the dimensions of the matricies.\n    if (size(a).length === 1) {\n      // Wrap it in a 2D Matrix\n      a = [a];\n    }\n    if (size(b).length === 1) {\n      // Wrap it in a 2D Matrix\n      b = [b];\n    }\n    if (size(a).length > 2 || size(b).length > 2) {\n      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');\n    }\n    var t = [];\n    var r = [];\n    return a.map(function (a) {\n      return b.map(function (b) {\n        r = [];\n        t.push(r);\n        return a.map(function (y) {\n          return b.map(function (x) {\n            return r.push(multiplyScalar(y, x));\n          });\n        });\n      });\n    }) && t;\n  }\n});","map":{"version":3,"names":["arraySize","size","factory","name","dependencies","createKron","_ref","typed","matrix","multiplyScalar","Matrix_Matrix","x","y","_kron","toArray","Matrix_Array","Array_Matrix","a","b","length","RangeError","JSON","stringify","t","r","map","push"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/matrix/kron.js"],"sourcesContent":["import { arraySize as size } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'kron';\r\nvar dependencies = ['typed', 'matrix', 'multiplyScalar'];\r\nexport var createKron = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    multiplyScalar\r\n  } = _ref;\r\n  /**\r\n     * Calculates the Kronecker product of 2 matrices or vectors.\r\n     *\r\n     * NOTE: If a one dimensional vector / matrix is given, it will be\r\n     * wrapped so its two dimensions.\r\n     * See the examples.\r\n     *\r\n     * Syntax:\r\n     *\r\n     *    math.kron(x, y)\r\n     *\r\n     * Examples:\r\n     *\r\n     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])\r\n     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]\r\n     *\r\n     *    math.kron([1,1], [2,3,4])\r\n     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]\r\n     *\r\n     * See also:\r\n     *\r\n     *    multiply, dot, cross\r\n     *\r\n     * @param  {Array | Matrix} x     First vector\r\n     * @param  {Array | Matrix} y     Second vector\r\n     * @return {Array | Matrix}       Returns the Kronecker product of `x` and `y`\r\n     */\r\n  return typed(name, {\r\n    'Matrix, Matrix': function Matrix_Matrix(x, y) {\r\n      return matrix(_kron(x.toArray(), y.toArray()));\r\n    },\r\n    'Matrix, Array': function Matrix_Array(x, y) {\r\n      return matrix(_kron(x.toArray(), y));\r\n    },\r\n    'Array, Matrix': function Array_Matrix(x, y) {\r\n      return matrix(_kron(x, y.toArray()));\r\n    },\r\n    'Array, Array': _kron\r\n  });\r\n\r\n  /**\r\n     * Calculate the Kronecker product of two matrices / vectors\r\n     * @param {Array} a  First vector\r\n     * @param {Array} b  Second vector\r\n     * @returns {Array} Returns the Kronecker product of x and y\r\n     * @private\r\n     */\r\n  function _kron(a, b) {\r\n    // Deal with the dimensions of the matricies.\r\n    if (size(a).length === 1) {\r\n      // Wrap it in a 2D Matrix\r\n      a = [a];\r\n    }\r\n    if (size(b).length === 1) {\r\n      // Wrap it in a 2D Matrix\r\n      b = [b];\r\n    }\r\n    if (size(a).length > 2 || size(b).length > 2) {\r\n      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');\r\n    }\r\n    var t = [];\r\n    var r = [];\r\n    return a.map(function (a) {\r\n      return b.map(function (b) {\r\n        r = [];\r\n        t.push(r);\r\n        return a.map(function (y) {\r\n          return b.map(function (x) {\r\n            return r.push(multiplyScalar(y, x));\r\n          });\r\n        });\r\n      });\r\n    }) && t;\r\n  }\r\n});"],"mappings":"AAAA,SAASA,SAAS,IAAIC,IAAI,QAAQ,sBAAsB;AACxD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,gBAAgB,CAAC;AACxD,OAAO,IAAIC,UAAU,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzE,IAAI;IACFC,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,GAAGH,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAASO,aAAaA,CAACC,CAAC,EAAEC,CAAC,EAAE;MAC7C,OAAOJ,MAAM,CAACK,KAAK,CAACF,CAAC,CAACG,OAAO,CAAC,CAAC,EAAEF,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;IAChD,CAAC;IACD,eAAe,EAAE,SAASC,YAAYA,CAACJ,CAAC,EAAEC,CAAC,EAAE;MAC3C,OAAOJ,MAAM,CAACK,KAAK,CAACF,CAAC,CAACG,OAAO,CAAC,CAAC,EAAEF,CAAC,CAAC,CAAC;IACtC,CAAC;IACD,eAAe,EAAE,SAASI,YAAYA,CAACL,CAAC,EAAEC,CAAC,EAAE;MAC3C,OAAOJ,MAAM,CAACK,KAAK,CAACF,CAAC,EAAEC,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC;IACD,cAAc,EAAED;EAClB,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACI,CAAC,EAAEC,CAAC,EAAE;IACnB;IACA,IAAIjB,IAAI,CAACgB,CAAC,CAAC,CAACE,MAAM,KAAK,CAAC,EAAE;MACxB;MACAF,CAAC,GAAG,CAACA,CAAC,CAAC;IACT;IACA,IAAIhB,IAAI,CAACiB,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;MACxB;MACAD,CAAC,GAAG,CAACA,CAAC,CAAC;IACT;IACA,IAAIjB,IAAI,CAACgB,CAAC,CAAC,CAACE,MAAM,GAAG,CAAC,IAAIlB,IAAI,CAACiB,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;MAC5C,MAAM,IAAIC,UAAU,CAAC,oEAAoE,GAAG,YAAY,GAAGC,IAAI,CAACC,SAAS,CAACL,CAAC,CAACE,MAAM,CAAC,GAAG,QAAQ,GAAGE,IAAI,CAACC,SAAS,CAACJ,CAAC,CAACC,MAAM,CAAC,GAAG,GAAG,CAAC;IAClL;IACA,IAAII,CAAC,GAAG,EAAE;IACV,IAAIC,CAAC,GAAG,EAAE;IACV,OAAOP,CAAC,CAACQ,GAAG,CAAC,UAAUR,CAAC,EAAE;MACxB,OAAOC,CAAC,CAACO,GAAG,CAAC,UAAUP,CAAC,EAAE;QACxBM,CAAC,GAAG,EAAE;QACND,CAAC,CAACG,IAAI,CAACF,CAAC,CAAC;QACT,OAAOP,CAAC,CAACQ,GAAG,CAAC,UAAUb,CAAC,EAAE;UACxB,OAAOM,CAAC,CAACO,GAAG,CAAC,UAAUd,CAAC,EAAE;YACxB,OAAOa,CAAC,CAACE,IAAI,CAACjB,cAAc,CAACG,CAAC,EAAED,CAAC,CAAC,CAAC;UACrC,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC,IAAIY,CAAC;EACT;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}