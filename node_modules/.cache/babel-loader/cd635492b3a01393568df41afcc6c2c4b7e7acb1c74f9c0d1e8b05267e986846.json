{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { validateIndex } from '../../utils/array.js';\nvar name = 'column';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nexport var createColumn = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Index,\n    matrix,\n    range\n  } = _ref;\n  /**\r\n   * Return a column from a Matrix.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.column(value, index)\r\n   *\r\n   * Example:\r\n   *\r\n   *     // get a column\r\n   *     const d = [[1, 2], [3, 4]]\r\n   *     math.column(d, 1) // returns [[2], [4]]\r\n   *\r\n   * See also:\r\n   *\r\n   *     row\r\n   *\r\n   * @param {Array | Matrix } value   An array or matrix\r\n   * @param {number} column           The index of the column\r\n   * @return {Array | Matrix}         The retrieved column\r\n   */\n  return typed(name, {\n    'Matrix, number': _column,\n    'Array, number': function Array_number(value, column) {\n      return _column(matrix(clone(value)), column).valueOf();\n    }\n  });\n\n  /**\r\n   * Retrieve a column of a matrix\r\n   * @param {Matrix } value  A matrix\r\n   * @param {number} column  The index of the column\r\n   * @return {Matrix}        The retrieved column\r\n   */\n  function _column(value, column) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    validateIndex(column, value.size()[1]);\n    var rowRange = range(0, value.size()[0]);\n    var index = new Index(rowRange, column);\n    var result = value.subset(index);\n    return isMatrix(result) ? result : matrix([[result]]);\n  }\n});","map":{"version":3,"names":["factory","isMatrix","clone","validateIndex","name","dependencies","createColumn","_ref","typed","Index","matrix","range","_column","Array_number","value","column","valueOf","size","length","Error","rowRange","index","result","subset"],"sources":["C:/Users/ROG/ai-solver/node_modules/mathjs/lib/esm/function/matrix/column.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { isMatrix } from '../../utils/is.js';\r\nimport { clone } from '../../utils/object.js';\r\nimport { validateIndex } from '../../utils/array.js';\r\nvar name = 'column';\r\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\r\nexport var createColumn = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    Index,\r\n    matrix,\r\n    range\r\n  } = _ref;\r\n  /**\r\n   * Return a column from a Matrix.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.column(value, index)\r\n   *\r\n   * Example:\r\n   *\r\n   *     // get a column\r\n   *     const d = [[1, 2], [3, 4]]\r\n   *     math.column(d, 1) // returns [[2], [4]]\r\n   *\r\n   * See also:\r\n   *\r\n   *     row\r\n   *\r\n   * @param {Array | Matrix } value   An array or matrix\r\n   * @param {number} column           The index of the column\r\n   * @return {Array | Matrix}         The retrieved column\r\n   */\r\n  return typed(name, {\r\n    'Matrix, number': _column,\r\n    'Array, number': function Array_number(value, column) {\r\n      return _column(matrix(clone(value)), column).valueOf();\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Retrieve a column of a matrix\r\n   * @param {Matrix } value  A matrix\r\n   * @param {number} column  The index of the column\r\n   * @return {Matrix}        The retrieved column\r\n   */\r\n  function _column(value, column) {\r\n    // check dimensions\r\n    if (value.size().length !== 2) {\r\n      throw new Error('Only two dimensional matrix is supported');\r\n    }\r\n    validateIndex(column, value.size()[1]);\r\n    var rowRange = range(0, value.size()[0]);\r\n    var index = new Index(rowRange, column);\r\n    var result = value.subset(index);\r\n    return isMatrix(result) ? result : matrix([[result]]);\r\n  }\r\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,KAAK,QAAQ,uBAAuB;AAC7C,SAASC,aAAa,QAAQ,sBAAsB;AACpD,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;AACxD,OAAO,IAAIC,YAAY,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC3E,IAAI;IACFC,KAAK;IACLC,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,GAAGJ,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAEQ,OAAO;IACzB,eAAe,EAAE,SAASC,YAAYA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACpD,OAAOH,OAAO,CAACF,MAAM,CAACR,KAAK,CAACY,KAAK,CAAC,CAAC,EAAEC,MAAM,CAAC,CAACC,OAAO,CAAC,CAAC;IACxD;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;EACE,SAASJ,OAAOA,CAACE,KAAK,EAAEC,MAAM,EAAE;IAC9B;IACA,IAAID,KAAK,CAACG,IAAI,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;MAC7B,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;IAC7D;IACAhB,aAAa,CAACY,MAAM,EAAED,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtC,IAAIG,QAAQ,GAAGT,KAAK,CAAC,CAAC,EAAEG,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,IAAII,KAAK,GAAG,IAAIZ,KAAK,CAACW,QAAQ,EAAEL,MAAM,CAAC;IACvC,IAAIO,MAAM,GAAGR,KAAK,CAACS,MAAM,CAACF,KAAK,CAAC;IAChC,OAAOpB,QAAQ,CAACqB,MAAM,CAAC,GAAGA,MAAM,GAAGZ,MAAM,CAAC,CAAC,CAACY,MAAM,CAAC,CAAC,CAAC;EACvD;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}